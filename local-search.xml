<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++命名规范</title>
    <link href="/cpp/C++%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/cpp/C++%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="c命名规范">C++命名规范</h1><ul><li><a href="https://blog.csdn.net/Hhrock/article/details/82386014">Google C++编程规范 (中文版)</a></li><li><a href="https://blog.csdn.net/freeking101/article/details/78930381">Google 的 C++ 代码规范</a></li><li><a href="https://www.jianshu.com/p/b2d9cfaa2adb?clicktime=1580457233">vscode C++ 开发配置 google code style</a></li><li><a href="https://developer.aliyun.com/article/619121">[C++][编程风格]C++命名规则-阿里云开发者社区 (aliyun.com)</a></li><li><a href="https://www.jianshu.com/p/bb160b0f8a14">C++命名规则 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_37764129/article/details/81779766">C++笔记（七）——类1：定义、命名规则、类成员函数的定义方式（含字符串输出举例）、对象的定义及引用_马大哈先生的博客-CSDN博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>protobuf</title>
    <link href="/cpp/protobuf/"/>
    <url>/cpp/protobuf/</url>
    
    <content type="html"><![CDATA[<h1 id="protobuf">protobuf</h1><ul><li><a href="https://www.toutiao.com/article/7171459285988753923/"><font color=Red>一文读懂RPC/HTTP/TCP的区别</font></a></li><li><a href="https://mp.weixin.qq.com/s/Pjuqq_ADpBIWljXVFoxIPA"><font color=Red>如果面试提到Protobuf，面试官问其原理怎么办？</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1176660">Protocol Buffers C++入门教程</a></li><li><a href="https://blog.csdn.net/qq_37868450/article/details/113727764?utm_source=app&amp;app_version=4.18.0">CMake使用protobuf生成c++代码</a></li><li><a href="https://blog.csdn.net/ZM_Yang/article/details/112992759">CMake笔记：add_custom_command不执行 编译.proto文件</a></li><li><a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html">序列化和反序列化</a></li><li><a href="https://www.cnblogs.com/dengchj/p/7453432.html">序列化和反序列化及Protobuf 基本使用</a></li><li><a href="https://blog.csdn.net/u013989576/article/details/66476635">protobuf 数据类型</a></li><li><a href="https://blog.csdn.net/tennysonsky/article/details/73921025">protobuf入门教程(四)：repeated限定修饰符</a></li><li><a href="https://blog.csdn.net/fengfengdiandia/article/details/86688520"><font color=Red>cmake protobuf</font></a></li><li><a href="https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html"><font color=Red>cmake protobuf官方使用手册</font></a></li><li><a href="https://www.cnblogs.com/doggod/p/13360504.html">Google protocol buffer 常用序列化和反序列化函数</a></li><li><a href="https://blog.csdn.net/pianistOfSoftware/article/details/72779938">json和protobuf互转</a></li><li><a href="https://wenfh2020.com/2020/10/28/protobuf-convert-json/"><font color=Red>protobuf / json 数据转换（C++）</font></a></li><li><a href="https://linuxhint.com/install-protobuf-ubuntu/"><font color=Red>How to install Protobuf on Ubuntu</font></a></li><li><a href="https://blog.csdn.net/weixin_38054045/article/details/104145544"><font color=Red>C++实用技术 – YAML &amp; JSON互转</font></a></li><li><a href="https://www.cnblogs.com/silvermagic/p/9087593.html"><font color=Red>Protocol Buffers官方文档(开发指南)</font></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++日志</title>
    <link href="/cpp/C++%E6%97%A5%E5%BF%97/"/>
    <url>/cpp/C++%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="c日志">C++日志</h1><ul><li><a href="http://c.biancheng.net/view/242.html"><font color=Red>C++重载&lt;<和>&gt;（C++重载输出运算符和输入运算符） (biancheng.net)</font></a></li><li><a href="https://www.runoob.com/cplusplus/input-output-operators-overloading.html">C++ 输入输出运算符重载 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://blog.csdn.net/chinabhlt/article/details/110480363">c++实现流式写日志_The Coding World-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/84175431">支持c++流风格的日志库设计 - 知乎 (zhihu.com)</a></li><li><a href="https://www.tqwba.com/x_d/jishu/353703.html">C++ 标准输入输出流探索-实现日志模块的流式输出_跳墙网 (tqwba.com)</a></li><li><a href="https://open.toutiao.com/a6965373694814224908/"><font color=Red>C++日志库spdlog</font></a></li><li><a href="https://www.jianshu.com/p/ef2b4f68abba"><font color=Red>spdlog教程：创建loggers</font></a></li><li><a href="https://blog.csdn.net/u012234115/article/details/111992209">基于C++ spdlog日志库的完善封装_踏莎行的博客-CSDN博客_spdlog 封装</a></li><li><a href="https://blog.csdn.net/xmcy001122/article/details/105864473/">c++日志库实战——spdlog，是不是感觉log4cxx有点笨重，不妨试一试spdlog_xmcy001122的专栏-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/339742121">C++流：练习写一个“日志流”</a></li><li><a href="https://www.cnblogs.com/shuqin/p/12103952.html">一个轻量快速的C++日志库 - 小胖西瓜 - 博客园 (cnblogs.com)</a></li><li><a href="https://github.com/LeechanX/Ring-Log">Ring Log是一个适用于C++的异步日志</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题自定义标签页小图标</title>
    <link href="/markdown/hexo/fluid/fluid%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%B0%8F%E5%9B%BE%E6%A0%87/"/>
    <url>/markdown/hexo/fluid/fluid%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%B0%8F%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="fluid主题自定义标签页小图标">fluid主题自定义标签页小图标</h1><h2 id="制作favicon图标">制作favicon图标</h2><p>准备好用作标签页/网页小图标favicon的图片。</p><p>在线<a href="https://www.bitbug.net/">制作ico图标</a>。</p><p>推荐16<em>16、32</em>32。</p><p>将下载后的图标复制到<code>source/images</code>目录下。</p><h2 id="配置_config.fluid.yml">配置_config.fluid.yml</h2><p>增加如下配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text"># 用于浏览器标签的图标<br># Icon for browser tab<br>favicon: /img/favicon.png<br><br># 用于苹果设备的图标<br># Icon for Apple touch<br>apple_touch_icon: /img/favicon.png<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://github.com/Cenergy/blog-dev/blob/dev/_config.fluid.yml">https://github.com/Cenergy/blog-dev/blob/dev/_config.fluid.yml</a></li><li><a href="https://blog.csdn.net/qq_39181839/article/details/109477357">Hexo攻略-更换网页图标</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
      <category>hexo</category>
      
      <category>fluid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/docker/README/"/>
    <url>/docker/README/</url>
    
    <content type="html"><![CDATA[<h1 id="dockerproject">DockerProject</h1><p>以下教程基于Ubuntu 16.04 LTS. ## 安装docker # 推荐使用使用国内 daocloud 一键安装命令 curl -sSL https://get.daocloud.io/docker | sh</p><pre><code class="hljs"># 使用 Docker 作为非 root 用户，则应考虑使用类似以下方式将用户添加到 docker 组sudo usermod -aG docker your-user# Docker 镜像加速sudo cat daemon.json &gt; /etc/docker/daemon.json# 重新启动服务sudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h2 id="dockerfile">DockerFile</h2><pre><code class="hljs">cd ubuntu## 创建镜像docker build -t ubuntu:ai2 .## 启动镜像docker run -p 22223:22 -p 33307:3306 -dit --name ubuntu-ai2 ubuntu:ai2</code></pre>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iptables</title>
    <link href="/docker/iptables/"/>
    <url>/docker/iptables/</url>
    
    <content type="html"><![CDATA[<h1 id="iptables">iptables</h1><ul><li><a href="https://blog.csdn.net/qq_30013585/article/details/116191215">docker容器启动后添加端口映射_realwujing的博客-CSDN博客</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.2:8080<br><br>sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.2:8080<br></code></pre></td></tr></table></figure><h2 id="prerouting链">1、PREROUTING链</h2><h3 id="查看nat表中的prerouting链">1.1 查看NAT表中的PREROUTING链</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo iptables -t nat --list-rules PREROUTING<br></code></pre></td></tr></table></figure><h3 id="结果">结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">-P PREROUTING ACCEPT<br>-A PREROUTING -p tcp -m addrtype --dst-type LOCAL -j DOCKER<br><br>sudo iptables -t nat -A PREROUTING -p tcp -m addrtype --dst-type LOCAL -j DOCKER<br>sudo iptables -t nat -A PREROUTING -p tcp -m tcp --dport 8081 -j DNAT --to-destination 192.168.9.151:8080<br>sudo iptables -t nat --list-rules DOCKER<br>sudo iptables -t nat -D DOCKER ! -i docker0 -p tcp -m tcp --dport 8081 -j DNAT --to-destination 172.17.0.2:8080<br><br>sudo iptables -t nat --list-rules POSTROUTING<br>sudo iptables -t nat -D POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 8080 -j MASQUERADE<br><br>sudo iptables --list-rules DOCKER<br>sudo iptables -t filter -D DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 8080 -j ACCEPT<br><br>curl 172.17.0.2:8080/test/hello<br><br>sudo iptables -t nat -vnL DOCKER --line-number<br><br>sudo iptables -t nat -D DOCKER 4<br><br>sudo iptables -t nat --list-rules PREROUTING<br>sudo iptables -t nat -D PREROUTING -p tcp -m tcp --dport 8081 -j DNAT --to-destination 192.168.9.151:8080<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/docker/ubuntu/README/"/>
    <url>/docker/ubuntu/README/</url>
    
    <content type="html"><![CDATA[<!-- * @Author: wujing * @Date: 2021-04-02 20:14:30 * @LastEditTime: 2021-04-08 01:40:29 * @LastEditors: wujing * @Description:  * @FilePath: /DockerProject/ubuntu/README.md * 可以输入预定的版权声明、个性签名、空行等--><h2 id="git初始化">1、git初始化</h2><pre><code class="hljs">git config --global user.email &quot;178955347@qq.com&quot;git config --global user.name &quot;RealWuJing&quot;</code></pre><h2 id="创建镜像">2、创建镜像</h2><pre><code class="hljs">docker build -t ubuntu:ai .docker build -t ubuntu:ai2 .</code></pre><h2 id="启动镜像">3、启动镜像</h2><pre><code class="hljs"># bash    docker run -itd --name ubuntu-ai ubuntu:ai /bin/bash# dashdocker run -itd --name ubuntu-wujing ubuntu:wujing# 端口映射docker run -p 22222:22 -p 33306:3306 -dit --name ubuntu-ai ubuntu:aidocker run -p 22222:22 -p 33306:3306 -dit --name ubuntu-ai ubuntu:ai /bin/bashdocker run -p 22223:22 -p 33307:3306 -dit --name ubuntu-ai2 ubuntu:ai2 /bin/bash</code></pre><h2 id="mysql">4、mysql</h2><p><a href="https://www.cnblogs.com/cnwcl/p/13805643.html">mysql 启动失败：su: warning: cannot change directory to /nonexistent: No such file or directory</a></p><p><a href="https://blog.csdn.net/YM_1111/article/details/107555383">Ubuntu20.04安装Mysql（亲测有效，一定要按步骤来）</a></p><pre><code class="hljs"># 修复 mysql 启动失败sudo usermod -d /var/lib/mysql/ mysql# 启动 mysqlsudo service mysql start# mysql 初始化配置sudo mysql_secure_installation</code></pre><h2 id="ssh">5、ssh</h2><pre><code class="hljs"># 启动 sshsudo service ssh start# 配置ssh客户端，去掉PasswordAuthentication yes前面的#号，保存退出sudo vim /etc/ssh/ssh_config</code></pre><h2 id="anaconda">6、anaconda</h2><pre><code class="hljs"># 安装包https://mirrors.bfsu.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh# .condarchttps://mirrors.bfsu.edu.cn/help/anaconda/# https://mirrors.bfsu.edu.cn/help/pypi/pip config set global.index-url https://mirrors.bfsu.edu.cn/pypi/web/simple</code></pre><h2 id="ai环境">AI环境</h2><pre><code class="hljs"># 新建ai python环境conda create -y -n ai python=3.6# 激活环境conda activate ai# 安装tensorflow pytorch等conda install -y tensorflow pytorch pandas matplotlib</code></pre>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/architect/README/"/>
    <url>/architect/README/</url>
    
    <content type="html"><![CDATA[<h1 id="system-architect-learning">system-architect-learning</h1><ul><li><a href="考试介绍及备考攻略.md">考试介绍及备考攻略</a></li><li><a href="计算机组成与体系结构.md">计算机组成与体系结构</a></li><li><a href="操作系统.md">操作系统</a></li><li><a href="数据库系统.md">数据库系统</a></li><li><a href="计算机网络.md">计算机网络</a></li><li><a href="数学与经济管理.md">数学与经济管理</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>architect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>system-architect</title>
    <link href="/architect/system-architect/"/>
    <url>/architect/system-architect/</url>
    
    <content type="html"><![CDATA[<h1 id="system-architect">system-architect</h1><h2 id="软件开发模型">软件开发模型</h2><ul><li><a href="https://blog.csdn.net/xc917563264/article/details/115024764">软件工程基础 - 九种开发模型</a></li><li><a href="https://blog.csdn.net/shadowyelling/article/details/7412336">统一软件过程的基本概念</a></li><li><a href="https://blog.51cto.com/tonyguan/712491">浅谈RUP的9个核心工作流(Core Workflows)</a></li><li><a href="https://blog.csdn.net/hu19930613/article/details/82154842">开发方法-基于架构的软件设计</a></li></ul><h2 id="需求分析-用例图">需求分析-用例图</h2><ul><li><p><a href="https://blog.csdn.net/wrs120/article/details/52838469">包含、扩展、泛化的区别</a></p></li><li><p><a href="https://blog.csdn.net/abcd1101/article/details/83240965">用例关系（包含、扩展、泛化） uml类关系（依赖、关联、聚合、组合、泛化）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000021317534">终于明白六大类UML类图关系了</a></p></li><li><p><a href="https://blog.51cto.com/u_15067225/3989277">软件需求3个层次――业务需求、用户需求和功能需求</a></p></li><li><p><a href="https://blog.csdn.net/Edraw_Max/article/details/111474777">1分钟了解流程图、顺序图、状态图</a></p></li></ul><h2 id="软件架构风格">软件架构风格</h2><ul><li><p><a href="http://blog.itpub.net/8816263/viewspace-1006692/">C/S结构的两层模型、三层模型及多层模型</a></p></li><li><p><a href="https://www.cnblogs.com/applerosa/p/6001270.html">WebService,ESB笔记</a></p></li></ul><h2 id="构件与中间件技术">构件与中间件技术</h2><ul><li><a href="https://blog.csdn.net/wishfly/article/details/2026340">“构件”和“对象”</a></li></ul><h2 id="项目管理">项目管理</h2><ul><li><a href="https://www.jianshu.com/p/1b0305165d9e">项目管理中的WBS应该怎么做</a></li><li><a href="https://wiki.mbalib.com/wiki/%E5%B7%A5%E4%BD%9C%E5%88%86%E8%A7%A3%E7%BB%93%E6%9E%84">工作分解结构(Work Breakdown Structure，简称WBS)</a></li></ul><h2 id="应用数学">应用数学</h2><ul><li><a href="https://wx.xisaiwang.com/tiku2/85220.html">甲、乙、丙、丁4人加工A、B 、C、D四种工件所需工时如下表所示。指派每人加工一种工件，四人加工四种工件其总工时最短的最优方案中，工件B应由（ ）加工。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/architect/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/architect/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统">操作系统</h1><h2 id="进程管理">进程管理</h2><h3 id="进程的状态">进程的状态</h3><p><a href="https://www.ruantiku.com/shiti/4057716528.html">试题：某计算机系统中的进程管理采用三态模型，那么下图所示的 PCB（进程控制块）的组织方式采用（1 ），图中（2 ）。</a></p><h3 id="进程的同步与互斥">进程的同步与互斥</h3><p>互斥：如千军万马过独木桥 同步：速度有差异，在一定情况下停下等待。</p><ul><li>临界资源：诸进程间需要互斥方式对其进行共享的资源，如打印机、磁带机等。</li><li>临界区：每个进程中访问临界资源的那段代码称为临界区。</li><li>信号量：是一种特殊的变量。</li></ul><p><a href="https://cloud.tencent.com/developer/article/1803377">试题一：看完了进程同步与互斥机制，我终于彻底理解了 PV 操作</a></p><p><a href="https://m.cnitpm.com/st/2890817349.html">试题二：某航空公司机票销售系统有n个售票点，该系统为每个售票点创建一个进程Pi（i=1，2，…，n）管理机票销售。假设Tj（j=1，2，…，m）单元存放某日某航班的机票剩余票数，Temp为Pi进程的临时工作单元，x为某用户的订票张数。初始化时系统应将信号量S赋值为（ ）。Pi进程的工作流程如下图所示，若用P操作和V操作实现进程间的同步与互斥，则图中空（a），空（b）和空（c）处应分别填入（ ）。</a></p><h3 id="死锁">死锁</h3><p>死锁的预防→打破四大条件：</p><ul><li>互斥</li><li>保持和等待</li><li>不剥夺</li><li>环路等待</li></ul><p>死锁的避免：</p><ul><li>有序资源分配法</li><li>银行家算法</li></ul><p><a href="https://blog.csdn.net/weixin_44422604/article/details/107614867">死锁产生的四个必要条件？如何避免和预防死锁产生？</a></p><p><a href="https://www.cnblogs.com/wkfvawl/p/11929508.html">操作系统——银行家算法（Banker's Algorithm）</a></p><h2 id="存储管理">存储管理</h2><h3 id="页式存储">页式存储</h3><p>页式存储：将程序与内存均划分为同样大小的块，以页为单位将程序调入内存。</p><p>高级程序语言使用逻辑地址； 运行状态，内存中使用物理地址。</p><p>物理块号又称页帧号。</p><p><span class="math display">\[逻辑地址=页号+页内地址\]</span></p><p><span class="math display">\[逻辑地址=页帧号+页内地址\]</span></p><p>例如，页式存储系统中，每个页的大小为4KB。 逻辑地址： 10 1100 1101 1110 对应的物理地址为： 110 1100 1101 1110</p><p>优点：利用率高，碎片小，分配及管理简单。 缺点：增加了系统开销；可能产生抖动现象。</p><table><thead><tr class="header"><th style="text-align: center;">页号(逻辑)</th><th style="text-align: center;">页帧号(物理)</th><th style="text-align: center;">状态位</th><th style="text-align: center;">访问位</th><th style="text-align: center;">修改位</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">高级程序语言中使用</td><td style="text-align: center;">内存中使用</td><td style="text-align: center;">1:在内存中 0:不在内存中</td><td style="text-align: center;">1:最近访问过 0:最近未被访问</td><td style="text-align: center;">1:内容被修改过 0:内容未被修改</td></tr></tbody></table><h4 id="试题">试题</h4><ul><li><a href="https://wangxiao.xisaiwang.com/tiku2/906265.html">进程P有8个页面，页号分别为0-7，页面大小为4K，假设系统给进程P分配了4个存储块P，进程P的页面变换表如下所示。表中状态位等于1和0分别表示页面在内存和不在内存。若进程P要访问的逻辑地址为十六进制5148H,则该地址经过变换后，其物理地址应为十六进制（ ）；如果进程P要访问的页面6不在内存，那么应该淘汰页号为（ ）的页面。</a></li></ul><h3 id="段式存储">段式存储</h3><p>段式存储：按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样。</p><p>优点：多道程序共享内存，各段程序修改互不影响。 缺点：内存利用率低，内存碎片浪费大。</p><h4 id="试题-1">试题</h4><ul><li><a href="https://m.cnitpm.com/st/2890922192.html">假设系统采用段式存储管理方法，进程P的段表如下所示</a></li></ul><h3 id="段页式存储">段页式存储</h3><p>段页式存储：段式与页式的结合体。先分段，再分页。1个程序有若干个段，每个段中有若干个页，每个页的大小相同，但每个段的大小不同。</p><p>优点：空间浪费小、存储共享容易、存储保护容易、能动态连接。 缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内存也有所增加，使得执行速度大大下降。</p><h3 id="快表">快表</h3><p>快表是一块小容量的相联存储器(Associative Memory)，由高速缓存器组成，速度快，并且可以从硬件上保证内容并行查找，一般用来存放当前访问最频繁的少数活动页面的页号。</p><ul><li>快表：将页表存于Cache上</li><li>慢表：将页表存于内存上</li></ul><h2 id="文件管理">文件管理</h2><h3 id="索引文件结构">索引文件结构</h3><ul><li>直接索引</li><li>一级间接索引</li><li>二级间接索引</li><li>三级间接索引</li></ul><h4 id="试题-2">试题</h4><ul><li><p><a href="https://www.zuotixia.com/item/KNdKam.html">假设文件系统采用索引节点管理，且索引节点有8个地址项iaddr[0]～iaddr[7]，每个地址项大小为4B，iaddr[0]～iaddr[4]采用直接地址索引，iaddr[5]和iaddr[6]采用一级间接地址索引，iaddr[7]采用二级间接地址索引。假设磁盘索引块和磁盘数据块大小均为1KB字节，文件File1的索引节点如下图所示。若用户访问文件File1中逻辑块号为5和261的信息，则对应的物理块号分别为（ ）；101号物理块存放的是（ ）。</a></p></li><li><p><a href="https://www.z21.org/question/74">某文件系统采用索引节点管理，其磁盘索引块和磁盘数据块大小均为1KB字节且每个文件索引节点有8个地址项i_addr[0]~i_addr[7]，每个地址项大小为 4字节，其中i_addr[0]~i_addr[4]采用直接地址索引，i_addr[5]和i_addr[6]采用一级间接地址索引，i_addr[7]采用二级间接地址索引。若用户要访问文件 userA中逻辑块号为4和5的信息，则系统应分别采用（），该文件系统可表示的单个文件最大长度是（）KB</a></p></li></ul><h3 id="位示图">位示图</h3><ul><li>空闲区表法(空闲文件目录)</li><li>空闲链表法</li><li>位示图法</li><li>成组链表法</li></ul><p><a href="https://zhuanlan.zhihu.com/p/141578176">操作系统—文件管理</a></p><h2 id="嵌入式系统开发设计">嵌入式系统开发设计</h2><h3 id="交叉开发环境">交叉开发环境</h3><ul><li>宿主机系统<ul><li>交叉编译器</li><li>交叉链接器</li><li>调试器</li></ul></li><li>目标机系统<ul><li>动态装载器</li><li>链接装载器</li><li>调试监视器</li><li>调试代理</li></ul></li></ul><h2 id="嵌入式操作系统">嵌入式操作系统</h2><ol type="1"><li>嵌入式操作系统特点：<ol type="1"><li>微型化</li><li>代码质量高</li><li>专业化</li><li>实时性强</li><li>可裁剪、可配置</li></ol></li><li>实时嵌入式操作系统的内核服务有：<ol type="1"><li>异常和中断</li><li>计时器</li><li>I/O管理</li></ol></li></ol><h2 id="实时操作系统">实时操作系统</h2><p>常见的嵌入式RTOS(实时操作系统，Real-Time OperatingSystem)</p><ul><li>VxWorks</li><li>RT-Linux</li><li>QNX</li><li>pSOS</li></ul><table><thead><tr class="header"><th style="text-align: center;">比较类型</th><th style="text-align: center;">VxWorks</th><th style="text-align: center;">RT-Linux</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">工作方式</td><td style="text-align: center;">操作系统与应用程序处于同一存储空间</td><td style="text-align: center;">操作系统与应用程序处于不同存储空间</td></tr><tr class="even"><td style="text-align: center;">多任务支持</td><td style="text-align: center;">支持多任务（线程）操作</td><td style="text-align: center;">支持多进程、多线程操作</td></tr><tr class="odd"><td style="text-align: center;">实时性</td><td style="text-align: center;">实时系统</td><td style="text-align: center;">实时系统</td></tr><tr class="even"><td style="text-align: center;">安全性</td><td style="text-align: center;">任务间无隔离保护</td><td style="text-align: center;">支持进程间隔离保护</td></tr><tr class="odd"><td style="text-align: center;">标准API</td><td style="text-align: center;">支持</td><td style="text-align: center;">支持</td></tr></tbody></table><h2 id="微内核操作系统">微内核操作系统</h2><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">实质</th><th style="text-align: center;">优点</th><th style="text-align: center;">缺点</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">单体内核</td><td style="text-align: center;">将图形、设备驱动及文件系统等功能全部在内核中实现，运行在内核状态和同一地址空间。</td><td style="text-align: center;">减少进程间通信和状态切换的系统开销，获得较高的运行效率。</td><td style="text-align: center;">内核庞大，占用资源较多且不易剪裁。系统的稳定性和安全性不好。</td></tr><tr class="even"><td style="text-align: center;">微内核</td><td style="text-align: center;">只实现基本功能，将图形系统、文件系统、设备驱动及文件系统等功能放在内核之外。</td><td style="text-align: center;">内核精练，便于剪裁和移植。系统服务程序运行在用户地址空间，系统的可靠性、稳定性和安全性较高。可用于分布式系统</td><td style="text-align: center;">用户状态和内核状态需要频繁切换，从而导致系统效率不如单体内核。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学与经济管理</title>
    <link href="/architect/%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%BB%8F%E6%B5%8E%E7%AE%A1%E7%90%86/"/>
    <url>/architect/%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%BB%8F%E6%B5%8E%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="数学与经济管理">数学与经济管理</h1><ul><li><a href="https://blog.51cto.com/jackwei/5408077">软考系统分析师倒计时第7天</a></li></ul><h2 id="图论应用">图论应用</h2><h3 id="最小生成树">最小生成树</h3><ul><li><a href="https://baijiahao.baidu.com/s?id=1711403874944606800&amp;wfr=spider&amp;for=pc">最小生成树两大算法：prim、kruskal</a></li></ul><h3 id="最短路径">最短路径</h3><ul><li><a href="https://seineo.github.io/%E5%9B%BE%E8%AE%BA%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3.html">图论：常用的最短路算法详解</a></li><li><a href="https://blog.csdn.net/asdfjklingok/article/details/119522489">有一批货物要从城市s发送到城市t，线条上的数字代表通过这条路的费用（单位为万元）。那么，运送这批货物，至少需要花费多少万元？</a></li></ul><h3 id="网络与最大流量">网络与最大流量</h3><ul><li><a href="https://blog.51cto.com/jackwei/5408077">下图标出了某地区的运输网。各节点之间的运输能力如下表（万吨/小时），从节点1到节点6的最大运输能力（流量）可以达到（）万吨/小时。</a></li></ul><h3 id="其它">其它</h3><ul><li><a href="https://wx.xisaiwang.com/tiku2/85220.html">甲、乙、丙、丁4人加工A、B 、C、D四种工件所需工时如下表所示。指派每人加工一种工件，四人加工四种工件其总工时最短的最优方案中，工件B应由（ ）加工。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统</title>
    <link href="/architect/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    <url>/architect/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库系统">数据库系统</h1><h2 id="数据库系统的体系结构">数据库系统的体系结构</h2><h3 id="视图">视图</h3><p>数据库视图：它一个虚拟表（逻辑上的表），其内容由查询定义（仅保存SQL查询语句）。同真实的表一样，视图包含一系列带有名称的列和行数据。但是视图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据。</p><p>视图的优点：</p><ol type="1"><li>视图能简化用户操作</li><li>视图使用户能以多种角度看待同一数据</li><li>视图对重构数据库提供了一定成都的逻辑独立性</li><li>视图可以对机密数据提供安全保护</li></ol><p>物化视图：他不是传统意义上的虚拟视图，是实体化视图，其本身会存储数据。同时当原始表中的数据更新时，物化视图也会更新。</p><h3 id="分布式数据库">分布式数据库</h3><!-- ![分布式数据库](images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/分布式数据库.png" alt="" /><figcaption>分布式数据库</figcaption></figure><ul><li>分片透明：是指用户不必关心数据是如何分片的，它们对数据的操作在全局关系上进行，即如何分片对用户是透明的。</li><li>复制透明：用户不用关心数据库在网络中各个节点的复制情况，被复制的数据的更新都由系统自动完成。</li><li>位置透明：是指用户不必知道所操作的数据放在何处，即数据分配到哪个或哪些站点存储对用户是透明的。</li><li>局部映像透明性（逻辑透明）：是最低层次的透明性，该透明性提供数据到局部数据库的映像，即用户不必关心局部DBMS支持哪种数据模型、使用哪种数据操纵语言、数据模型和操纵语言的转换是由系统完成的。因此，局部映像透明性对异构型和同构异质的分布式数据库系统是非常重要的。</li></ul><h4 id="试题">试题</h4><p><a href="https://wx.xisaiwang.com/tiku2/20994404.html">分布式数据库系统除了包含集中式数据库系统的模式结构之外，还增加了几个模式级别，其中（ ）定义分布式数据库中数据的整体逻辑结构，使得数据使用方便，如同没有分布一样。</a></p><h2 id="数据仓库与数据挖掘">数据仓库与数据挖掘</h2><p>数据仓库特点：</p><ul><li>面向主题：数据按主题组织。</li><li>集成的：消除了源数据中的不一致性。</li><li>相对稳定的（非易失的）：主要进行查询操作，只有少量的修改和删除操作（或是不删除）。</li><li>反映历史变化（随着时间变化）：记录了企业从过去某一时刻到当前各个阶段的信息，可对发展历程和未来趋势做定量分析和预测。</li></ul><!-- ![数据仓库与数据挖掘](images/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据仓库与数据挖掘.png" alt="" /><figcaption>数据仓库与数据挖掘</figcaption></figure><h3 id="试题-1">试题</h3><p><a href="https://www.999kao.com/category/7681/kamdz9z.html">数据挖掘是从数据库的大量数据中揭示出隐含的、先前未知的、并有潜在价值的</a></p><h2 id="数据库设计过程">数据库设计过程</h2><!-- ![数据库设计过程](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库设计过程.png" alt="" /><figcaption>数据库设计过程</figcaption></figure><h3 id="试题-2">试题</h3><p><a href="https://m.zqnf.com/4606999.html">在数据库设计的（ ）阶段进行关系规范化。</a> <a href="https://www.51bdks.net/view/vvq3ov.html">在数据库设计的需求分析阶段应完成包括（ ）在内的文档。</a></p><h2 id="概念结构设计">概念结构设计</h2><!-- ![概念结构设计](images/%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/概念结构设计.png" alt="" /><figcaption>概念结构设计</figcaption></figure><!-- ![概念结构设计2](images/%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A12.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/概念结构设计2.png" alt="" /><figcaption>概念结构设计2</figcaption></figure><ul><li>集成的方法：<ul><li>多个局部E-R图一次集成。</li><li>逐步集成，用累加的方式一次集成两个局部E-R。</li></ul></li><li>集成产生的冲突及解决办法：<ul><li>属性冲突：包括属性域冲突和属性取值冲突。</li><li>命名冲突：包括同名异议和异名同异。</li><li>结构冲突：包括同一对象在不同应用中具有不同的抽象，以及同一实体在不同局部E-R图中所包含的属性个数和属性排列次序不完全相同。</li></ul></li></ul><h2 id="关系模型相关概念">关系模型相关概念</h2><ul><li>目或度：关系模式中属性的个数。</li><li>候选码（候选键）</li><li>主码（主键）</li><li>主属性或非主属性：组成候选码的属性就是主属性，其它的就是非主属性。</li><li>外码（外键）</li><li>全码（ALL-Key）：关系模式的所有属性组是这个关系的候选码。</li></ul><!-- ![关系模型相关概念](images/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/关系模型相关概念.png" alt="" /><figcaption>关系模型相关概念</figcaption></figure><ul><li><a href="https://blog.csdn.net/weixin_32144483/article/details/113466887">mysql逻辑结构设计_数据库设计：逻辑结构设计</a></li></ul><h3 id="关系的3中类型">关系的3中类型</h3><ul><li>基本关系</li><li>查询表</li><li>视图表</li></ul><h3 id="完整性约束">完整性约束</h3><ul><li>实体完整性约束</li><li>参考完整性约束</li><li>用户自定义完整性约束</li></ul><blockquote><p>触发器</p></blockquote><p><a href="https://owen027.github.io/2019/09/19/integrity_constraint_of_relational/">关系数据模型要素三 关系完整性约束</a></p><h4 id="试题-3">试题</h4><p><a href="http://mtk.mxqe.com/shiti/1530293.html">某数据库中有员工关系E（员工号，姓名，部门，职称，月薪）；产品关系P（产品号，产品名称，型号，尺寸，颜色）；仓库关系W（仓库号，仓库名称，地址，负责人）；库存关系I（仓库号，产品号，产品数量）。</a></p><h2 id="规范化理论">规范化理论</h2><h3 id="函数依赖">函数依赖</h3><!-- ![函数依赖](images/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/函数依赖.png" alt="" /><figcaption>函数依赖</figcaption></figure><h3 id="求候选键">求候选键</h3><ul><li>将关系模式的函数依赖关系用“有向图”的方式表示</li><li>找入度为0的属性，并以该属性集合为起点，尝试遍历有向图，若能正常遍历图中的所有节点，则该属性集即为关系模式的候选键。</li><li>若入度为0的属性集不能遍历图中所有节点，则需要尝试性的将一些中间节点（既有入度，也有出度的节点）并入入度为0的属性集中，直至该集合能遍历所有结点，集合为候选键。</li></ul><h4 id="求候选键实例">求候选键实例</h4><p><a href="https://m.cnitpm.com/st/2867618239.html">例1：给定关系R(A1, A2, A3, A4)上的函数依赖集F</a></p><h3 id="范式">范式</h3><!-- ![范式](images/%E8%8C%83%E5%BC%8F.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/范式.png" alt="" /><figcaption>范式</figcaption></figure><h3 id="无损分解">无损分解</h3><p>什么是有损，什么又是无损？</p><ul><li>有损：不能还原。</li><li>无损：可以还原。</li></ul><p>无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式。</p><h2 id="并发控制">并发控制</h2><h3 id="基本概念">基本概念</h3><!-- ![并发控制-基本概念](images/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/并发控制-基本概念.png" alt="" /><figcaption>并发控制-基本概念</figcaption></figure><h3 id="封锁协议">封锁协议</h3><ul><li>X锁：排它锁</li><li>S锁：共享锁</li></ul><p>基本的封锁类型有两种：排它锁(X锁)和共享锁(S锁)。</p><p>所谓X锁，是事务T对数据A加上X锁时，只允许事务T读取和修改数据A。 所谓S锁，是事务T对数据A加上S锁时，其他事务只能再对数据A加S锁，而不能加X锁，直到T释放A上的S锁。</p><p>若事务T对数据对象A加了S锁，则T就可以对A进行读取，但不能进行更新(S锁因此又称为读锁)，在T释放A上的S锁以前，其他事务可以再对A加S锁，但不能加X锁，从而可以读取A，但不能更新A。</p><p><a href="https://blog.51cto.com/lzs66/1856025">数据库的S锁和X锁，两段锁协议</a></p><h3 id="数据库安全性">数据库安全性</h3><!-- ![数据库安全性](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库安全性.png" alt="" /><figcaption>数据库安全性</figcaption></figure><h3 id="数据备份">数据备份</h3><ul><li>冷备份也称为静态备份，是将数据库正常关闭，在停止状态下，将数据库的文件全部备份（复制）下来。</li><li>热备份也称为动态备份，是利用备份软件，在数据库正常运行的状态下，将数据库中的数据文件备份出来。</li></ul><!-- ![数据库备份](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库备份.png" alt="" /><figcaption>数据库备份</figcaption></figure><ul><li>完全备份：备份所有数据</li><li>差量备份：仅备份上一次完全备份之后变化的数据</li><li>增量备份：备份上一次备份之后变化的数据</li></ul><blockquote><p>日志文件：事务日志是针对数据库改变所做的记录，他可以记录针对数据库的任何操作，并将记录结果保存在独立的文件中。</p></blockquote><h4 id="试题-4">试题</h4><p><a href="https://m.tikukan.com/shiti-120591/">假设某证券公司的股票交易系统中有正在运行的事务，此时，若要转储改交易系统数据中的全部数据，则应采用（）方式。</a></p><h3 id="数据库故障与恢复">数据库故障与恢复</h3><!-- ![数据库故障与恢复](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%85%E9%9A%9C%E4%B8%8E%E6%81%A2%E5%A4%8D.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库故障与恢复.png" alt="" /><figcaption>数据库故障与恢复</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考试介绍及备考攻略</title>
    <link href="/architect/%E8%80%83%E8%AF%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/"/>
    <url>/architect/%E8%80%83%E8%AF%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="考试介绍及备考攻略">考试介绍及备考攻略</h1><ul><li>核心<ul><li>软件工程</li><li>软件架构设计</li><li>操作系统</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成与体系结构</title>
    <link href="/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <url>/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机组成与体系结构">计算机组成与体系结构</h1><h2 id="主存储器">主存储器</h2><p>主存储器（Main memory）是存放指令和数据，并能由中央处理器（CPU）直接随机存取的随机存储器（RAM）。主要由存储体、控制线路、地址寄存器、数据寄存器和地址译码电路五部分组成。</p><ul><li><a href="https://blog.51cto.com/u_15127663/3697454?abTest=51cto">主存储器</a></li></ul><h2 id="控制器">控制器</h2><p>程序计数器PC：存储下一条要执行指令的地址。</p><h3 id="试题">试题</h3><ul><li><a href="https://blog.csdn.net/qq_40307919/article/details/83550412">计算机在一个指令中的过程中，为从内存读取指令操作码，首先要将（）的内容送到地址总线上</a></li></ul><blockquote><ul><li><a href="https://blog.csdn.net/fuhanghang/article/details/114625070">CPU的工作过程</a></li></ul></blockquote><h2 id="存储系统">存储系统</h2><h3 id="层次化存储结构">层次化存储结构</h3><ul><li><a href="https://blog.51cto.com/u_14286115/5194187">Cache和Buffer的区别</a></li></ul><h3 id="主存编址">主存编址</h3><ul><li>存储单元<ul><li>存储单元个数=最大地址-最小地址+1</li></ul></li><li>编址内容<ul><li>按字编址：存储体的存储单元是字存储单元，即最小寻址单位是一个字</li><li>按字节编址：存储体的存储单元是字节存储单元，即最小寻址单位是一个字节</li><li><a href="https://blog.csdn.net/Fabulous1111/article/details/79525384">“一个字等于多少个字节？”是一个不严谨的问法</a></li></ul></li><li>总容量<ul><li>总容量=存储单元个数*编址内容</li></ul></li><li>总片数<ul><li>总片数=总容量/每片的容量</li></ul></li></ul><h4 id="试题-1">试题</h4><ul><li><p><a href="https://www.educity.cn/rk/586060.html">试题来源：2010年下半年系统架构设计师考试试题</a></p></li><li><p><a href="https://www.51bdks.net/view/8p974.html">题解：2010年下半年系统架构设计师考试试题</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">内存按字节编址，利用8K*4bit的存储器芯片构成84000H到8FFFFH的内存，共需（）片。<br>A 6<br>B 8<br>C 12<br>D 24<br></code></pre></td></tr></table></figure><p>解析：本题的题型在软考中较为常见，其难度在于计算时需要注意技巧，如果不注意技巧，将浪费大量时间于无谓的计算过程。</p><p><span class="math display">\[8FFFFH-84000H+1=(8FFFFH+1)-84000H=90000H-84000H=C000H\]</span></p><p>化为十进制为48K。</p><p><span class="math display">\[C000H=12\times16^3=2^2\times3\times2^{12}=3\times2^4\times2^{10}=48\times1024=48K\]</span></p><p>由于内存是按字节编址，所以存储容量为：</p><p><span class="math display">\[48K\times8bit，48K\times8bit\div(8K\times4bit)=12\]</span></p></li></ul><h2 id="存储管理">存储管理</h2><h3 id="磁盘管理">磁盘管理</h3><ul><li>读取磁盘数据的时间应该包括以下三个部分：<ul><li>找磁道的时间。</li><li>找块（扇区）的时间，即旋转延迟时间。</li><li>传输时间。</li></ul></li><li>存取时间=寻道时间+等待时间（平均定位时间+转动延迟）这个公式我认为有问题。 我认为应该是：存取时间=寻道时间+转动延迟+存（或取）磁盘扇区内容的时间？</li></ul><h4 id="试题-2">试题</h4><blockquote><ol type="1"><li>试题一 <a href="https://www.educity.cn/rk/585904.html">试题来源：2012年上半年系统分析师考试试题</a> <a href="https://blog.csdn.net/interestANd/article/details/115539993">题解：假设某磁盘的每个磁道划分成11个物理块……处理11个记录的最少时间为（ ）。</a></li><li>试题二 <a href="https://www.ruankaoti.com/ruanjianshejishi/103110202031972.html">假设磁盘臂位于15号柱面上，进程的请求序列如下表所示，如果采用最短移臂调度算法，那么系统的响应序列应为（ ）。</a></li></ol></blockquote><h2 id="数据传输控制方式">数据传输控制方式</h2><p>从上到下效率越来越高：</p><ul><li>程序控制（查询）方式</li><li>程序中断方式</li><li>DMA方式</li><li>通道方式</li><li>I/O处理机</li></ul><h3 id="参考">参考</h3><ul><li><a href="https://www.cnblogs.com/juanzhi/p/12837375.html">DMA方式与通道方式</a></li><li><a href="https://baike.baidu.com/item/I%2FO%E9%80%9A%E9%81%93/451362">I/O通道</a></li><li><a href="https://blog.51cto.com/u_15080029/4126766">操作系统：I/O 设备与 I/O 系统</a></li></ul><h3 id="试题-3">试题</h3><ul><li><a href="https://kaoyan.cqvip.com/view/professional/subject/list.aspx?searchkey=&amp;cid=1201&amp;page=12">嵌入式系统中采用中断方式实现输入/输出的主要原因是______。在中断时，CPU断点信息一般保存到______中。</a></li></ul><h2 id="总线">总线</h2><p>一条总线同一时刻仅允许一个设备发送，但允许多个设备接收。所以总线是半双工模式。</p><ul><li>半双工与全双工<ul><li><a href="https://blog.csdn.net/chaofanwei/article/details/13274815">简述单工、半双工、全双工的区别</a></li></ul></li><li>串行总线与并行总线<ul><li><a href="https://new.qq.com/rain/a/20210609A03VSB00">串并行总线的区别和优劣，看完这篇就懂了！</a></li><li><a href="https://mbb.eet-china.com/blog/3890995-413465.html">串行总线和并行总线的区别</a></li></ul></li></ul><h3 id="总线分类">总线分类</h3><ul><li>数据总线（Data Bus, DB）：在CPU与ARM之间来回传送需要处理或是需要储存的数据。</li><li>地址总线（Address Bus, AB）：用来指定在RAM（Random Access Memory）之中储存的数据的地址。</li><li>控制总线（Control Bus, CB）：将微处理器控制单元（Control Unit）的信号，传送到周边设备。</li></ul><h4 id="试题-4">试题</h4><ul><li><a href="https://blog.csdn.net/oopxiajun2011/article/details/108432340">试题：下列说法中正确的是（ ）。</a></li></ul><h2 id="cisc与risc">CISC与RISC</h2><ul><li>复杂指令集计算机(CISC, Complex Instruction Set Computers)</li><li>精简指令集计算机(RISC, Reduced Instruction Set Computers)</li></ul><table><thead><tr class="header"><th style="text-align: center;">指令系统类型</th><th style="text-align: center;">指令</th><th style="text-align: center;">寻址方式</th><th style="text-align: center;">实现方式</th><th style="text-align: center;">其他</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">CISC(复杂)</td><td style="text-align: center;">数据量多，使用评率差别大，可变长格式</td><td style="text-align: center;">支持多种</td><td style="text-align: center;">微程序控制技术(微码)</td><td style="text-align: center;">研制周期长</td></tr><tr class="even"><td style="text-align: center;">RISC(精简)</td><td style="text-align: center;">数量少，使用频率接近，定长格式，大部分为单周期指令，操作寄存器，只有Load/Store操作内存</td><td style="text-align: center;">支持方式少</td><td style="text-align: center;">增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td><td style="text-align: center;">优化编译，有效支持高级语言</td></tr></tbody></table><h2 id="流水线">流水线</h2><p>相关参数计算：流水线执行时间计算、流水线吞吐率、流水线加速比等。</p><p>→取指→分析→执行→</p><h3 id="流水线执行时间计算">流水线执行时间计算</h3><p>流水线周期为执行时间最长的一段</p><ul><li>流水线计算公式为：</li></ul><p><span class="math display">\[1条指令执行时间+(指令条数-1)*流水线周期\]</span></p><ul><li>理论公式：</li></ul><p><span class="math display">\[(t_1+t_2+..+t_k)+(n-1)*t\]</span></p><ul><li>实践公式：</li></ul><p><span class="math display">\[k*t+(n-1)*t\]</span></p><h4 id="试题-5">试题</h4><ul><li>试题一<ul><li><a href="https://wx.xisaiwang.com/tiku2/136/26778.html">一条指令的执行过程可以分解为取指、分析和执行三步，在取指时间t取指=3△t、分析时间t分析=2△t、执行时间t执行=4△t的情况下，若按串行方式执行，则10条指令全部执行完需要（ ）△t；若按流水线的方式执行，则10条指令全部执行完需要（ ）△t。</a></li></ul></li></ul><h3 id="流水线吞吐率">流水线吞吐率</h3><p>流水线的吞吐率（Though Put rate, TP）是指在单位时间内流水线所完成的任务数量或输出的结果数量。计算流水线吞吐率的最基本公式如下：</p><p><span class="math display">\[TP=\displaystyle\frac{指令条数}{流水线执行时间}\]</span></p><p>流水线的最大吞吐率：</p><p><span class="math display">\[TP_{max}=\displaystyle\lim_{n \to ∞}{\frac{n}{(k+n-1)t}}={\frac{1}{t}}\]</span></p><h3 id="流水线加速比计算">流水线加速比计算</h3><p>完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比为流水线的加速比。计算流水线加速比的基本公式如下：</p><p><span class="math display">\[S=\displaystyle\frac{不使用流水线执行时间}{使用流水线执行时间}\]</span></p><h4 id="试题-6">试题</h4><ul><li><a href="https://wx.xisaiwang.com/tiku2/351833.html">试题：某计算机系统采用5级流水线结构执行指令</a></li></ul><h2 id="嵌入式系统开发设计">嵌入式系统开发设计</h2><h3 id="芯片">芯片</h3><table><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">简介</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">DSP芯片</td><td style="text-align: center;">数字信号处理器</td></tr><tr class="even"><td style="text-align: center;">SoC片上系统</td><td style="text-align: center;">Soc是一个微小型系统</td></tr><tr class="odd"><td style="text-align: center;">MPU微处理器</td><td style="text-align: center;">微机中的中央处理器</td></tr><tr class="even"><td style="text-align: center;">MCU微控制单元</td><td style="text-align: center;">又称单片微型计算机或者单片机</td></tr></tbody></table><h4 id="试题-7">试题</h4><ul><li><a href="http://www.cnitpm.com/st/286712756.html">试题：嵌入式处理器是嵌入式系统的核心不见……错误的是（ ）。</a></li></ul><h2 id="校验码">校验码</h2><h3 id="奇偶校验">奇偶校验</h3><p>奇偶校验的编码方法是：由若干位有效信息（如一个字节），再加上一个二进制位（校验位）组成校验码。</p><ul><li>奇校验：整个校验码（有效信息位和校验位）中“1”的个数为奇数。</li><li>偶校验：整个校验码（有效信息位和校验位）中“1”的个数为偶数。</li></ul><p>奇偶校验，可检查1位的错误，不可纠错。</p><p><a href="https://blog.csdn.net/icxiaoge/article/details/79996456">Parity(奇偶校验)和ECC（错误检查和纠正）</a></p><h3 id="循环校验码crc">循环校验码CRC</h3><p>CRC校验，可检错，不可纠错。</p><p>模2除法。</p><p><a href="https://zhuanlan.zhihu.com/p/61636624">CRC（循环冗余校验码）简介与实现解析</a></p><p><em><a href="https://blog.51cto.com/winda/1063951">最通俗的CRC校验原理剖析</a></em></p><p><a href="https://blog.csdn.net/weixin_39450145/article/details/83987836">二进制模2除法（CRC校验）</a></p><h4 id="试题-8">试题</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/82967915">软考-CRC检验码计算</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络">计算机网络</h1><h2 id="tcpip协议族">TCP/IP协议族</h2><!-- ![TCP/IP协议族](images/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/TCP-IP协议族.png" alt="" /><figcaption>TCP-IP协议族</figcaption></figure><!-- ![TCP-IP协议族2](images/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F2.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/TCP-IP协议族2.png" alt="" /><figcaption>TCP-IP协议族2</figcaption></figure><h2 id="dhcp">DHCP</h2><!-- ![DHCP](images/DHCP.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/DHCP.png" alt="" /><figcaption>DHCP</figcaption></figure><h2 id="dns">DNS</h2><p>域名系统（DNS, Domain Name System）</p><!-- ![DNS](images/DNS.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/DNS.png" alt="" /><figcaption>DNS</figcaption></figure><!-- ![DNS2](images/DNS2.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/DNS2.png" alt="" /><figcaption>DNS2</figcaption></figure><ul><li><p><a href="https://www.ruanyifeng.com/blog/2018/05/root-domain.html">根域名的知识</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43914604/article/details/105583806">6.2 详解DNS域名解析系统（域名、域名服务器[根、顶级、授权/权限、本地]、域名解析过程[递归与迭代]）</a></p></li><li><p><a href="https://www.jianshu.com/p/476a92a39b45">linux环境下/etc/hosts文件详解</a></p></li></ul><h2 id="网络规划与设计">网络规划与设计</h2><h3 id="需求分析">需求分析</h3><ul><li>功能需求</li><li>通信需求</li><li>性能需求</li><li>可靠性需求</li><li>安全需求</li><li>运行与维护需求</li><li>管理需求</li></ul><!-- ![网络规划与设计-需求分析](images/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络规划与设计-需求分析.png" alt="" /><figcaption>网络规划与设计-需求分析</figcaption></figure><!-- ![网络规划与设计](images/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%BE%E8%AE%A1.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络规划与设计.png" alt="" /><figcaption>网络规划与设计</figcaption></figure><h3 id="逻辑网络设计">逻辑网络设计</h3><p>利用需求分析和现有网络体系分析的结果来设计逻辑网络结构，最后得到一份逻辑网络设计文档，输出内容包括以下几点：</p><ul><li>逻辑网络设计图</li><li>IP地址方案</li><li>安全方案</li><li>招聘和培训网络员工的具体说明</li><li>软硬件、服务、员工和培训的费用初步估计</li></ul><h3 id="物理网络设计">物理网络设计</h3><p>物理网络设计是对逻辑网络设计的物理实现，通过对设备的具体物理分布、运行环境等确定，确保网络的物理连接符合逻辑连接的要求。输出如下内容：</p><ul><li>网络物理结构图和布线方案</li><li>设备和部件的详细列表清单</li><li>软硬件和安装费用的估算</li><li>安装后的测试计划</li><li>用户的培训计划</li></ul><h3 id="分层设计">分层设计</h3><!-- ![分层设计](images/%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/分层设计.png" alt="" /><figcaption>分层设计</figcaption></figure><h2 id="网络存储技术">网络存储技术</h2><h3 id="分类">分类</h3><!-- ![网络存储技术-分类](images/网络存储技术-分类.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络存储技术-分类.png" alt="" /><figcaption>网络存储技术-分类</figcaption></figure><!-- ![网络存储技术-分类2](images/网络存储技术-分类2.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络存储技术-分类2.png" alt="" /><figcaption>网络存储技术-分类2</figcaption></figure><h3 id="raid">Raid</h3><!-- ![Raid](images/Raid.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/Raid.png" alt="" /><figcaption>Raid</figcaption></figure><figure><img src="images/Raid2.png" alt="" /><figcaption>Raid2</figcaption></figure><figure><img src="images/Raid3.png" alt="" /><figcaption>Raid3</figcaption></figure><h2 id="ipv6">IPv6</h2><figure><img src="images/IPv6.png" alt="" /><figcaption>IPv6</figcaption></figure><figure><img src="images/IPv62.png" alt="" /><figcaption>IPv62</figcaption></figure><figure><img src="images/IPv63.png" alt="" /><figcaption>IPv63</figcaption></figure><figure><img src="images/IPv64.png" alt="" /><figcaption>IPv64</figcaption></figure><h2 id="网络接入技术">网络接入技术</h2><figure><img src="images/%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF.png" alt="" /><figcaption>网络接入技术</figcaption></figure><figure><img src="images/%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF2.png" alt="" /><figcaption>网络接入技术2</figcaption></figure><h2 id="综合布线系统">综合布线系统</h2><figure><img src="images/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF%E7%B3%BB%E7%BB%9F.png" alt="" /><figcaption>综合布线系统</figcaption></figure><figure><img src="images/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF%E7%B3%BB%E7%BB%9F2.png" alt="" /><figcaption>综合布线系统2</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16位汇编语言</title>
    <link href="/assembly/16%E4%BD%8D%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/assembly/16%E4%BD%8D%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="位汇编语言">16位汇编语言</h1><h2 id="寄存器">寄存器</h2><p>8086CPU有14个寄存器，所有寄存器都是16位的，可以存放2个字节：</p><ul><li>AX</li><li>BX</li><li>CX</li><li>DX</li><li>SI</li><li>DI</li><li>SP</li><li>BP</li><li>CS</li><li>SS</li><li>DS</li><li>ES</li><li>PSW</li></ul><p>这 14 个寄存器有可能进行具体的划分，按照功能可以分为三种：</p><ul><li>通用寄存器</li><li>段寄存器</li><li>控制寄存器</li></ul><h3 id="通用寄存器">通用寄存器</h3><p>8086CPU有4个通用寄存器，用来存放一般性的数据：</p><ul><li><p>AX(Accumulator Register) ：累加寄存器，它主要用于输入/输出和大规模的指令运算。</p></li><li><p>BX(Base Register)：基址寄存器，用来存储基础访问地址。</p></li><li><p>CX(Count Register)：计数寄存器，CX 寄存器在迭代的操作中会循环计数。</p></li><li><p>DX(Data Register)：数据寄存器，它也用于输入/输出操作。它还与 AX 寄存器以及 DX 一起使用，用于涉及大数值的乘法和除法运算。</p></li></ul><p>8086CPU的<code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code>这4个通用寄存器都可以分为两个可独立使用的8位寄存器来用：</p><table><thead><tr class="header"><th>寄存器</th><th>高位</th><th>低位</th></tr></thead><tbody><tr class="odd"><td>AX</td><td>AH</td><td>AL</td></tr><tr class="even"><td>BX</td><td>BH</td><td>BL</td></tr><tr class="odd"><td>CX</td><td>CH</td><td>CL</td></tr><tr class="even"><td>DX</td><td>DH</td><td>DL</td></tr></tbody></table><p>除了<code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code> 寄存器以外，其他寄存器均不可以分为两个独立的 8 位寄存器。</p><p>寄存器的存储方式是先存储低位，如果低位满足不了就存储高位，如果低位能够满足，高位用 0 补全，在其他低位能满足的情况下，其余位也用 0 补全。</p><p>8086 CPU 可以一次存储两种类型的数据：</p><ul><li><p>字节(byte)： 一个字节由 8 bit 组成，这是一种恒定不变的存储方式</p></li><li><p>字(word)：字是由指令集或处理器硬件作为单元处理的固定大小的数据，对于 intel 来说，一个字长就是两个字节。</p></li></ul><p>字是计算机一个非常重要的特征，针对不同的指令集架构来说，计算机一次处理的数据也是不同的。也就是说，针对不同指令集的机器，一次能处理不用的字长，有字、双字（32位）、四字（64位）等。</p><h3 id="段寄存器">段寄存器</h3><p>8086CPU有4个段寄存器：</p><ul><li>CS(Code Segment)：代码段寄存器，程序代码的基础位置。</li><li>DS(Data Segment)：数据段寄存器，变量的基本位置。</li><li>SS(Stack Segment)：堆栈段寄存器，栈的基础位置。</li><li>ES(Extra Segment)：附加段寄存器，内存中变量的其他基本位置。</li></ul><h4 id="代码段寄存器">代码段寄存器</h4><ul><li>CS</li></ul><h4 id="数据段寄存器">数据段寄存器</h4><ul><li>DS</li></ul><p>8086CPU不支持将数据直接送入段寄存器，需要先将数据送入一个一般的寄存器，如<code>BX</code>，再将<code>BX</code>中的内容送入<code>DS</code>。</p><h4 id="堆栈段寄存器">堆栈段寄存器</h4><ul><li>SS</li></ul><p>8086CPU中，有两个寄存器，堆栈段寄存器<code>SS</code>和栈指针寄存器<code>SP</code>，栈顶的段地址存放在<code>SS</code>中，偏移地址存放在<code>SP</code>中。</p><p>任意时刻，<code>SS:SP</code>指向栈顶元素。</p><p><code>push</code>指令和<code>pop</code>指令执行时，CPU从<code>SS</code>和<code>SP</code>中得到栈顶的地址。</p><h5 id="栈顶超界的问题">栈顶超界的问题</h5><p>当栈满的时候，使用<code>push</code>指令入栈，或栈空的时候使用<code>pop</code>指令出栈，都将发生栈顶超界的问题。</p><p>8086CPU不保证我们对栈的操作不会越界，8086CPU只知道栈顶在何处（由<code>SS:SP</code>指示），而不知道我们安排的栈空间有多大。</p><p>编程时要根据可能用到的最大栈空间，来安排栈的大小，防止入栈的数据太多而导致超界；执行出栈操作的时候也要注意，以防栈空的时候继续出栈而导致的超界。</p><h4 id="索引寄存器">索引寄存器</h4><p>索引寄存器主要包含段地址的偏移量，索引寄存器主要分为：</p><ul><li>BP(Base Pointer)：基础指针，它是栈寄存器上的偏移量，用来定位栈上变量。</li><li>SP(Stack Pointer)：栈指针，它是栈寄存器上的偏移量，用来定位栈顶。</li><li>SI(Source Index)：变址寄存器，用来拷贝源字符串。</li><li>DI(Destination Index)：目标变址寄存器，用来复制到目标字符串。</li></ul><h3 id="控制寄存器">控制寄存器</h3><ul><li>IP(Instruction Pointer)：指令指针寄存器，它是从 Code Segment 代码寄存器处的偏移来存储执行的下一条指令.</li><li>FLAG(EFLAGS Register)：标志寄存器用于存储当前进程的状态。</li></ul><h4 id="指令指针寄存器">指令指针寄存器</h4><p>指令指针寄存器（Instruction Pointer）</p><ul><li>IP</li></ul><p>在8086PC机中，任意时刻，设<code>CS</code>中的内容为<code>M</code>，<code>IP</code>中的内容为<code>N</code>，8086CPU将从内存<code>M*16+N</code>单元开始，读取一条指令并执行。</p><p>也可以这样表述：8086机中，任意时刻，CPU将<code>CS:IP</code>指向的内容当做指令执行。</p><p><code>mov</code>指令不能用于设置<code>CS</code>、<code>IP</code>寄存器的值，原因很简单，因为8086CPU没有提供这样的功能。</p><p>使用<code>jmp 段地址:偏移地址</code>指令可以同时修改<code>CS:IP</code>寄存器的值：</p><ul><li><code>jmp 2AE3:3</code>，执行后：<code>CS=2AE3H</code>， <code>IP=0003H</code>，CPU将从<code>2AE33H</code>处读取指令。</li><li><code>jmp 3:0B16</code>，执行后：<code>CS=0003H</code>， <code>IP=0B16H</code>，CPU将从<code>00B46H</code>处读取指令。</li></ul><p>若想仅修改<code>IP</code>寄存器的内容，可用<code>jmp 某一合法寄存器</code>的指令完成，如：</p><ul><li><code>jmp ax</code>，指令执行前，<code>ax=1000H</code>，<code>CS=2000H</code>，<code>IP=0003H</code> 指令执行后，<code>ax=1000H</code>，<code>CS=2000H</code>，<code>IP=1000H</code></li></ul><h4 id="标志寄存器">标志寄存器</h4><p>FLAG(EFLAGS Register)：标志寄存器用于存储当前进程的状态。</p><p>标志寄存器，又称程序状态寄存器（它的内容是Program Status Word，PSW）。</p><p>这是一个，控制标志和系统标志的寄存器。</p><p>标志寄存器EFLAGS中的系统标志和IOPL字段用于控制I/O访问、可屏蔽硬件中断、调试、任务切换以及虚拟8086模式。</p><p>FLAG : Flag 寄存器用于存储当前进程的状态，这些状态有：</p><ul><li><p>位置 (Direction)：用于数据块的传输方向，是向上传输还是向下传输</p></li><li><p>中断标志位 (Interrupt) ：1 - 允许；0 - 禁止</p></li><li><p>陷入位 (Trap) ：确定每条指令执行完成后，CPU 是否应该停止。1 - 开启，0 - 关闭</p></li><li><p>进位 (Carry) : 设置最后一个无符号算术运算是否带有进位</p></li><li><p>溢出 (Overflow) : 设置最后一个有符号运算是否溢出</p></li><li><p>符号 (Sign) : 如果最后一次算术运算为负，则设置 1 =负，0 =正</p></li><li><p>零位 (Zero) : 如果最后一次算术运算结果为零，1 = 零</p></li><li><p>辅助进位 (Aux Carry) ：用于第三位到第四位的进位</p></li><li><p>奇偶校验 (Parity) : 用于奇偶校验</p></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.jb51.net/article/230062.htm">图文详解通俗易懂的汇编语言寄存器</a></li><li><a href="https://www.toutiao.com/article/7039892076707807748">二进制分析实战：x86汇编快速入门</a></li><li><a href="https://baike.baidu.com/item/cs/19501238">硬件CPU中的代码段寄存器</a></li><li><a href="https://blog.csdn.net/weixin_42240667/article/details/104503184">8086cpu中的寄存器（cs、ds、es、ss、ip、sp、bp、si、di）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>assembly</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/assembly/README/"/>
    <url>/assembly/README/</url>
    
    <content type="html"><![CDATA[<h1 id="assembly-learning">assembly-learning</h1><ul><li><a href="https://cmsblogs.cn/3358.html">汇编语言（第4版）PDF下载</a></li><li><a href="https://pan.baidu.com/s/1BUWnerHO20rkMlesAesEFQ">链接: https://pan.baidu.com/s/1BUWnerHO20rkMlesAesEFQ 密码: wdd7</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>assembly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>assembly</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>assembly</title>
    <link href="/assembly/assembly/"/>
    <url>/assembly/assembly/</url>
    
    <content type="html"><![CDATA[<h1 id="assembly">assembly</h1><h2 id="汇编语言">汇编语言</h2><ul><li><p><a href="https://www.jb51.net/article/230062.htm"><font color=Red>图文详解通俗易懂的汇编语言寄存器</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7039892076707807748/"><font color=Red>二进制分析实战：x86汇编快速入门</font></a></p></li><li><p><a href="https://blog.codekissyoung.com/%E7%AC%AC%E9%9B%B6%E5%B1%82/64%E4%BD%8DCPU%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"><font color=Red>Linux 下 64 位汇编语言</font></a></p></li><li><p><a href="https://blog.codekissyoung.com/%E7%AC%AC%E9%9B%B6%E5%B1%82/32%E4%BD%8DCPU%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"><font color=Red>32 位汇编语言</font></a></p></li><li><p><a href="https://blog.codekissyoung.com/%E7%AC%AC%E9%9B%B6%E5%B1%82/16%E4%BD%8DCPU%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"><font color=Red>16 位汇编语言</font></a></p></li><li><p><a href="https://www.dazhuanlan.com/alzheimers/topics/1114443"><font color=Red>Linux 汇编语言程序设计 (使用 NASM)</font></a></p></li><li><p><a href="https://www.jianshu.com/p/1bae868660ae">开始在Linux下使用汇编语言</a></p></li><li><p><a href="https://www.bxtkezhan.xyz/post/022-asmx64-first/"><font color=Red>汇编语言「Linux/x86-64」・第一步</font></a></p></li><li><p><a href="https://www.bxtkezhan.xyz/post/026-asmx64-explanation/">汇编语言「Linux/x86-64」・代码解析</a></p></li><li><p><a href="https://www.bxtkezhan.xyz/post/049-asmx64-c/">汇编语言「Linux/x86-64」・调用C程序</a></p></li><li><p><a href="http://c.biancheng.net/asm/">汇编语言入门教程：汇编语言程序设计指南（精讲版）</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程简明版（阮一峰博客）</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程</a></p></li><li><p><a href="https://www.cnblogs.com/euler0525/p/16313494.html">汇编语言</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45309916/article/details/107837561">ARM汇编基础详解</a></p></li><li><p><a href="https://www.jc2182.com/assemblylanguage/assembly-language-jiaocheng.html"><font color=Red>汇编语言 教程</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/54853591"><font color=Red>汇编语言Linux 汇编语言开发指南</font></a></p></li><li><p><a href="https://github.com/fmw666/Assembly"><font color=Red>汇编语言基础</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_36894974/article/details/103365258">程序员需要了解的硬核知识之汇编语言(全)_程序员cxuan的个人主页-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/cxuanBlog/p/11976084.html">程序员需要了解的硬核知识之汇编语言(全)</a></p></li><li><p><a href="https://blog.csdn.net/qq_40148538/article/details/101355488">64位和32位在汇编语言中的区别</a></p></li></ul><h2 id="内联汇编">内联汇编</h2><ul><li><a href="https://blog.csdn.net/weixin_36209467/article/details/122113552">扩展内联汇编__asm__</a></li><li><a href="https://blog.csdn.net/qq_42931917/article/details/117779286"><font color=Red>C语言内联汇编使用方法__asm__</font></a></li><li><a href="https://blog.csdn.net/chenchengwudi/article/details/121089099#t5">Linux 0.11内核分析03：系统调用 中断描述符安装函数</a></li><li><a href="https://pvcstillingradschool.github.io/miniWiki/programming/csapp/3_machine_level_programming.html">程序的机器级表示-汇编</a></li></ul><h2 id="objdump">objdump</h2><ul><li><a href="https://blog.csdn.net/zoomdy/article/details/50563680"><font color=Red>objdump反汇编用法示例</font></a></li><li><a href="https://blog.csdn.net/kunkliu/article/details/82992361">反汇编代码格式</a></li></ul><h2 id="栈帧">栈帧</h2><ul><li><a href="https://blog.csdn.net/qq_41658597/article/details/115603733">栈帧详解ebp、esp</a></li><li><a href="https://blog.csdn.net/qq_25814297/article/details/113475019">EBP 和 ESP 详解</a></li><li><a href="https://blog.csdn.net/qq_44288506/article/details/104767511">关于汇编语言中PUSH和POP指令的一个小结</a></li><li><a href="https://www.cnblogs.com/dyyblog/p/13812922.html">2020-2021-1 20209320 《Linux内核原理与分析》第二周作业</a></li><li><a href="https://blog.csdn.net/assiduous_me/article/details/119488503">初步分析汇编代码</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://m.toutiao.com/article_series/7147341959684751880">编译器的技术文章</a></li><li><a href="https://mp.weixin.qq.com/s/E7XL4BVrJ99dG4RNo-olyQ">为什么 JVM 叫做基于栈的 RISC 虚拟机</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>assembly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/binary-analysis/README/"/>
    <url>/binary-analysis/README/</url>
    
    <content type="html"><![CDATA[<h1 id="binaryanalysis">binaryanalysis</h1><ul><li><a href="https://nostarch.com/binaryanalysis">https://nostarch.com/binaryanalysis</a></li><li><a href="https://practicalbinaryanalysis.com/">Download code samples and virtual machine.</a></li><li><a href="https://practicalbinaryanalysis.com/file/pba-code.tar.gz">You can also download just the example code.</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>binary-analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/bpf/README/"/>
    <url>/bpf/README/</url>
    
    <content type="html"><![CDATA[<h1 id="bpf-learning">bpf-learning</h1><h2 id="安装教程">安装教程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install bpfcc-tools linux-headers-$(<span class="hljs-built_in">uname</span> -r) bpftrace<br></code></pre></td></tr></table></figure><ul><li><a href="bcc.md">BPF Compiler Collection (BCC)</a></li><li><a href="bpftrace.md">bpftrace</a></li></ul><h2 id="动态追踪">动态追踪</h2><p>可以通过探针机制，来采集内核或者应用程序的运行信息。所谓动态，表示他可以不用修改内核和应用程序的代码，就获得丰富的信息。因为在以往的排查和调试性能问题过程中，我们往往会先给应用程序设置一系列的断点(gdb),然后以手动或者脚本(GDB的Python扩展)的方式，在断点处去分析程序状态，或者增加一系列的日志，在日志中寻找线索。相比以往的进程及追踪方法(ptrace)，动态追踪往往只需要消耗很小的性能消耗（5%甚至更少）。</p><p>根据类型不同，动态追踪所使用的事件源，可以分为静态探针，动态探针，硬件事件这三类。</p><h3 id="硬件事件">硬件事件</h3><p>其中硬件事件通常由性能监控计数器PMC(Performance Monitoring Counter)产生，他包括了各种硬件的性能指标，比如CPU的缓存，指令周期，分支预测等等。</p><h3 id="静态探针">静态探针</h3><p>静态探针，指事先在代码中定义好，并编译到应用程序和内核中的探针。这些探针只有在开启探测功能时，才会被执行到。未开启时，不会执行。常见的静态探针包括内核中的跟踪点(tracepoints)和USDT(Userland Statically Defined Tracing)探针：</p><ul><li><p>跟踪点(tracepoints) - 在源码中插入一些带控制条件的探测点，这些探测点允许事后添加处理函数，比如在内核中，最常见的静态追踪方法就是printk(),输出日志，Linux内核定义了大量的跟踪点，可以通过内核编译选项来开启和关闭。</p></li><li><p>USDT探针，全称是用户级静态定义跟踪，需要在源码中插入DTRACE_PROBE()代码，并编译到应用程序中。不过在很多应用程序内置了USDT探针，比如MySQL, PostgreSQL等。</p></li></ul><h3 id="动态探针">动态探针</h3><p>动态探针，是指没有实现在代码定义，但却可以在运行时动态添加的探针。比如函数的调用和返回等，动态探针支持按需在内核或者应用程序中添加探测点，具有更高的灵活性，常见的动态探针有两种，即用于内核态的kprobes以及用户态的uprobes:</p><ul><li><p>kprobes - 用来跟踪内核态的函数，包括用于函数调用的kprobe和用于函数返回的kretprobe。</p></li><li><p>uprobes - 用来跟踪用户态的函数，包括用于函数调用的uprobe以及用于函数返回的uretprobe。</p></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.toutiao.com/article/7077801491347833374">Linux动态追踪技术概念介绍</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bcc</title>
    <link href="/bpf/bcc/"/>
    <url>/bpf/bcc/</url>
    
    <content type="html"><![CDATA[<h1 id="bcc">bcc</h1><p><a href="https://github.com/iovisor/bcc.git">BPF Compiler Collection (BCC)</a></p><p>本教程适用于Deepin 20.6、Deepin 20.7。</p><h2 id="安装依赖">安装依赖</h2><p>查看宿主机已安装llvm版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l | grep libllvm<br></code></pre></td></tr></table></figure><p>结果输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">ii  libllvm11:amd64                               1:11.0.1-2                                 amd64        Modular compiler and toolchain technologies, runtime library<br></code></pre></td></tr></table></figure><p>下方安装llvm、clang时版本需要选定为11。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -y install bison \<br>build-essential \<br>cmake \<br>flex \<br>git \<br>libedit-dev \<br>llvm-11-dev \<br>libclang-11-dev \<br>python \<br>zlib1g-dev \<br>libelf-dev \<br>libfl-dev \<br>python3-distutils<br></code></pre></td></tr></table></figure><h2 id="源码下载">源码下载</h2><ol type="1"><li><p>代码下载方式一(推荐使用)</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/iovisor/bcc/releases/download/v0.25.0/bcc-src-with-submodule.tar.gz<br>tar -zxvf bcc-src-with-submodule.tar.gz<br></code></pre></td></tr></table></figure></p></li><li><p>代码下载方式二</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/iovisor/bcc.git<br>git checkout -b v0.25.0<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ol><h2 id="编译安装bcc">编译安装bcc</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -ex<br><span class="hljs-built_in">mkdir</span> bcc/build<br><span class="hljs-built_in">cd</span> bcc/build<br>cmake ..<br>make<br>sudo make install<br>cmake -DPYTHON_CMD=python3 .. <span class="hljs-comment"># build python3 binding</span><br><span class="hljs-built_in">pushd</span> src/python/<br>make<br>sudo make install<br><span class="hljs-built_in">popd</span><br></code></pre></td></tr></table></figure><h2 id="environment-variable-configuration">Environment variable configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=<span class="hljs-variable">$PATH</span>:/usr/share/bcc/tools&quot;</span> &gt;&gt; /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo visudo后追加/usr/share/bcc/tools到secure_path后面<br>Defaults        secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/usr/share/bcc/tools&quot;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="将python3设置为默认的python">将python3设置为默认的python</h2><p>直接执行这两个命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100<br>sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150<br></code></pre></td></tr></table></figure><p>上述命令执行后，python3已被设置为默认的python。</p><p>切换到Python2，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --config python<br></code></pre></td></tr></table></figure><h2 id="get-started">Get started</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo execsnoop<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://github.com/iovisor/bcc/blob/master/INSTALL.md#ubuntu---source">https://github.com/iovisor/bcc/blob/master/INSTALL.md#ubuntu---source</a></li><li><a href="https://blog.csdn.net/qq_33344148/article/details/123255679">BCC在ubuntu18.04源码安装</a></li><li><a href="https://www.cnblogs.com/lfri/p/16277069.html">解决 sudo 执行命令时找不到命令问题</a></li><li><a href="https://blog.51cto.com/u_15351425/3727453">linux系统下将python3设置为默认的python</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bpftrace</title>
    <link href="/bpf/bpftrace/"/>
    <url>/bpf/bpftrace/</url>
    
    <content type="html"><![CDATA[<h1 id="bpftrace">bpftrace</h1><h2 id="source-install">source install</h2><p>git clone bpftrace:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/iovisor/bpftrace.git<br>git checkout -b v0.16.0<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><h2 id="depends">depends</h2><p>查看宿主机已安装llvm版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l | grep libllvm<br></code></pre></td></tr></table></figure><p>结果输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">ii  libllvm11:amd64                               1:11.0.1-2                                 amd64        Modular compiler and toolchain technologies, runtime library<br></code></pre></td></tr></table></figure><p>下方安装llvm、clang时版本需要选定为11。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install -y \<br>bison \<br>cmake \<br>flex \<br>g++ \<br>git \<br>libelf-dev \<br>zlib1g-dev \<br>libfl-dev \<br>systemtap-sdt-dev \<br>binutils-dev \<br>libcereal-dev \<br>llvm-11-dev \<br>llvm-11-runtime \<br>libclang-11-dev \<br>clang-11 \<br>libpcap-dev \<br>libgtest-dev \<br>libgmock-dev \<br>asciidoctor<br></code></pre></td></tr></table></figure><h2 id="cmake-build-and-install">cmake build and install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bpftrace<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>../build-libs.sh<br>cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release .. <span class="hljs-comment"># 此处关闭单元测试，是因为单元测试跑不过</span><br>make -j8<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="environment-variable-configuration">Environment variable configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=<span class="hljs-variable">$PATH</span>:/usr/local/share/bpftrace/tools&quot;</span> &gt;&gt; /etc/profile<br></code></pre></td></tr></table></figure><p>add /usr/local/share/bpftrace/tools to /etc/sudoers:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo visudo<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Defaults        secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/share/bpftrace/tools&quot;<br></code></pre></td></tr></table></figure><h2 id="get-started">Get started</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo bpftrace -l<br>sudo execsnoop.bt<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://github.com/iovisor/bpftrace.git">https://github.com/iovisor/bpftrace.git</a></li><li><a href="https://github.com/iovisor/bpftrace/blob/master/INSTALL.md">bpftrace Install</a></li><li><a href="http://1.117.71.82/os/bpf%E4%B9%8B%E5%B7%85-%E6%B4%9E%E6%82%89linux%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD/">BPF之巅--洞悉Linux系统和应用性能</a></li><li><a href="https://blog.csdn.net/qq_31220203/article/details/118686482">BPF之巅--洞悉Linux系统和应用性能 Brendan Gregg</a></li><li><a href="https://pan.baidu.com/disk/pdfview?path=%2F%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90%2FBPF.Performance.Tools.2019.12.pdf&amp;fsid=947754417850329&amp;size=8414043">BPF.Performance.Tools.2019.12.pdf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能之巅</title>
    <link href="/bpf/%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85/"/>
    <url>/bpf/%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85/</url>
    
    <content type="html"><![CDATA[<h1 id="性能之巅">性能之巅</h1><ul><li><a href="http://www.javashuo.com/article/p-gycyrpiy-me.html">性能之巅 洞悉系统、企业与云计算PDF（完整版）</a></li><li><a href="https://pan.baidu.com/s/17iUesk0w5DzdON6-Y06fYQ?pwd=abq8">性能之巅 洞悉系统、企业与云计算PDF（完整版）提取码: abq8</a></li><li><a href="https://blog.csdn.net/qq_31220203/article/details/120067331">性能之巅——洞悉系统、企业与云计算 Brendan Gregg</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能调优</title>
    <link href="/bpf/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <url>/bpf/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<h1 id="性能调优">性能调优</h1><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247498209&amp;idx=1&amp;sn=80567d62967575953d0d33132841d907&amp;chksm=f96b8b15ce1c0203b09acee19f2570a011678987077c7a0c3905a6ba108cfeae21ee121ca9da&amp;token=526082791&amp;lang=zh_CN&amp;scene=21#wechat_redirect">Linux性能调优工具9张图-你肯定会用到</a></p></li><li><p><a href="https://www.cnblogs.com/alantu2018/p/8997149.html">Linux内核调试方法总结</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/n42ngcgBdbCdF927ncTa3Q">Linux 性能分析工具汇总</a></p></li><li><p><a href="https://linux.cn/article-9424-1.html">Linux跟踪器之选</a></p></li><li><p><a href="https://linux.cn/article-8038-1.html">Linux 中的 DTrace ：BPF 进入 4.9 内核</a></p></li><li><p><a href="https://linux.cn/article-9507-1.html">深入理解 BPF：一个阅读清单</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1698426">Linux超能力BPF技术介绍及学习分享（技术创作101训练营）</a></p></li><li><p><a href="https://www.toutiao.com/article/7077801491347833374"><font color=Red>Linux动态追踪技术概念介绍</font></a></p></li><li><p><a href="https://lzz5235.github.io/2013/11/22/ltrace-strace-ftrace.html"><font color=Red>调试工具ltrace strace ftrace的使用</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/NoVJlGQFh02NiuE3d355XQ">Linux 中 CPU 利用率是如何算出来的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/bxuKq1up9xs3VfZaPfbkxw">Linux 中 CPU 利用率是如何算出来的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/VoxZEXnGQNzIx8STBcQzkQ">内核并发消杀器（KCSAN）技术分析</a></p></li></ul><h2 id="ltrace">ltrace</h2><ul><li><a href="https://www.cnblogs.com/machangwei-8/p/10388938.html">ltrace命令详解</a></li><li><a href="https://www.toutiao.com/article/6793545198694564355">Linux库函数调用工具—ltrace命令</a></li></ul><h2 id="strace">strace</h2><ul><li><a href="https://www.cnblogs.com/kongzhongqijing/articles/4913192.html">linux命令—— strace命令（跟踪进程中的系统调用）</a></li><li><a href="https://blog.csdn.net/a6864657/article/details/123915757">Linux之strace命令</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html">strace 跟踪进程中的系统调用</a></li><li><a href="https://www.toutiao.com/article/7090332571376337408">Linux strace 跟踪进程中的系统调用</a></li></ul><h2 id="ftrace">ftrace</h2><ul><li><a href="https://blog.csdn.net/scarecrow_byr/article/details/102748967">使用ftrace跟踪函数</a></li><li><a href="https://www.toutiao.com/w/1737234292871172">实时获取linux内核函数的调用栈以及各个子函数的执行时间，linux ftrace是最适合的</a></li><li><a href="https://zhuanlan.zhihu.com/p/33267453">ftrace：跟踪你的内核函数！</a></li><li><a href="https://linux.cn/article-13852-1.html">使用 trace-cmd 追踪内核</a></li><li><a href="https://blog.csdn.net/Rong_Toa/article/details/116718182">Linux内核 eBPF基础：ftrace基础-ftrace_init初始化</a></li></ul><h2 id="method-tracing">method tracing</h2><ul><li><a href="https://mp.weixin.qq.com/s/j-zgr50wCY5beppYpXGAyQ">ART虚拟机method tracing技术解析</a></li></ul><h2 id="perf">Perf</h2><ul><li><a href="https://www.cnblogs.com/BYGAO/p/14550608.html">如何使用perf进行程序分析</a></li><li><a href="https://blog.csdn.net/weixin_43946212/article/details/100161808">BCOS区块链性能分析工具的安装和使用perf+火焰图</a></li><li><a href="https://pingcap.com/zh/blog/online-environment-analysis-system">线上环境 Linux 系统调用追踪丨TiDB 应用实践 perf trace traceloop</a></li><li><a href="https://www.toutiao.com/article/7154336826105266726/">一文看懂 Linux 性能分析｜perf 源码实现（超详细~）</a></li><li><a href="https://www.toutiao.com/article/7154278740749517347/">一文看懂 Linux 性能分析｜perf原理（超详细~）</a></li><li><a href="https://mp.weixin.qq.com/s/AubfEBTfwcyslSqWLYl6ag">Perfetto工具集之traced_perf</a></li></ul><h2 id="ebpf">eBPF</h2><ul><li><p><a href="http://kerneltravel.net/blog/2021/ebpf_beginner/ebpf.pdf"><font color=Red>高效入门eBPF</font></a></p></li><li><p><a href="http://kerneltravel.net/blog/2020/ebpf_ljr_no1/">EBPF学习——EBPF简介、安装和简单示例</a></p></li><li><p><a href="https://blog.csdn.net/qq_33344148/article/details/123255679">BCC在ubuntu18.04源码安装</a></p></li><li><p><a href="https://github.com/iovisor/bcc" class="uri">https://github.com/iovisor/bcc</a></p></li><li><p><a href="https://github.com/realwujing/ebpf-learning/blob/main/BCC.md"><font color=Red>BCC安装教程</font></a></p></li><li><p><a href="https://github.com/DavadDi/bpf_study">bpf 学习仓库</a></p></li><li><p><a href="https://github.com/zoidbergwill/awesome-ebpf">https://github.com/zoidbergwill/awesome-ebpf</a></p></li><li><p><a href="https://github.com/iovisor/bpftrace/blob/master/docs/tutorial_one_liners_chinese.md"><font color=Red>bpftrace一行教程</font></a></p></li><li><p><a href="https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md">bpftrace 参考指南</a></p></li><li><p><a href="https://blog.csdn.net/qq_31220203/article/details/118686482">BPF之巅洞悉Linux系统和应用性能 Brendan Gregg</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/98XAzJ-9SByM2RzhUcYsMQ">BCC小白写测试上下文切换延时程序</a></p></li><li><p><a href="https://www.toutiao.com/article/7168812402375787043/">eunomia-bpf项目重磅开源！eBPF 轻量级开发框架来了 | 龙蜥技术</a></p></li><li><p><a href="https://www.toutiao.com/article/7156057067848106530">中国工商银行基于eBPF技术的云原生可观测图谱探索与实践</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zx-zxoKZQqsaK2pU0fj7FQ">使用 ChatGPT ，通过自然语言编写 eBPF 程序和追踪 Linux 系统</a></p></li></ul><h2 id="性能优化">性能优化</h2><ul><li><p><a href="https://www.toutiao.com/article/7103456440978997763">从通用的协议栈层面来优化Redis性能的实践</a></p></li><li><p><a href="https://www.toutiao.com/article/7146843167709594147/">Nginx性能调优实战</a></p></li><li><p><a href="https://www.toutiao.com/article/7090814899458146855/">Linux性能问题分析流程与性能优化思路</a></p></li><li><p><a href="https://www.toutiao.com/article/7152791666980651531/">linux性能优化之网络篇</a></p></li><li><p><a href="https://www.toutiao.com/article/7152410220101583401/">linux性能优化之内存篇</a></p></li><li><p><a href="https://www.toutiao.com/article/7199661075120669216">网易二面：CPU狂飙900%，该怎么处理？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/H2P0-WcnZDzMCnLm0xcZ6A">如何排查网络丢包问题</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础</title>
    <link href="/cpp/C++%E5%9F%BA%E7%A1%80/"/>
    <url>/cpp/C++%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="c基础">C++基础</h1><h2 id="cc">C/C++</h2><ul><li><a href="https://mp.weixin.qq.com/s/h3On-o0QybTkMy88Dy7qpA">C语言和C++的区别和联系</a></li><li><a href="https://www.bookstack.cn/read/linux-c/menu.md">Linux C编程一站式学习</a></li><li><a href="http://fsemouse.com/wordpress/2021/01/19/%E5%85%B3%E4%BA%8Elinux%E7%B3%BB%E7%BB%9F%E9%87%8Cglibc%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E8%BF%B0/">关于linux系统里glibc库的一些记述</a></li><li><a href="https://www.w3xue.com/manual/c/">C标准库 在线速查手册</a></li><li><a href="http://c.biancheng.net/view/7936.html">gcc和g++是什么，有什么区别？</a></li><li><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html">GCC 参数详解</a></li></ul><h2 id="库函数系统调用">库函数、系统调用</h2><ul><li><a href="https://blog.csdn.net/kwame211/article/details/77572123">Linux系统调用函数列表</a></li><li><a href="https://www.chinastor.com/manuals/linuxfunctions/">Linux函数调用手册</a></li><li><a href="https://www.cnblogs.com/Yogurshine/p/3666527.html">linux系统调用和库函数调用的区别</a></li><li><a href="https://mp.weixin.qq.com/s/64xAPVhntRjz65SvrCqi7g">在程序里面执行system(“cd /某个目录“)，为什么路径切换不成功？</a></li></ul><h2 id="main">main</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/main-function-command-line-args?view=msvc-170">main 函数和命令行参数</a></li></ul><h2 id="typedef">typedef</h2><ul><li><a href="https://www.cnblogs.com/xkdn/p/14518465.html">C语言typedef的用法详解</a></li><li><a href="https://blog.csdn.net/hai008007/article/details/80651886">C++typedef的详细用法</a></li><li><a href="http://c.biancheng.net/view/298.html">typedef的用法，C语言typedef详解 (biancheng.net)</a></li><li><a href="https://blog.csdn.net/astrotycoon/article/details/41286413">C语言的不完整类型和前置声明</a></li><li><a href="https://stackoverflow.com/questions/9999512/forward-declaration-of-a-struct-in-c"><font color=Red>forward declaration of a struct in C?</font></a></li><li><a href="https://blog.csdn.net/whahu1989/article/details/83627658"><font color=Red>C++里类的前置声明分析</font></a></li></ul><h2 id="头文件源文件">头文件、源文件</h2><ul><li><a href="https://www.runoob.com/cplusplus/cpp-variable-types.html"><font color=Red>C++ 变量类型 声明 定义</font></a></li><li><a href="https://www.cnblogs.com/fenghuan/p/4794514.html">C++中头文件（.h）和源文件（.cpp）都应该写些什么</a></li><li><a href="https://www.runoob.com/w3cnote/cpp-header.html">理解C++中的头文件和源文件的作用</a></li></ul><h3 id="预处理命令">预处理命令</h3><ul><li><a href="https://www.cnblogs.com/lanhaicode/p/10546514.html">预处理命令使用详解#if、#endif、#undef、#ifdef、#else、#elif - 蓝海人 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/sinat_28752257/article/details/84989928">与c++握手言和：define宏定义遇上expected primary-expression before ' ' taken</a></li><li><a href="https://www.cnblogs.com/acec/p/14674448.html">#pragma once用法总结</a></li></ul><h3 id="constdefine">const、define</h3><ul><li><a href="https://blog.csdn.net/YL970302/article/details/88916973"><font color=Red>const和define的区别以及const的优点</font></a></li></ul><h2 id="sizeof-strlen">sizeof strlen</h2><ul><li><a href="https://blog.csdn.net/ty6693/article/details/86699176">C语言中关于 strlen 和 sizeof 的用法及区别（含例题及解析）</a></li></ul><h2 id="运算符优先级">运算符优先级</h2><ul><li><a href="https://blog.csdn.net/yuliying/article/details/72898132">C语言运算符优先级（超详细）_yuliying的专栏-CSDN博客_运算符优先级</a></li></ul><h2 id="if">if</h2><ul><li><a href="https://blog.csdn.net/ithomer/article/details/5017929">[C/C++] 为什么把常量写在 == 运算符的左边</a></li><li><a href="https://blog.csdn.net/qq_41452267/article/details/105264542">C++ &amp;、&amp;&amp;、 |、|| 、|=、?: 逻辑运算符用法</a></li><li><a href="https://blog.csdn.net/weixin_44153896/article/details/108217579"><font color=Red>C语言中if(a)；if(!a)；if(a!=0)；if(a==0)有什么区别</font></a></li></ul><h2 id="switch">switch</h2><ul><li><a href="https://www.runoob.com/cplusplus/cpp-switch.html">C++ switch 语句</a></li></ul><h2 id="for">for</h2><ul><li><a href="https://blog.csdn.net/chenguigan/article/details/102637747">C语言的for循环中i++和++i的关系</a></li></ul><h2 id="extern">extern</h2><ul><li><a href="https://www.toutiao.com/i7028025947727217160/">C++是如何调用C接口的？</a></li><li><a href="https://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777431.html">C/C++中extern关键字详解</a></li></ul><h2 id="union">union</h2><ul><li><a href="http://c.biancheng.net/view/2035.html">C语言共用体（C语言union用法）详解</a></li></ul><h2 id="位域">位域</h2><ul><li><a href="https://www.cnblogs.com/zlcxbb/p/6803059.html">C/C++ 位域知识小结</a></li><li><a href="https://www.runoob.com/cprogramming/c-bit-fields.html">C 位域</a></li></ul><h2 id="数组">数组</h2><ul><li><a href="https://blog.csdn.net/qq_41574298/article/details/108873959">C/C++ 关于一维或二维数组首地址表示含义</a></li><li><a href="http://c.biancheng.net/view/2022.html">C语言二维数组指针（指向二维数组的指针）详解</a></li><li><a href="https://blog.csdn.net/qq_41574298/article/details/108873959">C/C++ 关于一维或二维数组首地址表示含义</a></li><li><a href="https://blog.csdn.net/qq_38325803/article/details/102751865">数组和指针绝不等价，数组是另外一种类型</a></li><li><a href="http://m.biancheng.net/view/227.html">二维数组指针表示，C语言指针引用二维数组详解</a></li></ul><h2 id="引用">引用</h2><ul><li><a href="https://blog.csdn.net/Amber_technology/article/details/105020482">C++引用、取地址符</a></li></ul><h2 id="指针">指针</h2><ul><li><a href="http://c.biancheng.net/view/1991.html">C语言指针变量的定义和使用（精华）</a></li><li><a href="https://blog.csdn.net/qq_43205256/article/details/123097791">第九章 指针_只需一招，彻底攻克C语言指针，再复杂的指针都不怕</a></li><li><a href="https://mp.weixin.qq.com/s/t7vomHGTMJ179XTmuJjDqQ">看完还不会指针，锤自己！</a></li></ul><h2 id="函数">函数</h2><ul><li><p><a href="https://blog.csdn.net/qq826364410/article/details/88902027">C++函数编译原理和成员函数的实现</a></p></li><li><p><a href="http://c.biancheng.net/view/1855.html"><font color=Red>C语言return的用法详解，C语言函数返回值详解</font></a></p></li><li><p><a href="https://blog.csdn.net/K346K346/article/details/88371267">ABI 与 API 的区别</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328525009056">函数式编程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></li></ul><h3 id="回调函数">回调函数</h3><ul><li><a href="https://www.toutiao.com/i7054434692053090853">「C/C++」回调函数详解，拿捏住了</a></li><li><a href="https://mp.weixin.qq.com/s/eFYM4uOIF09t8b9tTD523A">10张图让你彻底理解回调函数</a></li><li><a href="https://mp.weixin.qq.com/s/wq2Zwpx_V9JHvC81gN4hPA">C语言回调函数，提升C技巧必备</a></li><li><a href="https://www.cnblogs.com/skynet/p/3343726.html">C++对象模型</a></li><li><a href="https://blog.csdn.net/qq_34938983/article/details/118277929">C++对象模型——Function语意学</a></li><li><a href="https://mp.weixin.qq.com/s/4mFv0IqvOS_FBEXSwg8KnQ">为什么C++中有函数指针还需要std::function？</a></li></ul><h3 id="c函数返回指针">C++函数返回指针</h3><ul><li><a href="https://www.runoob.com/cplusplus/cpp-return-pointer-from-functions.html">C++ 从函数返回指针</a></li><li><a href="https://blog.csdn.net/u013700358/article/details/100941168">关于C++函数返回指针的情况</a></li><li><a href="https://blog.csdn.net/gogokongyin/article/details/51472062">函数返回局部变量问题</a></li><li><a href="https://www.runoob.com/w3cnote/cpp-return-array.html">C++ 怎样让函数返回数组</a></li></ul><h2 id="class">Class</h2><ul><li><a href="http://c.biancheng.net/view/9442.html">面向对象究竟是什么鬼？该如何理解？</a></li><li><a href="https://mp.weixin.qq.com/s/93Z1QX5cMsN6888i8KFjWA">漫画 | 因为用了C语言，Linux内核代码一团糟</a></li><li><a href="https://mp.weixin.qq.com/s/2ivQ9hcRvZnhk89jzAppSg">C语言：春节回家过年，我发现只有我没有对象！</a></li><li><a href="https://kb.cnblogs.com/page/129490/">UML类图几种关系的总结</a></li></ul><h3 id="conststatic">const、static</h3><ul><li><a href="https://blog.csdn.net/weixin_43644231/article/details/88769163">关于C++ 类中数据成员在定义时初始化问题。</a></li><li><a href="http://c.biancheng.net/view/2223.html">初始化const成员变量</a></li><li><a href="https://www.runoob.com/w3cnote/cpp-static-const.html">C++ static、const 和 static const 类型成员变量声明以及初始化</a></li><li><a href="https://blog.csdn.net/FreeApe/article/details/50979425">C/C++-static函数，static成员函数，static变量，static成员变量 再来理一理</a></li><li><a href="https://www.cnblogs.com/hustfeiji/articles/5168529.html">C++ static、const和static const 以及它们的初始化（转） - hustfeiji - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/m0_37433111/article/details/115342523">C++中static变量的初始化</a></li><li><a href="http://c.biancheng.net/view/7644.html">C++ const常量在多文件编程中的3种用法</a></li><li><a href="http://c.biancheng.net/view/2230.html">C++ const成员变量和成员函数（常成员函数）</a></li><li><a href="https://blog.csdn.net/QQrenzai/article/details/49716515"><font color=Red>C/C++语法高阶：const的应用，const在类中的体现</font></a></li></ul><h3 id="默认初始化和值初始化">默认初始化和值初始化</h3><ul><li><a href="https://www.cnblogs.com/FengZeng666/p/9276618.html"><font color=Red>C++ 变量的默认初始化和值初始化</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/350008529">注意了！C++默认初始化与值初始化的这个细节，千万不要忽视！</a></li><li><a href="https://blog.csdn.net/xiazhiyiyun/article/details/52551359">C++基础 内置类型和类类型的默认初始化和值初始化</a></li><li><a href="https://www.coder.work/article/30481">c++ - 是否需要在头文件中定义初始化列表？</a></li><li><a href="https://blog.csdn.net/Lanyan9/article/details/123316610">C/C++中局部/全局变量初始值或默认值问题</a></li></ul><h3 id="构造函数">构造函数</h3><ul><li><p><a href="https://www.cnblogs.com/xiaoniu-666/p/9491897.html">C++ 对象实例化（转）</a></p></li><li><p><a href="https://www.cnblogs.com/gklovexixi/p/5814626.html">C++的默认构造函数与构造函数</a></p></li><li><p><a href="https://blog.csdn.net/qq_40024275/article/details/100528201"><font color=Red>【C/C++】构造函数调用次数</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_45740212/article/details/117621845">C++ 构造函数详解</a></p></li><li><p><a href="https://blog.csdn.net/TABE_/article/details/116714304">C++中的五种构造函数</a></p></li><li><p><a href="https://www.51cto.com/article/698838.html">Part2二、构造/析构/赋值运算-Effective C++ 高阶笔记</a></p></li><li><p><a href="https://www.toutiao.com/article/7162493227524702724"><font color=Red>解密C++ 构造函数</font></a></p></li><li><p><a href="https://www.cnblogs.com/lsgxeva/p/7668200.html"><font color=Red>c++ 类的默认八种函数 - lsgxeva - 博客园 (cnblogs.com)</font></a></p></li><li><p><a href="https://blog.shipengx.com/archives/2eb22c6f.html">如果一个类定义了自己的拷贝构造函数、拷贝赋值运算符或者析构函数，编译器就不会为它合成移动构造函数和移动赋值运算符</a></p></li><li><p><a href="https://blog.csdn.net/cherrydreamsover/article/details/81949668"><font color=Red>C++类的六个默认成员函数_cherrydreamsover的博客-CSDN博客_c++类的6个默认成员函数</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_29344757/article/details/76037255"><font color=Red>c++的默认拷贝构造函数，从深度拷贝和浅拷贝说起</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/188311618">C++的默认拷贝构造函数，从深拷贝和浅拷贝说起 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/wangpei0522/p/4530635.html">C++调用构造函数的方式 - P.wang - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.cnblogs.com/QG-whz/p/4676481.html">C++ 合成默认构造函数的真相 - melonstreet - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/ysayk/article/details/50978974">默认构造函数和合成默认构造函数_XDMonkey-CSDN博客_合成默认构造函数</a></p></li><li><p><a href="https://blog.csdn.net/hankai1024/article/details/7947989">C++默认构造函数——深入理解_HAN Kai-CSDN博客_c++ 默认构造函数</a></p></li><li><p><a href="https://blog.csdn.net/qq_41540355/article/details/120751543">C++ override 虚析构函数 使用技巧</a></p></li></ul><h4 id="explicit-default-delete">explicit default delete</h4><ul><li><a href="https://blog.csdn.net/readyone/article/details/112371671"><font color=Red>C++ explicit关键字用法详解</font></a></li><li><a href="https://blog.csdn.net/liunan199481/article/details/85251197">c++ 隐式类型转换_一只懒虫的博客-CSDN博客_c++隐式转换</a></li><li><a href="https://blog.csdn.net/qq_35524916/article/details/58178072">C++中explicit的用法</a></li><li><a href="https://blog.csdn.net/u012333003/article/details/25299939"><font color=Red>C++中的默认函数与default和delete用法</font></a></li><li><a href="https://www.jianshu.com/p/ef66ba66916c">C++11 =default和=delete -简书(jianshu.com)</a></li><li><a href="https://blog.csdn.net/weixin_38339025/article/details/89161324">C++中的=default和=delete_FEEL的博客-CSDN博客_c++ default</a></li></ul><h4 id="初始化列表">初始化列表</h4><ul><li><a href="https://www.cnblogs.com/shijingjing07/p/5550556.html">C++ 初始化列表</a></li><li><a href="https://www.cnblogs.com/weizhixiang/p/6374430.html">C++使用初始化列表提高效率（转）： - A-祥子 - 博客园 (cnblogs.com)</a></li><li><a href="https://magodo.github.io/inheritance">2.2 在子类的构造函数中初始化基类中的成员变量</a></li><li><a href="https://zhuanlan.zhihu.com/p/106920426">C++日志（三十一）类继承时的构造函数</a></li><li><a href="https://blog.csdn.net/qq_26728227/article/details/51332970"><font color=Red>C++ 子类继承带参的父类构造函数应该怎么写</font></a></li><li><a href="https://blog.csdn.net/K346K346/article/details/81703914"><font color=Red>C++11 继承构造函数</font></a></li><li><a href="http://c.biancheng.net/view/2275.html">C++基类和派生类的构造函数</a></li><li><a href="https://blog.csdn.net/zhjixi495/article/details/103197312">为什么很多人禁用拷贝（复制）构造函数</a></li><li><a href="https://blog.csdn.net/qq_34673519/article/details/101429799">C++中为什么需要将基类的析构函数设置为虚函数</a></li><li><a href="https://blog.csdn.net/heibao111728/article/details/80814313"><font color=Red>析构函数写成virtual的好处</font></a></li><li><a href="https://blog.csdn.net/qq_38393591/article/details/108997232">C++继承 构造函数和析构函数的执行顺序</a></li></ul><h3 id="内联函数">内联函数</h3><ul><li><a href="http://c.biancheng.net/view/199.html">C++内联函数（C++ inline）详解</a></li><li><a href="http://c.biancheng.net/view/2201.html">C++ inline内联函数详解</a></li><li><a href="https://www.runoob.com/cplusplus/cpp-inline-functions.html">C++ 内联函数</a></li><li><a href="http://c.biancheng.net/cpp/biancheng/view/186.html">C++类的成员变量和成员函数</a></li></ul><h3 id="friend">friend</h3><ul><li><a href="https://blog.csdn.net/weixin_53472920/article/details/119577775"><font color=Red>C++之友元：是朋友（friend）也是破坏者</font></a></li><li><a href="http://c.biancheng.net/cpp/biancheng/view/211.html">C++ friend友元函数和友元类</a></li><li><a href="http://c.biancheng.net/view/169.html">C++友元函数和友元类（C++ friend）详解</a></li><li><a href="https://blog.csdn.net/snowsnowsnow1991/article/details/50314961#commentBox">流运算符为什么不能重载为成员函数，只能用友元函数重载</a></li></ul><h3 id="类指针成员">类指针成员</h3><ul><li><a href="http://c.biancheng.net/cpp/biancheng/view/201.html">C++ this指针详解</a></li><li><a href="https://www.cnblogs.com/lucy-lizhi/p/6551308.html">C++ 带有指针成员的类处理方式</a></li><li><a href="https://bbs.csdn.net/topics/370037865">c++ 类中指针的释放（delete）</a></li><li><a href="http://c.biancheng.net/cpp/biancheng/view/196.html">C++析构函数（Destructor）</a></li></ul><h3 id="继承多态">继承多态</h3><ul><li><a href="https://blog.csdn.net/scottly1/article/details/24354489">C++中public、protected、private的区别_SCOTT技术博客-CSDN博客_private</a></li><li><a href="https://zhuanlan.zhihu.com/p/37340242">C++ 多态 - 知乎 (zhihu.com)</a></li><li><a href="https://www.cnblogs.com/lfri/p/12722086.html">C++菱形继承问题 - Rogn - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/onlyshi/article/details/81672279">C 语言实现面向对象编程_onlyshi的专栏-CSDN博客_c 面向对象</a></li><li><a href="https://blog.csdn.net/z13653662052/article/details/89003731"><font color=Red>C语言结构体变量私有化</font></a></li></ul><h2 id="内存管理">内存管理</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/344377490"><font color=Red>深度阅读：深入 C++ 内存管理（万字长文）</font></a></li></ul><h3 id="进程结构">进程结构</h3><ul><li><a href="https://blog.csdn.net/cl_linux/article/details/80328608">Linux进程地址空间和进程的内存分布</a></li><li><a href="https://cloud.tencent.com/developer/article/1449872">认识目标文件结构 - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://www.toutiao.com/article/7198085217624687161">C++栈与堆 内存空间模型详解</a></li></ul><h4 id="代码区常量区静态区全局区堆区栈区">代码区、常量区、静态区（全局区）、堆区、栈区</h4><ul><li><a href="https://blog.csdn.net/klq6743/article/details/82535173">C语言中各变量/常量的存储模型——静态、全局、堆、栈梳理</a></li><li><a href="https://blog.csdn.net/u014470361/article/details/79297601"><font color=Red>什么是代码区、常量区、静态区（全局区）、堆区、栈区？</font></a></li></ul><h3 id="虚拟内存">虚拟内存</h3><ul><li><a href="https://juejin.cn/post/6844903507594575886">虚拟内存的那点事儿 - 掘金 (juejin.cn)</a></li></ul><h3 id="对象内存">对象内存</h3><ul><li><a href="https://blog.csdn.net/weixin_43374723/article/details/107128204">Linux 下利用 gdb 查看 C++ 对象内存分布_WavenZ的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/www_dong/article/details/115050681">c++——类内部的内存分布_www_dong的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/zcyzsy/article/details/77935651">C/C++中基本数据类型所占内存大小_ZMyths的博客-CSDN博客_c++类型大小</a></li><li><a href="https://blog.csdn.net/tmhanks/article/details/89110833"><font color=Red>GDB查看C++对象布局_tmhanks的博客-CSDN博客</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/156880783"><font color=Red>面试系列之C++的对象布局【建议收藏】 - 知乎 (zhihu.com)</font></a></li><li><a href="https://mp.weixin.qq.com/s/xTj_FLz0P3uXi-hi8jN_zA"><font color=Red>深入探究C++虚函数表——从内存的角度</font></a></li><li><a href="https://mp.weixin.qq.com/s/wlgmS5DVJF80epo7PKxOuQ">C语言各数据类型的内存映像</a></li><li><a href="https://www.cnblogs.com/zhjblogs/p/15149681.html">C++中类所占的内存大小以及成员函数的存储位置 - 北极星! - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/bryant_xw/article/details/89479480"><font color=Red>C++类大小详解</font></a></li><li><a href="https://blog.csdn.net/qfturauyls/article/details/107646050"><font color=Red>程序员应了解的那些事（10）-为什么C++中空类和空结构体大小为1？</font></a></li><li><a href="https://blog.csdn.net/feigegegegegegegeg/article/details/52613627">C++引用占用内存？_飞鸿印雪的博客-CSDN博客_c++引用占用内存吗</a></li><li><a href="https://mikeblog.top/2019/02/15/C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/">C++ 对象模型</a></li></ul><h3 id="大小端">大小端</h3><ul><li><a href="https://www.ruanyifeng.com/blog/2016/11/byte-order.html">理解字节序</a></li><li><a href="https://blog.csdn.net/u010368322/article/details/106790016">二进制读写之大端VS小端</a></li></ul><h3 id="new-delete-malloc-free">new delete malloc free</h3><ul><li><a href="https://www.jianshu.com/p/e9c2b523f297">C++ 定位（placement）new 操作符 - 简书 (jianshu.com)</a></li><li><a href="https://www.jianshu.com/p/4af119c44086">理解C++ placement语法 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/shuzishij/article/details/86574927">操作系统brk()和mmap()详解_moots-CSDN博客_brk mmap</a></li><li><a href="https://www.cnblogs.com/sxy-798013203/p/7790376.html">【 C语言指针详解 】(七）野指针 - 799 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.jianshu.com/p/c092e8c20479">野指针 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_36570733/article/details/80043321"><font color=Red>C++指针delete后还要置为null</font></a></li><li><a href="https://blog.csdn.net/u014465639/article/details/72854760"><font color=Red>C++之RAII惯用法</font></a></li></ul><h2 id="c11-新特性">C++11 新特性</h2><ul><li><p><a href="http://c.biancheng.net/cplus/11/"><font color=Red>C++11教程：C++11新特性大汇总</font></a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/cpp-11-faq/content/52.html">C++11的原生字符串-标识</a></p></li></ul><h3 id="右值引用">右值引用</h3><ul><li><a href="https://www.cnblogs.com/kekec/p/10810507.html"><font color=Red>深入理解C++右值引用</font></a></li><li><a href="https://blog.csdn.net/kakadiablo/article/details/123068336">左值和右值我的理解</a></li><li><a href="https://www.cnblogs.com/qicosmos/p/4283455.html"><font color=Red>从4行代码看右值引用</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/54050093"><font color=Red>C++右值引用 - 知乎 (zhihu.com)</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1868759"><font color=Red>理解C++右值引用和std::move-云+社区-腾讯云(tencent.com)</font></a></li><li><a href="https://www.toutiao.com/i6906371639865655816">不再困惑！一文教你读懂C++右值引用和std::move (toutiao.com)</a></li><li><a href="https://blog.csdn.net/p942005405/article/details/84644069">c++ 之 std::move 原理实现与用法总结_学之知之的博客-CSDN博客_std::move</a></li><li><a href="https://www.cnblogs.com/shadow-lr/p/14748272.html">一文带你详细介绍c++中的std::move函数 - shadow_lr - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1561361">现代C++之如何返回一个对象?</a></li></ul><h3 id="智能指针">智能指针</h3><ul><li><a href="https://blog.csdn.net/cpp_learner/article/details/118912592">C++ 智能指针 - 全部用法详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/356627164">C++智能指针：std::auto_ptr为什么被废弃 - 知乎 (zhihu.com)</a></li><li><a href="https://www.toutiao.com/article/6839870422234694156">现代 C++一文读懂智能指针</a></li><li><a href="https://zhuanlan.zhihu.com/p/63890916">智能指针auto_ptr、unique_ptr、shared_ptr区别-知乎(zhihu.com)</a></li><li><a href="https://blog.csdn.net/yj_android_develop/article/details/87983707">C++智能指针——auto_ptr详解_yj_android_develop的博客-CSDN博客_auto_ptr</a></li><li><a href="https://mp.weixin.qq.com/s/deG0GHRpz4Qgq4cLSiW6-g">C++ 共享指针四宗罪</a></li></ul><h3 id="constexpr">constexpr</h3><ul><li><a href="http://c.biancheng.net/view/7781.html">C++11 constexpr：验证是否为常量表达式（长篇神文） (biancheng.net)</a></li></ul><h3 id="stdfunction">std::function</h3><ul><li><a href="https://www.cnblogs.com/yinwei-space/p/12708871.html">C++11： std::function&lt;void()&gt; func;</a></li><li><a href="https://blog.csdn.net/k346k346/article/details/82818801">C++ 仿函数</a></li><li><a href="https://www.toutiao.com/article/7168329361840718369">C++中有函数指针，为什么还需要std::function？</a></li></ul><h3 id="lambda函数">lambda函数</h3><ul><li><a href="https://blog.csdn.net/zxm342698145/article/details/91978568">C++11 lambda函数</a></li><li><a href="https://blog.csdn.net/zxm342698145/article/details/91978568">c++新特性：lambda</a></li></ul><h3 id="模板">模板</h3><ul><li><a href="https://blog.csdn.net/xin_hen/article/details/108782175">模板为什么必须定义在头文件</a></li><li><a href="https://blog.csdn.net/l15799033407/article/details/120411311">C++中模板以及模板实例化都放在头文件</a></li><li><a href="https://www.jianshu.com/p/70ca94872418">C++类模板，你看我就够了</a></li><li><a href="https://www.cnblogs.com/qicosmos/p/4325949.html">泛化之美C++11可变模版参数的妙用</a></li><li><a href="https://cloud.tencent.com/developer/article/1701143">整理C/C++的可变参数</a></li></ul><h3 id="stl">STL</h3><ul><li><a href="https://blog.csdn.net/qq_36779888/article/details/82220997">C++STL详解</a></li><li><a href="https://www.cnblogs.com/anywei/archive/2011/10/27/2226830.html">C++中map容器的说明和使用技巧 - anywei - 博客园</a></li><li><a href="http://c.biancheng.net/view/480.html">C++ priority_queue(STL priority_queue)用法详解</a></li><li><a href="https://blog.csdn.net/sandalphon4869/article/details/105419706">C++：std::greater()、std::less()、自定义比较函数的规则</a></li><li><a href="http://c.biancheng.net/view/7230.html"><font color=Red>C++ STL无序容器（哈希容器）是什么？</font></a></li><li><a href="http://c.biancheng.net/view/3437.html"><font color=Red>哈希表（散列表）详解（包含哈希表处理冲突的方法）</font></a></li><li><a href="http://data.biancheng.net/view/85.html"><font color=Red>红黑树算法和应用(更高级的二叉查找树)</font></a></li></ul><h4 id="stl排序sort">STL排序(Sort)</h4><ul><li><a href="https://www.cnblogs.com/junbaobei/p/10776066.html">C++中sort函数使用方法 - 俊宝贝 - 博客园</a></li><li><a href="https://blog.csdn.net/qianlixiaomage/article/details/81205584">C++自带sort函数对vector容器元素进行排序</a></li><li><a href="https://blog.csdn.net/zhouxun623/article/details/49887555">C++中,结构体vector使用sort排序</a></li><li><a href="https://www.cnblogs.com/zhouxiaosong/p/5557990.html">关于C++中vector和set使用sort方法进行排序-不著人间风雨门-博客园</a></li><li><a href="https://www.cnblogs.com/helloWaston/p/4584324.html">【C++】从最简单的vector中sort用法到自定义比较函数comp后对结构体排序的sort算法 - HelloWaston - 博客园</a></li><li><a href="https://www.cnblogs.com/li-daphne/p/5525546.html">详细解说 STL 排序(Sort)</a></li><li><a href="http://www.cppblog.com/mzty/archive/2005/12/15/1770.html">详细解说 STL 排序(Sort)</a></li><li><a href="https://blog.csdn.net/weixin_36750623/article/details/92075565">STL &amp; vector： max_element、min_element</a></li><li><a href="http://m.biancheng.net/stl/algorithms/">C++ STL常用算法（排序、合并、搜索和分区）</a></li><li><a href="https://www.toutiao.com/article/7143891436965462536/">C++STL「容器」详解 （全站最详细）</a></li><li><a href="https://www.toutiao.com/article/7135719892027720232/">STL 红黑树源码分析</a></li></ul><h4 id="容器元素的深拷贝和浅拷贝">容器元素的深拷贝和浅拷贝</h4><ul><li><a href="https://cloud.tencent.com/developer/article/1868759"><font color=Red>理解C++右值引用和std::move-云+社区-腾讯云(tencent.com)</font></a></li><li><a href="https://www.cnblogs.com/Manual-Linux/p/11087903.html">容器元素的深拷贝和浅拷贝问题</a></li><li><a href="https://blog.csdn.net/weixin_41874599/article/details/91444953">c++ 中容器元素深拷贝和浅拷贝的问题</a></li><li><a href="https://www.jianshu.com/p/9d93ec48ae6a">C++STL | 容器元素浅拷贝深拷贝问题及容器共性和使用场景</a></li><li><a href="https://blog.csdn.net/earbao/article/details/44492185">vector内数据的深拷贝和浅拷贝</a></li></ul><h2 id="boost">boost</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1433313">详解BOOST库智能指针</a></li><li><a href="https://blog.csdn.net/xp178171640/article/details/105405950">面试之Boost</a></li></ul><h2 id="设计模式">设计模式</h2><ul><li><p><a href="http://c.biancheng.net/view/1317.html">软件设计模式概述 (biancheng.net)</a></p></li><li><p><a href="https://github.com/jaredtao/DesignPattern"><font color=Red>C++11实现23种设计模式</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_33854260/article/details/77398781#t4"><font color=Red>C++各类设计模式及实现详解</font></a></p></li><li><p><a href="https://www.cnblogs.com/chengjundu/p/8473564.html">C++常用设计模式（学习笔记）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/x_VnTXSkb1MAnm6WSpRh8g">经典永不过时！重温设计模式 (qq.com)</a></p></li><li><p><a href="https://www.cnblogs.com/chengjundu/p/8473564.html">C++设计模式</a></p></li><li><p><a href="https://bbs.huaweicloud.com/blogs/348717">简单工厂、工厂方法和抽象工厂之间的区别</a></p></li><li><p><a href="https://www.cnblogs.com/xiaolincoding/p/11437231.html"><font color=Red>C++ 线程安全的单例模式总结</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/232319083"><font color=Red>C++ 单例模式的模板实现 - 知乎 (zhihu.com)</font></a></p></li><li><p><a href="https://blog.csdn.net/heibao111728/article/details/80814313">析构函数写成virtual的好处</a></p></li><li><p><a href="https://www.cnblogs.com/sunchaothu/p/10389842.html"><font color=Red>C++ 单例模式总结与剖析</font></a></p></li><li><p><a href="https://www.cnblogs.com/loveis715/archive/2012/07/18/2598409.html">面试中的Singleton</a></p></li><li><p><a href="https://blog.csdn.net/janeqi1987/article/details/103671600">奇异递归模板模式(CRTP: Curiously Recurring Template Pattern)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/142407249">Design Patterns With C++（八）CRTP（上）</a></p></li><li><p><a href="https://blog.csdn.net/lihao21/article/details/47610309"><font color=Red>编译防火墙——C++的Pimpl惯用法解析</font></a></p></li><li><p><a href="https://refactoringguru.cn/design-patterns/command">命令模式</a></p></li><li><p><a href="https://blog.csdn.net/nzdwancgb/article/details/120377588"><font color=Red>软件架构风格 仓库风格</font></a></p></li></ul><h2 id="file">file</h2><ul><li><a href="https://www.cjavapy.com/article/1835/">C++ File文件处理 删除文件和文件夹目录</a></li></ul><h2 id="time">time</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1735036">C++获取当前系统时间并格式化输出 - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://www.jianshu.com/p/032da8113be5">C/C++时间函数(Linux) - 简书 (jianshu.com)</a></li></ul><h2 id="进度条">进度条</h2><ul><li><a href="https://mp.weixin.qq.com/s/dQ907HjxEq8sZXkHx0dPkQ">教你在 Linux 上写一个进度条小程序</a></li><li><a href="https://www.cnblogs.com/cnjavahome/p/8893813.html">Linux、Windows 和 Mac 中的换行符对比</a></li></ul><h2 id="缓存">缓存</h2><ul><li><a href="https://blog.csdn.net/irean_lau/article/details/51395515">redis+mysql数据同步（协同）C/C++实现 原</a></li><li><a href="https://www.cnblogs.com/qingyunzong/p/9004509.html">Kafka学习之路 （一）Kafka的简介</a></li><li><a href="https://mp.weixin.qq.com/s/ijek6Tdb6H3hqY2CEC917Q">从面试角度来看一看 Kafka</a></li></ul><h2 id="其他">其他</h2><ul><li><p><a href="https://www.linuxidc.com/Linux/2015-01/111501.htm">看开源代码利器—用Graphviz + CodeViz生成C/C++函数调用图(call graph)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/FQaT8DhfDYugA1CYiymqaA">求求你不要写满屏的 try...catch 了，这才是优雅的处理方式，真香！</a></p></li><li><p><a href="https://www.toutiao.com/article/7169042655157174796/">漫画 | 永不过时的编程语言终于出现了</a></p></li><li><p><a href="https://www.toutiao.com/article/7169041177684050445/">漫画：为什么C语言永不过时？</a></p></li></ul><h3 id="快捷键">快捷键</h3><ul><li><a href="https://www.cnblogs.com/nevermore/p/6936329.html">clion 快捷键 - NeverMore! - 博客园</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++多线程</title>
    <link href="/cpp/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/cpp/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程">多线程</h1><h2 id="基础">基础</h2><ul><li><a href="https://mp.weixin.qq.com/s/Z07Hc9SRfGz6n8XhFHGVyA">高并发高性能服务器是如何实现的</a></li><li><a href="https://blog.csdn.net/github_37382319/article/details/108478589">看完这篇还不懂高并发中的线程与线程池你来打我(内含20张图)</a></li><li><a href="https://mp.weixin.qq.com/s/2eetiUAtedavND8c-sQM5w">Linux 多线程全面解析</a></li><li><a href="https://www.vxbus.com/post/linux/linux-kernel-source-code-data-structure-mutex.html">带你走进Linux内核源码中最常见的数据结构之「mutex」</a></li><li><a href="https://www.cnblogs.com/chen-cs/p/13055211.html">【C++多线程】join()及注意 - Chen沉尘 - 博客园 (cnblogs.com)</a></li></ul><h3 id="pthread">pthread</h3><ul><li><p><a href="https://mp.weixin.qq.com/s/CCzEFnyxXKp6a1iVSBD78w">写给大忙人看的进程和线程</a></p></li><li><p><a href="https://www.cnblogs.com/yjboke/p/8911220.html">详解多线程</a></p></li><li><p><a href="https://blog.csdn.net/w903414/article/details/110005612"><font color=Red>【Linux】多线程详解，一篇文章彻底搞懂多线程中各个难点！！！</font></a></p></li><li><p><a href="https://www.cnblogs.com/yinbiao/p/11190336.html"><font color=Red>【Linux】多线程同步的四种方式 - Y先森0.0 - 博客园 (cnblogs.com)</font></a></p></li><li><p><a href="https://blog.csdn.net/guoping16/article/details/6584043"><font color=Red>信号量函数（semget、semop、semctl）及其范例</font></a></p></li><li><p><a href="https://www.toutiao.com/article/6978007709220291111">「linux」深入理解RCU核心原理</a></p></li><li><p><a href="https://www.toutiao.com/article/7106767459059089923"><font color=Red>linux c/c++开发：多线程并发锁：互斥锁、自旋锁、原子操作、CAS</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/QITWTjR1T9eVBwPJ6sGZBA">详解Linux多线程中互斥锁、读写锁、自旋锁、条件变量、信号量</a></p></li><li><p><a href="https://blog.csdn.net/hairetz/article/details/4535920"><font color=Red>pthread_cond_wait()用法分析</font></a></p></li><li><p><a href="https://blog.csdn.net/wteruiycbqqvwt/article/details/99707580"><font color=Red>linux对线程等待和唤醒操作（pthread_cond_timedwait 详解）</font></a></p></li></ul><h4 id="信号量">信号量</h4><ul><li><a href="https://www.toutiao.com/article/7159838260959740457/">深入讲解读写信号量（上）</a></li><li><a href="https://www.toutiao.com/article/7159867610317390372">深入讲解读写信号量（下）</a></li></ul><h3 id="c11多线程">C++11多线程</h3><ul><li><p><a href="https://www.toutiao.com/article/7153230059011686948/">从无栈协程到 C++异步框架</a></p></li><li><p><a href="https://blog.csdn.net/fanyun_01/article/details/100178104">c++11中关于std::thread的join函数详解_fanyun的博客-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/haippy/p/3284540.html">C++11 并发指南系列 - Haippy - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.cnblogs.com/haippy/p/3252041.html">C++11 并发指南五(std::condition_variable 详解) - Haippy - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/feikudai8460/article/details/109604690">C++11条件变量：notify_one()与notify_all()的区别_feikudai8460的博客-CSDN博客_c++ notify_one</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/WsYEvRays-l58KAOwwzP-w">C++11是如何封装Thread库的？</a></p></li></ul><h3 id="死锁">死锁</h3><ul><li><a href="https://www.toutiao.com/article/7131231200097862158">手把手带你实现一个死锁检测组件</a></li><li><a href="https://blog.csdn.net/qq_26553393/article/details/122281044">2.4.2 死锁的处理策略-预防死锁（破坏互斥条件、破坏不可剥夺条件、破坏请求和保持条件、破坏循环等待条件）</a></li><li><a href="https://blog.csdn.net/zsiming/article/details/126695393"><font color=Red>Linux下排除死锁详细教程（基于C++11、GDB）</font></a></li><li><a href="https://blog.csdn.net/Ivan804638781/article/details/100740857">【开发工具】【lockdep】Linux内核死锁检测工具（lockdep）的使用</a></li><li><a href="https://mp.weixin.qq.com/s/Jjio-cNapfUMBqEOefi1og">手画图解 | 关于死锁，面试的一切都在这里了</a></li><li><a href="https://zhuanlan.zhihu.com/p/75416381"><font color=Red>内存泄漏检测工具valgrind神器</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/446932523"><font color=Red>多线程检测工具ThreadSanitizer 与 Helgrind 的使用</font></a></li></ul><h2 id="线程池">线程池</h2><ul><li><a href="https://blog.csdn.net/MOU_IT/article/details/88712090">C++实现线程池_蓬莱道人的博客-CSDN博客_c++实现线程池</a></li><li><a href="https://www.cnblogs.com/oloroso/p/5881863.html">C++11的简单线程池代码阅读-乌合之众-博客园(cnblogs.com)</a></li><li><a href="https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/"><font color=Red>C++ 线程池</font></a></li><li><a href="https://blog.csdn.net/zzhongcy/article/details/89453370">c++11：线程池，boost threadpool、thread_group example_zzhongcy的专栏-CSDN博客_boost 线程池</a></li><li><a href="https://www.cnblogs.com/lidabo/p/3328402.html">线程池原理及创建（C++实现）- DoubleLi -博客园(cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/cpper-kaixuan/articles/3640485.html">C++线程池原理及创建（转）- cpper-kaixuan -博客园(cnblogs.com)</a></li><li><a href="https://www.jb51.net/article/75295.htm">深入解析C++编程中线程池的使用_C 语言_脚本之家 (jb51.net)深入解析C++编程中线程池的使用_C 语言_脚本之家 (jb51.net)</a></li><li><a href="https://blog.csdn.net/qq_36359022/article/details/78796784">线程池原理及C语言实现线程池</a></li><li><a href="https://blog.csdn.net/robothj/article/details/80172287">c++/c实现线程池</a></li><li><a href="https://github.com/lzpong/threadpool/blob/master/Main.cpp">threadpool/Main.cpp at master · lzpong/threadpool (github.com)</a></li><li><a href="https://www.cnblogs.com/lzpong/p/6397997.html">基于C++11的线程池(threadpool),简洁且可以带任意多的参数 - _Ong - 博客园 (cnblogs.com)</a></li></ul><h2 id="数据库连接池">数据库连接池</h2><ul><li><a href="https://blog.csdn.net/weixin_43825537/article/details/104516274">C++数据库连接池的设计与实现_暮明已逝的博客-CSDN博客_c++数据库连接池</a></li><li><a href="https://www.toutiao.com/i7004734534830801420/">基于c++的数据库连接池的实现与理解(toutiao.com)</a></li></ul><h2 id="其他">其他</h2><ul><li><p><a href="https://www.coder.work/article/1954428">c++ - 执行并行任务而无需等待C++中的结果</a></p></li><li><p><a href="https://github.com/seanmiddleditch/jobxx" class="uri">https://github.com/seanmiddleditch/jobxx</a></p></li><li><p><a href="https://github.com/cdwfs/cds_job" class="uri">https://github.com/cdwfs/cds_job</a></p></li><li><p><a href="https://github.com/delscorcho/basic-job-system" class="uri">https://github.com/delscorcho/basic-job-system</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++进阶指南</title>
    <link href="/cpp/C++%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
    <url>/cpp/C++%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="c进阶指南">C++进阶指南</h1><h2 id="api参考手册">API参考手册</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1983531">推荐两个C++API参考网站</a></li><li><a href="https://www.apiref.com/cpp-zh/index.html">中文版C++ 参考手册</a></li><li><a href="https://cplusplus.com/" class="uri">https://cplusplus.com/</a></li></ul><h2 id="学习线路">学习线路</h2><ul><li><a href="https://mp.weixin.qq.com/s/PTglU70SGKrDsyE4QiKoAA">几张图片，告诉你C++要学什么</a></li><li><a href="https://interview.huihut.com/#/">interview (huihut.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/114311142">interview -📚C/C++技术面试基础知识总结（一）</a></li><li><a href="https://zhuanlan.zhihu.com/p/38431524">程序员如何写一份更好的简历 - 知乎 (zhihu.com)</a></li><li><a href="https://www.nowcoder.com/tutorial/93/8ba2828006dd42879f3a9029eabde9f1">【C++工程师面试宝典】学习说明_互联网校招面试真题面经汇总_牛客网(nowcoder.com)</a></li><li><a href="https://blog.codekissyoung.com/" class="uri">https://blog.codekissyoung.com/</a></li></ul><h3 id="cc学习后端开发进阶指南">C/C++学习，后端开发进阶指南</h3><ul><li><p><a href="https://github.com/balloonwj/CppGuide">C/C++学习，后端开发进阶指南。</a></p></li><li><p><a href="https://balloonwj.github.io/cpp-guide-web/">在线阅读站点1：https://balloonwj.github.io/cpp-guide-web/</a></p></li><li><p><a href="http://balloonwj.gitee.io/cpp-guide-web/">在线阅读站点2: http://balloonwj.gitee.io/cpp-guide-web/</a></p></li><li><p><a href="http://101.37.25.166/blog/">备份站点：http://101.37.25.166/blog/</a></p></li><li><p><a href="https://github.com/balloonwj/CppGuide" class="uri">https://github.com/balloonwj/CppGuide</a></p></li><li><p><a href="https://www.cnblogs.com/yjd_hycf_space/p/7495640.html">C++经典面试题（最全，面中率最高）</a></p></li><li><p><a href="https://www.cnblogs.com/nancymake/p/6516933.html">linux C/C++服务器后台开发面试题总结</a></p></li><li><p><a href="https://www.toutiao.com/i7006207567915450892/">linux高性能服务器开发十大必须掌握的核心技术(toutiao.com)</a></p></li><li><p><a href="https://zhaoyang.blog.csdn.net/article/details/102717590"><font color=Red>C/C++后端-服务端开发技术博文分类汇总</font></a></p></li><li><p><a href="https://www.toutiao.com/i7009166988941591079/">对标腾讯，阿里，字节的C/C++/Linux后台服务器开发技术体系 (toutiao.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/3427b2bee081">Linux后台C++学习之路 &amp; 面经知识点收录</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt教程</title>
    <link href="/cpp/Qt%E6%95%99%E7%A8%8B/"/>
    <url>/cpp/Qt%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="qt教程">Qt教程</h1><h2 id="qt教程-1">QT教程</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/345452320">Qt进阶之路-目录</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/42824849">万丈高楼平地起：学习Qt5</a></p></li><li><p><a href="https://www.qtdoc.cn/BookInfo.html">Qt中文文档</a></p></li><li><p><a href="https://github.com/QtDocumentCN/QtDocumentCN" class="uri">https://github.com/QtDocumentCN/QtDocumentCN</a></p></li><li><p><a href="http://c.biancheng.net/qt/">Qt教程，Qt5编程入门教程（非常详细）</a></p></li><li><p><a href="https://www.bookstack.cn/read/qt-study-road-2/ddf84b4ac149953f.md">Qt 学习之路 2</a></p></li><li><p><a href="https://qtguide.ustclug.org/">Qt 编程指南 - USTC LUG</a></p></li></ul><h2 id="qt宏">QT宏</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/43598693">QT相关的宏</a></li></ul><h2 id="qobject及其子类都禁用了复制构造函数和赋值运算符">QObject及其子类都禁用了复制构造函数和赋值运算符</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/43522035"><font color=Red>Qt 中的对象模型（Object Model）</font></a></li><li><a href="https://blog.csdn.net/u012230798/article/details/97014395"><font color=Red>QObject的拷贝构造函数与赋值运算符</font></a></li></ul><h2 id="元对象系统">元对象系统</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/42824849"><font color=Red>Qt中的元对象系统（Meta-Object System）</font></a></li><li><a href="https://blog.csdn.net/ayang1986/article/details/76176233">QT中元对象系统（MOC）原理</a></li><li><a href="http://c.biancheng.net/view/1826.html">Qt元对象和属性系统详解</a></li><li><a href="https://blog.csdn.net/qq_33663749/article/details/53006073">Qt MetaObject 详解之二:QMeta数据以及数据结构信息</a></li><li><a href="https://zhuanlan.zhihu.com/p/61303678">Qt中的元对象系统（Meta-Object System）</a></li><li><a href="https://blog.csdn.net/hp_cpp/article/details/105933851">Qt之自定义属性Q_PROPERTY使用的一些体会</a></li><li><a href="https://www.programminghunter.com/article/5445110702/"><font color=Red>Qt5之反射机制（内省）</font></a></li><li><a href="https://stackoverflow.com/questions/22044737/when-where-and-why-use-namespace-when-registering-custom-types-for-qt">When, where and why use namespace when registering custom types for Qt</a></li></ul><h2 id="对象树">对象树</h2><ul><li><a href="https://www.toutiao.com/article/7087434391818895887">Qt-对象树 ObjectTree</a></li><li><a href="https://blog.csdn.net/weixin_44743991/article/details/120183305">简单理解Qt中的对象树</a></li><li><a href="https://zhuanlan.zhihu.com/p/150178215">Qt5 超好用的"deleteLater()"</a></li></ul><h2 id="事件循环">事件循环</h2><ul><li><a href="https://blog.csdn.net/fanyun_01/article/details/79604344">Qt事件驱动机制原理及源码剖析</a></li><li><a href="https://zhuanlan.zhihu.com/p/72758194"><font color=Red>Qt实用技能3-理解事件循环</font></a></li></ul><h2 id="多线程和并发">多线程和并发</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/53270619"><font color=Red>Qt 多线程编程之敲开 QThread 类的大门</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/55081052"><font color=Red>Qt 多线程编程之降低线程的开销</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/43598693"><font color=Red>QObject 类的成员变量是否为其子对象问题</font></a></li><li><a href="https://blog.csdn.net/y396397735/article/details/78637634">QT线程池的使用：QThreadPool类和QRunnable类</a></li><li><a href="https://blog.csdn.net/zyhse/article/details/109517671">QThreadPool线程池的原理与使用</a></li><li><a href="https://blog.csdn.net/fghler/article/details/109444779">QtConcurrent多线程</a></li><li><a href="https://runebook.dev/zh-CN/docs/qt/qtconcurrenttask">QtConcurrent::task为在单独的线程中运行任务提供了一个替代接口</a></li><li><a href="https://blog.csdn.net/gongjianbo1992/article/details/106957888">QFuture的使用：多线程与进度条</a></li><li><a href="https://blog.csdn.net/flyoxs/article/details/54617342">QWaitCondition 的正确使用方法</a></li></ul><h2 id="qt-sqlite">Qt sqlite</h2><ul><li><a href="https://blog.csdn.net/frieryumao/article/details/93871774">QT实现sqlite数据库连接池</a></li><li><a href="https://blog.csdn.net/redchairman/article/details/111600129">QT数据库连接池</a></li><li><a href="https://blog.csdn.net/Think88666/article/details/85239987">Qt数据库之数据库连接池</a></li></ul><h2 id="资源系统">资源系统</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/60457016"><font color=Red>Qt 资源系统（Qt Resource System）</font></a></li><li><a href="https://blog.csdn.net/weixin_30731287/article/details/95144714">Qt 相对路径 绝对路径</a></li></ul><h2 id="数据类型转换">数据类型转换</h2><ul><li><a href="https://www.jianshu.com/p/42d343236406">QT-语法-string和qstring转换</a></li><li><a href="https://blog.csdn.net/qq_29187197/article/details/85457078">QT与C++数据类型转换</a></li></ul><h2 id="指针">指针</h2><ul><li><a href="https://blog.csdn.net/qq_43517257/article/details/120396856">QPointer简介</a></li><li><a href="https://www.toutiao.com/article/7087065119888441895">Qt-QPointer的使用</a></li><li><a href="https://blog.csdn.net/zjy900507/article/details/109232509">QT 学习：QT中的3种指针介绍与使用</a></li><li><a href="https://blog.csdn.net/liyuanbhu/article/details/77825655">Qt 中的智能指针</a></li><li><a href="https://blog.csdn.net/luoyayun361/article/details/90255944">Qt智能指针QSharedPointer</a></li></ul><h2 id="网络">网络</h2><ul><li><a href="https://www.jianshu.com/p/777a866a1fed">qt中post和get请求</a></li><li><a href="https://stackoverflow.com/questions/13302236/qt-simple-post-request">Qt Simple Post Request</a></li><li><a href="https://stackoverflow.com/questions/15774386/create-qt-thread-event-loop">create qt thread event loop</a></li><li><a href="https://github.com/realwujing/qt-learning/tree/master/network">post请求不阻塞主线程</a></li></ul><h2 id="qvariant">QVariant</h2><ul><li><a href="https://blog.csdn.net/woniulx2014/article/details/82752835">Qt之QVariant用法</a></li><li><a href="https://zhuanlan.zhihu.com/p/73726452">经典的QVariant设计之道</a></li><li><a href="https://blog.csdn.net/qq_33485434/article/details/78499930"><font color=Red>qRegisterMetaType的使用</font></a></li><li><a href="https://blog.csdn.net/xiaopei_yan/article/details/81410092">QVariant的用法</a></li></ul><h2 id="qstring">QString</h2><ul><li><a href="https://www.toutiao.com/article/7163987601668915753">Qt开发——字符串详解</a></li></ul><h2 id="qt信号与槽函数">qt信号与槽函数</h2><ul><li><a href="https://blog.csdn.net/hyongilfmmm/article/details/83015045">Qt信号与槽原理</a></li><li><a href="https://blog.csdn.net/business122/article/details/80988373">QT核心：signal-slot 信号/槽机制 最详细最通俗易懂的一篇</a></li><li><a href="https://jaredtao.github.io/2019/09/02/%E7%8E%A9%E8%BD%ACQt(8)-%E6%8E%8C%E6%8F%A1%E4%BF%A1%E5%8F%B7%E6%A7%BD%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%82/"><font color=Red>玩转Qt(8)-掌握信号槽使用细节</font></a></li></ul><h2 id="q指针-d指针">q指针 d指针</h2><ul><li><a href="https://blog.csdn.net/u010155023/article/details/50826102">Qt中Q_D宏及d指针</a></li><li><a href="https://www.toutiao.com/article/7087771469484245537">Qt-D指针和Q指针及使用</a></li><li><a href="https://blog.csdn.net/weixin_44399394/article/details/109898445"><font color=Red>【Qt】Qt源码学习（一）：Q_D和Q_Q，简称d指针</font></a></li><li><a href="https://blog.csdn.net/weixin_39568531/article/details/118069591"><font color=Red>Qt ： d指针和q指针？</font></a></li><li><a href="http://go2study.xyz/?p=48"><font color=Red>Qt中使用Q指针和D指针 delete</font></a></li><li><a href="https://blog.csdn.net/a844651990/article/details/84502832">Qt源码之d指针分析（QObject，QObjectPrivate）</a></li><li><a href="https://blog.csdn.net/wangpengk7788/article/details/56496003">读QT5.7源码（七）QObjectData 和 QObjectPrivate</a></li></ul><h2 id="qt定时器">Qt定时器</h2><ul><li><a href="http://www.360doc.com/content/20/0919/11/64183406_936529372.shtml">Qt中定时器使用的两种方法</a></li><li><a href="https://zhuanlan.zhihu.com/p/25937664">Qt中定时任务实现的方式</a></li><li><a href="https://github.com/OldFrostDragon/JenkinsPlugin/blob/master/jenkinsjob.h">jenkinsjob.h</a></li></ul><h2 id="qdbus">qdbus</h2><ul><li><p><a href="https://dbus.freedesktop.org/doc/dbus-specification.html"><font color=Red>https://dbus.freedesktop.org/doc/dbus-specification.html</font></a></p></li><li><p><a href="https://blog.csdn.net/baidu_32237719/article/details/105749173"><font color=Red>D-Bus 详解：从编译到应用</font></a></p></li><li><p><a href="https://www.cnblogs.com/chendeqiang/p/12861670.html">QtDBus快速入门</a></p></li><li><p><a href="https://blog.csdn.net/zhaominyong/article/details/119103881">QT D-Bus 复杂参数(自定义)传递</a></p></li><li><p><a href="https://www.coder.work/article/6674986">dbus - 为 Qt D-Bus 内省(introspection)定义枚举自定义类型</a></p></li><li><p><a href="https://blog.csdn.net/shallon_luo/article/details/6153318">QT 4.7 DBUS Binding如何支持自定义数据类型的传输（一）</a></p></li><li><p><a href="https://blog.csdn.net/jiangwei0512/article/details/115150048">【Linux应用】D-BUS介绍</a></p></li><li><p><a href="https://thebigdoc.readthedocs.io/en/latest/dbus/system-dbus.html">D-Bus系列之权限配置文件</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30551963/article/details/96773993">dbus 消息和消息总线实例讲解-一</a></p></li><li><p><a href="https://blog.csdn.net/adlindary/article/details/80167840">基于GDBus技术的IPC通信编程详解(1)</a></p></li><li><p><a href="http://www.fmddlmyy.cn/text52.html">dbus实例讲解（二上）：消息和消息总线</a></p></li><li><p><a href="https://www.cnblogs.com/javalinux/p/15042929.html">dbus通信与接口介绍</a></p></li><li><p><a href="https://www.cnblogs.com/hzl6255/p/4096260.html"><font color=Red>DBus介绍</font></a></p></li><li><p><a href="https://blog.csdn.net/f110300641/article/details/106822511">DBus API的使用(讲的很清晰，底层概念，基本api)</a></p></li><li><p><a href="https://blog.csdn.net/czhzasui/article/details/81071383"><font color=Red>QtDBus总结</font></a></p></li><li><p><a href="https://blog.actorsfit.com/a?ID=00700-4d790509-19d2-4c83-a189-79b458826e1c"><font color=Red>QtDBus summary</font></a></p></li><li><p><a href="https://blog.csdn.net/shawzg/article/details/118528785">[Qt]获取DBus方法的调用者信息</a></p></li></ul><h3 id="dbus-unix-fd">dbus unix-fd</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/133756767">通过Unix套接字传递文件描述符</a></li><li><a href="https://m.656463.com/wenda/Qt56syQLocalServerhQLocalSocketc_254">Qt 5.6使用QLocalServer和QLocalSocket传递文件描述符(Qt 5.6 Passing File Descriptors with QLocalServer and QLocalSocket)</a></li></ul><h3 id="qdbus-cmake">qdbus cmake</h3><ul><li><p><a href="https://techbase.kde.org/Development/Tutorials/D-Bus/Creating_Interfaces">cmake Development/Tutorials/D-Bus/Creating Interfaces</a></p></li><li><p><a href="https://docs.w3cub.com/qt~5.15/qtdbus-cmake-qt5-generate-dbus-interface" class="uri">https://docs.w3cub.com/qt~5.15/qtdbus-cmake-qt5-generate-dbus-interface</a></p></li><li><p><a href="https://doc.qt.io/qt-5.12/qtdbus-cmake-qt5-generate-dbus-interface.html" class="uri">https://doc.qt.io/qt-5.12/qtdbus-cmake-qt5-generate-dbus-interface.html</a></p></li><li><p><a href="https://doc.qt.io/archives/qt-5.13/qtdbus-cmake-qt5-add-dbus-adaptor.html" class="uri">https://doc.qt.io/archives/qt-5.13/qtdbus-cmake-qt5-add-dbus-adaptor.html</a></p></li><li><p><a href="https://doc.qt.io/archives/qt-5.13/search-results.html?q=qt5_add_dbus_Interface" class="uri">https://doc.qt.io/archives/qt-5.13/search-results.html?q=qt5_add_dbus_Interface</a></p></li></ul><h2 id="qmake-cmake">qmake cmake</h2><ul><li><p><a href="https://blog.csdn.net/x356982611/article/details/71169940">qmake: could not exec '/usr/lib/x86_64-linux-gnu/qt4/bin/qmake'</a></p></li><li><p><a href="https://www.cnblogs.com/xiangism/p/4621108.html">qt的moc,uic,rcc命令的使用</a></p></li><li><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html" class="uri">https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html</a></p></li><li><p><a href="https://semlanik.github.io/qtprotobuf/group__generator.html#cmake_qtprotobuf_link_target" class="uri">https://semlanik.github.io/qtprotobuf/group__generator.html#cmake_qtprotobuf_link_target</a></p></li><li><p><a href="https://semlanik.github.io/qtprotobuf/clienttutorial.html" class="uri">https://semlanik.github.io/qtprotobuf/clienttutorial.html</a></p></li><li><p><a href="https://doc.qt.io/archives/qt-5.6/cmake-manual.html" class="uri">https://doc.qt.io/archives/qt-5.6/cmake-manual.html</a></p></li><li><p><a href="https://blog.csdn.net/a844651990/article/details/82593358">QtCreator构建Cmake工程详细说明</a></p></li><li><p><a href="https://blog.csdn.net/xiajianfeng147/article/details/106707902/">CMake编译Qt程序出现undefined reference to `vtable for’”错误的解决办法</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39743893/article/details/81225240">Qt中的动态链接库编程(Q_DECL_IMPORT、Q_DECL_EXPORT)</a></p></li><li><p><a href="https://blog.csdn.net/l1216766050/article/details/83783446">undefined reference to `vtable for’”问题的解决方法</a></p></li></ul><h2 id="qt日志">qt日志</h2><ul><li><p><a href="https://www.qedev.com/linux/339315.html">在Deepin 20.1系统中qDebug()没有输出的修复方案</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> QT_LOGGING_RULES=<span class="hljs-string">&quot;*.debug=true&quot;</span><br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/gongjianbo1992/article/details/107372453">Qt使用QLoggingCategory管理打印</a></p></li><li><p><a href="https://jaredtao.github.io/2019/04/30/%E7%8E%A9%E8%BD%ACQt(2)-%E8%87%AA%E5%88%B6%E7%AE%80%E6%98%93%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"><font color=Red>玩转Qt(2)-自制简易好看的日志系统</font></a></p></li><li><p><a href="https://blog.csdn.net/u011218356/article/details/103344231">Qt::Qt Log日志模块</a></p></li><li><p><a href="https://www.cnblogs.com/linuxAndMcu/p/14716532.html"><font color=Red>Qt 自定义日志类</font></a></p></li><li><p><a href="https://github.com/realwujing/qt-log" class="uri">https://github.com/realwujing/qt-log</a></p></li><li><p><a href="https://www.codenong.com/24012108/">关于qt：qDebug不显示__FILE <strong>，</strong> LINE__</a></p></li><li><p><a href="https://blog.csdn.net/liang19890820/article/details/51839233">Qt 之 qSetMessagePattern</a></p></li><li><p><a href="https://www.csdn.net/tags/NtzaAg3sOTUyNC1ibG9n.html">Qt的qDebug打印加颜色</a></p></li><li><p><a href="https://blog.csdn.net/qq_41972382/article/details/90311102">C/C++改变终端（cout ）(printf)输出不同颜色的字体（Linux）</a></p></li></ul><h2 id="qprocess">QProcess</h2><ul><li><a href="https://whatudone.github.io/2020/05/06/QProcess%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E8%BF%9B%E7%A8%8B/">QProcess调用外部进程-实时通知下载进度并通知下载失败或完成</a></li><li><a href="https://www.cnblogs.com/lsgxeva/p/12641707.html">QProcess快速实现外部程序调用</a></li><li><a href="https://blog.csdn.net/friendbkf/article/details/49932233">QProcess：进程通信之无名管道</a></li></ul><h2 id="进程通信">进程通信</h2><ul><li><a href="https://blog.csdn.net/fangye945a/article/details/106006819">进程通信(IPC)之QLocalSocket用法</a></li><li><a href="https://whereismyanswer.com/questions/16023533/how-to-make-sure-that-readyread-signals-from-qtcpsocket-cant-be-missed">How to make sure that readyRead() signals from QTcpSocket can't be missed?</a></li><li><a href="https://stackoverflow.com/questions/16023533/how-to-make-sure-that-readyread-signals-from-qtcpsocket-cant-be-missed" class="uri">https://stackoverflow.com/questions/16023533/how-to-make-sure-that-readyread-signals-from-qtcpsocket-cant-be-missed</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/README/"/>
    <url>/cpp/README/</url>
    
    <content type="html"><![CDATA[<h1 id="cpp-learning">cpp-learning</h1><ul><li><a href="https://mp.weixin.qq.com/s/PTglU70SGKrDsyE4QiKoAA">几张图片，告诉你 C++ 要学什么</a></li><li><a href="https://github.com/GrindGold/CppGuide">C/C++学习+面试指南</a></li><li><a href="https://github.com/huihut/interview">C/C++ 技术面试基础知识总结</a></li><li><a href="https://github.com/balloonwj/CppGuide">高性能服务器开发</a></li><li><a href="thread/README.md">C++11 thread 教程</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>automake</title>
    <link href="/cpp/automake/"/>
    <url>/cpp/automake/</url>
    
    <content type="html"><![CDATA[<h1 id="automake">automake</h1><ul><li><a href="https://www.cnblogs.com/seaspring/p/13905757.html">首先要了解为什么要有autoconf，automake这类工具</a></li><li><a href="https://blog.csdn.net/cnsword/article/details/7542696#commentBox">cmake与autoconf+automake的对比</a></li><li><a href="https://www.jianshu.com/p/17e777868d6b">Automake的使用</a></li><li><a href="https://www.jianshu.com/p/3f69197f9055">解剖automake和autoconf(autoreconf)</a></li><li><a href="https://www.cnblogs.com/silvermagic/p/7665868.html">Automake使用说明</a></li><li><a href="https://www.jianshu.com/p/2f5e586c3402">Makefile.am 规则和实例详解</a></li><li><a href="https://blog.csdn.net/vevenlcf/article/details/48134313">Makefile.am 语法_梦想专栏-CSDN博客_makefile.am</a></li><li><a href="https://blog.csdn.net/weixin_38503885/article/details/110931206">makefile.am_make与makefile的区别_makefile编写_weixin_38503885的博客-CSDN博客_makefile.am</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake</title>
    <link href="/cpp/cmake/"/>
    <url>/cpp/cmake/</url>
    
    <content type="html"><![CDATA[<h1 id="cmake">CMake</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j CFLAGS=<span class="hljs-string">&quot;-O0 -g&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j12 VERBOSE=1 CXX_FLAGS=<span class="hljs-string">&quot;<span class="hljs-variable">$CXX_FLAGS</span> -g -O3 -fPIC&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p><a href="https://cmake.org/cmake/help/v3.17/guide/tutorial/index.html#adding-system-introspection-step-5" class="uri">https://cmake.org/cmake/help/v3.17/guide/tutorial/index.html#adding-system-introspection-step-5</a></p></li><li><p><a href="https://docs.w3cub.com/cmake~3.19/command/target_link_directories" class="uri">https://docs.w3cub.com/cmake~3.19/command/target_link_directories</a></p></li><li><p><a href="https://www.cnblogs.com/yinheyi/p/14968494.html">cmake 常用指令入门指南</a></p></li><li><p><a href="https://www.cnblogs.com/ybqjymy/p/13409050.html"><font color=Red>超详细的CMake教程</font></a></p></li><li><p><a href="https://aiden-dong.github.io/2019/07/20/CMake%E6%95%99%E7%A8%8B%E4%B9%8BCMake%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BA%94%E7%94%A8/"><font color=Red>CMake 教程 | CMake 从入门到应用</font></a></p></li><li><p><a href="https://www.cnblogs.com/spmt/p/12632322.html"><font color=Red>text</font>CMake简明教程(ubuntu)</a></p></li><li><p><a href="https://elloop.github.io/tools/2016-04-10/learning-cmake-2-commands"><font color=Red>【使用CMake组织C++工程】2：CMake 常用命令和变量</font></a></p></li><li><p><a href="http://www.mianshigee.com/tutorial/CMake-Cookbook/content-chapter1-1.1-chinese.md"><font color=Red>CMake菜谱（CMake Cookbook中文版）</font></a></p></li><li><p><a href="https://www.bookstack.cn/read/CMake-Cookbook/README.md"><font color=Red>CMake菜谱（CMake Cookbook中文版）</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/92928820">使用CMake构建C++项目</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j VERBOSE=1<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.cnblogs.com/lsgxeva/p/9454443.html">CMake 手册详解</a></p></li><li><p><a href="https://blog.csdn.net/KYJL888/article/details/100938384">【学习CMake】 - 如何高效使用"cmake help" ?</a></p></li><li><p><a href="https://blog.csdn.net/afei__/article/details/81201039">CMakeLists.txt语法介绍与实例演练自定义编译选项</a></p></li><li><p><a href="https://blog.csdn.net/ajianyingxiaoqinghan/article/details/70230902">CMake学习笔记（二）——CMake语法</a></p></li><li><p><a href="https://blog.csdn.net/lianshaohua/article/details/107783811">CMakeList模板(二)：编译多个工程</a></p></li><li><p><a href="https://www.cnblogs.com/xl2432/p/11225276.html">CMakeLists.txt编写常用命令 - 星星,风,阳光 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.cnblogs.com/xl2432/p/11225276.html#1-set%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC">set追加变量的值</a></p></li><li><p><a href="https://blog.csdn.net/itworld123/article/details/123862402">cmake / cmake build 如何理解</a></p></li></ul><h2 id="find_package">find_package</h2><ul><li><a href="https://blog.csdn.net/zhanghm1995/article/details/105466372"><font color=Red>“轻松搞定CMake”系列之find_package用法详解</font></a></li><li><a href="https://www.jianshu.com/p/39fc5e548310"><font color=Red>深入理解CMake(3):find_package()的使用</font></a></li><li><a href="https://blog.csdn.net/weixin_43742643/article/details/113858915">[CMake] find_package 指定路径</a></li><li><a href="https://www.jianshu.com/p/243ff97bbbc6">cmake中find_package的查找路径</a></li><li><a href="https://www.jianshu.com/p/5dc0b1bc5b62"><font color=Red>深入理解CMake(5)：find_package寻找手动编译安装的Protobuf过程分析</font></a></li><li><a href="https://cloud.tencent.com/developer/ask/87956">CMake：如果你需要指定CMAKE_MODULE_PATH，find_package（）有什么用？</a></li></ul><h2 id="pkg_check_modules-pkg_search_module">pkg_check_modules pkg_search_module</h2><ul><li><a href="https://blog.csdn.net/feccc/article/details/107160668">CMAKE查找库：find_package和pkg_check_moduls的区别</a></li></ul><h2 id="pkg-config">pkg-config</h2><ul><li><a href="https://blog.csdn.net/zxcasd11/article/details/104010621">cmake 使用pkg-config配置第三方库和头文件</a></li><li><a href="https://blog.csdn.net/zhizhengguan/article/details/111826697">cmake：pkg_check_modules</a></li><li><a href="https://zhuanlan.zhihu.com/p/417285806">使用 pkg-config 让 C++ 工程编译配置更灵活</a></li></ul><h2 id="install">install</h2><ul><li><a href="https://blog.csdn.net/qq_38410730/article/details/102837401"><font color=Red>【CMake】cmake的install指令</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/102955723">CMake之install方法的使用</a></li></ul><h2 id="uninstall">uninstall</h2><ul><li><p><a href="https://blog.csdn.net/reasonyuanrobot/article/details/106732047">卸载 make install 编译安装的软件</a></p></li><li><p><a href="https://www.zhihu.com/question/21203756">linux里用cmake安装的软件要怎么卸载？</a></p></li><li><p><a href="https://blog.csdn.net/liujiayu2/article/details/50219377">cmake Debug模式和Release模式</a></p></li><li><p><a href="https://blog.csdn.net/qazw9600/article/details/115267688">自动化构建 - cmake - 构建目标类型 - Debug，Release，RelWithDebInfo，MinSizeRel</a></p></li><li><p><a href="https://www.cxyzjd.com/article/weixin_30706507/96058094">CMake向解决方案添加源文件兼头文件</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_ad0672d60102zaho.html">cmake中in/out-source编译</a></p></li></ul><h2 id="环境变量">环境变量</h2><ul><li><p><a href="https://www.kancloud.cn/itfanr/cmake-practice/82989">七、cmake 常用变量和常用环境变量</a></p></li><li><p><a href="https://blog.csdn.net/10km/article/details/50508184">cmake:在各级子项目(目录)之间共享变量</a></p></li><li><p><a href="https://blog.csdn.net/shawzg/article/details/108593010">查看CMake变量的默认值方法</a></p></li><li><p><a href="https://blog.csdn.net/wzj_110/article/details/116110014">cmake(十七)Cmake的foreach循环和while循环</a></p></li><li><p><a href="https://blog.csdn.net/z_h_s/article/details/50699905">CMake之CMakeLists.txt编写入门</a></p></li><li><p><a href="http://qianchenglong.github.io/2015/01/29/cmake-%E6%89%93%E5%8D%B0Include%E8%B7%AF%E5%BE%84%E5%88%97%E8%A1%A8/"><font color=Red>cmake-打印Include路径列表</font></a></p></li></ul><h2 id="可见性">可见性</h2><ul><li><p><a href="https://www.bookstack.cn/read/CMake-Cookbook/content-chapter1-1.8-chinese.md">PRIVATE INTERFACE PUBLIC</a></p></li><li><p><a href="https://leimao.github.io/blog/CMake-Public-Private-Interface/" class="uri">https://leimao.github.io/blog/CMake-Public-Private-Interface/</a></p></li><li><p><a href="https://ravenxrz.ink/archives/e40194d1.html">cmake 之 PUBLIC|PRIVATE|INTERFACE 关键字</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/82244559"><font color=Red>cmake：target_** 中的 PUBLIC，PRIVATE，INTERFACE</font></a></p></li><li><p><a href="https://its201.com/article/znsoft/119035578">target_link_libraries命令 PRIVATE|PUBLIC|INTERFACE的作用</a></p></li><li><p><a href="https://www.bookstack.cn/read/CMake-Cookbook/content-chapter7-7.7-chinese.md">CMake可以使用Graphviz图形可视化软件(http://www.graphviz.org )生成项目的依赖关系图:</a></p></li><li><p><a href="https://blog.csdn.net/qq_28584889/article/details/97758450">cmake：使用execute_process调用shell命令或脚本</a></p></li></ul><h2 id="测试">测试</h2><ul><li><a href="https://paul.pub/gtest-and-coverage/">C++语言的单元测试与代码覆盖率</a></li><li><a href="https://www.codeleading.com/article/93614362313/">Gtest集成Lcov代码覆盖率测试</a></li><li><a href="https://www.jianshu.com/p/2d3c2c44449a">使用 Google Test 测试框架</a></li><li><a href="https://liitdar.blog.csdn.net/article/details/85712973">GoogleTest测试框架介绍（一）</a></li><li><a href="https://blog.csdn.net/boy854456187/article/details/117165221">Ubuntu Google test 单元测试</a></li></ul><h2 id="cpack">cpack</h2><ul><li><a href="https://blog.csdn.net/rangfei/article/details/122817575">cmake(12)：使用cpack生成DEB二进制文件</a></li><li><a href="https://www.cnblogs.com/mxnote/articles/16816354.html">将工程使用CPack工具打包成为一个deb包</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake编译链接参数</title>
    <link href="/cpp/cmake%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0/"/>
    <url>/cpp/cmake%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cmake编译链接参数">cmake编译链接参数</h1><h2 id="cmake编译链接参数-1">cmake编译链接参数</h2><ul><li><p><a href="https://blog.51cto.com/u_15064646/3462077">cmake编译选项</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/513148985">GCC编译选项参数</a></p></li><li><p><a href="https://blog.51cto.com/u_15064646/3462077">添加-O0 -g，生成gdb的调试信息和不进行代码优化</a></p></li><li><p><a href="https://elloop.github.io/tools/2016-04-10/learning-cmake-2-commands">【使用CMake组织C++工程】2：调试包不优化</a></p></li><li><p><a href="https://blog.csdn.net/sandalphon4869/article/details/102503224">CMake解决c++11的phread库问题：undefined reference to `pthread_create’</a></p></li><li><p><a href="https://www.jianshu.com/p/10bf5d27dcfc">cmake编译缺失pthread_create等thread库解决方案</a></p></li><li><p><a href="http://blog.chinaunix.net/uid-69906223-id-5817313.html">gcc -lpthread和gcc -pthread的区别</a></p></li><li><p><a href="https://www.5axxw.com/questions/content/ratnvg">CMake: link options</a></p></li><li><p><a href="https://www.dovov.com/cmakecmakelists-txtldflags.html">CMake：如何在CMakeLists.txt中设置LDFLAGS？</a></p></li><li><p><a href="https://blog.csdn.net/dongjideyu/article/details/79267683">CMAKE 中　add_definitions的用法．</a></p></li><li><p><a href="https://blog.csdn.net/10km/article/details/51731959">cmake:设置编译选项的讲究(add_compile_options和CMAKE_CXX_FLAGS的区别)</a></p></li><li><p><a href="https://blog.csdn.net/fb_941219/article/details/88638503">ubuntu16.04cmake、gcc/g++版本更换</a></p></li></ul><h2 id="dynamic-code-analysis">Dynamic code analysis</h2><ul><li><a href="https://www.cnblogs.com/gladiatorplus/p/14437059.html">cmake 内存泄露检查asan</a></li><li><a href="https://www.jetbrains.com/help/clion/profiling-tools.html">动态代码分析 Clion</a></li><li><a href="https://blog.csdn.net/register_k/article/details/120319834">libasan使用和遇到的问题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gcc</title>
    <link href="/cpp/gcc/"/>
    <url>/cpp/gcc/</url>
    
    <content type="html"><![CDATA[<h1 id="gcc">gcc</h1><h2 id="gcc-1">gcc</h2><ul><li><p><a href="http://c.biancheng.net/view/679.html">GCC的组成部分以及使用到的软件</a></p></li><li><p><a href="http://c.biancheng.net/view/7936.html">gcc和g++是什么，有什么区别？</a></p></li><li><p><a href="https://docs.oracle.com/cd/E19205-01/820-1214/bkacs/index.html">使用 C++ 编译器选项</a></p></li><li><p><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html">GCC 参数详解</a></p></li><li><p><a href="https://blog.csdn.net/chosen0ne/article/details/7210946">linux下C include搜索的路径_娄振林专栏-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/bigfi/p/9487427.html">linux下C/C++编译时系统搜索 include 和 链接库 文件路径的指定</a></p></li><li><p><a href="https://blog.csdn.net/u014618114/article/details/103230906">gcc编译链接头文件和库文件</a></p></li><li><p><a href="https://www.jianshu.com/p/3eb25114576e">LINUX下默认搜索头文件及库文件的路径</a></p></li><li><p><a href="https://blog.csdn.net/zvvzxzko2006/article/details/110467542">gcc交叉编译时设置了"–sysroot"会产生哪些影响</a></p></li><li><p><a href="https://blog.csdn.net/qq_34269988/article/details/103064318">如何查看和修改gcc、g++默认include路径</a></p></li><li><p><a href="https://blog.51cto.com/u_13913090/2155979"><font color=Red>gcc的头文件、库文件默认搜索路径</font></a></p></li><li><p><a href="https://blog.csdn.net/wishfly/article/details/45694231"><font color=Red>gcc 生成动态库时-fpic选项是什么意思</font></a></p></li><li><p><a href="https://blog.csdn.net/bjrxyz/article/details/121146434">GCC编译静态库的-fPIC选项</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/28dTkwcYlowRzu58DB7MjA">Linux 程序编译过程详解</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42018112/article/details/82289971">C++编译链接过程详解</a></p></li><li><p><a href="https://zhidao.baidu.com/question/1512552100872530100.html"><font color=Red>C语言 如何在一个文件中调用另一个文件的函数 用头文件</font></a></p></li></ul><h2 id="编译优化">编译优化</h2><ul><li><a href="https://blog.csdn.net/qq_31108501/article/details/51842166">gcc -O0 -O1 -O2 -O3 四级优化选项及每级分别做什么优化</a></li><li><a href="https://blog.csdn.net/wuxing26jiayou/article/details/96132721">gcc编译优化-O0 -O1 -O2 -O3 -OS解析</a></li><li><a href="https://zhuanlan.zhihu.com/p/381490718">编译器常用的8种优化方法</a></li><li><a href="https://zhuanlan.zhihu.com/p/50812510">被知乎大佬嘲讽后的一个月，我重新研究了一下内联函数</a></li><li><a href="https://www.coder.work/article/176992">c - gcc -g0 并且没有 -g 选项</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gtk</title>
    <link href="/cpp/gtk/"/>
    <url>/cpp/gtk/</url>
    
    <content type="html"><![CDATA[<h1 id="gtk">gtk</h1><h2 id="glib">glib</h2><h2 id="httpszh.wikipedia.orgwikiglib"><a href="https://zh.wikipedia.org/wiki/GLib" class="uri">https://zh.wikipedia.org/wiki/GLib</a></h2><ul><li><a href="https://www.cnblogs.com/wangkangluo1/archive/2011/07/10/2102178.html">glib 简介</a></li><li><a href="https://docs.gtk.org/glib/func.build_filename.html">glib2.0说明文档</a></li><li><a href="https://blog.csdn.net/u013554213/article/details/97525522">【glib】标准化程序的命令行解析 GOptionEntry</a></li><li><a href="https://blog.csdn.net/magod/article/details/6086562">glib命令行解析库简单使用GOptionEntry 命令行参数</a></li><li><a href="https://people.gnome.org/~ebassi/docs/json-glib/json-glib-JSON-Object.html#json-object-get-member">json-glib说明文档</a></li><li><a href="https://blog.csdn.net/yanlinembed/article/details/49837655">GLib中的数据类型及操作</a></li></ul><h2 id="gio">gio</h2><ul><li><a href="https://docs.gtk.org/gio/">Gio – 2.0说明文档</a></li></ul><h2 id="gcancellable">GCancellable</h2><ul><li><p><a href="https://developer-old.gnome.org/gio/stable/GCancellable.html#g-cancellable-new" class="uri">https://developer-old.gnome.org/gio/stable/GCancellable.html#g-cancellable-new</a></p></li><li><p><a href="https://blog.csdn.net/andylauren/article/details/91046266">Glib学习（23） IO通道 IO Channels</a></p></li><li><p><a href="https://www.shangmayuan.com/a/12c9bf6074ec433b8853535e.html">在Linux下使用IO通道（IO Channels)</a></p></li></ul><h2 id="gobject">GObject</h2><ul><li><p><a href="https://docs.gtk.org/gobject/tutorial.html" class="uri">https://docs.gtk.org/gobject/tutorial.html</a></p></li><li><p><a href="http://garfileo.is-programmer.com/categories/6934/posts">GObject 学习笔记汇总</a></p></li><li><p><a href="https://docs.gtk.org/gobject/">GObject – 2.0说明文档</a></p></li><li><p><a href="https://www.cnblogs.com/silvermagic/p/9087883.html">Glib之GObject简介（翻译）</a></p></li><li><p><a href="https://www.cnblogs.com/silvermagic/p/9087893.html">Glib之GObject宏介绍</a></p></li><li><p><a href="https://eightplus.github.io/2019/08/30/2019-08-30-gobject-demo/">GObject 编程入门</a></p></li><li><p><a href="https://www.toutiao.com/article/7146852436760756750/">使用开源库 GObject 和 libsoup 提升 C 语言编程能力</a></p></li></ul><h2 id="jsongenerator">JsonGenerator</h2><ul><li><p><a href="https://developer-old.gnome.org/json-glib/stable/JsonGenerator.html#json-generator-set-root">JsonGenerator</a></p></li><li><p><a href="https://developer-old.gnome.org/json-glib/stable/JsonGenerator.html#json-generator-set-root">JsonGenerator说明文档</a></p></li><li><p><a href="http://blog.chinaunix.net/uid-199788-id-2420065.html">GKeyFile生成配置文件</a></p></li><li><p><a href="https://www.cnblogs.com/doscho/p/6269279.html">dracut 基本介绍</a></p></li><li><p><a href="https://blog.csdn.net/zhangna20151015/article/details/50401715">linux spec文档解析</a></p></li><li><p><a href="https://code.google.com/archive/p/gtk-doc-cn/">gtk-doc-cn</a></p></li><li><p><a href="https://www.cnblogs.com/happybirthdaytoyou/p/14213279.html">C语言实现面向对象方法学的GLib、GObject-初体验</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makefile</title>
    <link href="/cpp/makefile/"/>
    <url>/cpp/makefile/</url>
    
    <content type="html"><![CDATA[<h1 id="makefile">MakeFile</h1><ul><li><a href="https://blog.codekissyoung.com/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Make%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7"><font color=Red>GNU Make项目管理</font></a></li><li><a href="http://blog.hanschen.site/2016/08/17/makefile/">Makefile使用指南</a></li><li><a href="http://c.biancheng.net/makefile/"><font color=Red>Makefile教程：Makefile文件编写1天入门</font></a></li><li><a href="https://www.bookstack.cn/read/makefile-basic/16858cbb3e00b884.md"><font color=Red>Makefile 基础教程</font></a></li><li><a href="https://www.bookstack.cn/read/how-to-write-makefile/b473e56b6c52d350.md"><font color=Red>跟我一起写Makefile</font></a></li><li><a href="https://blog.csdn.net/zhaoyun_zzz/article/details/82466031">Makefile编译与链接选项及CFLAGS与LDFLAGS示例说明_zhaoyun_zzz的专栏-CSDN博客_ldflags</a></li><li><a href="https://blog.csdn.net/shenhuxi_yu/article/details/79788760">makefile中的CPPFLAGS LDFLAGS CFLAGS选项详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tars</title>
    <link href="/cpp/tars/"/>
    <url>/cpp/tars/</url>
    
    <content type="html"><![CDATA[<h1 id="tars">tars</h1><ul><li><p><a href="https://www.cnblogs.com/opsprobe/p/9126864.html">Ubuntu18.04下安装MySQL</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30845171/article/details/99554304">D04 Ubuntu16安装SQLAdvisor</a></p></li><li><p><a href="https://www.freesion.com/article/6862599453/">【TARS】UBUNTU下关于TAF框架的安装和C++环境的配置，以及DEMO实例</a></p></li><li><p><a href="https://tarscloud.github.io/TarsDocs/SUMMARY.html">TARS高性能、多语言的微服务治理框架</a></p></li><li><p><a href="https://tarscloud.github.io/TarsDocs/dev/tarscpp/tars-spec.html">参考 cmake 管理规范</a></p></li><li><p><a href="https://blog.csdn.net/m0_37973394/article/details/86591838">ubuntu中配置tars详细教程</a></p></li><li><p><a href="https://tars.tencent.com/base/help/TARS_quick_start_C++.html">TARS快速入门(c++)</a></p></li><li><p><a href="https://www.bookstack.cn/read/Tars-1.8/rumen-hello-world-1-tarscpp-kuai-su-ru-men.md">TarsCPP 快速入门</a></p></li><li><p><a href="https://blog.csdn.net/woshichenweixian/article/details/100628518">tars服务端(一)：server的启动流程</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30324103/article/details/113600518">mysql_real_connect出错_mysql_real_connect: SSL connection error: unknown error number【解决方法】...</a></p></li><li><p><a href="https://www.cnblogs.com/gaowengang/p/12470301.html">Thrift 的若干问题记录 - Anonymous596 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://thrift.apache.org/docs/install/debian.html">Apache Thrift - Debian/Ubuntu install</a></p></li><li><p><a href="https://www.osetc.com/en/how-to-install-boost-on-ubuntu-16-04-18-04-linux.html">How to Install Boost on Ubuntu 16.04/18.04 Linux - OSETC TECH</a></p></li><li><p><a href="https://blog.csdn.net/TARSFoundation/article/details/109456474">TarsCpp 组件之 MySQL 操作_TARSFoundation的博客-CSDN博客</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode-cmake</title>
    <link href="/cpp/vscode-cmake/"/>
    <url>/cpp/vscode-cmake/</url>
    
    <content type="html"><![CDATA[<h1 id="vscode-cmake">vscode-cmake</h1><ul><li><p><a href="https://blog.csdn.net/u013894860/article/details/97555901">VS code 调试Cmake 工程：</a></p></li><li><p><a href="https://code.visualstudio.com/docs/cpp/faq-cpp" class="uri">https://code.visualstudio.com/docs/cpp/faq-cpp</a></p></li><li><p><a href="https://github.com/MaskRay/ccls/wiki/Build" class="uri">https://github.com/MaskRay/ccls/wiki/Build</a></p></li><li><p><a href="https://blog.csdn.net/hb69222/article/details/117034317">VS Code中C/C++ 无法跳转到定义的解决办法</a></p></li><li><p><a href="https://www.cnblogs.com/cong-wang/p/15026530.html">vscode使用compile_commands.json</a></p></li><li><p><a href="https://edward852.github.io/post/%E7%94%9F%E6%88%90compile_commands.json%E6%96%87%E4%BB%B6/">生成compile_commands.json文件</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态库与动态库</title>
    <link href="/cpp/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <url>/cpp/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="静态库与动态库">静态库与动态库</h1><ul><li><p><a href="http://c.biancheng.net/view/8044.html">C/C++动态链接库的显式调用（动态调用）</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1344879">Linux下动态库(.so)和静态库(.a) 的区别</a></p></li><li><p><a href="https://blog.csdn.net/andylauren/article/details/78994209">linux动态库加载的秘密</a></p></li><li><p><a href="https://ee.ofweek.com/2022-03/ART-11000-2818-30554412.html">【图片+代码】：Linux动态链接过程中的【重定位】底层原理</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/6MPZ1oiOgMj5eY2WXJeZ-Q"><font color=Red>【图片+代码】：Linux 动态链接过程中的【重定位】底层原理</font></a></p></li><li><p><a href="https://blog.ideawand.com/2020/02/15/how-does-linux-shared-library-versioning-works/">一文读懂Linux下动态链接库版本管理及查找加载方式</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39609623/article/details/95043370">CMAKE-构建动态库_锥子A的博客-CSDN博客_cmake 动态库</a></p></li><li><p><a href="https://blog.csdn.net/a435262767/article/details/91379359">Linux下CMake生成和调用动态库_Liber-coder的博客-CSDN博客_cmake编译动态库</a></p></li><li><p><a href="https://www.toutiao.com/i6889283351983686158"><font color=Red>Linux库概念，动态库和静态库的制作，如何移植第三方库</font></a></p></li><li><p><a href="https://blog.csdn.net/yilonglucky/article/details/44778589">静态库Archive_yilonglucky-CSDN博客_archive库</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/dIrXsSCCtFXl2PWxhWohGg">Linux静态库与共享库基础知识</a></p></li><li><p><a href="https://blog.csdn.net/zhizhengguan/article/details/111713847?utm_source=app&amp;app_version=4.18.0"><font color=Red>cmake：add_library生成静态库和动态库</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/363981042">(避免踩坑@!)聊一聊动态链接库的小细节</a></p></li><li><p><a href="https://blog.csdn.net/qq_39584315/article/details/80311454?utm_source=app&amp;app_version=4.18.0">linux下生成静态库和动态库</a></p></li><li><p><a href="https://www.cnblogs.com/binbinjx/p/5626916.html">cmake 添加头文件目录，链接动态、静态库</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43742643/article/details/113816857">[CMake] 头文件路径 动态库路径</a></p></li><li><p><a href="https://blog.csdn.net/gx19862005/article/details/48528235">linux找不到动态链接库 .so文件的解决方法</a></p></li><li><p><a href="https://blog.csdn.net/hp_cpp/article/details/110401496?spm=1001.2014.3001.5501"><font color=Red>CMake 在Linux上编译生成动态库和静态库 </font></a></p></li><li><p><a href="https://blog.csdn.net/hp_cpp/article/details/110404651"><font color=Red>CMake 在Linux上使用动态库和静态库</font></a></p></li><li><p><a href="https://stackoverflow.com/questions/24648357/compiling-a-static-executable-with-cmake"><font color=Red>Compiling a static executable with CMake</font></a></p></li><li><p><a href="https://blog.51cto.com/u_15127661/3583020">如何使用cmake生成基于静态库的动态链接库</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gdb</title>
    <link href="/gdb/gdb/"/>
    <url>/gdb/gdb/</url>
    
    <content type="html"><![CDATA[<h1 id="gdb">gdb</h1><h2 id="调试工具">调试工具</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247483984&amp;idx=2&amp;sn=2672096af3ab1844e7b6d0b6e9de802b&amp;chksm=f96870a4ce1ff9b2183f17c2873f1a35b418469dde92eb4e49f9d3de073aeafb87fe4c5b0002&amp;scene=21#wechat_redirect"><font color=Red>Linux 程序开发常用调试工具合集</font></a></li><li><a href="https://mp.weixin.qq.com/s/t0BidHMCGqTftchGUU5otw">Linux C/C++ 调试的那些“歪门邪道”</a></li></ul><h2 id="gdb-1">gdb</h2><ul><li><a href="https://www.cnblogs.com/tzj-kernel/p/14909077.html"><font color=Red>gdb调试常用命令</font></a></li><li><a href="https://blog.codekissyoung.com/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/GDB%E8%B0%83%E8%AF%95%E5%99%A8">GDB调试</a></li><li><a href="https://www.cnblogs.com/tlam/p/15612774.html">了解和使用GDB调试-基础</a></li><li><a href="https://blog.csdn.net/chen1415886044/article/details/105094688">GDB调试指南(入门，看这篇够了)</a></li><li><a href="http://xnzaa.github.io/2016/07/20/GDB%E8%B0%83%E8%AF%95%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/">本文是一篇GDB学习笔记，总结了GDB常用命令，方便以后查阅。</a></li><li><a href="http://c.biancheng.net/gdb/">GDB调试教程：1小时玩转Linux gdb命令</a></li><li><a href="http://c.biancheng.net/view/8252.html"><font color=Red>GDB print命令高级用法</font></a></li><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/print-ascii-and-wide-string.html">打印ASCII和宽字符字符串</a></li><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/examine-memory.html">打印内存的值</a></li><li><a href="https://blog.csdn.net/u014470361/article/details/102230583">GDB调试查看内存数据</a></li><li><a href="https://blog.csdn.net/weixin_44395686/article/details/104727584">GDB打印内存的值</a></li><li><a href="https://blog.csdn.net/weixin_39880632/article/details/112621585"><font color=Red>跳至下一个断点_GDB断点调试详解</font></a></li><li><a href="https://blog.csdn.net/weixin_35197990/article/details/116710685"><font color=Red>linux gdb 跳出函数,gdb调试程序时跳进函数和跳出函数</font></a></li><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html"><font color=Red>100个gdb小技巧</font></a></li><li><a href="https://blog.csdn.net/ljss321/article/details/104304591"><font color=Red>GDB实用命令</font></a></li><li><a href="https://blog.csdn.net/evilswords/article/details/18353181">GDB 调试指令</a></li><li><a href="https://blog.csdn.net/Mormont/article/details/53037978">gdb中list命令使用</a></li><li><a href="https://blog.csdn.net/whlloveblog/article/details/48090567"><font color=Red>gdb调试的layout使用</font></a></li><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/catch-fork.html">为fork调用设置catchpoint</a></li><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/set-detach-on-fork.html">同时调试父进程和子进程</a></li><li><a href="https://blog.csdn.net/e21105834/article/details/118515137">【工欲善其事，必先利其器】之gdb五大高级用法</a></li></ul><h2 id="gdb-assembly">gdb assembly</h2><ul><li><a href="https://www.bbsmax.com/A/mo5kQN04zw/">GDB 单步调试汇编</a></li><li><a href="https://zhuanlan.zhihu.com/p/410215049"><font color=Red>汇编语言和gdb调试汇编</font></a></li><li><a href="https://mp.weixin.qq.com/s/cq0iHepG_xXKXHLlQpPGZw">静态链接符号地址重定位直观描述</a></li></ul><h2 id="gdb源码路径">gdb源码路径</h2><ul><li><p><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Source-Path.html#index-set-substitute_002dpath">https://sourceware.org/gdb/current/onlinedocs/gdb/Source-Path.html#index-set-substitute_002dpath</a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/directory.html">设置源文件查找路径 dir只识别相对路径</a></p></li><li><p><a href="https://blog.csdn.net/jiafu1115/article/details/31790757">GDB指定和修改搜素源码文件的路径（set substitute-path）</a></p></li><li><p><a href="https://www.jianshu.com/p/9c211e92d25e"><font color=Red>源码路径查看与设置</font></a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/substitute-path.html">替换查找源文件的目录 set substitute-path from-path to-path</a></p></li><li><p><a href="https://blog.csdn.net/nicholas_duan/article/details/117515155"><font color=Red>gdb调试解决找不到源代码的问题</font></a></p></li><li><p><a href="https://blog.csdn.net/jackgo73/article/details/120431609">gdb分析core文件找不到源码</a></p></li><li><p><a href="https://blog.csdn.net/albertsh/article/details/107437084">gdb调试解决找不到源代码的问题</a></p></li><li><p><a href="https://blog.csdn.net/dai_jing/article/details/36896215">gdb设置显示选项</a></p></li><li><p><a href="https://www.cnblogs.com/Dennis-mi/articles/3755911.html">GDB 调试 {转} - 心灵捕手 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/awm_kar98/article/details/82840811">LINUX下GDB的使用方法(简单说说)_longfan的博客-CSDN博客_gdb</a></p></li><li><p><a href="https://blog.csdn.net/tmhanks/article/details/89110833">GDB查看C++对象布局_tmhanks的博客-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/abcd1f2/article/details/49816751">gdb not in executable format file format not recognized</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/71519244">Linux下GDB调试指令汇总</a></p></li><li><p><a href="https://www.jianshu.com/p/adcf474f5561">linux gdb详解</a></p></li></ul><h2 id="gdb打印qt数据类型">gdb打印qt数据类型</h2><ul><li><p><a href="https://github.com/Lekensteyn/qt5printers">https://github.com/Lekensteyn/qt5printers</a></p></li><li><p><a href="https://listenerri.com/2018/10/23/gdb%E8%B0%83%E8%AF%95qt%E7%A8%8B%E5%BA%8F%E6%97%B6%E6%89%93%E5%8D%B0qt%E7%89%B9%E6%9C%89%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/">gdb调试qt程序时打印qt特有的类型数据</a></p></li><li><p><a href="https://www.cnblogs.com/rickyk/p/4184912.html">解决GDB输出Qt内置类型的显示问题</a></p></li><li><p><a href="https://www.cnblogs.com/Braveliu/p/8426945.html">GDB &amp;&amp; QString</a></p></li><li><p><a href="https://icode.best/i/64401545957413">007 - 配置 Clion 调试显示 Qt 变量-爱代码爱编程</a></p></li></ul><h2 id="gdb远程调试">gdb远程调试</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1015873">40.Linux应用调试-使用gdb和gdbserver</a></li><li><a href="https://www.jianshu.com/p/d532d196c89f">使用gdbserver远程调试</a></li><li><a href="https://blog.51cto.com/u_15346415/3678651"><font color=Red>服务/软件管理：38-gdb+gdbserver的使用</font></a></li><li><a href="https://www.cnblogs.com/seven-sky/p/4730225.html">gdb远程及本地调试的一些技巧</a></li><li><a href="https://blog.csdn.net/lvwx369/article/details/121490883">使用GDB进行嵌入式远程调试</a></li></ul><h2 id="ptrace">ptrace</h2><ul><li><a href="https://www.toutiao.com/article/7199644016760554018">Linux GDB的实现原理</a></li><li><a href="https://blog.csdn.net/Z_Stand/article/details/108395906">一文带你看透 GDB 的 实现原理 ptrace真香</a></li><li><a href="https://zhuanlan.zhihu.com/p/110793460?utm_id=0">断点原理与实现</a></li><li><a href="https://blog.csdn.net/D_R_L_T/article/details/80632311">硬件断点和软件断点的区别</a></li><li><a href="https://zhuanlan.zhihu.com/p/38339306?utm_id=0">ROM, FLASH和RAM的区别</a></li><li><a href="https://blog.csdn.net/gengzhikui1992/article/details/111856016">调试器工作原理CPU软件断点/硬件断点/单步执行标识</a></li><li><a href="https://cataloc.gitee.io/blog/2020/09/19/%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9/">硬件断点</a></li><li><a href="https://cataloc.gitee.io/blog/2020/09/18/%E5%86%85%E5%AD%98%E6%96%AD%E7%82%B9/">内存断点</a></li><li><a href="https://cataloc.gitee.io/blog/2020/09/17/%E8%BD%AF%E4%BB%B6%E6%96%AD%E7%82%B9/">软件断点</a></li><li><a href="https://blog.csdn.net/Rong_Toa/article/details/112155847">Linux ptrace系统调用详解：利用 ptrace 设置硬件断点</a></li><li><a href="http://c.biancheng.net/view/8191.html">watch 命令实现监控机制的方式有 2 种，一种是为目标变量（表达式）设置硬件观察点，另一种是为目标变量（表达式）设置软件观察点。</a></li><li><a href="https://www.toutiao.com/article/7127950932549272094">Linux内核：自己动手写一个GDB设置断点（原理篇）</a></li></ul><h2 id="core文件">core文件</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1177442">Linux下使用gdb调试core文件</a></li><li><a href="https://wangchujiang.com/linux-command/c/ulimit.html">ulimit命令 用来限制系统用户对shell资源的访问</a></li><li><a href="https://www.cnblogs.com/wangcp-2014/p/15466518.html">linux：永久打开core文件功能</a></li><li><a href="https://blog.csdn.net/u011417820/article/details/71435031">Linux生成core文件、core文件路径设置</a></li><li><a href="https://blog.csdn.net/xmcy001122/article/details/105665732">golang-进程崩溃后如何输出错误日志？</a></li><li><a href="https://zhengyun.blog.csdn.net/article/details/107365187">【Linux】core文件存储位置和命名</a></li><li><a href="https://cloud.tencent.com/developer/article/1860631">一文读懂 | coredump文件是如何生成的</a></li><li><a href="https://www.cnblogs.com/huixinquan/p/14941880.html">linux下产生core文件以及不产生core文件的条件</a></li><li><a href="https://blog.csdn.net/fengbingchun/article/details/119980076">Linux下addr2line命令用法</a></li><li><a href="https://blog.csdn.net/stpeace/article/details/49843897"><font color=Red>linux中的dmesg命令简介没有core文件时如何定位core dump问题</font></a></li><li><a href="https://www.cnblogs.com/lynsen/p/8439550.html">Linux如何使用gdb查看core堆栈信息</a></li><li><a href="https://blog.csdn.net/xmcy001122/article/details/105665732"><font color=Red>golang-进程崩溃后如何输出错误日志？core dump</font></a></li></ul><h2 id="oops">oops</h2><ul><li><a href="https://blog.csdn.net/pwl999/article/details/106931608">Linux 死机复位(oops、panic)问题定位指南</a></li><li><a href="https://github.com/gatieme/LDD-LinuxDeviceDrivers/blob/master/study/debug/tools/systemtap/01-install/README.md">Linux内核调试的方式以及工具集锦</a></li><li><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></li></ul><h2 id="dmesg">dmesg</h2><ul><li><a href="https://blog.csdn.net/carefree2005/article/details/120737841">Linux命令之dmesg命令</a></li><li><a href="https://mp.weixin.qq.com/s/6qpMiy6L5qIazmqNopCd0A">Linux dmesg命令</a></li></ul><h2 id="kdump">kdump</h2><ul><li><a href="https://www.cyberciti.biz/faq/how-to-on-enable-kernel-crash-dump-on-debian-linux/"><font color=Red>How to on enable kernel crash dump on Debian Linux</font></a></li><li><a href="https://blog.csdn.net/chenlycly/article/details/126074433">详解Linux内核态调试工具kdump</a></li><li><a href="https://blog.csdn.net/qq_41782149/article/details/129021833"><font color=Red>Linux内核转储-Kdump，Crash使用介绍</font></a></li><li><a href="https://ebpf.top/post/ubuntu_kdump_crash/"><font color=Red>Ubuntu 20.04 Kdump + Crash 初体验</font></a></li><li><a href="https://blog.csdn.net/weixin_42915431/article/details/112555690">ubuntu 20.04 启用kdump服务及下载vmlinux</a></li><li><a href="https://blog.csdn.net/yhb1047818384/article/details/104115915">Linux内核调试之kdump</a></li><li><a href="https://blog.csdn.net/ludaoyi88/article/details/114194687">Linux Kdump内核崩溃转储部署详解</a></li><li><a href="https://www.cnblogs.com/wwang/archive/2010/11/19/1881304.html">Ubuntu的内核转储工具</a></li><li><a href="https://blog.csdn.net/weixin_45030965/article/details/124960224"><font color=Red>centos7 kdump、crash调试内核</font></a></li><li><a href="https://www.toutiao.com/article/7103352500777910821/">Linux Kdump 机制详解</a></li></ul><h2 id="carsh">carsh</h2><ul><li><a href="https://blog.csdn.net/qq_42931917/article/details/108236139">Linux crash 调试环境搭建</a></li><li><a href="https://www.cnblogs.com/ssyfj/p/16278883.html">linux内核学习-Linux内核程序调试工具Crash的安装</a></li><li><a href="https://blog.csdn.net/weixin_39545102/article/details/111215997">dump分析工具_ubantu18.04内核奔溃调试工具Crash的搭建</a></li></ul><h2 id="debugsymbols">debugsymbols</h2><ul><li><p><a href="http://sunyongfeng.com/201802/linux/debian_debug_package">deb debug package-标准的 debian / ubuntu 打 deb 包，通过将可执行文件的符号表通过剥离成独立的 dbg 包，称为 debug package</a></p></li><li><p><a href="https://www.cnblogs.com/qiumingcheng/p/15821919.html">17GDB使用符号表调试release程序</a></p></li><li><p><a href="https://www.cnblogs.com/dongc/p/9690754.html">使用GDB调试将符号表与程序分离后的可执行文件</a></p></li><li><p><a href="https://blog.csdn.net/nirendao/article/details/104107608">使用strip, eu-strip, objcopy等剥离与导回符号表及调试信息</a></p></li><li><p><a href="https://blog.csdn.net/dwh0403/article/details/123551691">Ubuntu 21.10 安装调试符号</a></p></li><li><p><a href="https://blog.csdn.net/lgfun/article/details/103600880">linux——nm命令：查看符号表</a></p></li><li><p><a href="https://blog.csdn.net/ysbj123/article/details/51233618">Linux System.map文件</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45030965/article/details/125055828">linux之vmlinux、vmlinuz、System.map和/proc/kallsyms简介</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/445864686">Linux内核：符号表详解</a></p></li></ul><h2 id="strings">strings</h2><ul><li><a href="https://github.com/realwujing/realwujing.github.io/blob/main/shell/strings.md"><font color=Red>strings</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/383038723">linux中的strings命令简介</a></li><li><a href="https://github.com/realwujing/linux-learning/blob/main/shell/strings.md">递归查找当前目录下的动态库文件，提取其中的字符串，查找目标字符串，输出包含目标字符串的文件名。</a></li></ul><h2 id="gdb-print-errno">gdb print errno</h2><ul><li><a href="http://c.biancheng.net/c/errno/">errno全局变量及使用细则，C语言errno全局变量完全攻略</a></li><li><a href="https://blog.51cto.com/u_15346415/5094459">Linux(程序设计):08-perror、strerror函数(errno全局变量)</a></li><li><a href="https://blog.csdn.net/Gpengtao/article/details/7553307">Linux errno 错误对照表</a></li><li><a href="https://blog.csdn.net/qq_43684922/article/details/106440542">【博客272】errno错误对照表</a></li><li><a href="https://blog.csdn.net/liuhhaiffeng/article/details/104040174">gcc 7.1.0下gdb无法prinf查看errno解决</a></li></ul><h2 id="libtool">libtool</h2><ul><li><a href="https://www.cnblogs.com/ericsun/p/3168842.html">gdb调试libtool封装的可执行文件</a></li><li><a href="https://blog.csdn.net/rainharder/article/details/8057819">使用 GNU Libtool 创建库</a></li></ul><h2 id="vscode-gdb">vscode gdb</h2><ul><li><p><a href="https://blog.csdn.net/wanzew/article/details/83097457">一步一步学CMake 之 VSCode+CMakeLists 调试 C++ 工程_wanzew的博客-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/tengzijian/p/vscode-cannot-find-libc-start-c.html">VSCode 无法打开 libc-start.c - Zijian/TENG - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference">visualstudio-launch-json-reference</a></p></li><li><p><a href="https://www.jianshu.com/p/22effba56f7e">CentOS下sudo免密配置</a></p></li><li><p><a href="https://www.jianshu.com/p/368e5de24cc9">VS Code 下以 root 用户调试程序</a></p></li><li><p><a href="https://www.mycat.wiki/archives/769">VS Code 下以 root 用户调试程序</a></p></li><li><p><a href="https://zhangxueliang.blog.csdn.net/article/details/110701868">Linux deepin下普通用户免密切换至root用户</a></p></li><li><p><a href="https://www.coder.work/article/7603523">process - Visual Studio Code，调试子进程不起作用</a></p></li><li><p><a href="https://blog.csdn.net/leon_zeng0/article/details/107438624">VSCode 同时调试2个或多个程序</a></p></li><li><p><a href="https://blog.hufeifei.cn/2021/10/C-C++/vscode-debug-nginx/index.html">在vscode中调试nginx源码</a></p></li><li><p><a href="https://blog.csdn.net/wzp20092009/article/details/118327205">设置vscode命令行其缓冲区中保留的最大行数</a></p></li></ul><h2 id="vscode调试linux内核">vscode调试linux内核</h2><ul><li><a href="https://mp.weixin.qq.com/s/cx_vaRTcC29h0pWkJPpqQQ"><font color=Red>调试 Linux 最早期的代码</font></a></li><li><a href="https://github.com/yuan-xy/Linux-0.11"><font color=Red>https://github.com/yuan-xy/Linux-0.11</font></a></li><li><a href="https://www.modb.pro/db/422613"><font color=Red>Linux 0.11 vscode + gdb调试环境搭建</font></a></li><li><a href="https://mp.weixin.qq.com/s/vb1SiI0Uc5KpU2yGwJBRmg">利用vscode远程调试Linux内核</a></li></ul><h2 id="windebug">windebug</h2><ul><li><a href="https://blog.csdn.net/pathfinder1987/article/details/86620985">windebug快速使用及调试注意事项</a></li><li><a href="https://blog.csdn.net/sunboyhch/article/details/37914727">windebug指令详解</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://wiki.archlinux.org/title/Debugging">https://wiki.archlinux.org/title/Debugging</a></li><li><a href="http://c.biancheng.net/c/ascii/">ASCII码一览表，ASCII码对照表</a></li><li><a href="https://www.bejson.com/convert/ox2str/">16进制到文本字符串</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>gdb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Golang</tag>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/git/README/"/>
    <url>/git/README/</url>
    
    <content type="html"><![CDATA[<h1 id="git-learning">git-learning</h1><h2 id="git全局设置用户名跟邮箱">git全局设置用户名跟邮箱</h2><p>git全局设置用户名跟邮箱，基本操作一次以后很少再变化。</p><p>设置全局用户名，xxx替换为用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>设置全局用户邮箱，xxx替换为用户邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://segmentfault.com/a/1190000038802019">git全局设置用户名跟邮箱相关命令</a></li></ul><h2 id="修改git-默认编辑器为vim">修改git 默认编辑器为vim</h2><p>git默认编辑器为nano，不太常用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.editor vim<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.jianshu.com/p/86a7640705cd">修改Git默认编辑器</a></li></ul><h2 id="彻底替换https为ssh">彻底替换https为ssh</h2><p>设置git url https请求替换为ssh方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global url.<span class="hljs-string">&quot;git@github.com:&quot;</span>.insteadOf https://github.com/<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.jianshu.com/p/affe1af6781c">github项目如何快速git clone https</a></li></ul><h2 id="git设置ssh代理">git设置ssh代理</h2><p>类 UNIX 系统配置更改起来比较简单. 编辑 ~/.ssh/config 加入如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com *.github.com<br>  User git<br>  <span class="hljs-comment"># SOCKS代理</span><br>  ProxyCommand nc -v -x 127.0.0.1:7890 %h %p<br>  <span class="hljs-comment"># HTTPS代理</span><br>  ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=7890<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.donnadie.top/set-git-proxy">为 git 设置代理解决远程仓库无法连接问题</a></li></ul><h2 id="通过https-443端口建立ssh连接">通过HTTPS 443端口建立SSH连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T -p 443 git@ssh.github.com<br></code></pre></td></tr></table></figure><p>正常输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Hi realwujing! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure><p>说明可以通过HTTPS 443端口建立SSH连接。</p><p>编辑 ~/.ssh/config 加入如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com *.github.com<br>  HostName ssh.github.com <br>  User git<br>  Port 443<br>  <span class="hljs-comment"># IdentityFile &quot;~\.ssh\id_rsa&quot;</span><br>  <span class="hljs-comment"># SOCKS代理</span><br>  <span class="hljs-comment"># ProxyCommand nc -v -x 127.0.0.1:7890 %h %p</span><br>  <span class="hljs-comment"># HTTPS代理</span><br>  <span class="hljs-comment"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=7890</span><br></code></pre></td></tr></table></figure><p>正常输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi realwujing! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>如果输出异常，建议将上述<code>ProxyCommand</code>开头的内容取消注释，即使用代理且采用443端口，<code>github pull push</code>功能肯定能用。</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gerrit</title>
    <link href="/git/gerrit/"/>
    <url>/git/gerrit/</url>
    
    <content type="html"><![CDATA[<h1 id="gerrit">gerrit</h1><h2 id="提交模板">提交模板</h2><p>在 ~/ 目录下新建文件，并命名为.gitcommit_template 将以下内容写入文件当中：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">#commit type :fix（问题修复）、feat（功能开发）、style(风格修改)、refactor(重构)、docs（文档）、 chore（其他)、test(测试) + 简单描述. 默认fix,根据情况修改<br>fix: <br><br>#Describe you bug/feature,or other things<br>Description: <br><br># <br>Log: <br><br>#关联pms上的bug号，提交后，则会自动在pms对应bug信息页面添加备注，关联本次提交。若本次提交为修复bug相关，则请 取消注释<br>#Bug: <br><br>#尚不清楚干啥的 <br>#Issue: <br><br>#关联pms上的任务号，提交后，则会自动在pms对应任务信息页面添加备注，关联本次提交。若本次提交为任务相关，则请取消注释<br>#Task: <br></code></pre></td></tr></table></figure><p>在命令行执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global commit.template ~/.gitcommit_template<br></code></pre></td></tr></table></figure><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install git-review<br></code></pre></td></tr></table></figure><h2 id="推送">推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git review branch(当前分支) -r origin<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://wikidev.uniontech.com/Gerrit_%E6%8F%90%E4%BA%A4%E6%A8%A1%E6%9D%BF">Gerrit 提交模板</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github-pages</title>
    <link href="/git/github-pages/"/>
    <url>/git/github-pages/</url>
    
    <content type="html"><![CDATA[<h1 id="github-pages">github-pages</h1><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/" class="uri">https://fluid-dev.github.io/hexo-fluid-docs/start/</a></p><p><a href="https://zhuanlan.zhihu.com/p/405551874">[Hexo博客搭建]第4章Hexo图片显示问题-知乎(zhihu.com)</a></p><p><a href="https://segmentfault.com/a/1190000018402194">Hexo功能增强插件-西西弗苏- SegmentFault思否</a></p><p><a href="https://blog.csdn.net/Olivia_Vang/article/details/92976637">更换Hexo的网页图标/小图片Hexo change page favicon</a></p><p><a href="https://github.com/Cenergy/blog-dev/blob/dev/_config.fluid.yml">blog-dev/_config.fluid.yml at dev·Cenergy/blog-dev (github.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/134492757">Hexo生成永久文章链接-知乎(zhihu.com)</a></p><p><a href="https://github.com/YunYouJun/hexo-theme-yun/issues/60">升级主题后，文章会刷新更新日期，时间为刚才的部署时间</a></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid:一款Material Design风格的Hexo主题/ An elegant Material-Design theme for Hexo (github.com)</a></p><p><a href="https://github.com/LonlyPan/LonlyPan.github.io">LonlyPan/LonlyPan.github.io</a></p><p><a href="https://lonlypan.com/">LonlyPan个人站</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git教程</title>
    <link href="/git/git%E6%95%99%E7%A8%8B/"/>
    <url>/git/git%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="git教程">git教程</h1><h2 id="github.token">Github.token</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">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<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/purplego/article/details/78657521"><font color=Red>git client 配置以及连接GitHub、Bitbucket_purplego的博客-CSDN博客</font></a></li><li><a href="https://www.wdssmq.com/post/20201216004.html">【VSCode 笔记】Git： Host key verification failed</a></li><li><a href="https://www.jianshu.com/p/0503722f69af">[ github ] github clone private repo克隆私有项目详细-简书(jianshu.com)</a></li><li><a href="https://blog.csdn.net/purplego/article/details/78657521">git client 配置以及连接GitHub、Bitbucket</a></li><li><a href="https://www.jianshu.com/p/affe1af6781c">github项目如何快速git clone https</a></li></ul><h2 id="密码">密码</h2><ul><li><p><a href="https://www.cnblogs.com/qdlhj/p/13215158.html">GitLab使用手册配置Git永久记住密码，免去重复输入的烦恼 - 心向阳 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42050406/article/details/115251109">向gitlab提交代码时记住用户名和密码_胡桃夹夹子的博客-CSDN博客_gitlab记住密码</a></p></li><li><p><a href="https://www.donnadie.top/set-git-proxy"><font color=Red>为git设置代理解决远程仓库无法连接问题</font></a></p></li><li><p><a href="https://blog.csdn.net/yuzhiqiang_1993/article/details/127032178">github配置了公钥依旧提示git@github.com‘s password: Permission denied, please try again.的解决办法</a></p></li><li><p><a href="https://blog.csdn.net/syzdev/article/details/126921031">Git报错：git@github.com: Permission denied (publickey)</a></p></li></ul><h2 id="config">config</h2><ul><li><a href="https://www.maixj.net/ict/git-config-unset-21515">git config的删除命令 | 云上小悟 (maixj.net)</a></li></ul><h2 id="命令">命令</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3NTgyODQ1Nw==&amp;mid=2247522045&amp;idx=2&amp;sn=f97685dcac7470d9b8fc1990aba7a7a8&amp;chksm=fd1fee7bca68676db0e438c67294cf0975958f9c1fbf04caeb25d3cafd5b64ac18f4d1003b7a&amp;mpshare=1&amp;scene=1&amp;srcid=0319RvIZ2fucLHLShthVdegk&amp;sharer_sharetime=1648042404990&amp;sharer_shareid=2dfdf936388dba04865b3e883d5a3225&amp;version=3.1.12.6001&amp;platform=win#rd"><font color=Red>Git 不要只会 pull 和 push，试试这 5 条提高效率的命令</font></a></p></li><li><p><a href="https://juejin.cn/post/6844903746166587405">如何在大型项目中使用Git子模块开发</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/0g1RDnKaSw7WYPfcp_gmKw">Git 各指令的本质，真是通俗易懂啊 (qq.com)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247485544&amp;idx=1&amp;sn=afc9d9f72d811ec847fa64108d5c7412&amp;scene=21#wechat_redirect"><font color=Red>我用四个命令，总结了 Git 的所有套路</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_46087056/article/details/124741158"><font color=Red>git常用命令 1.分支开发 2.代码冲突处理</font></a></p></li></ul><h2 id="reset">reset</h2><ul><li><a href="https://www.runoob.com/git/git-reset.html">git reset 命令</a></li></ul><h2 id="commit">commit</h2><ul><li><p><a href="https://blog.csdn.net/keeplook/article/details/39324971">Git怎样合并最近两次commit</a></p></li><li><p><a href="https://www.jianshu.com/p/7d40838883af">对之前的commit 提交进行修改</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1730774"><font color=Red>Git 修改已提交 commit 的信息</font></a></p></li><li><p><a href="https://www.cnblogs.com/boshen-hzb/p/9764835.html"><font color=Red>git只合并某一个分支的某个commit</font></a></p></li><li><p><a href="https://blog.csdn.net/ybdesire/article/details/42145597"><font color=Red>Git合并特定commits 到另一个分支</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_32077121/article/details/111150662">git如何恢复本地删除的文件夹</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39580031/article/details/123826439"><font color=Red>git 回退一个文件的版本</font></a></p></li></ul><h2 id="head">head</h2><ul><li><a href="https://blog.csdn.net/raoxiaoya/article/details/110862360">git深入理解(二)：HEAD是什么</a></li><li><a href="https://geek-docs.com/git/git-cmds/git-head.html">Git – Head</a></li></ul><h2 id="statsh">statsh</h2><ul><li><a href="https://www.cnblogs.com/shoshana-kong/p/11194256.html">git stash详解</a></li></ul><h2 id="rebase-merge">rebase merge</h2><ul><li><p><a href="https://docs.github.com/cn/get-started/using-git/resolving-merge-conflicts-after-a-git-rebase">解决 Git 变基后的合并冲突</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin master rebase<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.jianshu.com/p/025aaa1a2c34">GIT使用 rebase 和 merge 的正确姿势（转）</a></p></li><li><p><a href="https://blog.csdn.net/textdemo123/article/details/107867211">Linux :关于git：您尚未完成合并(MERGE_HEAD存在)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/462530860">使用交互式 git rebase 工具压缩 Git 提交</a></p></li><li><p><a href="http://quibbler.cn/?thread-232.htm&amp;user=1"><font color=Red>git rebase调整commit之间顺序</font></a></p></li><li><p><a href="https://www.jianshu.com/p/f247827d60bb">git强制合并分支</a></p></li><li><p><a href="https://blog.csdn.net/junruitian/article/details/88361895">refusing to merge unrelated histories的解决方案（本地/远程）综合</a></p></li></ul><h2 id="pull">pull</h2><ul><li><a href="https://man7.org/linux/man-pages/man3/pthread_create.3.html">如何使用 Git Pull 覆盖本地文件</a></li><li><a href="https://mp.weixin.qq.com/s/3jxG4pdjSiCA1tgo5zau3g">Git 合并到底使用Merge还是Rebase</a></li></ul><h2 id="pull-request">pull request</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2017/07/pull_request.html">Pull Request 的命令行管理</a></li></ul><h2 id="push">push</h2><ul><li><p><a href="https://github.com/LeachZhou/blog/issues/11">Gitlab强制推送提示"You are not allowed to force push code to a protected branch on this project." · Issue #11 · LeachZhou/blog (github.com)</a></p></li><li><p><a href="https://www.cnblogs.com/zishu/p/9191815.html">Github远程推送一直Everything up-to-date - sinatJ - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30304375/article/details/99984494">submodule 子项目提交代码后无法push到远程仓库_三叔的负能量的博客-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/qq_45893999/article/details/106273214">error: failed to push some refs to如何解决_尘客-追梦的博客-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/D939030515/article/details/105490835"><font color=Red>git 仓库提交分支到另外一个仓库</font></a></p></li><li><p><a href="https://www.freesion.com/article/2366930198/">GIT 清除本地 REMOTES/ORIGIN/*</a></p></li><li><p><a href="https://www.itranslater.com/qa/details/2583713236583449600">git-警告：忽略损坏的ref refs / remotes / origin / HEAD</a></p></li></ul><h2 id="tag">tag</h2><ul><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE"><font color=Red>2.6 Git基础-打标签</font></a></li><li><a href="https://blog.csdn.net/QH_JAVA/article/details/77979622">git tag创建、远程推送、回退以及强推push -f</a></li></ul><h2 id="submodule">submodule</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43455581/article/details/120174578"><font color=Red>git中子模块/子仓库的使用</font></a></p></li><li><p><a href="https://knightyun.github.io/2021/03/21/git-submodule"><font color=Red>Git submodule 知识总结</font></a></p></li><li><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">7.11 Git工具-子模块</a></p></li><li><p><a href="https://www.jianshu.com/p/f8a55b972972/">git submodule 使用小结 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/e27a978ddb88">git submodule 的使用 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/nicksheng/p/6201711.html">Git Submodule管理项目子模块 - nicksheng - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/qq_38292379/article/details/124950163">git submodule update 游离分支 临时分支问题记录 解决办法</a></p></li><li><p><a href="https://www.cnblogs.com/hustcpp/p/13092625.html">git添加submodule以及更名</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45115705/article/details/104303730">Git修改.Submodule文件url生效</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39673293/article/details/111786946">submodule切换分支_Git submodule-切换submodule的分支</a></p></li><li><p><a href="https://qa.1r1g.com/sf/ask/2815344661/">git submodule 分支是否与主项目的分支一起切换？</a></p><p>设置永久记住密码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置永久记住密码 </span><br><br>git config --global credential.helper store <br>git pull  <br><br><br><span class="hljs-comment"># 拉取所有子模块 </span><br><br>git submodule update --init --recursive <br><br><br><br><br>git submodule foreach git pull origin master <br><br><br><br><br>git submodule foreach git checkout master <br><br><br><br><br><span class="hljs-comment"># 取消永久记住密码 </span><br><br><span class="hljs-comment"># git config --global --unset credential.helper </span><br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://juejin.cn/post/6934107291621228558">Git详解10-Git子库：submodule与subtree</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/594835463">将git仓库从submodule转换为subtree</a></p></li><li><p><a href="https://www.cnblogs.com/anliven/p/13681894.html">Git - - subtree与submodule - Anliven -博客园(cnblogs.com)</a></p></li><li><p><a href="https://juejin.cn/post/6936459179049615397">Git SubTree使用</a></p></li></ul><h2 id="gitignore">.gitignore</h2><ul><li><a href="https://learnku.com/articles/18380">.gitignore 在已忽略文件夹中不忽略指定文件、文件夹... | Laravel China 社区 (learnku.com)</a></li></ul><h2 id="gitkeep">.gitkeep</h2><ul><li><a href="https://blog.csdn.net/fengchao2016/article/details/52769151">git提交空文件夹_fengchao2016的博客-CSDN博客_git空文件夹不能提交</a></li><li><a href="https://www.cnblogs.com/everfight/p/keep_empty_dir_in_git_repo.html">如何向git仓库提交空文件夹？.gitignore和.gitkeep配合 - everfight - 博客园 (cnblogs.com)</a></li></ul><h2 id="gerrit">gerrit</h2><ul><li><p><a href="https://www.jianshu.com/p/e1b466df12de">Gerrit - not clone with commit-msg hook</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git review dev -r origin<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git cherry-pick c6611ca831bb97ac646dbd22bbf9f5216741c09d<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/weixin_38419133/article/details/113600907">gerrit 将代码从一个分支合并到另外一个分支 Cherry Pick的使用</a></p></li><li><p><a href="https://www.cnblogs.com/111testing/p/9450530.html">gerrit 使用教程（一）</a></p></li><li><p><a href="https://blog.csdn.net/yangshujuan91/article/details/113741972">gerrit 缺少change-Id</a></p></li><li><p><a href="https://www.cnblogs.com/tsalita/p/16500429.html">VSCode_git&amp;svn 的冲突译文</a></p></li></ul><h2 id="github-action">Github Action</h2><ul><li><a href="https://www.it610.com/article/1527116916244676608.htm">通过 GitHub Actions 将 GitHub 仓库自动备份到 Gitee、GitLab</a></li><li><a href="https://stackoverflow.com/questions/66626814/github-action-error-process-completed-with-exit-code-1">bash - Github Action - Error: Process completed with exit code 1 - Stack Overflow</a></li><li><a href="https://github.com/orgs/community/discussions/26928"><font color=Red>Github actions git log only output one line</font></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>submodule</title>
    <link href="/git/submodule/"/>
    <url>/git/submodule/</url>
    
    <content type="html"><![CDATA[<h1 id="git-submodules">git submodules</h1><h2 id="更新-submodule">更新 submodule</h2><ul><li><p>自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><ol type="1"><li><p>方式1</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recurse-submodules https://github.com/realwujing/linux-learning.git<br></code></pre></td></tr></table></figure></p></li><li><p>方式2</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/realwujing/linux-learning.git<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ol></li><li><p>递归地抓取子模块的更改并更新当前仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><ol type="1"><li><p>方式1</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --recurse-submodules<br></code></pre></td></tr></table></figure></p></li><li><p>方式2</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ol></li></ul><h2 id="推送-submodule">推送 submodule</h2><ul><li><p>推送当前仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><ol type="1"><li><p>方式1</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --recurse-submodules=on-demand<br></code></pre></td></tr></table></figure></p></li><li><p>方式2(方式1报错情况下使用)</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule foreach --recursive <span class="hljs-string">&#x27;git push&#x27;</span> &amp;&amp; git push<br></code></pre></td></tr></table></figure></p></li></ol></li></ul><h2 id="更改submodule分支">更改submodule分支</h2><ul><li><p>更改submodule分支</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config -f .gitmodules submodule.assembly.branch main<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --remote<br></code></pre></td></tr></table></figure></p></li><li><p>在你拉取的提交中， 可能 .gitmodules 文件中记录的子模块的 URL 发生了改变。 比如，若子模块项目改变了它的托管平台，就会发生这种情况</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将新的 URL 复制到本地配置中</span><br>git submodule <span class="hljs-built_in">sync</span> --recursive<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从新 URL 更新子模块</span><br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="删除-submodule">删除 submodule</h2><ul><li><p>删除 submodule</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 卸载子模块</span><br>git submodule deinit [submodule_folder]<br><span class="hljs-comment"># 如果想移除子库的本地修改,可使用--force标签</span><br>git submodule deinit [submodule_folder] --force<br><br><br><span class="hljs-comment"># 删除文件夹</span><br>git <span class="hljs-built_in">rm</span> [submodule_folder]<br><br><span class="hljs-comment"># 提交代码</span><br>git commit -m <span class="hljs-string">&quot;delete submodule xxxxx&quot;</span><br><br></code></pre></td></tr></table></figure></p></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.jianshu.com/p/f8a55b972972/">git submodule 使用小结</a></li><li><a href="https://www.cnblogs.com/hustcpp/p/13092625.html">git 添加submodule 以及更名</a></li><li><a href="https://blog.csdn.net/weixin_45115705/article/details/104303730">Git 修改.Submodule文件 url 生效</a></li><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">7.11 Git 工具 - 子模块</a></li><li><a href="https://blog.csdn.net/weixin_43455581/article/details/120174578">git中子模块/子仓库的使用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/java/README/"/>
    <url>/java/README/</url>
    
    <content type="html"><![CDATA[<h1 id="javaporject">JavaPorject</h1>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-learning</title>
    <link href="/java/java-learning/"/>
    <url>/java/java-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="java">Java</h1><ul><li><p><a href="https://snailclimb.gitee.io/javaguide/#/" class="uri">https://snailclimb.gitee.io/javaguide/#/</a></p></li><li><p><a href="https://github.com/Snailclimb/JavaGuide">JavaGuide</a></p></li><li><p><a href="https://github.com/CyC2018/CS-Notes">CyC2018/CS-Notes: 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计 (github.com)</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1584463">史上最全的Java命名规范[转] - 云+社区 - 腾讯云 (tencent.com)</a></p></li></ul><h2 id="java环境">Java环境</h2><ul><li><a href="https://www.cnblogs.com/luoli-/p/9247952.html">Ubuntu18.04安装jdk1.8</a></li><li><a href="https://blog.csdn.net/bestsongs/article/details/104905060">jdk1.8下载与安装教程（win10）超详细！</a></li><li><a href="https://blog.csdn.net/weixin_38168198/article/details/99906459">E: Unable to locate package openjdk-8-jdk 及java version 切换_weixin_38168198的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html">macOS所有版本JDK安装指南(with Homebrew) -质子-博客园(cnblogs.com)</a></li><li><a href="https://blog.csdn.net/sun8112133/article/details/79905401">Linux Ubuntu 下安装与卸载 JDK，亲测有效~_小异常的博客-CSDN博客_ubuntu卸载jdk</a></li><li><a href="https://dev1galaxy.org/viewtopic.php?id=649">[SOLVED] update-alternatives warning: broken link group? / Desktop and Multimedia / Dev1 Galaxy Forum</a></li><li><a href="https://zhuanlan.zhihu.com/p/92654421">Java升级那么快，多个版本如何灵活切换和管理？-知乎(zhihu.com)Java升级那么快，多个版本如何灵活切换和管理？-知乎(zhihu.com)</a></li></ul><h2 id="maven">maven</h2><ul><li><a href="https://www.linuxidc.com/Linux/2020-04/162861.htm">Maven常用命令详解_Linux教程_Linux公社-Linux系统门户网站 (linuxidc.com)</a></li><li><a href="https://blog.csdn.net/weixin_38936572/article/details/104938305">关于maven打包时的报错： Return code is: 501 , ReasonPhrase:HTTPS Required._爱吃猪蹄的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_29695701/article/details/90705181">Ubuntu安装maven_Learning-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_22041375/article/details/103491941">maven下载依赖时候忽略SSL证书校验_方方园园的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/longqizhanshen/article/details/107119808">2021最新 Maven之阿里云镜像仓库配置_longqizhanshen的博客-CSDN博客_maven阿里云镜像仓库</a></li><li><a href="https://blog.csdn.net/wushengjun753/article/details/114883662">java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty_小龙舟的工具书-CSDN博客</a></li><li><a href="https://www.cnblogs.com/huyuchengus/p/10987515.html">Maven 在 pom.xml 文件中配置 repositories 仓库 - huyuchengus - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/caiwenfeng_for_23/article/details/44514947">maven打包报错：Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.5:test_蚂蚁的专栏-CSDN博客</a></li><li><a href="https://www.hangge.com/blog/cache/detail_2844.html">使用Nexus搭建Maven私服教程（附：配置并使用私服教程） (hangge.com)</a></li><li><a href="https://blog.csdn.net/weixin_41806245/article/details/87812500">Nexus 3 Docker仓库（hosted、proxy、group）模式 讲解_xiliangMa的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/lijingjingchn/article/details/105510584">Maven deploy上传jar包到远程仓库_李京京的博客-CSDN博客_maven上传jar包到远程仓库</a></li><li><a href="https://mp.weixin.qq.com/s/TnpokzoiZGaGcIVJWFHw3w">悲剧！IDEA突然找不到类了？</a></li></ul><h2 id="spring-boot">spring-boot</h2><ul><li><a href="https://www.cnblogs.com/alltime/p/6729295.html">依赖注入的简单理解 - nowthink - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/weixin_53601359/article/details/114378460?utm_source=app&amp;app_version=4.13.0">Java常用注解(Annotation)详解汇总_布诺的博客-CSDN博客_java的注解</a></li><li><a href="http://c.biancheng.net/spring_boot/">Spring Boot框架入门教程（快速学习版） (biancheng.net)</a></li><li><a href="https://www.cnblogs.com/songxingzhu/p/9597927.html">使用SpringBoot的推荐项目目录结构 - 宋兴柱 - 博客园 (cnblogs.com)</a></li><li><a href="https://github.com/ityouknow/spring-boot-examples">ityouknow/spring-boot-examples: about learning Spring Boot via examples. Spring Boot 教程、技术栈示例代码，快速简单上手教程。 (github.com)</a></li><li><a href="https://github.com/dyc87112/SpringBoot-Learning">dyc87112/SpringBoot-Learning: Spring Boot基础教程，Spring Boot 2.x版本连载中！！！ (github.com)</a></li><li><a href="https://blog.didispace.com/java-lombok-how-to-use/">Java开发神器Lombok的使用与原理 | 程序猿DD (didispace.com)</a></li><li><a href="http://www.ityouknow.com/springboot/2017/05/09/spring-boot-deploy.html">Spring Boot(十二)：Spring Boot 如何测试打包部署 - 纯洁的微笑博客 (ityouknow.com)</a></li><li><a href="https://blog.didispace.com/spring-boot-learning-21-2-1/">Spring Boot 2.x基础教程：构建RESTful API与单元测试 | 程序猿DD (didispace.com)</a></li><li><a href="https://www.cnblogs.com/ASPNET2008/p/6511500.html">Spring Cache扩展：注解失效时间+主动刷新缓存 - min.jiang - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/hopeofthevillage/p/11427438.html">Mybatis的一级缓存和二级缓存的理解以及用法 - 全me村的希望 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/cxuanBlog/p/11333021.html">MyBatis 二级缓存全详解 - 程序员cxuan - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/xiaolyuh123/article/details/78819898">Spring Boot缓存实战 Redis 设置有效时间和自动刷新缓存-2_xiaolyuh的专栏-CSDN博客</a></li><li><a href="https://www.jb51.net/article/197772.htm">详解SpringBoot的三种缓存技术(Spring Cache、Layering Cache 框架、Alibaba JetCache 框架)_java_脚本之家 (jb51.net)</a></li><li><a href="https://blog.csdn.net/qq_45173404/article/details/108693030">SpringBoot配置文件&amp;YAML配置注入（详解）_欢迎来到 Baret~H 的博客-CSDN博客_springboot yml配置文件</a></li><li><a href="https://blog.csdn.net/weixin_36775115/article/details/79539811">SpringBoot配置-读取 .yml配置文件_总该长大了的博客-CSDN博客_spring读取yml配置文件</a></li><li><a href="https://www.cnblogs.com/hsbt2333/p/9347249.html">使用springboot + druid + mybatisplus完成多数据源配置 - 快乐在角落里 - 博客园 (cnblogs.com)</a></li><li><a href="https://mp.weixin.qq.com/s/M8N67DfWegiGEpwP02aJkQ">SpringCloud+SpringBoot+OAuth2+Spring Security+Redis实现的微服务统一认证授权 (qq.com)</a></li><li><a href="https://blog.csdn.net/qq_37933127/article/details/106248546">VS Code运行SpringBoot项目_陈灬大灬海-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s/BRRgcrphENx0iHSBljQtsA">用好Spring AOP，天降大锅从容应对！</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1266265125480448">使用AOP - 廖雪峰的官方网站 (liaoxuefeng.com)</a></li><li><a href="https://www.jianshu.com/p/421f7be8627c">SpringBoot+Mybatis配置多数据源及事务方案 - 简书 (jianshu.com)</a></li><li><a href="https://www.hangge.com/blog/cache/detail_2485.html">SpringBoot - 获取POST请求参数详解（附样例：表单数据、json、数组、对象） (hangge.com)</a></li><li><a href="https://blog.csdn.net/wang48430327/article/details/81064220">ApplicationContextAware使用_累死的青蛙-CSDN博客</a></li><li><span class="citation" data-cites="Configuration的使用">[spring4.0之二：@Configuration的使用 - duanxz - 博客园 (cnblogs.com)]</span>(https://www.cnblogs.com/duanxz/p/7493276.html)</li><li><a href="https://mp.weixin.qq.com/s/GprHnr0Y8vMIn5Pqujv3rw">金九银十到来，盘点今年截止八月的 80 篇原创文章列表，建议收藏慢慢看！ (qq.com)</a></li></ul><h2 id="动态crontab-quartz">动态crontab Quartz</h2><ul><li><a href="https://www.cnblogs.com/fandc/p/7277905.html">Java cron 任务执行表达式 - 开心就好也 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.matools.com/cron/">在线Cron表达式生成器 - 码工具 (matools.com)</a></li><li><a href="https://www.jb51.net/article/207667.htm">spring schedule配置多任务动态cron(增删启停)_java_脚本之家 (jb51.net)</a></li><li><a href="https://juejin.cn/post/6974659450260488200">利用Spring Boot轻松实现动态定时器开发！ (juejin.cn)</a></li><li><a href="https://blog.csdn.net/upxiaofeng/article/details/79415108">SpringBoot集成Quartz动态定时任务_upxiaofeng的专栏-CSDN博客_springboot集成quartz</a></li><li><a href="https://blog.csdn.net/weixin_40375601/article/details/109526971">springboot集成quartz，简版-通俗易懂_红桃∩-CSDN博客</a></li><li><a href="https://www.cnblogs.com/laoyeye/p/9352002.html">Quartz实现JAVA定时任务的动态配置 - 小卖铺的老爷爷 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/jpfss/p/10857077.html">SpringBoot整合Quartz实现定时任务 - 星朝 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/daxin/archive/2013/05/29/3105830.html">Quartz JobListener 任务监听器 - 大新博客 - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1640190">springboot整合quartz实现定时任务的动态修改，启动，暂停等操作 - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://github.com/EalenXie/SpringBoot-Quartz">EalenXie/SpringBoot-Quartz: SpringBoot整合Quartz作为调度中心使用完整实例 (github.com)</a></li><li><a href="https://www.cnblogs.com/ealenxie/p/9134602.html">SpringBoot整合Quartz作为调度中心完整实用例子 - EalenXie - 博客园 (cnblogs.com)</a></li><li><a href="https://github.com/nkcoder/quartz-explained">nkcoder/quartz-explained: 对定时任务调度框架quartz源码的阅读和注释(comments on quartz-core source) (github.com)</a></li><li><a href="http://ifeve.com/quartz-tutorial-using-quartz/">Quartz教程一：使用quartz | 并发编程网 – ifeve.com</a></li><li><a href="https://blog.csdn.net/u012907049/article/details/73801122">Spring Boot集成持久化Quartz定时任务管理和界面展示_天降风云的博客-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s/zJSPzcsFl72JNoqZpkH94A">SpringBoot 整合 Quartz 实现分布式调度 (qq.com)</a></li></ul><h2 id="mybatis">Mybatis</h2><ul><li><a href="http://c.biancheng.net/mybatis/">Java Mybatis框架入门教程</a></li><li><a href="http://c.biancheng.net/view/4309.html">第一个MyBatis程序 (biancheng.net)</a></li><li><a href="https://github.com/baomidou/awesome-mybatis-plus">baomidou/awesome-mybatis-plus:🎉A curated list of awesome things related to MyBatis-Plus (github.com)</a></li><li><a href="https://www.jb51.net/article/96242.htm">Mybatis Generator最完美配置文件详解(完整版)_java_脚本之家(jb51.net)</a></li><li><a href="https://github.com/zouzg/mybatis-generator-gui">zouzg/mybatis-generator-gui: mybatis-generator界面工具，让你生成代码更简单更快捷(github.com)</a></li><li><a href="https://blog.csdn.net/ftfy123/article/details/113763182">MyBatis Generator 超详细配置_ftfy123的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/liu649983697/article/details/113930493">mybatis-plus代码自动生成generator配置实现_liu649983697的专栏-CSDN博客</a></li><li><span class="citation" data-cites="MapperScan和">[Spring Boot的MyBatis注解：@MapperScan和@Mapper - MyBatis中文官网]</span>(http://www.mybatis.cn/archives/862.html)</li><li><a href="https://blog.csdn.net/mj_940620/article/details/110356785">springboot 配置多数据源（Aop+注解实现）_mj的博客-CSDN博客_springboot多数据源</a></li><li><a href="https://blog.csdn.net/chinawangfei/article/details/113618469">springboot整合mybatis-plus、druid连接池和多数据源配置_WorldMvp的专栏-CSDN博客_springboot整合mybatisplus多数据源</a></li><li><a href="https://mp.weixin.qq.com/s/EWiq8BS11FPKA4exKpOwdA">熟练掌握 MyBatis-Plus，这一篇就够了！ (qq.com)</a></li></ul><h2 id="设计模式">设计模式</h2><ul><li><a href="https://mp.weixin.qq.com/s/fnDvgOD7IKJ5ilVf3l3inA">23种设计模式的通俗解释，虽然有点污，但是秒懂</a></li><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式</a></li></ul><h2 id="java注解">Java注解</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/37701743">java注解-最通俗易懂的讲解</a></li><li><a href="https://www.runoob.com/w3cnote/java-annotation.html">Java注解（Annotation）</a></li></ul><h2 id="消息队列">消息队列</h2><h2 id="kafka">Kafka</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/37405836">Kafka简明教程 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/weixin_45366499/article/details/106943229">(1条消息) Kafka基本原理详解（超详细！）_蔡政洁的博客-CSDN博客_kafka</a></li><li><a href="https://www.jianshu.com/p/a036405f989c">Zookeeper在Kafka中的作用-简书(jianshu.com)</a></li><li><a href="https://support.huaweicloud.com/devg-kafka/kafka-python.html">Python_分布式消息服务 Kafka_开发指南_华为云 (huaweicloud.com)</a></li><li><a href="https://my.oschina.net/u/4395907/blog/3356363">kafka python 指定分区消费 与 offset - osc_3o8lxtf4的个人空间 - OSCHINA - 中文开源技术交流社区</a></li><li><a href="https://mp.weixin.qq.com/s/CfyfnGHcT0_ZpYis2wq7Dg" class="uri">https://mp.weixin.qq.com/s/CfyfnGHcT0_ZpYis2wq7Dg</a></li></ul><h2 id="rabbitmq">RabbitMQ</h2><ul><li><a href="https://www.jb51.net/os/Ubuntu/683325.html">Ubuntu 16.04 RabbitMq 安装与运行方法（安装篇）_Ubuntu/Debian_操作系统_脚本之家 (jb51.net)</a></li><li><a href="https://blog.csdn.net/u010134642/article/details/102525490">(1条消息) RabbitMQ 启动报错 Failed to check/redeclare auto-delete queue(s) access to vhost '/' refused for user_流浪的喵的博客-CSDN博客</a></li></ul><h2 id="elasticsearch">Elasticsearch</h2><ul><li><a href="https://blog.didispace.com/books/elasticsearch-definitive-guide-cn/010_Intro/05_What_is_it.html">是什么 · Elasticsearch 权威指南（中文版） (didispace.com)</a></li></ul><h2 id="spider-flow">spider-flow</h2><ul><li><a href="https://www.bookstack.cn/read/spiderflow-0.5.0/620e86c3c5a46c8b.md">使用教程 - 表达式语法 - 《spider-flow v0.5.0 使用手册》 - 书栈网 · BookStack</a></li><li><a href="https://www.spiderflow.org/">spider-flow (spiderflow.org)</a></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://blog.csdn.net/weixin_34344677/article/details/92073333">(3条消息) Logback不同业务日志写入不同文件_weixin_34344677的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/zeng1994/p/f9bff238b13a0bf8fb8bf88c41db7a34.html">SpringBoot+logback实现按业务输出日志到不同的文件 - zeng1994 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/white_ice/article/details/85065219?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control">springboot使用logback日志框架超详细教程_white_ice的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/gavincoder/p/10091757.html">logback配置文件-logback.xml详解 - 马非白即黑 - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1445599">springboot超级详细的日志配置(基于logback) - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://www.cnblogs.com/cb0327/p/5770794.html">logback 配置详解（二）——appender - 灰太郎^_^ - 博客园 (cnblogs.com)</a></li><li><a href="https://www.php.cn/java-article-406687.html">如何使用java代码编写logback配置-java教程-PHP中文网</a></li><li><a href="http://www.51gjie.com/javaweb/1113.html">RollingFileAppender详解 (51gjie.com)</a></li><li><a href="https://www.cnblogs.com/Hlingoes/p/13109918.html">java代码动态自定义logback日志Appender - Hlingoes - 博客园 (cnblogs.com)</a></li></ul><h2 id="datax">DataX</h2><ul><li><a href="https://blog.csdn.net/qq_39945938/article/details/117959051">Datax 源码打包报错与解决方法_终回首的博客-CSDN博客</a></li><li><a href="https://developer.aliyun.com/article/642896">【DataX】Java中集成DataX开发-阿里云开发者社区 (aliyun.com)</a></li><li><a href="https://www.jb51.net/article/168672.htm">关于通过java调用datax,返回任务执行的方法_java_脚本之家 (jb51.net)</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://www.cnblogs.com/xiaoniu-666/p/9491897.html">C++ 对象实例化（转）</a></li><li><a href="https://blog.csdn.net/sinat_38259539/article/details/71799078">Java基础之—反射（非常重要）_sinat_38259539的博客-CSDN博客_java反射</a></li><li><a href="https://www.xuxueli.com/xxl-job/">分布式任务调度平台XXL-JOB (xuxueli.com)</a></li><li><a href="https://www.jianshu.com/p/e2850153c6f0">Quartz 使用：Job、Trigger、Schedule - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_33667967/article/details/95602890">ubuntu16 jdk1.8 java new Date()获取的时间与服务器不一致_qq_33667967的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/L_it123/article/details/106845391">【已解决】com.mysql.jdbc.exceptions.jdbc4.CommunicationsExcepti：Communications link failure mysql连接报错_L_it123的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_44778151/article/details/116265825">springboot项目的.gitignore模板_Anjude的博客-CSDN博客</a></li><li><a href="http://www.seaxiang.com/blog/vsimp">vscode跳转到接口方法的实现类 (seaxiang.com)</a></li><li><a href="https://www.cnblogs.com/116970u/p/11408508.html">IntelliJ IDEA 接口类跳转到实现类及实现类跳转到接口 - 清晨的第一抹阳光 - 博客园 (cnblogs.com)</a></li><li><a href="https://geek-docs.com/vscode/vscode-tutorials/vs-code-definition-implementation-jump.html">VSCode 定义和实现间跳转|极客教程 (geek-docs.com)</a></li><li><a href="https://mp.weixin.qq.com/s/1rhVo2DG9zq5tt_RrpYaJw" class="uri">https://mp.weixin.qq.com/s/1rhVo2DG9zq5tt_RrpYaJw</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/k8s/README/"/>
    <url>/k8s/README/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s-learning">k8s-learning</h1><h2 id="k8s-集群部署">k8s 集群部署</h2><h2 id="kubectl-教程">kubectl 教程</h2>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/k8s/docker/"/>
    <url>/k8s/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker">docker</h1><h2 id="原理">原理</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/GAAJOoF6hCRY0CxfaTpfAg">Docker 夺命连环 15 问</a></p></li><li><p><a href="https://draveness.me/docker/">Docker 核心技术与实现原理</a></p></li><li><p><a href="https://www.cnblogs.com/michael9/p/13039700.html">一篇文章带你吃透 Docker 原理</a></p></li><li><p><a href="https://www.cnblogs.com/handwrit2000/p/12871493.html">docker 镜像分层原理</a></p></li><li><p><a href="http://dockone.io/article/1513">Docker五种存储驱动原理及应用场景和性能测试对比</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/EHgCOgXJfZ7OtV35qDzzsg">技术总监对Docker理解的太透彻了，几句话给程序员新人整的明明白白！</a></p></li><li><p><a href="https://blog.csdn.net/weixin_51484460/article/details/125041875">【云原生|实战入门】1：Docker、K8s简单实战与核心概念理解</a></p></li><li><p><a href="https://blog.csdn.net/u012385733/article/details/102565591">chroot，pivot_root和switch_root 区别</a></p></li><li><p><a href="https://www.cnblogs.com/valon/p/6869368.html">inode、chroot、pivot_root</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/101096040">pivot_root实现原理</a></p></li><li><p><a href="https://www.cnblogs.com/bianhao3321/p/6873511.html">PIVOT_ROOT命令的使用</a></p></li><li><p><a href="https://blog.51cto.com/jiangjqian/381778">chroot, exec, pivot_root</a></p></li><li><p><a href="https://www.bilibili.com/read/cv11533449/">自己写Docker_挂载busybox作为容器操作系统的rootfs</a></p></li><li><p><a href="https://www.toutiao.com/article/7195362738607424003">寻根究底，为什么Docker中的Alpine Linux镜像能这么小</a></p></li><li><p><a href="https://www.toutiao.com/article/7208512937982689831">【容器安全篇】原来root在容器里也不是万能的</a></p></li></ul><h2 id="基础">基础</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/82433360">Docker学习笔记</a></li><li><a href="https://www.cnblogs.com/lhns/p/13958249.html">ubuntu docker开启2375端口，支持远程访问</a></li><li><a href="https://blog.csdn.net/u014374009/article/details/114010841">docker出现GPG error: At least one invalid signature was encountered相关问题及解决方法</a></li><li><a href="https://m.php.cn/docker/486829.html">docker基础镜像有哪些</a></li></ul><h2 id="安装">安装</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">Docker Community Edition 镜像使用帮助</a></li><li><a href="https://docs.docker.com/engine/install/debian/">Install Docker Engine on Debian</a></li><li><a href="https://www.cnblogs.com/langkyeSir/p/14032801.html">Deepin v20 正式版安装 Docker</a></li></ul><h2 id="docker源">docker源</h2><ul><li><a href="https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard">阿里云Docker镜像仓库</a></li></ul><h2 id="dockerfile">DockerFile</h2><ul><li><p><a href="https://blog.csdn.net/tengchengbaba/article/details/83501697">DockerFile集成mysql，nginx，zookeeper，redis，tomcat为一个镜像</a></p></li><li><p><a href="http://wxnacy.com/2020/10/01/docker-source-not-found/">Docker build时提示source not found</a></p></li><li><p><a href="https://blog.csdn.net/tony1130/article/details/53170228">通过Dockerfile文件为linux images添加新用户</a></p></li><li><p><a href="https://blog.csdn.net/a12345676abc/article/details/84651477">docker环境变量设置</a></p></li><li><p><a href="https://www.cnblogs.com/erlou96/p/13884646.html">docker 容器服务脚本自启动</a></p></li><li><p><a href="https://jiayaoo3o.github.io/2019/06/29/docker%E5%AE%B9%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/">docker容器设置时区</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/tcv0zPDzfrFX_uvPPJ7lHw">构建 Docker 镜像的 N 个小技巧，运维工程师看过来，学到了~</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/vI5rs_4ukKhaPcT8EolahA">你在使用 Docker 吗？那不能错过这款 Linux</a></p></li></ul><h2 id="上下文路径">上下文路径</h2><ul><li><a href="https://www.runoob.com/docker/docker-dockerfile.html">Docker Dockerfile上下文路径</a></li><li><a href="https://blog.csdn.net/chenji4315/article/details/100623754">使用 Dockerfile 定制镜像 镜像构建上下文（Context）</a></li></ul><h2 id="命令补全">命令补全</h2><ul><li><a href="https://blog.csdn.net/Mr_chunping/article/details/122089360">解决ubuntu docker容器命令tab无法自动补全问题</a></li><li><a href="https://blog.csdn.net/qq_39680564/article/details/97026656">docker疑难杂症：docker命令Tab无法自动补全</a></li></ul><h2 id="commit">commit</h2><ul><li><a href="https://www.runoob.com/w3cnote/docker-use-container-create-image.html">Docker 使用容器来创建镜像</a></li><li><a href="https://blog.csdn.net/Aeve_imp/article/details/101531225">Docker 将容器打包成新镜像，将镜像打包成文件和加载镜像包</a></li></ul><h2 id="端口映射">端口映射</h2><ul><li><a href="https://www.cnblogs.com/kevingrace/p/9453987.html">Docker容器内部端口映射到外部宿主机端口-运维笔记</a></li><li><a href="https://mp.weixin.qq.com/s/zbbTNjcNNcJFGN9lbaqqPw">6 张图详解 Docker 容器网络配置</a></li><li><a href="https://www.toutiao.com/article/7174322723983098368">5 年工作经验，Docker 的几种网络模式都说不清，你敢信？</a></li><li><a href="https://mp.weixin.qq.com/s/ZN-84Z_NMdFF9pqWXQJk_A">不可错过！5 张图带你搞懂容器网络原理</a></li></ul><h2 id="磁盘清理">磁盘清理</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1581147">如何清理 Docker 占用的磁盘空间</a></li><li><a href="https://zhuanlan.zhihu.com/p/65938559">Docker容器动态添加端口</a></li><li><a href="https://blog.csdn.net/weixin_42271016/article/details/104786418">使用iptables为docker容器动态添加端口映射</a></li><li><a href="https://blog.csdn.net/weixin_42181917/article/details/107936753">docker容器启动后添加端口映射</a></li></ul><h2 id="docker-compose">Docker-compose</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43997548/article/details/122693332">docker-compose部署mysql</a></p></li><li><p><a href="https://www.pudn.com/news/62bc68c1f3cc394cf1dd7c3b.html">docker-compose配置mysql，密码无效问题修复已实践</a></p></li><li><p><a href="https://www.akersman.com/article/71">Docker mysql:5.7 root用户无法登录的问题</a></p></li><li><p><a href="https://www.stechies.com/error-1045-28000-access-denied-user-root-localhost/Error%201045%20(28000)%20access%20denied%20for%20user%20root%20localhost">Error 1045 (28000) access denied for user root localhost</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cbRW2jnq4pFiSaJ6KxI4Nw">为什么不建议你在 Docker 中跑 Mysql ?</a></p></li><li><p><a href="http://docs.lvrui.io/2017/02/19/docker-socket%E8%AE%BE%E7%BD%AE/">docker socket设置</a></p></li><li><p><a href="https://www.srcmini.com/50365.html">如何更改Docker sock文件的位置？</a></p></li><li><p><a href="https://developer.aliyun.com/article/768343">懂了！VMware/KVM/Docker原来是这么回事儿</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes</title>
    <link href="/k8s/kubernetes/"/>
    <url>/k8s/kubernetes/</url>
    
    <content type="html"><![CDATA[<h1 id="kubernetes">kubernetes</h1><ul><li><p><a href="https://kubernetes.io/zh-cn/docs/tutorials/kubernetes-basics/"><font color=Red>学习 Kubernetes 基础知识</font></a></p></li><li><p><a href="http://docs.kubernetes.org.cn/">Kubernetes中文社区|中文文档</a></p></li><li><p><a href="https://jimmysong.io/kubernetes-handbook/" class="uri">https://jimmysong.io/kubernetes-handbook/</a></p></li><li><p><a href="https://www.kubernetes.org.cn/kubernetes-pod">名词解释 Pods 在Kubernetes中，最小的管理元素不是一个个独立的容器，而是Pod</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43296313/article/details/121334485">k8s集群核心概念pod</a></p></li></ul><h2 id="教程">教程</h2><ul><li><a href="https://www.cnblogs.com/caodan01/category/2009111.html"><font color=Red>k8s系列教程</font></a></li><li><a href="https://www.cnblogs.com/caodan01/p/15102328.html">1kubernetes简介及架构图</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15102386.html">2kubeadm安装k8s</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15102902.html">kubernetes之安装集群图形化界面Dadhboard</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15104491.html">3二进制安装k8s</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15107971.html">4k8s之资源管理 ； yaml语言</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15120056.html">5kubernetes实战初入门</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15123078.html">6k8s之Pod结构、配置、生命周期、调度</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15133014.html">7k8s之Pod控制器详解</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15133112.html">8k8s之service和ingress详解</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15136177.html">9k8s之Endpoints、健康服务检查、高可用、搭建wordpress</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15136217.html">10k8s之数据持久化</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15137507.html">13基本存储、高级存储、存储配置</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15137960.html">14k8s之StorageClass，ConfigMap，Secret</a></li></ul><h2 id="k8s集群安装教程">K8s集群安装教程</h2><ul><li><p><a href="https://github.com/realwujing/linux-learning/blob/master/k8s/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.md"><font color=Red>k8s集群安装教程</font></a></p></li><li><p><a href="https://blog.csdn.net/sinat_32582203/article/details/119795858">使用kubeadm初始化k8s集群的一些问题解决办法</a></p></li><li><p><a href="https://blog.csdn.net/qq_43762191/article/details/125567365">【问题解决】[kubelet-check] The HTTP call equal to ‘curl -sSL http://localhost:10248/healthz‘ failed wite</a></p></li><li><p><a href="https://blog.51cto.com/u_15502785/5167925">kubeadm初始化异常</a></p></li><li><p><a href="https://blog.csdn.net/weixin_46415378/article/details/124435362?spm=1001.2014.3001.5502">Kubernetes(二)——安装部署集群</a></p></li><li><p><a href="https://huangzhongde.cn/istio/Chapter2/Chapter2-7.html">2.7 安装网络插件 calico</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/lywYEHS_4Egv-Yp7NjBUlA">16 张图硬核讲解 Kubernetes 网络</a></p></li><li><p><a href="https://blog.csdn.net/qq_44306975/article/details/121603411">搭建k8s集群并安装kubeSphere</a></p></li><li><p><a href="https://www.cnblogs.com/linyouyi/p/10850904.html">kubernetes忘记token或者token过期怎么加入k8s集群</a></p></li></ul><h2 id="dashboard">dashboard</h2><ul><li><p><a href="https://blog.csdn.net/mshxuyi/article/details/108425487">K8S 安装 Dashboard</a></p></li><li><p><a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/">部署和访问 Kubernetes 仪表板（Dashboard）</a></p></li><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md"><font color=Red>Accessing Dashboard</font></a></p></li><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md" class="uri">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</a></p></li><li><p><a href="https://blog.csdn.net/wangkaizheng123/article/details/107492833"><font color=Red>k8s在Ubuntu上安装dashboard</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_34386723/article/details/106290681"><font color=Red>k8s忘记dashboard密码</font></a></p></li><li><p><a href="https://blog.csdn.net/zhangkaiadl/article/details/122125364"><font color=Red>Kubernetes Dashboard 生成token</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">- kubectl-nkubernetes-dashboard get secret $(kubectl-nkubernetes-dashboard getsa/admin-user -ojsonpath=<span class="hljs-string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o go-template=<span class="hljs-string">&quot;&#123;&#123;.data.token| base64decode&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure></p></li></ul><h2 id="notready">NotReady</h2><ul><li><p><a href="https://blog.csdn.net/w849593893/article/details/119883531">k8s master节点状态为 NotReady问题解决</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectlget secret -nkube-system |grepadmin|awk<span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br><br>kubectldescribe secret dashboard-admin-token-mqspz-nkube-system|grep<span class="hljs-string">&#x27;^token&#x27;</span>|awk<span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br><br>kubeadmjoin 10.20.52.86:6443 token pxdv83.8358nle1q7qwhhvp<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.toutiao.com/article/7120818388343079428">K8s 选 cgroupfs 还是 systemd？</a></p></li><li><p><a href="https://huangzhongde.cn/post/Kubernetes/Kubernetes_enable_Swap_support/">Kubernetes开启Swap支持</a></p></li></ul><h2 id="debian-10">Debian 10</h2><ul><li><a href="https://copyfuture.com/blogs-details/20210325174246270m">Debian10下的k8s快速部署（基于kubeadm）</a></li></ul><h2 id="kubectl">kubectl</h2><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-macos/">在 macOS 系统上安装和设置 kubectl</a></li><li><a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/cheatsheet/"><font color=Red>本页列举了常用的 “kubectl” 命令和标志 </font></a></li><li><a href="http://events.jianshu.io/p/e5bf55d2a695"><font color=Red>Kubectl 常用命令分类记录</font></a></li><li><a href="https://www.cnblogs.com/wengzhijie/p/11412523.html">kubectl describe命令详解</a></li><li><a href="https://blog.csdn.net/duanbaoke/article/details/119813814"><font color=Red>K8S中 yaml 文件详解（pod、deployment、service）</font></a></li><li><a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop">为Docker Desktop for Mac/Windows开启Kubernetes和Istio</a></li></ul><h2 id="master节点">master节点</h2><ul><li><a href="https://www.cnblogs.com/panw/p/16643652.html">k8s允许master节点参与调度的设置方法</a></li><li><a href="https://blog.csdn.net/omaidb/article/details/121930341">k8s节点调度</a></li></ul><h2 id="更新镜像">更新镜像</h2><ul><li><p><a href="https://www.likecs.com/show-305889366.html">kubectl 更新容器镜像</a></p></li><li><p><a href="https://blog.csdn.net/liumiaocn/article/details/73913597">Kubernetes之kubectl常用命令使用指南:1:创建和删除</a></p></li><li><p><a href="https://blog.csdn.net/zhengzaifeidelushang/article/details/122545990">K8s系列之：kubectl子命令详解set image</a></p></li><li><p><a href="https://blog.csdn.net/fuck487/article/details/102721725">kubernetes使用用户名和密码拉取docker镜像</a></p></li><li><p><a href="https://www.modb.pro/db/383273">如何在 K8S 集群范围使用 imagePullSecret？</a></p></li></ul><h2 id="minikube">minikube</h2><ul><li><p><a href="https://www.cnblogs.com/qa-freeroad/p/14182522.html">macOS安装minikube</a></p></li><li><p><a href="https://blog.csdn.net/qq_34146694/article/details/110955691">minikube 单机多节点</a></p></li><li><p><a href="https://xkcoding.com/2019/01/14/solve-mac-install-minikube-problem.html">解决 Mac 安装最新版 minikube 出现的问题</a></p></li><li><p><a href="https://minikube.sigs.k8s.io/docs/start/" class="uri">https://minikube.sigs.k8s.io/docs/start/</a></p></li><li><p><a href="https://blog.csdn.net/u010953609/article/details/121489147">Ubuntu 18.04/20.04 部署minikube</a></p></li><li><p><a href="https://blog.csdn.net/fish_study_csdn/article/details/120707928">Mac上k8s安装之minikube 安装与使用</a></p></li><li><p><a href="https://www.cnblogs.com/cocowool/p/minikube_setup_and_first_sample.html">Minikube体验</a></p></li><li><p><a href="https://blog.csdn.net/cheng_fu/article/details/109507796">Minikube 入门介绍</a></p></li><li><p><a href="https://www.linuxtechi.com/install-minikube-on-debian-10/" class="uri">https://www.linuxtechi.com/install-minikube-on-debian-10/</a></p></li><li><p><a href="https://medium.com/swlh/how-to-run-locally-built-docker-images-in-kubernetes-b28fbc32cc1d">How to Run Locally Built Docker Images in Kubernetes</a></p></li><li><p><a href="https://blog.51cto.com/u_14449327/4974873">【最全国内安装教程】通过minikube运行单节点Kubernetes集群</a></p></li><li><p><a href="https://github.com/AliyunContainerService/minikube/wiki" class="uri">https://github.com/AliyunContainerService/minikube/wiki</a></p></li></ul><h2 id="configmap">configmap</h2><ul><li><a href="https://blog.csdn.net/weixin_47415962/article/details/116003059">k8s中configmap挂载配置nginx.conf</a></li><li><a href="https://mdnice.com/writing/9758102aed3a4acf8807bf2d34c2ee34">实战：ConfigMap(可变应用配置管理)-2021.11.25</a></li></ul><h2 id="subpath">subPath</h2><ul><li><a href="https://www.cnblogs.com/gdut1425/p/13112176.html">【原创】Kubernetes-subPath的使用</a></li></ul><h2 id="secret">secret</h2><ul><li><a href="https://www.cnblogs.com/williamzheng/p/11464883.html">kubernetes secret和serviceaccount删除</a></li></ul><h2 id="存储">存储</h2><ul><li><a href="https://www.cnblogs.com/zhanglianghhh/p/13861817.html">Kubernetes K8S之存储PV-PVC详解</a></li><li><a href="https://www.toutiao.com/article/6922438959575040523/">k8s之PV、PVC、StorageClass详解</a></li><li><a href="https://www.jianshu.com/p/7de8d639aa09">kubernetes（k8s）PVC的使用</a></li><li><a href="https://blog.csdn.net/xiaoguangtouqiang/article/details/104053077">K8s中pv和pvc的使用</a></li><li><a href="https://www.toutiao.com/article/6922438959575040523">k8s之PV、PVC、StorageClass详解</a></li><li><a href="https://www.cnblogs.com/qlqwjy/p/15817294.html"><font color=Red>k8s持久化存储PV、PVC、StorageClass</font></a></li></ul><h2 id="yaml">yaml</h2><ul><li><a href="https://blog.csdn.net/u013798334/article/details/115160683">golang的yaml解析（使用“-”分隔的多文档解析）</a></li></ul><h2 id="calico">Calico</h2><ul><li><a href="https://www.cnblogs.com/abcdef/p/11651974.html">k8s pod访问不通外网问题排查</a></li><li><a href="http://%E3%80%8CKubernetes%E3%80%8D-%20%E5%B8%B8%E8%A7%81%20Calico%20%E9%97%AE%E9%A2%98%20@1.52.98.246/">https://blog.51cto.com/u_11101184/3134907</a></li><li><a href="https://www.unixcloudfusion.in/2022/02/solved-caliconode-is-not-ready-bird-is.html">[Solved] calico/node is not ready: BIRD is not ready: BGP not established (Calico 3.6 / k8s 1.14.1)</a></li><li><a href="https://mp.weixin.qq.com/s/M0BkXBMkNBECnmC6UBRDIg">图解 Kubernetes 容器网络发展</a></li></ul><h2 id="namespace">namespace</h2><ul><li><a href="https://www.toutiao.com/article/7106748671789826592">今天讲讲k8s中的namespace</a></li></ul><h2 id="path">path</h2><ul><li><a href="https://www.cnblogs.com/lizhaoxian/p/11544394.html">kubectl patch</a></li></ul><h2 id="服务实践">服务实践</h2><ul><li><p><a href="https://www.dandelioncloud.cn/article/details/1507208260900966401">k8s集群上部署mysql服务实践</a></p></li><li><p><a href="https://blog.csdn.net/wuchenlhy/article/details/124353338">k8s部署mysql</a></p></li><li><p><a href="https://blog.csdn.net/alwaysbefine/article/details/125633538">k8s集群安装部署单机MySQL（使用StorageClass作为后端存储）</a></p></li><li><p><a href="http://t.zoukankan.com/pluto-charon-p-14411780.html">k8s部署mysql数据持久化</a></p></li><li><p><a href="https://blog.csdn.net/koukouwuwu/article/details/118152375">解决k8s集群在节点运行kubectl出现的错误：The connection to the server localhost:8080 was refused - did you specify t</a></p></li><li><p><a href="https://blog.csdn.net/lisongyue123/article/details/109643218">kubectl命令出现错误“The connection to the server localhost:8080 was refused”</a></p></li><li><p><a href="https://www.toutiao.com/article/7204823884712985144">Kubernetes新版本不支持Docker，是真的吗？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>namespace</tag>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>namespace-cgroup</title>
    <link href="/k8s/namespace-cgroup/"/>
    <url>/k8s/namespace-cgroup/</url>
    
    <content type="html"><![CDATA[<h1 id="namespace-cgroup">namespace cgroup</h1><ul><li><p><a href="https://hyperj.net/2016/2016-11-23-linux-sandbox/">Linux沙箱技术</a></p></li><li><p><a href="https://atbug.com/sandboxed-container/">沙盒化容器：是容器还是虚拟机</a></p></li><li><p><a href="https://www.cnblogs.com/wjoyxt/p/9935098.html">Linux的Namespace与Cgroups介绍</a></p></li><li><p><a href="https://docs.flatpak.org/zh_CN/latest/sandbox-permissions.html">沙箱权限</a></p></li><li><p><a href="https://www.cnblogs.com/bakari/p/8560437.html">Docker 基础技术之 Linux namespace 详解</a></p></li><li><p><a href="https://blog.csdn.net/gatieme/article/details/51383322">Linux的命名空间详解Linux进程的管理与调度（二）</a></p></li><li><p><a href="https://www.toutiao.com/i6694554806003958284/">浅谈Cgroups</a></p></li><li><p><a href="https://www.cnblogs.com/menkeyi/p/10941843.html">LINUX CGROUP总结</a></p></li><li><p><a href="https://segmentfault.com/a/1190000006878392">Linux mount （第一部分）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000006899213">Linux mount （第二部分 - Shared subtrees）</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1531989">命名空间介绍之八：挂载命名空间和共享子树</a></p></li><li><p><a href="https://segmentfault.com/a/1190000009732550">Linux Namespace和Cgroup</a></p></li><li><p><a href="https://www.cnblogs.com/sparkdev/p/9462838.html">Linux Namespace : User</a></p></li><li><p><a href="https://source.android.com/devices/architecture/vndk/linker-namespace?hl=zh_cn">链接器命名空间</a></p></li><li><p><a href="https://segmentfault.com/a/1190000009309276">走进docker系列：开篇</a></p></li><li><p><a href="https://www.toutiao.com/article/7106794699364745768">3分钟快速了解Docker的底层原理</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1531673">命名空间介绍之五：用户命名空间</a></p></li><li><p><a href="https://www.cnblogs.com/chendeqiang/p/14318770.html">LXC容器</a></p></li><li><p><a href="https://lequ7.com/guan-yu-docker-che-di-gao-dong-rong-qi-ji-shu-de-ji-shi-namespace-xia.html">关于docker:彻底搞懂容器技术的基石-namespace-下</a></p></li><li><p><a href="https://copyfuture.com/blogs-details/202112141432392239">徹底搞懂容器技術的基石：namespace（下）</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/434731896">一篇搞懂容器技术的基石： cgroup</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/443605569">搞懂容器技术的基石： namespace （上）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/CDEr3aM1MyxR_g5u_X0rGQ">使用eBPF LSM热修复Linux内核漏洞</a></p></li><li><p><a href="https://blog.csdn.net/xundh/article/details/106780266">Docker 学习笔记12 容器技术原理 User Namespace</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zVmwzZ5WC4cbp19CrAtFdA">探秘 Docker 容器化技术黑科技 Cgroups</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/9p8-qeIMvAPBwZBh4YEhTg">使用 Linux 网络虚拟化技术探究容器网络原理</a></p></li><li><p><a href="https://codeantenna.com/a/JHdL7Auz5n">LINUX系统安全_SANDBOX</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/C%20%E5%AE%9E%E7%8E%B0%20C++%20%E7%B1%BB/README/"/>
    <url>/cpp/C%20%E5%AE%9E%E7%8E%B0%20C++%20%E7%B1%BB/README/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/onlyshi/article/details/81672279">C 语言实现面向对象编程_onlyshi的专栏-CSDN博客_c 面向对象</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>C 实现 C++ 类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/README/"/>
    <url>/cpp/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/README/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tmhanks/article/details/89110833?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link">GDB查看C++对象布局_tmhanks的博客-CSDN博客</a></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gams">GDB查看对象如下：<br>(gdb) <span class="hljs-keyword">set</span> print <span class="hljs-comment">object on</span><br>(gdb) <span class="hljs-keyword">set</span> <span class="hljs-comment">print vtbl on</span><br>(gdb) <span class="hljs-keyword">set</span> <span class="hljs-comment">print pretty on</span><br>((gdb) p <span class="hljs-comment">base</span><br>$7 = (Base) &#123;<br>_vptr.Base <span class="hljs-comment">= 0x403a50 &lt;vtable for Base+16&gt;,</span><br>m_base <span class="hljs-comment">= 0,</span><br>static <span class="hljs-comment">m_tmp = 1</span><br>&#125;<br>(gdb) info <span class="hljs-comment">vtbl base</span><br>vtable <span class="hljs-comment">for</span> ‘<span class="hljs-comment">Base</span>’ <span class="hljs-comment">@ 0x403a50 (subobject @ 0x7fffffffdf60):</span><br>[0]: 0x402830 <span class="hljs-comment">Base::</span>~<span class="hljs-comment">Base()</span><br>[1]: 0x402930 <span class="hljs-comment">Base::</span>~<span class="hljs-comment">Base()</span><br>[2]: 0x402ae0 <span class="hljs-comment">&lt;Base::print() const&gt;</span><br>————————————————<br>版权声明：本文为CSDN博主「流水之川」的原创文章，遵循CC <span class="hljs-comment">4.0 BY-SA</span>版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/tmhanks/article/details/89110833</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>C++对象的内存布局</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/README/"/>
    <url>/cpp/thread/README/</url>
    
    <content type="html"><![CDATA[<h1 id="pthread与stdthread">pthread与std::thread</h1><h2 id="pthread"><a href="pthread">pthread</a></h2><h2 id="stdthread"><a href="thread">std::thread</a></h2>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/valgrind/README/"/>
    <url>/cpp/valgrind/README/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/75416381">内存泄漏检测工具valgrind神器</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>valgrind</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群安装教程</title>
    <link href="/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s集群安装教程">k8s集群安装教程</h1><h2 id="masternode节点安装">master、node节点安装</h2><ol type="1"><li><p>切换到root用户</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su -<br></code></pre></td></tr></table></figure></p></li><li><p>配置host</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">cat &lt;&lt; EOF &gt;&gt; /etc/hosts<br>192.169.1.210 k8s-master<br>192.169.1.211 k8s-node1<br>192.169.1.212 k8s-node2<br>EOF<br></code></pre></td></tr></table></figure></p></li><li><p>修改主机名 每台主机都要修改</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hostnamectl set-hostname k8s-master<br>hostnamectl set-hostname k8s-node1<br>hostnamectl set-hostname k8s-node2<br></code></pre></td></tr></table></figure></p></li><li><p>关闭swap分区 每台主机都要关闭</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时关闭</span><br>swapoff -a<br><span class="hljs-comment"># 永久关闭(老版本)</span><br>sed -i <span class="hljs-string">&#x27;/swap/s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab<br><span class="hljs-comment"># 永久关闭(新版本)</span><br>只需要编辑 /etc/fstab 文件，不要注释掉 swap 那一行<br>而是在其后面默认的挂载选项 defaults 后面加上 noauto 变成 defaults,noauto。<br><br><span class="hljs-built_in">cat</span> /etc/fstab<br><span class="hljs-comment"># 查看是否注释</span><br></code></pre></td></tr></table></figure></p><ul><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.swap.html">https://www.freedesktop.org/software/systemd/man/systemd.swap.html</a></li><li><a href="https://cnzhx.net/blog/disable-swap-in-opensuse-tumbleweed/">openSUSE Tumbleweed 中禁用 SWAP</a></li></ul></li><li><p>安装docker</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">参考清华Docker Community Edition 镜像使用帮助安装docker</a></li></ul></li><li><p>修改docker Cgroup驱动</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF&gt; /etc/docker/daemon.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure></p></li><li><p>安装k8s</p><ul><li><p><a href="https://developer.aliyun.com/mirror/kubernetes?spm=a2c6h.13651102.0.0.73bf1b11EI1d2X">添加阿里云 Kubernetes 镜像仓库</a></p></li><li><p><a href="https://blog.csdn.net/u012069313/article/details/125561711">【Kubernetes系列】K8s由1.24.1降级为1.23.8</a></p></li><li><p><a href="https://www.51cto.com/article/707507.html">Kubernetes 1.24 将结束对dockershim 的支持</a></p></li><li><p><a href="https://kubernetes.io/zh-cn/blog/2022/04/07/upcoming-changes-in-kubernetes-1-24/">Kubernetes 1.24 的删除和弃用</a></p></li></ul><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install -y kubelet=1.23.8-00 kubeadm=1.23.8-00 kubectl=1.23.8-00<br></code></pre></td></tr></table></figure></p></li><li><p>设置kubectl命令补全</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install bash-completion<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;source /usr/share/bash-completion/bash_completion&#x27;</span> &gt;&gt;~/.bashrc<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;source &lt;(kubectl completion bash)&#x27;</span> &gt;&gt;~/.bashrc<br></code></pre></td></tr></table></figure></p></li><li><p>初始化k8s-master节点</p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">–apiserver-advertise-address 192.168.2.248 填写你自己k8s-master的IP地址<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm init \<br>--apiserver-advertise-address 192.168.2.248 \<br>--image-repository registry.aliyuncs.com/google_containers \<br>--pod-network-cidr=10.244.0.0/16 \<br>--service-cidr=10.1.0.0/16<br></code></pre></td></tr></table></figure></p></li><li><p>拷贝 kubectl 使用的连接 k8s 认证文件到默认路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export KUBECONFIG=$HOME/.kube/config&#x27;</span> &gt;&gt;~/.bashrc<br></code></pre></td></tr></table></figure><ul><li>初始化成功之后记录以下信息，添加node节点时使用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm <span class="hljs-built_in">join</span> 192.169.1.210:6443 --token s2zrot.578bgfdqcr44aivw \<br>--discovery-token-ca-cert-hash sha256:a4b764099ac50a152d8d9a7640c16380297bae8c7ffafd6e3ca76144bfde9f6c<br></code></pre></td></tr></table></figure></li><li><p>安装Pod网络插件 calico</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://docs.projectcalico.org/v3.18/manifests/calico.yaml<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/w849593893/article/details/119883531">k8s master节点状态为 NotReady问题解决</a></li></ul></li><li><p>添加node节点</p><ul><li>以下操作在Node节点上执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su -<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm <span class="hljs-built_in">join</span> 192.169.1.210:6443 --token s2zrot.578bgfdqcr44aivw \<br>--discovery-token-ca-cert-hash sha256:a4b764099ac50a152d8d9a7640c16380297bae8c7ffafd6e3ca76144bfde9f6c<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/linyouyi/p/10850904.html">kubernetes忘记token或者token过期怎么加入k8s集群</a></li></ul></li></ol><h2 id="k8s-dashboard">k8s dashboard</h2><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/">部署和访问 Kubernetes 仪表板（Dashboard）</a></li></ul><ol type="1"><li><p>部署 Dashboard UI</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml<br></code></pre></td></tr></table></figure></p><ul><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md">https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md</a></p></li><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</a></p></li></ul></li><li><p>更改ClusterIP为NodePort</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n kubernetes-dashboard edit service kubernetes-dashboard<br></code></pre></td></tr></table></figure></p></li><li><p>创建配置文件 dashboard-adminuser.yaml</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/realwujing/k8s-learning/blob/dff12f0c9f2cf74ee13e0aa44babbd2786279bf2/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/dashboard-adminuser.yaml<br></code></pre></td></tr></table></figure></p><p>具体参考：</p><ul><li><a href="https://blog.csdn.net/qq_41538097/article/details/125561769">k8s入门：kubernetes-dashboard 安装</a></li></ul></li><li><p>执行</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f dashboard-adminuser.yaml<br></code></pre></td></tr></table></figure></p></li><li><p>k8s忘记dashboard密码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n kubernetes-dashboard get secret<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl describe secret admin-user-token-76rq7 -n kubernetes-dashboard<br></code></pre></td></tr></table></figure></p><p>也可通过下方一行命令获取token：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure></p></li><li><p>获取 kubernetes-dashboard 对外暴露端口</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get svc --all-namespaces<br></code></pre></td></tr></table></figure></p></li><li><p>访问k8s dashboard</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://192.169.1.210:32188<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.jianshu.com/p/1719a27137e3">Chrome您的连接不是私密连接解决办法</a></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">thisisunsafe<br></code></pre></td></tr></table></figure></p></li></ol><h2 id="kubeadm-reset">kubeadm reset</h2><ul><li><a href="https://sandeepnkulkarni.wordpress.com/2020/07/11/reset-kubernetes-cluster-using-kubeadm/">Reset Kubernetes Cluster using kubeadm</a></li></ul><h2 id="master节点">master节点</h2><ul><li><a href="https://www.cnblogs.com/panw/p/16643652.html">k8s允许master节点参与调度的设置方法</a></li><li><a href="https://blog.csdn.net/omaidb/article/details/121930341">k8s节点调度</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
      <category>k8s集群部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>HTML</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/k8s/linglong/README/"/>
    <url>/k8s/linglong/README/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s部署玲珑服务">k8s部署玲珑服务</h1><h2 id="创建namespace">创建namespace</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create ns linglong<br></code></pre></td></tr></table></figure><h2 id="在kubernetes集群如何支持私有镜像">在Kubernetes集群如何支持私有镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create secret docker-registry hub-deepin-token --docker-server=hub.deepin.com \<br>--docker-username=ut004487 --docker-password=Wujing2988. -n linglong<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl patch serviceaccount default -n linglong -p <span class="hljs-string">&#x27;&#123;&quot;imagePullSecrets&quot;: [&#123;&quot;name&quot;: &quot;hub-deepin-token&quot;&#125;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="linglong-homepage">linglong-homepage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t hub.deepin.com/wuhan_v23_linglong/linglong-homepage:develop-snipe .<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -it -p 18080:80/tcp hub.deepin.com/wuhan_v23_linglong/linglong-homepage:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create -n linglong deployment linglong-homepage --image=hub.deepin.com/wuhan_v23_linglong/linglong-homepage:develop-snipe<br></code></pre></td></tr></table></figure><!-- <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get deployments.apps linglong-homepage -o yaml &gt; linglong-homepage.yaml<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl delete -f linglong-homepage.yaml<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim linglong-homepage.yaml 将 namespace 从 default改为 linglong<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-homepage.yaml<br>``` --&gt;<br><br>- 使用 18080 端口提供服务，连接到容器的 80 端口<br><br>```bash<br>kubectl expose -n linglong deployment linglong-homepage --<span class="hljs-built_in">type</span>=NodePort --port=18080 --target-port=80<br></code></pre></td></tr></table></figure><h2 id="linglong-webstore">linglong-webstore</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t hub.deepin.com/wuhan_v23_linglong/linglong-webstore:develop-snipe .<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -it  -p 18081:80/tcp hub.deepin.com/wuhan_v23_linglong/linglong-webstore:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create -n linglong deployment linglong-webstore --image=hub.deepin.com/wuhan_v23_linglong/linglong-webstore:develop-snipe<br></code></pre></td></tr></table></figure><!-- ```bashkubectl get deployments.apps linglong-webstore -o yaml > linglong-webstore.yaml<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>```bash<br>kubectl delete -f linglong-webstore.yaml<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim linglong-webstore.yaml 将 namespace 从 default改为 linglong<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-webstore.yaml<br>``` --&gt;<br><br>- 使用 18081 端口提供服务，连接到容器的 80 端口<br><br>```bash<br>kubectl expose -n linglong deployment linglong-webstore --<span class="hljs-built_in">type</span>=NodePort --port=18081 --target-port=80<br></code></pre></td></tr></table></figure><h2 id="linglong-server">linglong-server</h2><ul><li>创建configmap</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create configmap config.yaml --from-file=config.yaml -n linglong<br></code></pre></td></tr></table></figure><ul><li>挂载config.yaml文件到pod中</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">具体教程参考linglong-server.yaml<br></code></pre></td></tr></table></figure><ul><li>创建pv</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-server-pv.yaml<br></code></pre></td></tr></table></figure><ul><li>创建pvc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-server-pvc.yaml<br></code></pre></td></tr></table></figure><ul><li>挂载pvc到pod中</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">具体教程参考linglong-server.yaml<br></code></pre></td></tr></table></figure><ul><li>linglong-server部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe .<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -it  -p 18888:8888/tcp hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create -n linglong deployment linglong-server --image=hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get deployments.apps linglong-server -o yaml &gt; linglong-server.yaml<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl delete -f linglong-server.yaml<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim linglong-server.yaml 更改volumeMounts、volumes节点，挂载linglong-server-pvc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-server.yaml<br></code></pre></td></tr></table></figure><ul><li>使用 18888 端口提供服务，连接到容器的 8888 端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl expose -n linglong deployment linglong-server --<span class="hljs-built_in">type</span>=NodePort --port=18888 --target-port=8888<br></code></pre></td></tr></table></figure><ul><li>更新镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n linglong <span class="hljs-built_in">set</span> image deployment linglong-server linglong-server=hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n linglong rollout restart deployment linglong-server<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
      <category>linglong</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/protobuf/protobuf_example/README/"/>
    <url>/cpp/protobuf/protobuf_example/README/</url>
    
    <content type="html"><![CDATA[<p>参考链接： <a href="https://blog.csdn.net/fengfengdiandia/article/details/86688520">https://blog.csdn.net/fengfengdiandia/article/details/86688520</a></p><p><a href="https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html">https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>protobuf</category>
      
      <category>protobuf_example</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/dbus/README/"/>
    <url>/cpp/qt-learning/dbus/README/</url>
    
    <content type="html"><![CDATA[<h1 id="service实现">service实现</h1><h2 id="方式一创建服务并注册对象建立到session-bus的连接">方式一、创建服务并注册对象，建立到session bus的连接</h2><p>启动程序后，在命令行打开qdbusviewer，查看session bus。 双击Method方法会调用该方法。</p><p>代码位于目录service下。</p><h2 id="方式二使用adapter注册object推荐方式">方式二、使用Adapter注册Object（推荐方式）</h2><p>可以直接把test类注册为消息总线上的一个Object，但QT4不推荐。QT4推荐使用Adapter来注册Object。 大多数情况下，可能只需要把自定义的类里的方法有选择的发布到消息总线上，使用Adapter可以很方便的实现选择性发布。 生成Adapter类的流程如下： 使用工具 qdbuscpp2xml从test.h生成XML文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qdbuscpp2xml -M test<span class="hljs-selector-class">.h</span> -o com<span class="hljs-selector-class">.scorpio</span><span class="hljs-selector-class">.test</span>.xml<br></code></pre></td></tr></table></figure><p>编辑com.scorpio.test.xml，选择需要发布的method，不需要发布的删除。 使用工具qdbusxml2cpp从XML文件生成继承自QDBusInterface的类</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qdbusxml2cpp com<span class="hljs-selector-class">.scorpio</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.xml</span> -<span class="hljs-selector-tag">i</span> test<span class="hljs-selector-class">.h</span> -<span class="hljs-selector-tag">a</span> valueAdaptor<br></code></pre></td></tr></table></figure><p>生成两个文件：valueAdaptor.cpp和valueAdaptor.h</p><p>代码位于目录adaptor下，建议先阅读该目录下的README.md。</p><h1 id="控制台访问service实现">控制台访问service实现</h1><h2 id="方式一通过qdbusmessage访问service">方式一、通过QDBusMessage访问Service</h2><h2 id="方式二通过qdbusinterface-访问service">方式二、通过QDBusInterface 访问Service</h2><h2 id="方式三从d-bus-xml自动生成proxy类调用proxy类访问service">方式三、从D-Bus XML自动生成Proxy类，调用Proxy类访问Service</h2><p>代码位于目录proxy下，建议先阅读该目录下的README.md。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">/data/opt/Qt5.6.3/5.6.3/gcc_64/lib/cmake/Qt5DBus/Qt5DBusMacros.cmake:87:function(QT5_GENERATE_DBUS_INTERFACE _header) # _customName OPTIONS -some -options )<br><br>/data/opt/Qt5.6.3/5.6.3/Src/qtbase/src/dbus/Qt5DBusMacros.cmake:87:function(QT5_GENERATE_DBUS_INTERFACE _header) # _customName OPTIONS -some -options )<br><br>/data/opt/Qt5.6.3/5.6.3/Src/qtbase/tests/auto/cmake/test_dbus_module/CMakeLists.txt:22:qt5_generate_dbus_interface(<br>    <br>/data/opt/Qt5.6.3/5.6.3/Src/qtdoc/doc/src/development/cmake-manual.qdoc:249:    row li qt5_generate_dbus_interface( header [interfacename] OPTIONS ...)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>dbus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/qprocess_wget/README/"/>
    <url>/cpp/qt-learning/qprocess_wget/README/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ostree --repo=/deepin/linglong/repo/repo-test refs --delete com.qq.weixin.work.deepin/4.0.0.6007/x86_64 &amp;&amp; ostree --repo=/deepin/linglong/repo/repo-test prune --refs-only<br><br>ostree --repo=/deepin/linglong/repo/repo-test pull --mirror repo:com.qq.weixin.work.deepin/4.0.0.6007/x86_64<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>qprocess_wget</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/thread/README/"/>
    <url>/cpp/thread/thread/README/</url>
    
    <content type="html"><![CDATA[<h1 id="stdthread">std::thread</h1><h2 id="stdthread-hello_world"><a href="hello_world">std::thread hello_world</a></h2>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/dbus/proxy/README/"/>
    <url>/cpp/qt-learning/dbus/proxy/README/</url>
    
    <content type="html"><![CDATA[<h1 id="使用工具qdbuscpp2xml从object.h生成xml文件">使用工具qdbuscpp2xml从object.h生成XML文件</h1><p>qdbuscpp2xml -M ../qdbus/test.h -o com.scorpio.test.xml</p><h1 id="使用工具qdbusxml2cpp从xml文件生成继承自qdbusinterface的类">使用工具qdbusxml2cpp从XML文件生成继承自QDBusInterface的类</h1><p>qdbusxml2cpp com.scorpio.test.xml -p valueInterface # 生成两个文件：valueInterface.cpp和valueInterface.h</p><h2 id="运行proxy.sh执行上述命令">运行proxy.sh执行上述命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./proxy.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>dbus</category>
      
      <category>proxy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/dbus/struct/README/"/>
    <url>/cpp/qt-learning/dbus/struct/README/</url>
    
    <content type="html"><![CDATA[<h2 id="deepin下qt-qdebug输出到终端">deepin下qt qDebug()输出到终端</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">QT_LOGGING_RULES</span>=<span class="hljs-string">&quot;*.debug=true&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>dbus</category>
      
      <category>struct</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/pthread/ThreadPool/README/"/>
    <url>/cpp/thread/pthread/ThreadPool/README/</url>
    
    <content type="html"><![CDATA[<p>https://www.cnblogs.com/oloroso/p/5881863.html</p><p>https://blog.csdn.net/MOU_IT/article/details/88712090</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
      <category>pthread</category>
      
      <category>ThreadPool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/pthread/sync/README/"/>
    <url>/cpp/thread/pthread/sync/README/</url>
    
    <content type="html"><![CDATA[<!-- * @Author: wujing * @Date: 2021-02-24 00:15:46 * @LastEditTime: 2021-02-24 00:17:33 * @LastEditors: wujing * @Description:  * @FilePath: /code/CPlusPlusProject/pthread/sync/README.md * @可以输入预定的版权声明、个性签名、空行等--><p><a href="https://www.cnblogs.com/yinbiao/p/11190336.html#:~:text=%E3%80%90Linux%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%201%20PTHREAD_MUTEX_NOMAL%3A%E6%A0%87%E5%87%86%E4%BA%92%E6%96%A5%E9%94%81%EF%BC%8C%E7%AC%AC%E4%B8%80%20...%202%20PTHREAD_MUTEX_RECURSIVE%3A%E9%80%92%E5%BD%92%E4%BA%92%E6%96%A5,...%203%20PTHREAD_MUTEX_ERRORCHECK%3A%E6%A3%80%E6%9F%A5%E4%BA%92%20...%204%20PTHREAD_MUTEX_DEFAULT%3A%E9%BB%98%E8%AE%A4%E4%BA%92%E6%96%A5%E9%94%81%EF%BC%8C%20">【Linux】多线程同步的四种方式</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
      <category>pthread</category>
      
      <category>sync</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/thread/hello_world/README/"/>
    <url>/cpp/thread/thread/hello_world/README/</url>
    
    <content type="html"><![CDATA[<h1 id="stdthread-hello-world">std::thread "Hello world"</h1><p>下面是一个最简单的使用 std::thread 类的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> <span class="hljs-comment">// std::cout</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span>   <span class="hljs-comment">// std::thread</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thread_task</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello thread&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">(thread_task)</span></span>;<br>    t.<span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">all:hello_world</span><br><br>CC=g++<br>CPPFLAGS=-Wall -std=c++11 -ggdb<br>LDFLAGS=-pthread<br><br><span class="hljs-section">hello_world:hello_world.o</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(LDFLAGS)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><br><span class="hljs-section">hello_world.o:hello_world.cpp</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CPPFLAGS)</span> -o <span class="hljs-variable">$@</span> -c <span class="hljs-variable">$^</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:</span><br>clean<br><br><span class="hljs-section">clean:</span><br>rm hello_world.o hello_world<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/haippy/p/3235560.html">C++11 并发指南一(C++11 多线程初探)</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
      <category>hello_world</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nano</title>
    <link href="/markdown/nano/"/>
    <url>/markdown/nano/</url>
    
    <content type="html"><![CDATA[<h1 id="nano">nano</h1><p><a href="https://p3terx.com/archives/linux-nano-tutorial.html">nano 使用教程 - Linux 中适合新手的文本编辑器</a></p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uml</title>
    <link href="/markdown/uml/"/>
    <url>/markdown/uml/</url>
    
    <content type="html"><![CDATA[<h1 id="uml">uml</h1><ul><li><a href="https://blog.csdn.net/fly_zxy/article/details/80911942#commentBox">UML时序图(Sequence Diagram)学习笔记</a></li><li><a href="http://www.woshipm.com/ucd/607593.html">快速学习时序图：时序图简介、画法及实例</a></li><li><a href="https://www.cnblogs.com/54chensongxia/p/13236965.html">程序员必备画图技能之——时序图</a></li></ul><h2 id="plantuml">PlantUML</h2><ul><li><a href="https://mp.weixin.qq.com/s/zhj5txc3W7svWtg0JNTDMQ">用代码画时序图！YYDS</a></li><li><a href="https://www.jianshu.com/p/4f86146e0811">PlantUML画类图、流程图、时序图使用详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex</title>
    <link href="/markdown/latex/"/>
    <url>/markdown/latex/</url>
    
    <content type="html"><![CDATA[<h1 id="latex">latex</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/451420916">Ubuntu20.04下 VsCode + LaTeX 的使用</a></li><li><a href="https://linuxconfig.org/how-to-install-latex-on-ubuntu-20-04-focal-fossa-linux">How to install LaTex on Ubuntu 20.04 Focal Fossa Linux</a></li><li><a href="https://www.latexstudio.net/archives/9377.html">LaTeX新人教程，30分钟从完全陌生到基本入门[转载]</a></li><li><a href="https://zhuanlan.zhihu.com/p/518143774">Latex使用心得</a></li><li><a href="https://blog.csdn.net/haoxue2011/article/details/103404401">ubuntu安装自定义的latex包</a></li><li><a href="https://blog.csdn.net/qq_37556330/article/details/106190148">LaTeX 宏包（usepackage)</a></li><li><a href="https://blog.csdn.net/ly18846826264/article/details/104951667">LaTeX入门｜(2)定制专属模板</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>doxygen</title>
    <link href="/markdown/doxygen/"/>
    <url>/markdown/doxygen/</url>
    
    <content type="html"><![CDATA[<h1 id="doxygen">doxygen</h1><h2 id="doxygen生成接口文档">doxygen生成接口文档</h2><ul><li><a href="https://www.jianshu.com/p/9464eca6aefe">Doxygen简明注释语法</a></li><li><a href="https://blog.csdn.net/qq_41204464/article/details/102458103">Doxygen 注释语法和使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/122523174">Doxygen中文文档</a></li><li><a href="https://github.com/realwujing/qt-log/blob/6e14c794a66944739d0eb6494f2cb96448833933/README.md"><font color=Red>Doxygen生成pdf接口文档</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/100223113">Doxygen快速入门</a></li><li><a href="https://blog.csdn.net/jinking01/article/details/102809414"><font color=Red>ubuntu 下使用doxygen为C/C++工程生成pdf版的API</font></a></li><li><a href="https://blog.csdn.net/yunjingguang/article/details/28266115">linux下的doxygen的使用</a></li></ul><h2 id="doxygen生成函数调用关系图">doxygen生成函数调用关系图</h2><ul><li><a href="https://blog.csdn.net/weixin_38184741/article/details/106598647">Tools：使用Doxygen生成函数调用关系</a></li><li><a href="https://blog.csdn.net/zhonglinliu/article/details/78604397">Ubuntu系统使用Doxygen生成文档</a></li><li><a href="https://blog.csdn.net/qq_41748900/article/details/99688506">ubuntu16.04使用doxygen（带生成文档的方法）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown</title>
    <link href="/markdown/markdown/"/>
    <url>/markdown/markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="markdown">markdown</h2><ul><li><p><a href="https://markdown.com.cn/"><font color=Red>Markdown 官方教程</font></a></p></li><li><p><a href="https://www.jianshu.com/p/c2b75ff24c33"><font color=Red>Markdown代码块支持的语言</font></a></p></li><li><p><a href="https://www.jianshu.com/p/e74eb43960a1"><font color=Red>Markdown数学公式语法</font></a></p></li><li><p><a href="https://www.zybuluo.com/codeep/note/163962"><font color=Red>Cmd Markdown 公式指导手册</font></a></p></li><li><p><a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn"><font color=Red>markdown latex公式</font></a></p></li><li><p><a href="https://code.z01.com/doc/mdflow.html">MarkDown流程图全指导</a></p></li><li><p><a href="https://nanova.me/2020/05/30/plantuml/">当 Markdown 遇上 UML</a></p></li><li><p><a href="https://blog.csdn.net/wads23456/article/details/107932583">【Markdown高级技巧】写出高大上的流程图、时序图、类图</a></p></li><li><p><a href="https://blog.csdn.net/kan2016/article/details/107507809"><font color=Red>在VS Code中使用 Picgo + jsDelivr + Github搭建高速稳定图床</font></a></p></li></ul><h2 id="gitbook">gitbook</h2><ul><li><p><a href="https://jiangminggithub.github.io/gitbook/">gitbook详细教程</a></p></li><li><p><a href="https://segmentfault.com/a/1190000019806829">gitbook常用的插件</a></p></li><li><p><a href="https://jiangminggithub.github.io/gitbook/chapter-plugins/15-auto-scroll-table.html">gitbook auto-scroll-table 自动表格过长滚动条</a></p></li><li><p><a href="https://topsale.gitbooks.io/gitbook/content/" class="uri">https://topsale.gitbooks.io/gitbook/content/</a></p></li><li><p><a href="https://www.cnblogs.com/weikunpeng/p/15604911.html">主要记录GitBook的安装配置以及一些插件信息</a></p></li><li><p><a href="https://www.toutiao.com/article/6681133500910797319">gitbook 入门教程之主题插件</a></p></li></ul><h2 id="read-the-docs">Read the Docs</h2><ul><li><a href="https://blog.csdn.net/lu_embedded/article/details/109006380"><font color=Red>Read the Docs 从懵逼到入门</font></a></li><li><a href="https://www.jianshu.com/p/8aae1c1453ae">使用ReadtheDocs托管技术文档</a></li><li><a href="https://www.xncoding.com/2017/01/22/fullstack/readthedoc.html">使用ReadtheDocs托管文档</a></li><li><a href="https://www.toutiao.com/article/6817379045882200589">如何制作一本在线的电子书或 Python 文档供其他人远程访问</a></li></ul><h2 id="vuepress">VuePress</h2><ul><li><a href="https://segmentfault.com/a/1190000017055963">VuePress搭建个人技术文档网站教程</a></li><li><a href="https://vuepress.vuejs.org/zh/">VuePress官方教程</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/235">一篇带你用 VuePress + Github Pages 搭建博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins</title>
    <link href="/jenkins/jenkins/"/>
    <url>/jenkins/jenkins/</url>
    
    <content type="html"><![CDATA[<h1 id="jenkins">jenkins</h1><h2 id="jenkins安装">Jenkins安装</h2><ul><li><p><a href="https://www.jenkins.io/doc/book/installing/" class="uri">https://www.jenkins.io/doc/book/installing/</a></p></li><li><p><a href="https://www.modb.pro/db/399180">k8s 部署jenkins</a></p></li><li><p><a href="https://segmentfault.com/a/1190000040469278">在 k8s 中安装 jenkins 并配置实现 CI/CD</a></p></li><li><p><a href="https://www.cnblogs.com/code-craftsman/p/11792635.html">在k8s上安装Jenkins及常见问题</a></p></li><li><p><a href="https://blog.51cto.com/meiling/2509470">Jenkins修改显示语言为中文</a></p></li><li><p><a href="https://blog.51cto.com/u_15127596/3832309">jenkins转换显示语言为中文简体（jenkins汉化）</a></p></li><li><p><a href="https://wiki.eryajf.net/pages/831.html#_1-%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD%E3%80%82">配置gitlab提交代码Jenkins自动构建</a></p></li><li><p><a href="http://t.zoukankan.com/kaerxifa-p-11090824.html">配置github的pull request触发jenkins自动构建</a></p></li><li><p><a href="http://t.zoukankan.com/kaerxifa-p-11090824.html">GitHub pull request时Jenkins自动构建教程</a></p></li></ul><h2 id="github-action">GitHub action</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></li><li><a href="https://docs.github.com/cn/actions/using-github-hosted-runners/about-github-hosted-runners">关于 GitHub 托管的运行器-支持的运行器和硬件资源</a></li><li><a href="https://juejin.cn/post/6960126908180725773">针不戳！GitHub Actions 入坑指南</a></li><li><a href="https://blog.51cto.com/u_15273875/2917416">GitHub Actions入门教程：自动化部署静态博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svn</title>
    <link href="/svn/svn/"/>
    <url>/svn/svn/</url>
    
    <content type="html"><![CDATA[<h1 id="svn">svn</h1><ul><li><a href="https://blog.csdn.net/freeking101/article/details/81080164">Linux SVN命令详解</a></li><li><a href="https://www.cnblogs.com/jaspersong/p/9277720.html">Linux下常用svn命令</a></li><li><a href="https://www.cnblogs.com/136asdxxl/p/7410947.html">svn命令行使用总结</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn co svn://58.49.133.142:58726/trunk<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn co svn://192.168.9.92/trunk<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">svn://58.49.133.142:58726/trunk/Server_new/trunk/CommWebServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/CommWebServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/IndustryChainMachineWriteServer/python/industry_chain_machine_write_server<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/IndustryChainMachineWriteServer/C++/IndustryChainMachineWriteServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/Common<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Quote_Proj <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/ShNumChangeServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/CallauctionServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/DtNorthBoundCapitalServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Thoth<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/Common<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/ImpalaSqlLib<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/UniIdServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/JTHongKongStockServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/CommWebServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/StockConditionSelector<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/data-sync-client<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/data-sync-server<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/data-sync-file<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/QuoteServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/MarginTradeServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/RiskAnalysisServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/2BProject/yuanda/server/NotifyProxyServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/ImpalaSqlLib_ubuntu16<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/AI_Project/trunk/Tools/ValueElasticityServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/IdlProxyServer<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>svn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go</title>
    <link href="/go/go/"/>
    <url>/go/go/</url>
    
    <content type="html"><![CDATA[<h1 id="go">go</h1><h2 id="go-基础">Go 基础</h2><ul><li><p><a href="https://go.dev/doc/install" class="uri">https://go.dev/doc/install</a></p></li><li><p><a href="https://juejin.cn/post/6844903952144826375">Ubuntu go升级</a></p></li><li><p><a href="https://www.topgoer.com/">go语言中文文档</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/375530785">go build命令详解</a></p></li></ul><h2 id="mod">mod</h2><ul><li><a href="https://www.liwenzhou.com/posts/Go/import_local_package_in_go_module/">如何使用go module导入本地包</a></li><li><a href="https://blog.csdn.net/weixin_43874301/article/details/120632571">Go语言GO111MODULE设置</a></li><li><a href="https://blog.csdn.net/weixin_44676081/article/details/107279746">报错package xxx is not in GOROOT or GOPATH 或者 cannot find package “xxx“ in any of</a></li></ul><h2 id="interface">interface</h2><ul><li><a href="https://www.cnblogs.com/huiyichanmian/p/12800867.html">想要判断空接口的值，可以使用类型断言</a></li></ul><h2 id="协程">协程</h2><ul><li><a href="https://www.cnblogs.com/secondtonone1/p/11803961.html">图解Go协程调度原理，小白都能理解 - 恋恋风辰 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/Survivalist/p/11527949.html"><font color=Red>一文读懂什么是进程、线程、协程</font></a></li></ul><h2 id="gin">gin</h2><ul><li><a href="https://eddycjy.gitbook.io/golang/di-3-ke-gin/log"><font color=Red>写写代码，喝喝茶，搞搞 Go</font></a></li><li><a href="https://blog.csdn.net/u014209205/article/details/81205062">POST、DELETE、PUT、GET的含义及区别</a></li><li><a href="https://www.cnblogs.com/liuzhongchao/p/9244516.html">Gin实战：Gin+Mysql简单的Restful风格的API</a></li><li><a href="https://xxjwxc.github.io/post/ginrpc/">go gin grpc 参数自动绑定工具.</a></li><li><a href="https://geektutu.com/post/quick-go-gin.html">Go Gin 简明教程</a></li><li><a href="https://blog.csdn.net/LitongZero/article/details/109274761">Gin增删改查demo</a></li><li><a href="https://blog.csdn.net/qq_32447301/article/details/108721254">go gin增删改查上传文件下载文件</a></li><li><a href="https://github.com/hairichuhe/nideshop-admin">nideshop-admin 基于gin+gorm+vue搭建的nideshop后台管理系统</a></li><li><a href="https://blog.csdn.net/weixin_43931792/article/details/98765719">go项目配置多开发环境 gin框架</a></li></ul><h2 id="gorm">gorm</h2><ul><li><a href="https://blog.csdn.net/yoyogu/article/details/109318626">go语言gorm基本使用</a></li><li><a href="https://gorm.io/zh_CN/docs/conventions.html"><font color=Red>GORM 指南</font></a></li><li><a href="https://blog.csdn.net/GsZhuiGui/article/details/107649848">关于 gorm AutoMigrate 不自动创建字段的解决方案</a></li><li><a href="https://blog.csdn.net/duxing_langzi/article/details/115521414">Golang持久化框架 gorm 创建表时 auto_increment 不生效问题</a></li><li><a href="https://www.lmonkey.com/t/XAL231jBR">GORM 中文文档_4.4. 数据库迁移</a></li><li><a href="https://learnku.com/docs/gorm/v2/v2_release_note/9756">GORM 2.0 发布说明</a></li></ul><h2 id="redis缓存">redis缓存</h2><ul><li><a href="https://eddycjy.gitbook.io/golang/di-3-ke-gin/application-redis">3.13 优化你的应用结构和实现Redis缓存</a></li><li><a href="https://www.cyhone.com/articles/gin-cache/">一个 Gin 缓存中间件的设计与实现</a></li><li><a href="https://juejin.cn/post/6945098965457043470">Gin 集成 go-redis 模块、操作 redis ｜ Go 主题月</a></li><li><a href="https://www.51cto.com/article/700690.html">面试官：你可以写一个通用的Redis缓存”装饰器“么？</a></li><li><a href="https://blog.csdn.net/weixin_43881017/article/details/111366309">go语言web开发系列之八:gin框架中用go-redis缓存数据</a></li><li><a href="https://blog.csdn.net/weixin_42544051/article/details/106562845">go语言缓存穿透、缓存击穿、缓存雪崩区别和解决方案</a></li><li><a href="https://www.cnblogs.com/xunux/p/5717122.html">redis 间断性耗时长问题解决</a></li><li><a href="https://www.cnblogs.com/cxy2020/p/13748658.html">面试官：大key和大value的危害，如何处理？</a></li><li><a href="https://www.cnblogs.com/liliuguang/p/15990542.html">redis变慢查询</a></li><li><a href="https://blog.csdn.net/weixin_34502341/article/details/113580056">redis 查看key是否存在_Redis为什么变慢了？</a></li><li><a href="https://blog.csdn.net/attack_breast/article/details/113929953">Redis变慢原因</a></li><li><a href="https://blog.csdn.net/qq_26482855/article/details/120511806">Redis 慢查询详解slowlog</a></li></ul><h2 id="上传下载">上传下载</h2><ul><li><p><a href="https://www.cnblogs.com/linkstar/p/10429984.html">无敌简单快速的文件服务器sgfs</a></p></li><li><p><a href="https://sjqzhang.gitee.io/go-fastdfs/QA.html" class="uri">https://sjqzhang.gitee.io/go-fastdfs/QA.html</a></p></li><li><p><a href="https://github.com/sjqzhang/go-fastdfs" class="uri">https://github.com/sjqzhang/go-fastdfs</a></p></li><li><p><a href="https://www.kancloud.cn/adapa/golang/1116834">Golang原生Web开发入门到微服务-扩展:分块上传</a></p></li><li><p><a href="https://www.cnblogs.com/tomtellyou/p/15155366.html">golang FastHttp 使用</a></p></li><li><p><a href="https://www.kancloud.cn/shuangdeyu/gin_book/949420">单文件上传</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42681695/article/details/106579169">golang实现http表单大文件流式上传服务端代码</a></p></li><li><p><a href="https://learnku.com/articles/23559/two-schemes-for-reading-golang-super-large-files">Golang 超大文件读取的两个方案</a></p></li><li><p><a href="https://studygolang.com/articles/7389">golang写服务端程序，作为文件上传与下载的服务器。配合HTML5以网页作为用户页面</a></p></li><li><p><a href="https://tonybai.com/2021/01/16/upload-and-download-file-using-multipart-form-over-http/">使用multipart/form-data实现文件的上传与下载</a></p></li><li><p><a href="https://chunlife.top/2019/04/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98%E4%B9%8B%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0%EF%BC%88%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%EF%BC%89/">服务器上传下载问题之分块上传（断点续传）</a></p></li><li><p><a href="https://blog.csdn.net/u011327801/article/details/101365018">3、gin 静态文件服务</a></p></li><li><p><a href="https://blog.csdn.net/bigwhite20xx/article/details/112792041">一文搞懂如何利用multipart/form-data实现文件的上传与下载</a></p></li><li><p><a href="https://help.aliyun.com/document_detail/32144.htm?spm=a2c4g.11186623.0.0.401f24cbVPHe9f#concept-32144-zh">本文介绍对象存储OSS的Go SDK各种使用场景下的示例代码。</a></p></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://juejin.cn/post/6844903896922456071">[系列] Gin框架 - 使用 Logrus 进行日志记录</a></li><li><a href="https://codeantenna.com/a/Ux6JIA4WSo">Gin添加基于logrus的日志组件</a></li><li><a href="http://www.lsdcloud.com/go/middleware/logrus.html#_6-%E5%B0%86%E6%97%A5%E5%BF%97%E4%BF%9D%E5%AD%98%E5%88%B0%E6%96%87%E4%BB%B6">6 将日志保存到文件</a></li><li><a href="https://blog.csdn.net/xiaobo5264063/article/details/120711908">37go语言学习之日志配置logrus</a></li><li><a href="https://cloud.tencent.com/developer/article/1830707">logrus自定义日志输出格式</a></li><li><a href="https://github.com/uber-go/zap" class="uri">https://github.com/uber-go/zap</a></li></ul><h2 id="序列化">序列化</h2><ul><li><p><a href="https://blog.csdn.net/zxy_666/article/details/80173288">Go的json解析：Marshal与Unmarshal</a></p></li><li><p>代码生成</p></li><li><p><a href="https://mholt.github.io/json-to-go/"><font color=Red>https://mholt.github.io/json-to-go/</font></a></p></li><li><p><a href="https://mholt.github.io/curl-to-go/"><font color=Red>https://mholt.github.io/curl-to-go/</font></a></p></li></ul><h2 id="shell">shell</h2><ul><li><a href="https://www.jianshu.com/p/dd8a113b02a3">Go语言调用Shell与可执行文件</a></li><li><a href="https://blog.csdn.net/YMY_mine/article/details/101068865">golang 执行linux命令 &amp;获取命令执行返回码，命令pid，执行结果(逐行输出)</a></li><li><a href="https://blog.csdn.net/whatday/article/details/109277998">golang exec.Command 执行命令用法实例</a></li><li><a href="https://www.helloworld.net/p/nYp4Sg1iwvI4J">GO定时任务CRON执行不成功？看一下这篇文章就明白了</a></li></ul><h2 id="debug">debug</h2><ul><li><a href="https://segmentfault.com/a/1190000018671207">VS Code 断点调试golang</a></li><li><a href="https://blog.csdn.net/xmcy001122/article/details/105665732">golang-进程崩溃后如何输出错误日志？core dump</a></li></ul><h2 id="swag">swag</h2><ul><li><a href="https://www.bookstack.cn/read/gin-EDDYCJY-blog/golang-gin-2018-03-18-Gin%E5%AE%9E%E8%B7%B5-%E8%BF%9E%E8%BD%BD%E5%85%AB-%E4%B8%BA%E5%AE%83%E5%8A%A0%E4%B8%8ASwagger.md">Golang Gin 实践-连载八-为它加上Swagger.md</a></li><li><a href="https://blog.csdn.net/qq_42873554/article/details/118797414">go swag常用注释</a></li><li><a href="https://ieevee.com/tech/2018/04/19/go-swag.html">使用swaggo自动生成Restful API文档</a></li><li><a href="https://pkg.go.dev/github.com/swaggo/swag/example/basic/api#Upload"><font color=Red>swag-api - pkg.dev</font></a></li><li><a href="https://www.topgoer.com/%E5%85%B6%E4%BB%96/Swagger.html">Swaggo</a></li><li><a href="https://blog.csdn.net/qq_45100706/article/details/115481714">gin-swagger的安装使用（注释参数说明）</a></li></ul><h2 id="文件">文件</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/80403583">go：获取文件的名称、前缀、后缀</a></li></ul><h2 id="elf">elf</h2><ul><li><p><a href="https://www.hitzhangjie.pro/debugger101.io/7-headto-sym-debugger/6-gopkg-debug/1-elf.html">pkg debug/elf 应用</a></p></li><li><p><a href="http://www.verydoc.net/go/00003845.html">type Header64（查看源代码）</a></p></li><li><p><a href="https://go.dev/src/debug/elf/file.go" class="uri">https://go.dev/src/debug/elf/file.go</a></p></li><li><p><a href="https://www.dazhuanlan.com/xtghdnui/topics/1847414">后端 第五日：readelf 开发过程之疑难排解</a></p></li></ul><h2 id="压力测试">压力测试</h2><ul><li><a href="https://blog.csdn.net/lirui8412973/article/details/100582177">QPS、TPS、PV、UV、GMV、IP、RPS含义简单说明</a></li><li><a href="https://www.cnblogs.com/lyc88/articles/11319559.html">QPS、TPS、PV、UV、GMV、IP、RPS 是什么鬼</a></li><li><a href="https://www.cnblogs.com/yangxiayi1987/p/14840191.html">服务端压测指标评估</a></li><li><a href="https://testerhome.com/topics/17068">性能测试工具 wrk,ab,locust,Jmeter 压测结果比较</a></li><li><a href="https://cloud.tencent.com/developer/article/1509809">go实现的压测工具【单台机器100w连接压测实战】</a></li><li><a href="https://cloud.tencent.com/developer/article/1537695">优化nginx-ingress-controller并发性能</a></li></ul><h2 id="性能优化">性能优化</h2><ul><li><a href="https://blog.csdn.net/weixin_37717557/article/details/108684433">Golang pprof 性能分析与火焰图</a></li><li><a href="http://liumurong.org/2019/12/gin_pprof/">Gin框架中使用pprof</a></li><li><a href="https://segmentfault.com/a/1190000016412013">Golang 大杀器之性能剖析 PProf</a></li><li><a href="https://github.com/gin-contrib/pprof" class="uri">https://github.com/gin-contrib/pprof</a></li></ul><h2 id="编译">编译</h2><ul><li><a href="https://lanshiqin.com/92119e60/">Golang交叉编译各平台的可执行二进制程序</a></li><li><a href="https://blog.csdn.net/cyq6239075/article/details/103911098">go build 命令参数详解</a></li></ul><h2 id="安全">安全</h2><ul><li><p><a href="https://www.roboform.com/cn/password-generator">随机密码生成器</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/NVPuFAjt34_jhFqW2tG7MQ">10 种保证接口数据安全的方案！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/oRTdMjqZf59cjAqR72g4aA">全网最全的权限系统设计方案（图解）</a></p></li><li><p><a href="https://www.jb51.net/article/247194.htm">详解如何在Go语言中调用C源代码</a></p></li></ul><h2 id="其他">其他</h2><ul><li><p><a href="https://githubmemory.com/repo/justjanne/powerline-go/issues/272" class="uri">https://githubmemory.com/repo/justjanne/powerline-go/issues/272</a></p></li><li><p><a href="https://golangrepo.com/repo/utkusen-urlhunter-go-web-applications" class="uri">https://golangrepo.com/repo/utkusen-urlhunter-go-web-applications</a></p></li><li><p><a href="https://www.shuzhiduo.com/A/6pdDN0eXJw/">Go项目开源规范</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/eU9lMmomNHDrLZw4eV31Xw">新来的 CTO 规定所有接口都用 post 请求...</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Golang</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx</title>
    <link href="/nginx/nginx/"/>
    <url>/nginx/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="nginx">nginx</h1><h2 id="基础">基础</h2><ul><li><a href="https://xuexb.github.io/learn-nginx/guide/">Nginx 入门教程</a></li><li><a href="https://juejin.cn/post/6844903983622914062">写给后端的Nginx初级入门教程:实战篇</a></li><li><a href="https://github.com/dunwu/nginx-tutorial">Nginx 极简教程</a></li><li><a href="https://www.cnblogs.com/akxmhd/p/15411347.html"><font color=Red>Nginx常用基本命令</font></a></li></ul><h2 id="conf">conf</h2><ul><li><a href="http://t.zoukankan.com/fps2tao-p-9958009.html">增加nginx虚拟主机配置文件(conf.d)</a></li></ul><h2 id="静态文件服务器">静态文件服务器</h2><ul><li><a href="https://www.cnblogs.com/foxhappy/p/14541313.html">Nginx配置静态文件服务从入门到精通</a></li><li><a href="https://www.freesion.com/article/2812996615/">NGINX访问静态资源报404错误的坑</a></li><li><a href="https://www.cnblogs.com/XY-Heruo/p/14708905.html">nginx搭建静态文件下载服务器</a></li><li><a href="https://aiopsclub.com/nginx/nginx_static_file/">Nginx系列之nginx静态文件服务</a></li><li><a href="https://blog.51cto.com/afterdawn/2410872">最简单的配置nginx.conf使之成为静态文件下载服务器</a></li><li><a href="https://blog.csdn.net/zhuchunyan_aijia/article/details/53033228">nginx作为下载文件服务器</a></li></ul><h2 id="ip">ip</h2><ul><li><a href="https://www.cnblogs.com/pejsidney/p/11131714.html">nginx 获取源IP 获取经过N层Nginx转发的访问来源真实IP</a></li></ul><h2 id="waf">waf</h2><ul><li><a href="https://www.toutiao.com/article/7021314879449465377">ngx_waf：一款高大全的 Nginx 网站防火墙模块</a></li></ul><h2 id="section">499</h2><ul><li><a href="https://juejin.cn/post/6867050579139493896">HTTP 499 问题处理方法合集</a></li><li><a href="https://blog.csdn.net/yanyan42/article/details/119762449">http 状态码499</a></li></ul><h2 id="section-1">504</h2><ul><li><a href="https://www.cnblogs.com/mr-rocker/p/8855924.html">Nginx报504 gateway timeout错误的解决方法</a></li><li><a href="https://blog.csdn.net/u012164509/article/details/112652712">nginx 解决504超时问题</a></li></ul><h2 id="其它">其它</h2><ul><li><a href="https://www.cnblogs.com/niyueling/p/11573240.html"><font color=Red>Nginx面试基础必会</font></a></li><li><a href="https://developer.aliyun.com/article/771312">强大！Nginx 配置在线一键生成“神器”</a></li><li><a href="https://www.jianshu.com/p/0e13dab6e1eb">nginx目录遍历漏洞</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript</title>
    <link href="/javascript/javascript/"/>
    <url>/javascript/javascript/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript">javascript</h1><h2 id="node-npm">node npm</h2><ul><li><a href="https://www.myfreax.com/how-to-install-node-js-on-debian-10/">如何在Debian 10 Linux上安装Node.js和npm</a></li><li><a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html">使用 nvm 管理不同版本的 node 与 npm</a></li></ul><h2 id="import-export">Import export</h2><ul><li><a href="https://blog.csdn.net/harry5508/article/details/84025146">认识Vue 的 export、export default、import</a></li></ul><h2 id="vue">Vue</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/installation.html">介绍 - Vue.js</a></li><li><a href="https://juejin.cn/post/6844903683860201486">比官方文档更易懂的Vue.js教程！包你学会！</a></li><li><a href="https://www.runoob.com/vue2/vue-tutorial.html">Vue.js 教程</a></li><li><a href="https://www.runoob.com/w3cnote/vue-js-quickstart.html">Vue.js 入门教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started">开始使用 Vue</a></li></ul><h2 id="生命周期">生命周期</h2><ul><li><a href="https://blog.csdn.net/m0_37911124/article/details/123481146">11、Vue的生命周期</a></li><li><a href="https://juejin.cn/post/6874855535234170887">Vue生命周期详解</a></li></ul><h2 id="axios">axios</h2><ul><li><a href="https://www.jianshu.com/p/a48eed3831da">05 Vue3 使用Axios请求后端服务</a></li><li><a href="https://www.runoob.com/vue3/vue3-ajax-axios.html">Vue3 Ajax(axios)</a></li></ul><h2 id="跨域">跨域</h2><ul><li><a href="https://segmentfault.com/a/1190000040583348">vue解决跨域方法</a></li><li><a href="https://www.jianshu.com/p/c3f92a904696">Vue跨域解决方法</a></li><li><a href="https://vue3js.cn/interview/vue/cors.html#%E4%BA%8C%E3%80%81%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">面试官：Vue项目中你是如何解决跨域的呢？</a></li><li><a href="https://blog.csdn.net/moshowgame/article/details/107285660">解决Axios跨域问题（Axios跨域问题解决方案）</a></li><li><a href="https://www.jianshu.com/p/4e6dac726c54"><font color=Red>vueaxios实现跨域请求</font></a></li><li><a href="https://blog.csdn.net/James_liPeng/article/details/86151073"><font color=Red>Vue2.0使用Axios实现跨域访问（解决跨域问题）</font></a></li><li><a href="https://blog.csdn.net/qq_38409994/article/details/105724827"><font color=Red>vue2-Axios解决跨域访问</font></a></li></ul><h2 id="vue3">Vue3</h2><ul><li><a href="https://blog.csdn.net/wsjzzcbq/article/details/123003859">vue3 setup 使用教程</a></li><li><a href="https://blog.csdn.net/m0_67401055/article/details/123433455">vue3 setup语法糖 详细使用说明</a></li><li><a href="https://www.cnblogs.com/-pdd/p/16003658.html">Vue3中setup语法糖学习</a></li><li><a href="https://segmentfault.com/a/1190000041849882">Vue3.2 setup语法糖总结</a></li><li><a href="https://juejin.cn/post/7078865301856583717">Vue3拒绝写return，用setup语法糖,让写Vue3更畅快</a></li></ul><h2 id="环境变量">环境变量</h2><ul><li><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F">模式和环境变量</a></li><li><a href="https://www.cnblogs.com/guojikun/p/15160737.html">vue cli中的env详解</a></li><li><a href="https://juejin.cn/post/6844903859878363149"># 【vue基础篇】一看就懂的vue环境变量配置</a></li><li><a href="https://www.jianshu.com/p/e40709390301">vue_cli3中axios封装、配置不同开发环境变量</a></li></ul><h2 id="调试">调试</h2><ul><li><p><a href="https://segmentfault.com/a/1190000038156565">在VS Code 中调试Vue.js</a></p></li><li><p>vitepress</p></li><li><p><a href="https://vitepress.vuejs.org/guide/getting-started.html" class="uri">https://vitepress.vuejs.org/guide/getting-started.html</a></p></li><li><p><a href="https://www.imaegoo.com/2021/hello-vitepress/">体验 VitePress：文档编译还能这么快！</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
      <tag>Vue</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/javascript/my-project/README/"/>
    <url>/javascript/my-project/README/</url>
    
    <content type="html"><![CDATA[<h1 id="test">test</h1><blockquote><p>A Vue.js project</p></blockquote><h2 id="build-setup">Build Setup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># install dependencies</span><br>npm install<br><br><span class="hljs-comment"># serve with hot reload at localhost:8080</span><br>npm run dev<br><br><span class="hljs-comment"># build for production with minification</span><br>npm run build<br><br><span class="hljs-comment"># build for production and view the bundle analyzer report</span><br>npm run build --report<br><br><span class="hljs-comment"># run unit tests</span><br>npm run unit<br><br><span class="hljs-comment"># run e2e tests</span><br>npm run e2e<br><br><span class="hljs-comment"># run all tests</span><br>npm <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>For a detailed explanation on how things work, check out the <a href="http://vuejs-templates.github.io/webpack/">guide</a> and <a href="http://vuejs.github.io/vue-loader">docs for vue-loader</a>.</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
      <category>my-project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/javascript/todolist/README/"/>
    <url>/javascript/todolist/README/</url>
    
    <content type="html"><![CDATA[<h1 id="todolist">todolist</h1><blockquote><p>A Vue.js project</p></blockquote><h2 id="build-setup">Build Setup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># install dependencies</span><br>npm install<br><br><span class="hljs-comment"># serve with hot reload at localhost:8080</span><br>npm run dev<br><br><span class="hljs-comment"># build for production with minification</span><br>npm run build<br><br><span class="hljs-comment"># build for production and view the bundle analyzer report</span><br>npm run build --report<br><br><span class="hljs-comment"># run unit tests</span><br>npm run unit<br><br><span class="hljs-comment"># run e2e tests</span><br>npm run e2e<br><br><span class="hljs-comment"># run all tests</span><br>npm <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>For a detailed explanation on how things work, check out the <a href="http://vuejs-templates.github.io/webpack/">guide</a> and <a href="http://vuejs.github.io/vue-loader">docs for vue-loader</a>.</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
      <category>todolist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/redis/redis/"/>
    <url>/redis/redis/</url>
    
    <content type="html"><![CDATA[<h1 id="redis">Redis</h1><ul><li><a href="https://www.cnblogs.com/jasontec/p/9699242.html">Redis常见面试题</a></li><li><a href="https://www.cnblogs.com/telwanggs/p/10642382.html">redis面试必问</a></li><li><a href="https://www.jianshu.com/p/06ab9daf921d">Redis哨兵（Sentinel）模式</a></li><li><a href="https://blog.csdn.net/JustDI0209/article/details/118972665">开发技术-批量删除redis数据的4种方法_JustDI0209的博客-CSDN博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql教程</title>
    <link href="/sql/mysql%E6%95%99%E7%A8%8B/"/>
    <url>/sql/mysql%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql教程">mysql教程</h1><h2 id="mysql安装">Mysql安装</h2><ul><li><a href="https://www.runoob.com/linux/mysql-install-setup.html">MySQL安装配置</a></li><li><a href="https://www.cyberciti.biz/faq/install-mysql-server-8-on-ubuntu-20-04-lts-linux/">如何在Ubuntu 20.04 LTS Linux上安装MySQL服务器</a></li><li><a href="https://blog.csdn.net/weixin_44129085/article/details/104481986"><font color=Red>Ubuntu 18.04 64位安装MySQL8.0</font></a></li><li><a href="https://www.cnblogs.com/opsprobe/p/9126864.html">Ubuntu18.04下安装MySQL</a></li><li><a href="https://blog.csdn.net/lduzhenlin/article/details/113243476">ubuntu20.04安装mysql8.0</a></li><li><a href="https://blog.csdn.net/YM_1111/article/details/107555383"><font color=Red>Ubuntu20.04安装Mysql（亲测有效，一定要按步骤来）</font></a></li><li><a href="https://www.bbsmax.com/A/qVdeLMAb5P/">在 Ubuntu 18.0-10上安装 MySQL8</a></li><li><a href="https://dev.mysql.com/downloads/repo/apt/"><font color=Red>mysql官方apt仓库源</font></a></li></ul><h2 id="mariadb">Mariadb</h2><ul><li><a href="https://www.cnblogs.com/sunxiuwen/p/9818620.html"><font color=Red>MariaDB数据库管理系统是MySQL的一个分支</font></a></li><li><a href="https://blog.csdn.net/dongdong9223/article/details/86645690">弹指神通MariaDB——MariaDB与MySQL各版本的区别</a></li><li><a href="https://blog.csdn.net/shenliang1985/article/details/105727187">MariaDB窗口函数row_number、rank介绍</a></li></ul><h2 id="安装后初始化">安装后初始化</h2><ul><li><a href="https://www.cnblogs.com/centos2017/p/7896779.html">Mysql初始化及密码管理</a></li><li><a href="https://mal-suen.github.io/2018/05/27/MySQL%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4mysql_secure_installation/">MySQL安全设置命令mysql_secure_installation</a></li><li><a href="https://blog.csdn.net/alwaysbefine/article/details/108679423">mysql安全初始化脚本的免交互执行mysql_secure_installation</a></li></ul><h2 id="创建用户并授权">创建用户并授权</h2><ul><li><a href="https://blog.csdn.net/qpzkobe/article/details/102833458">MySQL5.7创建用户并授权_qpzkobe的博客-CSDN博客_mysql5.7 创建用户</a></li><li><a href="https://blog.csdn.net/hellokandy/article/details/80493564">MySQL 创建用户并设置所有权限_HelloKandy的博客-CSDN博客_mysql给用户所有权限</a></li><li><a href="https://blog.csdn.net/qq_23859799/article/details/85862821"><font color=Red>mysql8.0数据库添加用户和授权</font></a></li></ul><h2 id="修改密码">修改密码</h2><ul><li><a href="https://www.cnblogs.com/xiaotengyi/p/5458731.html">mysql 5.7修改密码 - Still water run deep - 博客园 (cnblogs.com)</a></li></ul><h2 id="忘记密码">忘记密码</h2><ul><li><a href="https://blog.51cto.com/u_15162069/2742245"><font color=Red>CentOS忘记mariadb/mysql root密码解决办法</font></a></li></ul><h2 id="远程连接">远程连接</h2><ul><li><a href="https://blog.csdn.net/lyj_null/article/details/90201325">mysql5.7开启root用户远程连接_lyj_null的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/freewsf/p/11980721.html">Centos7 查看Mysql配置文件 - freewsf - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/h996666/article/details/80921913">MySQL8.0允许外部访问</a></li></ul><h2 id="启动失败">启动失败</h2><ul><li><a href="https://www.cnblogs.com/cnwcl/p/13805643.html">mysql启动失败：su: warning: cannot change directory to /nonexistent: No such file or directory</a></li></ul><h2 id="mysql存储位置">mysql存储位置</h2><ul><li><a href="https://shawn-nie.github.io/2019/03/12/MySQL%E6%9B%B4%E6%8D%A2%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E7%9A%84%E6%96%B9%E6%B3%95/">MySQL更换数据存储路径的方法</a></li><li><a href="https://blog.csdn.net/weixin_42407739/article/details/113891104">docker mysql 存储位置_Docker mysql 把数据存储在本地目录</a></li></ul><h2 id="navicat">Navicat</h2><ul><li><a href="https://www.cnblogs.com/librarookie/p/15109941.html">Navicat 激活教程2021（Linux）</a></li><li><a href="https://blog.csdn.net/Copy_nzy/article/details/122782150">linux（Ubuntu）下Navicat的激活与无限试用</a></li><li><a href="https://dbeaver.io/download/" class="uri">https://dbeaver.io/download/</a></li></ul><h2 id="mysql教程-1">Mysql教程</h2><ul><li><a href="https://www.cnblogs.com/-wenli/p/11171826.html">Mysql面试题</a></li><li><a href="https://www.jianshu.com/p/4bb9f78b4f6d">Mysql四种常见数据库引擎</a></li><li><a href="https://blog.csdn.net/hao65103940/article/details/89032538">BTree和B+Tree详解</a></li></ul><h2 id="范式">范式</h2><ul><li><a href="https://blog.csdn.net/douunderstand/article/details/70159540">MySQL（4）第一范式第二范式第三范式BC范式</a></li></ul><h2 id="执行顺序">执行顺序</h2><ul><li><a href="https://mp.weixin.qq.com/s/e7j5a2d7HRBYg1L_HdLurw">SQL查询是从Select开始的吗？</a></li><li><a href="https://www.toutiao.com/article/7180907006297932326">这里有8种专坑同事的SQL写法，保证性能降低100倍，想来试试吗？</a></li></ul><h2 id="分组加行号">分组加行号</h2><ul><li><a href="https://www.cnblogs.com/kongxianghao/p/7371674.html">mysql分组加行号</a></li><li><a href="https://www.cnblogs.com/rollenholt/p/3776923.html">MySQL的语句执行顺序</a></li><li><a href="https://www.cnblogs.com/rhythmK/p/4806905.html">mysql显示行号，以及分组排序</a></li><li><a href="https://blog.csdn.net/zgbzbl/article/details/107573258">『MySQL』MySQL分组后添加行号_zgbzbl的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_30013585/article/details/118177490">mysql 分组给行号_realwujing的博客-CSDN博客</a></li></ul><h2 id="行转列">行转列</h2><ul><li><a href="https://blog.csdn.net/liuchaoxuan/article/details/80560739">MySQL实现行转列SQL</a></li><li><a href="https://www.cnblogs.com/chenduzizhong/p/9590741.html">MySQL case when用法</a></li></ul><h2 id="group-by">group by</h2><ul><li><a href="https://www.cnblogs.com/rainman/archive/2013/05/01/3053703.html">SQL中Group By的使用</a></li><li><a href="https://blog.csdn.net/qq403580298/article/details/90756352">MySQL对group by原理和理解</a></li><li><a href="https://www.cnblogs.com/pcheng/p/5939646.html">MySQL中union和order by一起使用的方法- PC君-博客园</a></li></ul><h2 id="分页">分页</h2><ul><li><a href="https://blog.csdn.net/bandaoyu/article/details/89844673">【mySQL】mysql 分页查询</a></li><li><a href="https://www.iteye.com/blog/qimo601-1634748">1、Mysql的limit用法</a></li></ul><h2 id="exist-in">exist in</h2><ul><li><a href="https://www.cnblogs.com/qlqwjy/p/8598091.html">MySQL中EXISTS的用法</a></li><li><a href="https://www.cnblogs.com/emilyyoucan/p/7833769.html">SQL语句中exists和in的区别</a></li></ul><h2 id="join">join</h2><ul><li><a href="https://www.runoob.com/w3cnote/sql-join-the-different-of-on-and-where.html">SQL JOIN 中 on 与 where 的区别</a></li></ul><h2 id="索引">索引</h2><ul><li><a href="https://www.cnblogs.com/zz-tt/p/6609828.html">MySQL 添加索引，删除索引及其用法 - 手心里的海 - 博客园 (cnblogs.com)</a></li></ul><h2 id="约束">约束</h2><ul><li><a href="https://blog.csdn.net/yumushui/article/details/38960619">MySQL中添加唯一约束和联合唯一约束_yumushui的专栏-CSDN博客_mysql添加唯一约束</a></li></ul><h2 id="优化">优化</h2><ul><li><a href="https://www.cnblogs.com/sunsky303/p/14206746.html">如何优化mysql的范围查询 - sunsky303 - 博客园 (cnblogs.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/104267505">MySQL慢查询优化之多范围查询优化 - 知乎 (zhihu.com)</a></li></ul><h2 id="时间类型">时间类型</h2><ul><li><a href="https://blog.csdn.net/gxy_2016/article/details/53436865">MySQL 日期类型及默认设置_gxy_2016的博客-CSDN博客</a></li></ul><h2 id="b树">B+树</h2><ul><li><a href="https://mp.weixin.qq.com/s/7JkLNt7Fhkx7d_ifv290iA">图解：什么是B+树？（汇总篇）</a></li></ul><h2 id="正则表达式">正则表达式</h2><ul><li><a href="https://www.php.cn/mysql-tutorials-414339.html">MySQL如何使用正则表达式？（代码示例）-mysql教程-PHP中文网</a></li></ul><h2 id="python">python</h2><ul><li><a href="https://blog.csdn.net/cnctcom/article/details/78805251">python操作MySQL数据库使用＂insert into ... on duplicate key update＂报错问题</a></li><li><a href="https://zhuanlan.zhihu.com/p/72606604">Python-封装数据库连接（impala） - 知乎 (zhihu.com)</a></li></ul><h2 id="数据库同步">数据库同步</h2><ul><li><p><a href="https://m.php.cn/article/418834.html"><font color=Red>mysql怎么导出数据库？</font></a></p></li><li><p><a href="https://pein0119.github.io/2014/10/22/MySQL%E7%BB%88%E7%AB%AF%E6%89%A7%E8%A1%8CSQL%E6%96%87%E4%BB%B6/"><font color=Red>MySQL终端执行SQL文件</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7153640695385932324/">一文了解MySQL Binlog</a></p></li><li><p><a href="https://www.toutiao.com/article/7153641138942198308/">基于Binlog的MySQL主从复制</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/TjF8stG8UhBm_TZAaChbTA"><font color=Red>MySQL 最朴素的监控方式！用完爱不释手</font></a></p></li><li><p><a href="https://juejin.cn/post/6844904088539234312">基于Canal和Kafka实现MySQL的Binlog近实时同步 (juejin.cn)</a></p></li><li><p><a href="https://www.cnblogs.com/laoqing/p/11359224.html">大数据时代，数据实时同步解决方案的思考—最全的数据同步总结 - 张永清 - 博客园 (cnblogs.com)</a></p></li></ul><h2 id="其它">其它</h2><ul><li><p><a href="https://www.cnblogs.com/xuliuzai/p/10840080.html">MySQL通过SHOW TABLE STATUS查看库中所有表的具体信息 - 东山絮柳仔 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/qq_42884482/article/details/100150177">关系模型中的三类完整性约束：实体完整性、参照完整性和用户定义完整性</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/50448594">通俗数据库设计（3）逻辑结构设计</a></p></li><li><p><a href="https://blog.csdn.net/qq_15037231/article/details/62049599">合并分ER图产生的冲突</a></p></li><li><p><a href="https://www.cnblogs.com/Lencamo/p/15510482.html">数据库之关系代数</a></p></li><li><p><a href="https://www.jianshu.com/p/d140a4df382c">数据库——关系代数运算</a></p></li></ul><h2 id="kudu-ubuntu16">Kudu ubuntu16</h2><ul><li><p><a href="https://github.com/cloudera/hs2client" class="uri">https://github.com/cloudera/hs2client</a></p></li><li><p><a href="https://blog.csdn.net/tangsl388/article/details/81984335">ubuntu 16.04部署安装kudu_小田坎儿-CSDN博客</a></p></li><li><p><a href="http://archive.cloudera.com/kudu/ubuntu/xenial/amd64/kudu/">archive.cloudera.com/kudu/ubuntu/xenial/amd64/kudu/</a></p></li><li><p><a href="https://blog.csdn.net/penker_zhao/article/details/107485417">大数据学习整理篇（三）Ubuntu 16.04 Server版安装Kudu,Impala,Spark 2.3.4,以及Scala语言使用Spark RDD访问HBase_astra_zhao的专栏-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/bin330720911/article/details/79993671">Impala基础语法（一）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cL4WgbZ8iHrS9hM0fM1kqQ">微信为什么使用SQLite保存聊天记录？</a></p></li></ul><h2 id="碎片化">碎片化</h2><ul><li><p><a href="https://www.51cto.com/article/263105.html">Oracle数据库碎片如何整理</a></p></li><li><p><a href="https://www.51cto.com/article/704241.html">碎片化的数据库世界，你了解几分？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/MY79ghMK5wEwuCUrfYaSRQ">ULID - 一种比UUID更好的方案</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/fnAop2zJnyZRuUZCPgvzrg">面试官问：select......for update会锁表还是锁行？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python</title>
    <link href="/python/python/"/>
    <url>/python/python/</url>
    
    <content type="html"><![CDATA[<h1 id="python">python</h1><h2 id="anaconda">anaconda</h2><ul><li><p><a href="https://blog.csdn.net/qq_36338754/article/details/96430294">Anaconda python3.6版本安装_华仔的博客-CSDN博客_anaconda python3.6</a></p></li><li><p>wget <a href="https://mirrors.bfsu.edu.cn/anaconda/archive/Anaconda3-5.2.0-Linux-x86_64.sh" class="uri">https://mirrors.bfsu.edu.cn/anaconda/archive/Anaconda3-5.2.0-Linux-x86_64.sh</a></p></li><li><p><a href="https://www.cnblogs.com/zhaopanpan/p/9383350.html">pipreqs查找python项目依赖并生成requirements.txt - 一抹浅笑 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/129866307">python使用清华源进行pip安装的方法（最方便，不用换源只需一行代码）</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43667077/article/details/106521015">【2020-06】3个Anaconda国内开源镜像站</a></p></li><li><p><a href="https://blog.csdn.net/liuYinXinAll/article/details/90042947">Python使用清华大学镜像源</a></p></li><li><p><a href="https://www.cnblogs.com/believepd/p/10423094.html">pipreqs（找当前项目依赖的包）</a></p></li><li><p><a href="https://www.cnblogs.com/songzhixue/p/11296720.html">python国内镜像源</a></p></li><li><p><a href="https://blog.csdn.net/weixin_40922744/article/details/109866687">Ubuntu中conda的安装及常用命令</a></p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.mirrors.ustc.edu.cn/simple/<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://blog.csdn.net/pansaky/article/details/90710751">python 日志 logging模块(详细解析)_pansaky的博客-CSDN博客</a></li><li><a href="https://pypi.org/project/loguru/">loguru · PyPI</a></li><li><a href="https://www.cnblogs.com/yyds/p/6901864.html">Python之日志处理（logging模块） - 云游道士 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/qq_41767116/article/details/113734410">python logging模块打印log到指定文件_Lucky小黄人的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_38641985/article/details/81672283">python logging 日志 通过修饰器获取错误信息_桜-CSDN博客</a></li><li><a href="https://blog.csdn.net/pansaky/article/details/90710751">python日志logging模块(详细解析)</a></li><li><a href="https://blog.csdn.net/lvmengzou/article/details/118307249">Python + logging 输出到屏幕，将log日志写入文件_lvmengzou的专栏-CSDN博客</a></li><li><a href="https://blog.csdn.net/Jason_WangYing/article/details/114155112">loguru如何创建两个不同的日志文件_Jason_WangYing的博客-CSDN博客</a></li></ul><h2 id="爬虫">爬虫</h2><ul><li><p><a href="https://www.cnblogs.com/nmsghgnv/p/12369656.html">scrapy框架中多个spider,tiems,pipelines的使用及运行方法</a></p></li><li><p><a href="https://www.cnblogs.com/jackzz/p/10774517.html">Scrapy：配置日志</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43958804/article/details/88308992">python 爬虫面试整理</a></p></li><li><p><a href="https://github.com/realReid/LHB.git" class="uri">https://github.com/realReid/LHB.git</a></p></li><li><p><a href="https://www.zhihu.com/question/56148271">xpath 如何选取某个节点但是排除掉某个子节点？ - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/78571606">Python爬虫实战(一) 用Python爬取百度百科 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/6a0dbb4e246a">Xpath 详解 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/Neeo/articles/11520952.html">Python - urllib - 听雨危楼 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/c8f896d668d6">[Python]requests使用代理 - 简书 (jianshu.com)</a></p></li></ul><h2 id="python-mysql">python mysql</h2><ul><li><a href="https://www.cnblogs.com/jiangxiaobo/p/12786205.html">python3 实现mysql数据库连接池 - jiangxiaobo - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/c-x-a/p/9045646.html">pymysql 线程安全pymysqlpool - 公众号python学习开发 - 博客园 (cnblogs.com)</a></li><li><a href="http://www.zzvips.com/article/117347.html">Python MySQL数据库连接池组件pymysqlpool详解_Python_脚本之家 (zzvips.com)</a></li><li><a href="http://www.manongjc.com/detail/5-mnpaewuzaaewzpm.html">Python MySQL数据库连接池组件pymysqlpool详解 - 码农教程 (manongjc.com)</a></li><li><a href="https://blog.csdn.net/wait_2030/article/details/90266211">MySQL插入数据时自动添加创建时间（create_time）和修改时间（update_time）_wait_2030的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/feiquan/p/11350374.html">Python 使用 PyMysql、DBUtils 创建连接池，提升性能 - feiquan - 博客园 (cnblogs.com)</a></li></ul><h2 id="pandas">pandas</h2><ul><li><a href="https://blog.csdn.net/weixin_51098806/article/details/115265280">python如何转换dataframe列的类型astype()方法（超级详细）_爱代码的小哥的博客-CSDN博客</a></li><li><a href="https://www.jianshu.com/p/3d797335f467">pandas从mysql读写数据 - 简书 (jianshu.com)</a></li><li><a href="https://www.cnblogs.com/onemorepoint/p/9404753.html">pandas 数据类型转换 - 多一点 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/ls13552912394/article/details/79349809">在pandas中遍历DataFrame行_ls13552912394的博客-CSDN博客_dataframe遍历行</a></li><li><a href="https://www.cnblogs.com/wqbin/p/11775812.html">pandas df 遍历行方法 - wqbin - 博客园 (cnblogs.com)</a></li><li><a href="https://www.jb51.net/article/209858.htm">python基于Pandas读写MySQL数据库_python_脚本之家 (jb51.net)</a></li><li><a href="https://www.jianshu.com/p/72274ccb647a">Pandas 中 SettingwithCopyWarning 的原理和解决方案 - 简书 (jianshu.com)</a></li><li><a href="https://www.jianshu.com/p/732858f89a00">python pandas &gt;loc、iloc用法 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_42711381/article/details/90451301">(3条消息) Pandas - A value is trying to be set on a copy of a slice from a DataFrame_NFII-CSDN博客</a></li><li><a href="https://blog.csdn.net/curry3030/article/details/100533296">(3条消息) 处理pandas出现warning: “A value is trying to be set on a copy of a slice from a DataFrame.”_curry3030的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/yudajiangshan/article/details/112402130">python pandas Dataframe增加一列遇到A value is trying to be set on a copy of a slice from a DataFrame._yudajiangshan的博客-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s/BNMj5VL3QW6Qjg6WoKqCXA">收藏学习：100个Pandas常用的函数</a></li></ul><h2 id="机器学习">机器学习</h2><ul><li><p><a href="http://www.feiguyunai.com/">Python技术交流与分享</a></p></li><li><p><a href="https://github.com/Kunal-Varma/GPT3-Demos" class="uri">https://github.com/Kunal-Varma/GPT3-Demos</a></p></li><li><p><a href="https://mofanpy.com/">莫烦python</a></p></li><li><p><a href="https://github.com/fighting41love/funNLP">NLP民工的乐园:几乎最全的中文NLP资源库</a></p></li><li><p><a href="https://github.com/apachecn/apachecn-dl-zh">ApacheCN深度学习译文集</a></p></li><li><p><a href="https://pytorch.apachecn.org/docs/1.7/">PyTorch中文官方教程1.7</a></p></li><li><p><a href="https://blog.csdn.net/Yellow_python/article/details/81021142">Python+gensim-文本相似度分析（小白进）</a></p></li><li><p><a href="https://www.cnblogs.com/tornadomeet/p/3395593.html">机器学习&amp;数据挖掘笔记_16（常见面试之机器学习算法思想简单梳理）</a></p></li><li><p><a href="https://blog.csdn.net/jiaoyangwm/article/details/79805939">机器学习笔试面试超详细总结（一）</a></p></li></ul><h2 id="其他">其他</h2><ul><li><a href="http://c.biancheng.net/view/4552.html">Python实例方法、静态方法和类方法详解（包含区别和用法） (biancheng.net)</a></li><li><a href="https://www.cnblogs.com/finer/p/12846475.html">110道python面试题</a></li><li><a href="https://blog.csdn.net/sinat_38682860/article/details/94763641">吐血总结！50道Python面试题集锦（附答案）</a></li><li><a href="https://zhuanlan.zhihu.com/p/87524388">【进阶Python】第六讲：单例模式的妙用 - 知乎 (zhihu.com)</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328525009056">函数式编程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></li><li><a href="https://blog.51cto.com/u_15127500/3822046">ubuntu 上的python安装包位置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cargo教程</title>
    <link href="/rust/cargo%E6%95%99%E7%A8%8B/"/>
    <url>/rust/cargo%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="cargo教程">cargo教程</h1><ul><li><p><a href="https://cargo.budshome.com/index.html#cargo-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3">Cargo 中文文档</a></p></li><li><p><a href="https://learnku.com/docs/cargo-book/2018">Cargo 教程</a></p></li><li><p><a href="https://cxx.rs/build/cmake.html" class="uri">https://cxx.rs/build/cmake.html</a></p></li><li><p><a href="https://github.com/XiangpengHao/cxx-cmake-example" class="uri">https://github.com/XiangpengHao/cxx-cmake-example</a></p></li><li><p><a href="https://www.jianshu.com/p/95884d1d04aa">Rust 调用C/C++</a></p></li><li><p><a href="https://github.com/ZhangHanDong/tao-of-rust-codes">《Rust编程之道》随书源码</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/algorithm/algorithm/"/>
    <url>/algorithm/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="algorithm">algorithm</h1><h2 id="数据结构">数据结构</h2><ul><li><a href="https://www.cnblogs.com/fundebug/p/data_structures_in_js_for_interview.html">代码面试需要知道的8种数据结构(附面试题及答案链接)</a></li><li><a href="https://mp.weixin.qq.com/s/ujXOtCA8og8Cyq59O_zuaw">嵌入式软件常见的 8 种数据结构</a></li><li><a href="https://blog.csdn.net/u014532217/article/details/79118023">数据结构-各种树的定义</a></li><li><a href="https://www.jianshu.com/p/b597aa97c9de">二叉树、平衡二叉树、红黑树、B树、B+树与B*树 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/sinat_34072381/article/details/107197754">红黑树、B树和B+树</a></li><li><a href="https://developer.aliyun.com/article/38345">二叉树学习笔记之B树、B+树、B*树</a></li><li><a href="https://cloud.tencent.com/developer/article/1769988"><font color=Red>LeetCode0：学习算法必备知识：时间复杂度与空间复杂度的计算</font></a></li><li><a href="http://c.biancheng.net/algorithm/">算法入门教程（多语言实现）</a></li></ul><h2 id="堆栈">堆栈</h2><ul><li><a href="https://www.cnblogs.com/nycsde/p/13772560.html">一分钟带你读懂什么是堆？ - 码农田小齐 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/speedme/article/details/22943191/">操作系统中堆和栈的区别_SpeedMe的博客-CSDN博客</a></li></ul><h2 id="遍历">遍历</h2><ul><li><a href="https://blog.csdn.net/u013834525/article/details/80421684">二叉树前序遍历、中序遍历、后序遍历、层序遍历的直观理解_白夜行的狼-CSDN博客_中序遍历</a></li><li><a href="https://www.jianshu.com/p/456af5480cee">二叉树遍历(先序、中序、后序) - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/My_Jobs/article/details/43451187"><font color=Red>二叉树遍历（前序、中序、后序、层次遍历、深度优先、广度优先）</font></a></li><li><a href="https://www.jianshu.com/p/b086986969e6">DFS（深度优先搜索）和BFS(广度优先搜索)</a></li></ul><h2 id="刷题">刷题</h2><ul><li><p><a href="http://c.biancheng.net/algorithm/what-is-algorithm.html">算法入门教程（多语言实现）</a></p></li><li><p><a href="https://labuladong.gitee.io/algo/"><font color=Red>labuladong的算法小抄 :: labuladong的算法小抄 (gitee.io)</font></a></p></li><li><p><a href="https://labuladong.gitee.io/algo/2/19/22/"><font color=Red>我们千万不要跳进递归的细节里，你的脑袋才能压几个栈呀。</font></a></p></li><li><p><a href="https://labuladong.gitbook.io/algo/">开篇词 - labuladong 的算法小抄 (gitbook.io)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/AWsL7G89RtaHyHjRPNJENA">labuladong的算法小抄：列表形式目录(qq.com)</a></p></li><li><p><a href="https://github.com/soulmachine/leetcode">soulmachine/leetcode: LeetCode题解，151道题完整版 (github.com)</a></p></li><li><p><a href="https://github.com/doocs/leetcode">doocs/leetcode:😏LeetCode solutions in any programming language | 多种编程语言实现 LeetCode、《剑指 Offer（第 2 版）》、《程序员面试金典（第 6 版）》题解 (github.com)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uOubir_nLzQtp_fWHL73JA"><font color=Red>「刷题外挂 V2.4」稳定版使用手册</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7167302615553065511/">图解一致性哈希算法，看这一篇就够了</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zL-n7zq0Zyhf-l_GQil2dg">一致性哈希算法设计题，栽了</a></p></li><li><p><a href="https://www.toutiao.com/article/7209275067782464040">布隆过滤器(Bloom Filter)的设计和实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/4vHfaNnn1OpWQJcsssWWdQ">必知必会位运算技巧手册</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>strings</title>
    <link href="/linux/shell/strings/"/>
    <url>/linux/shell/strings/</url>
    
    <content type="html"><![CDATA[<h1 id="strings">strings</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.so*&quot;</span> -<span class="hljs-built_in">exec</span> sh -c <span class="hljs-string">&#x27;strings &quot;$0&quot; | grep &quot;target_string&quot; &amp;&amp; echo &quot;$0&quot;&#x27;</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">这个命令会在当前目录下递归查找所有后缀名为 .so 或者 .so.* 的文件，并使用 strings 命令提取其中的字符串，然后使用 grep 命令在字符串中查找目标字符串，如果目标字符串出现了，就输出包含目标字符串的文件名。<br><br>具体来说，该命令使用 find 命令在当前目录下查找所有类型为文件（-type f）且文件名匹配 *.so* 的文件，然后使用 -exec 选项执行后面的命令。<br><br>后面的命令使用 sh -c 执行，将每个匹配到的文件名（&#123;&#125;）传递给了 $0 变量。在命令中，先使用 strings 命令提取文件中的字符串，然后使用 grep 命令查找目标字符串是否存在，如果存在，就使用 echo 命令输出包含目标字符串的文件名。<br><br>需要注意的是，命令中使用了单引号包围命令，以避免 Shell 解析命令中的 $0 变量和 &#123;&#125; 字符。同时，在命令的末尾需要使用 \; 来表示命令的结束，而不是使用分号 ;，因为分号 ; 是 Shell 的保留字符。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/deepin/kms/README/"/>
    <url>/linux/deepin/kms/README/</url>
    
    <content type="html"><![CDATA[<h1 id="deepin专业版激活">deepin专业版激活</h1><h2 id="ac认证">1. ac认证</h2><p><a href="http://ac.uniontehc.com">上网认证系统</a></p><h2 id="激活">2. 激活</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">设置 -&gt; 系统信息 -&gt; 关于本机 -&gt; 激活 -&gt; 设置 -&gt; 自定义<br>kms::// kms.uniontech.com:8900:nqYvXZXdNPKNn335<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>deepin</category>
      
      <category>kms</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flatpak</title>
    <link href="/linux/package/flatpak/"/>
    <url>/linux/package/flatpak/</url>
    
    <content type="html"><![CDATA[<h1 id="flatpak">flatpak</h1><h2 id="demo1">demo1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">flatpak install com.belmoussaoui.Decoder <br><br><span class="hljs-comment">#  默认过滤规则进入沙箱</span><br>flatpak run --devel  --<span class="hljs-built_in">command</span>=bash com.belmoussaoui.Decoder <br><br><span class="hljs-comment"># 发送测试命令 需要换成自己的demo服务，然后启动服务，预期结果dbus调用被拦截</span><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.deepin.linglong.AppManager /com/deepin/linglong/PackageManager com.deepin.linglong.PackageManager.<span class="hljs-built_in">test</span> string:<span class="hljs-string">&quot;org.deepin.demo&quot;</span> <br><br><span class="hljs-comment"># 退出沙箱</span><br><span class="hljs-built_in">exit</span>  <br><br><span class="hljs-comment"># 设置过滤规则允许调用test，进入沙箱</span><br>flatpak run  --devel --<span class="hljs-built_in">command</span>=bash --talk-name=com.deepin.linglong.AppManager com.belmoussaoui.Decoder  <br><br><span class="hljs-comment"># 预期结果dbus调用成功</span><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.deepin.linglong.AppManager /com/deepin/linglong/PackageManager com.deepin.linglong.PackageManager.<span class="hljs-built_in">test</span> string:<span class="hljs-string">&quot;org.deepin.demo&quot;</span> <br></code></pre></td></tr></table></figure><h2 id="demo2">demo2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">flatpak install com.belmoussaoui.Decoder  <br><br><span class="hljs-comment"># 默认过滤规则进入沙箱  </span><br>flatpak run --devel  --<span class="hljs-built_in">command</span>=bash com.belmoussaoui.Decoder  <br><br><span class="hljs-comment"># 发送测试命令 需要换成自己的demo服务，然后启动服务，预期结果dbus调用被拦截  </span><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.scorpio.test /test/objects com.scorpio.test.value.book <br><br><span class="hljs-comment"># 退出沙箱</span><br><br><span class="hljs-built_in">exit</span><br><br><span class="hljs-comment"># 设置过滤规则允许调用test，进入沙箱</span><br>flatpak run  --devel --<span class="hljs-built_in">command</span>=bash --talk-name=com.scorpio.test com.belmoussaoui.Decoder <br><br><span class="hljs-comment"># 预期结果dbus调用成功  </span><br><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.scorpio.test /test/objects com.scorpio.test.value.book <br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">Flatpak原理-ostree <br><br>xdg-dbus-proxy - D-Bus proxy <br><br>Figure 7. Example of successful EXTERNAL authentication with successful negotiation of Unix FD passing <br><br>           C: AUTH EXTERNAL 31303030 <br><br>S: OK 1234deadbeef<br>             <br><br>C: NEGOTIATE_UNIX_FD<br>             <br><br>S: AGREE_UNIX_FD<br>             <br><br>C: BEGIN<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://stackoverflow.com/questions/35813093/creating-a-local-socket-in-a-custom-location-with-qt">https://stackoverflow.com/questions/35813093/creating-a-local-socket-in-a-custom-location-with-qt</a></li><li><a href="https://stackoverflow.com/questions/7753713/c-qt-write-to-unix-socket?rq=1">https://stackoverflow.com/questions/7753713/c-qt-write-to-unix-socket?rq=1</a></li><li><a href="https://stackoverflow.com/questions/52400159/reading-from-a-unix-domain-socket-qlocalsocket-on-qt">https://stackoverflow.com/questions/52400159/reading-from-a-unix-domain-socket-qlocalsocket-on-qt</a></li><li><a href="https://stackoverflow.com/questions/42085259/qt5-is-there-a-way-to-make-qlocalserver-listen-to-abstract-unix-socket">https://stackoverflow.com/questions/42085259/qt5-is-there-a-way-to-make-qlocalserver-listen-to-abstract-unix-socket</a></li><li><a href="https://codereview.qt-project.org/c/qt/qtbase/+/330032">https://codereview.qt-project.org/c/qt/qtbase/+/330032</a></li><li><a href="https://www.cnblogs.com/xiangtingshen/p/11063583.html">https://www.cnblogs.com/xiangtingshen/p/11063583.html</a></li><li><a href="https://dbus.freedesktop.org/doc/dbus-specification.html">https://dbus.freedesktop.org/doc/dbus-specification.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包管理</title>
    <link href="/linux/package/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/linux/package/%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="包管理">包管理</h1><h2 id="软件源">软件源</h2><ul><li><a href="https://pkgs.org/">https://pkgs.org/</a></li><li><a href="https://www.jianshu.com/p/84d07a78cd0f">Ubuntu的软件源格式详解</a></li><li><a href="http://mirrors.ustc.edu.cn/"><font color=Red>中国科学技术大学开源软件镜像</font></a></li><li><a href="http://mirrors.ustc.edu.cn/help/">USTC Mirror Help—USTC Mirror Help文档</a></li><li><a href="https://developer.aliyun.com/mirror/?spm=a2c6h.12873639.J_5404914170.29.2feb6235F6x30d">阿里云官方镜像站</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">Debian 镜像使用帮助-清华大学开源软件镜像站</a></li><li><a href="https://packages.debian.org/zh-cn/">Debian 搜索软件包</a></li><li><a href="https://www.debian.org/mirror/list"><font color=Red>Debian 全球镜像站</font></a></li><li><a href="https://packages.debian.org/bullseye/netselect-apt">netselect-apt 用于选择快速 Debian 镜像的速度测试器</a></li><li><a href="https://wiki.ubuntu.com/Debug%20Symbol%20Packages"><font color=Red>Ubuntu Debug Symbol Packages</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1637887">（转载）ubuntu 安装 dbgsym (debug-info)</a></li><li><a href="https://zhuanlan.zhihu.com/p/608493042">修复 Ubuntu 中的 “Key is stored in legacy trusted.gpg keyring” 问题 | Linux 中国</a></li></ul><h2 id="内核调试包">内核调试包</h2><ul><li><a href="https://github.com/gatieme/LDD-LinuxDeviceDrivers/blob/master/study/debug/tools/systemtap/01-install/README.md">Linux内核调试的方式以及工具集锦</a></li><li><a href="https://access.redhat.com/solutions/9907">如何下载或安装 RHEL 系统的内核调试信息包？</a></li><li><a href="https://blog.csdn.net/ZCShouCSDN/article/details/128188958"><font color=Red>Linux 之十八 Ubuntu 22.04 配置内核版本、GRUB 引导、远程桌面、包后缀（-dev、-dbg等）</font></a></li></ul><h2 id="apt-dpkg-yum-rpm-brew">apt dpkg yum rpm brew</h2><ul><li><a href="https://mp.weixin.qq.com/s/4XXl-dcbH0eUqYcHwZYKxg"><font color=Red>五种常见 Linux 系统安装包管理工具中文使用指南</font></a></li></ul><h2 id="debian">debian</h2><ul><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch02.zh-cn.html#_basic_package_management_operations_with_the_commandline">第 2 章 Debian 软件包管理</a></p></li><li><p><a href="https://www.toutiao.com/article/7190217952308757053/">apt remove和apt purge:有什么区别？</a></p></li><li><p><a href="https://www.cnblogs.com/thespace/p/12445252.html">apt update，apt upgrade和apt dist-upgrade的区别</a></p></li><li><p><a href="https://www.learndiary.com/2021/04/debian-deepin-upgrade/">sudo apt full-upgrade（也可以用 sudo apt dist-upgrade ，据我所知，它们效果是一样的）</a></p></li><li><p><a href="https://askubuntu.com/questions/81585/what-is-dist-upgrade-and-why-does-it-upgrade-more-than-upgrade">What is "dist-upgrade" and why does it upgrade more than "upgrade"?</a></p></li><li><p><a href="https://www.toutiao.com/article/7209575948562334247">dpkg常用命令总结</a></p></li><li><p><a href="https://blog.csdn.net/linuxvfast/article/details/117701825">Ubuntu系统下deb包的解压、打包、安装、卸载及常用命令</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1579495"><font color=Red>Debian软件包常用管理命令整理</font></a></p></li><li><p><a href="https://www.runoob.com/linux/linux-comm-apt.html">Linux apt命令</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44596606/article/details/87654398"><font color=Red>apt dpkg常用命令汇总</font></a></p></li><li><p><a href="https://blog.csdn.net/rookie_wei/article/details/122409853"><font color=Red>apt-cache madison与apt-cache search</font></a></p></li><li><p><a href="https://www.uc23.net/command/256.html">apt-cache (搜索软件包和软件包名称)</a></p></li><li><p><a href="https://linux.cn/article-12987-1.html">如何在基于 Ubuntu 或 Debian 的 Linux 发行版中查看一个软件包的依赖</a></p></li><li><p><a href="https://blog.csdn.net/weixin_51867896/article/details/121883910">列出ubuntu软件管理工具apt的一些用法(自由总结)</a></p></li><li><p><a href="https://blog.csdn.net/penglijiang/article/details/8553677">ubuntu 中软件重新安装卸载等操作_penglijiang的专栏-CSDN博客</a></p></li><li><p><a href="https://www.jianshu.com/p/a205f7a44b45">ubuntu No module named 'apt_pkg' - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/presleyren/p/11011129.html">Ubuntu Error: No module named 'apt_pkg' 怎么办？ - ￣□￣ - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/6432015c52a6">Linux软件安装管理之——dpkg与apt-*详解</a></p></li><li><p><a href="https://blog.csdn.net/get_set/article/details/51276609">Ubuntu apt-get彻底卸载软件包_刘康的专栏-CSDN博客_apt 卸载</a></p></li><li><p><a href="https://www.cnblogs.com/EasonJim/p/7144017.html">Ubuntu通过apt-get安装指定版本和查询指定软件有多少个版本</a></p></li><li><p><a href="https://www.jianshu.com/p/9fd19418cf83">Ubuntu使用apt-file解决库或者文件缺失依赖</a></p></li><li><p><a href="https://www.cnblogs.com/kelamoyujuzhen/p/9728260.html">/etc/apt/sources.list 和 /etc/apt/sources.list.d</a></p></li></ul><h2 id="gpg-error">GPG error</h2><ul><li><p><a href="https://faq.fydeos.com/recipes/solve-apt-get-gpg-error/">Linux（测试版）刷新软件包列表遇到 GPG 错误的解决方法</a></p></li><li><p><a href="http://www.cppblog.com/zhangyq/archive/2021/03/13/217627.html">debian更新清华源 GPG 错误：由于没有公钥，无法验证下列签名</a></p></li><li><p><a href="https://www.freesion.com/article/4440566650/">UBUNTU配置APT国内源</a></p></li><li><p><a href="https://www.cnblogs.com/saysmy/p/10390277.html">apt-get软件包管理命令 和 apt-key命令</a></p></li><li><p><a href="https://blog.csdn.net/e891377/article/details/108032882"><font color=Red>查看Deepin版本与Debian版本</font></a></p></li></ul><h2 id="centos">centos</h2><ul><li><a href="https://www.iplayio.cn/post/33066">CentOS8的DNF软件管理包教程：dnf如何安装/更新/删除软件包和软件包组</a></li><li><a href="https://blog.csdn.net/peng2hui1314/article/details/123930942">Centos 8 使用 yum 报错 Error: Cannot prepare internal mirrorlist: No URLs in mirrorlist</a></li><li><a href="https://blog.csdn.net/wykqh/article/details/123004620"><font color=Red>CentOS Linux 8 - AppStream 错误：为仓库 ‘appstream‘ 下载元数据失败 : Cannot prepare internal mirrorlist: No URLs</font></a></li><li><a href="https://www.myfreax.com/how-to-check-your-centos-version/">如何检查CentOS 版本</a></li><li><a href="https://linux.cn/article-12161-1.html">DNF 和 Yum 的区别，为什么 Yum 会被 DNF 取代？</a></li></ul><h2 id="macos">macos</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew / Linuxbrew镜像使用帮助</a></li><li><a href="https://blog.csdn.net/tzjvon/article/details/79648825">brew更换国内镜像源_tzjvon的博客-CSDN博客_brew更换镜像</a></li><li><a href="https://www.it1352.com/2270246.html">为什么brew安装需要sudo访问?</a></li></ul><h2 id="deb打包">deb打包</h2><ul><li><p><a href="https://www.debian.org/doc/manuals/debmake-doc/">Debian 维护者指南</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39759247/article/details/125923234">deb编包笔记</a></p></li><li><p><a href="https://blog.csdn.net/dztaopao/article/details/9239399">deb包制作中control文件说明</a></p></li><li><p><a href="https://blog.csdn.net/yingyingququ/article/details/108848019">deb包安装/卸载/升级时，preinst, postinst, prerm, postrm的执行顺序</a></p></li><li><p><a href="https://www.ubuntukylin.com/news/1713-cn.html">干货分享 - Debian包的潜规则（脚本篇）</a></p></li><li><p><a href="https://github.com/realwujing/linux-learning/blob/master/deb/pbuilder%E6%95%99%E7%A8%8B.md"><font color=Red>pbuilder教程</font></a></p></li><li><p><a href="https://codeantenna.com/a/ZW9Zd5bFYi"><font color=Red>pbuilder编译构建工具分析</font></a></p></li><li><p><a href="https://www.cnblogs.com/zszmhd/p/3628446.html">pbuilder编译构建工具分析</a></p></li><li><p><a href="https://www.aftermath.cn//2022/03/06/debian-pbuilder/">debian pbuilder使用</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dh_make --createorig -sy <br>dpkg-source -b . <br>sudo pbuilder --build  --logfile log.txt --basetgz /var/cache/pbuilder/base.tgz --allow-untrusted --hookdir /var/cache/pbuilder/hooks   --debbuildopts -sa --use-network <span class="hljs-built_in">yes</span> --aptcache <span class="hljs-string">&quot;&quot;</span> --buildresult . *.dsc <br></code></pre></td></tr></table></figure></p></li></ul><h2 id="rpm打包">rpm打包</h2><ul><li><a href="https://yanyixing.github.io/2018/09/25/rpm-mock/">通过mock来构建rpm包</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>debmake</title>
    <link href="/linux/package/deb/debmake/"/>
    <url>/linux/package/deb/debmake/</url>
    
    <content type="html"><![CDATA[<h1 id="宿主机上打包deb教程">宿主机上打包deb教程</h1><ol type="1"><li><p>安装环境</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install dh-make<br></code></pre></td></tr></table></figure></p><p>根据debbian/control安装依赖：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linglong-repo<br>sudo apt build-dep .<br><span class="hljs-built_in">cd</span> ..<br></code></pre></td></tr></table></figure></p></li><li><p>根据版本号创建符合dh_make规范的<package>-<version>格式</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> linglong-repo linglong-repo-0.0.1<br></code></pre></td></tr></table></figure></p></li><li><p>dh_make生成debian模板文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linglong-repo-0.0.1<br>dh_make --createorig -sy<br></code></pre></td></tr></table></figure></p></li><li><p>dkpg-source生成构建源代码包</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg-source -b .<br></code></pre></td></tr></table></figure></p></li><li><p>crotrol文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">Source: linglong-repo   <span class="hljs-comment"># 源码名</span><br>Section: unknown<br>Priority: optional<br>Maintainer: yuanqiliang &lt;yuanqiliang@uniontech.com&gt;    <span class="hljs-comment"># 维护者</span><br>Build-Depends: debhelper (&gt;= 11), ostree, libostree-dev    <span class="hljs-comment"># 编译依赖</span><br>Standards-Version: 4.1.3<br>Homepage: https://linglong.dev<br><span class="hljs-comment">#Vcs-Browser: https://salsa.debian.org/debian/linglong-repo</span><br><span class="hljs-comment">#Vcs-Git: https://salsa.debian.org/debian/linglong-repo.git</span><br><br>Package: ll-repo-cli    <span class="hljs-comment"># deb包名，多个的话拆分，见下方ll-repo-server</span><br>Architecture: any<br>Depends: <span class="hljs-variable">$&#123;shlibs:Depends&#125;</span>, <span class="hljs-variable">$&#123;misc:Depends&#125;</span><br>Description: ll-repo-cli    <span class="hljs-comment"># 简介</span><br> ll-repo-cli    <span class="hljs-comment"># 稍微详细一点的简介</span><br><br>Package: ll-repo-server<br>Architecture: any<br>Depends: <span class="hljs-variable">$&#123;shlibs:Depends&#125;</span>, <span class="hljs-variable">$&#123;misc:Depends&#125;</span><br>Description: ll-repo-server<br> ll-repo-server<br></code></pre></td></tr></table></figure></p></li><li><p>rules文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/make -f</span><br><br>%:<br>    dh <span class="hljs-variable">$@</span><br><br>override_dh_shlibdeps:<br>    dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info<br><br>override_dh_auto_test:<br></code></pre></td></tr></table></figure></p></li><li><p>makefile</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHELL=/bin/bash<br><br>PREFIX = /usr   <span class="hljs-comment"># 模拟安装此包到debian/tmp目录下的相对路径前缀</span><br><br>all: build    <span class="hljs-comment"># all要放前面</span><br><br>install-swag:<br>    go install github.com/swaggo/swag/cmd/swag@v1.8.4<br><br>swag-doc: install-swag<br>    swag init --parseDependency --parseInternal -d cmd/ll-repo-server<br><br>build-vendor:<br>    go mod tidy<br>    go mod vendor<br><br>build: build-vendor<br>    CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ./bin/ll-repo-server -v ./cmd/ll-repo-server<br>    CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ./bin/ll-repo-cli    -v ./cmd/ll-repo-cli<br><br>run: build<br>    ./ll-repo-server<br><br>cli-run: build<br>    ./ll-repo-cli<br><br>docker:<br>    docker build \<br>        -t linglong-server:latest \<br>        -f Dockerfile .<br>        <br>install:    <span class="hljs-comment"># 安装命令</span><br>    install -Dm0755 bin/ll-repo-cli <span class="hljs-variable">$&#123;DESTDIR&#125;</span>/<span class="hljs-variable">$&#123;PREFIX&#125;</span>/bin/ll-repo-cli<br>    install -Dm0755 bin/ll-repo-server <span class="hljs-variable">$&#123;DESTDIR&#125;</span>/<span class="hljs-variable">$&#123;PREFIX&#125;</span>/bin/ll-repo-server<br><br>clean:<br>    <span class="hljs-built_in">rm</span> -rf bin vendor<br><br>.PHONY: docker install <span class="hljs-built_in">help</span> swag-doc<br></code></pre></td></tr></table></figure></p></li><li><p>ll-repo-cli.install文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">usr/bin/ll-repo-cli    <span class="hljs-comment"># ll-repo-cli 安装到系统/usr/bin/ll-repo-cli</span><br></code></pre></td></tr></table></figure></p><p>拆分步骤7中的install安装命令，将ll-repo-cli安装需要的内容剥离。</p></li><li><p>ll-repo-server.install文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">usr/bin/ll-repo-server    <span class="hljs-comment"># ll-repo-server 安装到系统/usr/bin/ll-repo-server</span><br></code></pre></td></tr></table></figure></p><p>拆分步骤7中的install安装命令，将ll-repo-server安装需要的内容剥离。</p><p>制作单个deb包无需步骤8、9。</p></li><li><p>changelog文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">linglong-repo (0.0.1-1) unstable; urgency=medium<br><br>* Initial release (Closes: #nnnn)  &lt;nnnn is the bug number of your ITP&gt;<br><br>-- unknown &lt;wujing@wujing-PC&gt;  Fri, 14 Oct 2022 17:36:33 +0800<br></code></pre></td></tr></table></figure></li><li><p>编译制作deb包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><br><span class="hljs-built_in">set</span> -x<br><br>dh_clean    <span class="hljs-comment"># 调用makefile中的clean命令</span><br><span class="hljs-built_in">rm</span> ../linglong-repo_0.0.1*.dsc ../linglong-repo_0.0.1*.xz -rf    <span class="hljs-comment"># 删除 dpkg-source -b . dh_make --createorig -sy 命令生成的源码压缩包</span><br>dh_make --createorig -sy    <span class="hljs-comment"># 生成debian目录</span><br>dpkg-source -b .    <span class="hljs-comment"># 生成构建源代码包</span><br>dpkg-buildpackage -uc -us    <span class="hljs-comment"># 编译制作deb包</span><br></code></pre></td></tr></table></figure></li></ol><p>命令与上方有所重复，写成shell脚本，只是为了提高效率。</p><ul><li><a href="https://www.debian.org/doc/manuals/debmake-doc/ch04.zh-cn.html#packaging-tarball">https://www.debian.org/doc/manuals/debmake-doc/ch04.zh-cn.html#packaging-tarball</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>deb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pbuilder教程</title>
    <link href="/linux/package/deb/pbuilder%E6%95%99%E7%A8%8B/"/>
    <url>/linux/package/deb/pbuilder%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="pbuilder教程">pbuilder教程</h1><ol type="1"><li><p>安装环境</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install pbuilder debootstrap devscripts dh-make<br></code></pre></td></tr></table></figure></p></li><li><p>pbuilder配置 以下路径任选其一</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">/etc/pbuilderrc<br>/root/.pbuilderrc<br></code></pre></td></tr></table></figure></p><p>将以下内容写入上述配置文件，上述路径任选其一即可，以uos v20 专业版为例：</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">MIRRORSITE=http://pools.uniontech.com/desktop-professional<br>DEBOOTSTRAPOPTS=(<br>    &#x27;--variant=buildd&#x27;<br>)<br></code></pre></td></tr></table></figure></p></li><li><p>创建pbuilder基础环境</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pbuilder create --distribution eagle --debootstrapopts --no-check-gpg<br></code></pre></td></tr></table></figure></p><p>如果报错如下： E: No such script: /usr/share/debootstrap/scripts/eagle E: debootstrap failed E: debootstrap.log not present W: Aborting with an error</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/debootstrap/scripts/<br><span class="hljs-built_in">cp</span> sid eagle<br></code></pre></td></tr></table></figure></p><p>需要额外添加仓库源可以<code>login</code>后添加<code>apt</code>仓库源： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pbuilder login --basetgz /var/cache/pbuilder/base.tgz --save-after-login<br></code></pre></td></tr></table></figure></p></li><li><p>下载源码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;http://ut004487@gerrit.uniontech.com/a/linglong&quot;</span><br><span class="hljs-built_in">cd</span> linglong<br>git checkout develop/snipe<br></code></pre></td></tr></table></figure></p><p>查看changelog版本号</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> debian/changelog<br></code></pre></td></tr></table></figure></p><p>版本号信息如下:</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">linglong (1.3.1-1) unstable; urgency=medium<br><br>    * fixed some bug.<br><br>    -- liujianqiang &lt;liujianqiang@uniontech.com&gt;  Wed, 27 Apr 2022 15:12:16 +0800<br><br>    linglong (1.3.0-1) unstable; urgency=medium<br><br>    * 1. fix link library failed when using cmake.<br>    * 2. fix adjust dependency checkout directory.<br></code></pre></td></tr></table></figure></p><p>根据版本号创建符合dh_make规范的<code>&lt;package&gt;-&lt;version&gt;</code>格式</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br><span class="hljs-built_in">cp</span> -r linglong linglong-1.3.1<br></code></pre></td></tr></table></figure></p></li><li><p>dh_make生成debian模板文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linglong-1.3.1<br>dh_make --createorig -sy<br></code></pre></td></tr></table></figure></p></li><li><p>dkpg-source生成构建源代码包</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg-source -b .<br></code></pre></td></tr></table></figure></p></li><li><p>使用pbuilder构建deb包</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br>sudo pbuilder --build  --logfile log.txt --basetgz /var/cache/pbuilder/base.tgz --allow-untrusted --hookdir /var/cache/pbuilder/hooks --use-network <span class="hljs-built_in">yes</span> --aptcache <span class="hljs-string">&quot;&quot;</span> --buildresult . --debbuildopts -sa *.dsc<br></code></pre></td></tr></table></figure></p></li></ol><h2 id="more">More</h2><p><a href="https://www.debian.org/doc/manuals/maint-guide/index.zh-cn.html">Debian 软件包制作流程</a> <a href="https://www.cnblogs.com/zszmhd/p/3628446.html">pbuilder编译构建工具分析</a> <a href="https://www.aftermath.cn//2022/03/06/debian-pbuilder/">debian pbuilder使用</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>deb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rpm-ostree compose tree</title>
    <link href="/linux/package/rpm-ostree/rpm-ostree%20compose%20tree/"/>
    <url>/linux/package/rpm-ostree/rpm-ostree%20compose%20tree/</url>
    
    <content type="html"><![CDATA[<h1 id="rpm-ostree-compose-tree">rpm-ostree compose tree</h1><p>基于Fedora-Workstation-Live-x86_64-28-1.1</p><p>rpm-ostree compose tree 用在server上。</p><p>https://pagure.io/fedora-atomic/tree/master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo /home/wujing/code/rpm-ostree/rpm-ostree compose tree --ex-unified-core --cachedir=cache --repo=/srv/centos-atomic/build-repo sig-atomic-buildscripts/centos-atomic-host.json<br></code></pre></td></tr></table></figure><p>VS Code 下以 root 用户调试程序</p><p>CentOS下sudo免密配置</p><p>https://vault.centos.org/7.0.1406/os/x86_64/RPM-GPG-KEY-CentOS-7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/pki/rpm-gpg<br>wget https://vault.centos.org/7.0.1406/os/x86_64/RPM-GPG-KEY-CentOS-7<br></code></pre></td></tr></table></figure><p>"args": ["compose", "tree", "--ex-unified-core", "--cachedir=/srv/centos-atomic/cache", "--repo=/srv/centos-atomic/build-repo", "/srv/centos-atomic/sig-atomic-buildscripts/centos-atomic-host.json"],</p><p>http://yum.baseurl.org/api/yum/yum/depsolve.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ostree_repo_prepare_transaction<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>rpm-ostree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rpm-ostree</title>
    <link href="/linux/package/rpm-ostree/rpm-ostree/"/>
    <url>/linux/package/rpm-ostree/rpm-ostree/</url>
    
    <content type="html"><![CDATA[<p># rpm-ostree</p><h2 id="官网">官网</h2><ul><li><p><a href="https://rpm-ostree.readthedocs.io/en/stable" class="uri">https://rpm-ostree.readthedocs.io/en/stable</a></p></li><li><p><a href="https://coreos.github.io/rpm-ostree/" class="uri">https://coreos.github.io/rpm-ostree/</a></p></li></ul><p>## 源码</p><ul><li><p><a href="https://github.com/coreos/rpm-ostree" class="uri">https://github.com/coreos/rpm-ostree</a></p></li><li><p><a href="https://lazka.github.io/pgi-docs/OSTree-1.0/mapping.html" class="uri">https://lazka.github.io/pgi-docs/OSTree-1.0/mapping.html</a></p></li><li><p><a href="https://lazka.github.io/pgi-docs/OSTree-1.0/index.html" class="uri">https://lazka.github.io/pgi-docs/OSTree-1.0/index.html</a></p></li><li><p><a href="https://ostreedev.github.io/ostree/reference/ostree-Root-partition-mount-point.html#ostree-sysroot-query-deployments-for" class="uri">https://ostreedev.github.io/ostree/reference/ostree-Root-partition-mount-point.html#ostree-sysroot-query-deployments-for</a></p></li><li><p><a href="https://ostreedev.github.io/ostree/reference/reference.html#api-index-full" class="uri">https://ostreedev.github.io/ostree/reference/reference.html#api-index-full</a></p></li><li><p><a href="https://support.huaweicloud.com/productdesc-cdn/cdn_01_0067.html">内容分发网络 CDN-文件下载加速</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43902588/article/details/108998894">OpenShift 4 - Fedora CoreOS (6) - 用rpm-ostree安装软件、升级回滚CoreOS_多恩斯基的博客-CSDN博客</a>  </p></li><li><p><a href="https://zdyxry.github.io/2021/05/22/OSTree-%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/">OSTree 背景介绍 | Yiran's Blog (zdyxry.github.io)</a></p></li><li><p><a href="https://blog.csdn.net/halcyonbaby/article/details/43500231">os-level版本控制工具_追寻神迹-CSDN博客_ostree</a></p></li><li><p><a href="https://blog.csdn.net/cumo3681/article/details/107416567">atomic_在Atomic Host上运行容器的10个任务_cumo3681的博客-CSDN博客</a></p></li><li><p><a href="https://www.ywnz.com/linuxxw/5534.html">为你详细介绍Fedora Silverblue版本，包括常见问题解答</a></p></li><li><p><a href="https://www.mankier.com/1/rpm-ostree">rpm-ostree - Man Page</a></p></li><li><p><a href="https://blog.csdn.net/cumo3681/article/details/107416567">atomic_在Atomic Host上运行容器的10个任务_cumo3681的博客-CSDN博客</a></p></li><li><p><a href="https://docs.fedoraproject.org/zh_Hans/fedora-silverblue/technical-information/">Silverblue 文件系统组织结构</a>  </p></li><li><p><a href="https://blog.csdn.net/ZLK1214/article/details/113727039">【解决办法】升级Fedora33后，屏幕分辨率无法随着VMware窗口大小的改变而改变，设置里面也没有1920x1080分辨率的选项</a></p></li><li><p><a href="https://blog.csdn.net/lsg9012/article/details/106117895">关于编译安装提示No package ** found时可能需配置pkg-config</a></p></li><li><p><a href="https://www.jianshu.com/p/17e777868d6b">Automake的使用</a></p></li><li><p><a href="https://www.jianshu.com/p/3f69197f9055">解剖automake和autoconf(autoreconf)</a></p></li><li><p><a href="https://pkgs.org/download/pkgconfig(polkit-gobject-1)">Pkgconfig(polkit-gobject-1) Download (RPM) (pkgs.org)</a></p></li><li><p><a href="https://blog.csdn.net/kongshuai19900505/article/details/79104442">autotools自动编译系列之三---autogen.sh实例</a></p></li><li><p><a href="https://blog.csdn.net/asbhunan129/article/details/88109632">Linux工具之autogen.sh</a></p></li><li><p><a href="https://stepfunc.io/blog/bindings/" class="uri">https://stepfunc.io/blog/bindings/</a></p></li><li><p><a href="https://cxx.rs/" class="uri">https://cxx.rs/</a></p></li><li><p><a href="https://plantuml.com/zh/" class="uri">https://plantuml.com/zh/</a></p></li><li><p><a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000" class="uri">http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000</a></p></li><li><p><a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/27/" class="uri">https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/27/</a></p></li></ul><table><thead><tr class="header"><th style="text-align: left;"> </th><th style="text-align: left;"> </th><th style="text-align: left;">解决问题</th><th style="text-align: left;">存在问题</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">软件分发</td><td style="text-align: left;">包管理器(RPM)</td><td style="text-align: left;">指定软件分发标准 元数据存储包版本、大小、说明... 安装、卸载、升级、校验... 将源代码打包成二进制软件包 自动查找依赖</td><td style="text-align: left;">RPM 大部分只能更新，不能回滚 依赖关系管理，对系统的基础包依赖导致系统更新困难 不同的发行版之间切换几乎不可能 使用RPM部署复杂应用困难 RPM 编写规则不友好</td></tr><tr class="even"><td style="text-align: left;">应用解决方式</td><td style="text-align: left;">SCLs(Software Collections)</td><td style="text-align: left;">不需要修改 RPM 本身（修改 spec 文件） 不会覆盖修改系统文件，/opt/rh/root （不影响系统更新） 可以依赖其他 SCL 允许同时存在多个版本，可按需卸载</td><td style="text-align: left;">依赖发行版（RHEL，CentOS，Fedora...）不同的发行版之间切换几乎不可能 使用RPM部署复杂应用困难 RPM 编写规则不友好</td></tr><tr class="odd"><td style="text-align: left;"> </td><td style="text-align: left;">Container</td><td style="text-align: left;">不会覆盖修改系统文件，container image 不依赖特定发行版 允许同时存在多个版本 container image</td><td style="text-align: left;">container 生命周期管理， Kubernetes 安全问题，大部分 container image 都存在各种 CVE(漏洞)</td></tr><tr class="even"><td style="text-align: left;">操作系统解决方式</td><td style="text-align: left;">OS 安装方式</td><td style="text-align: left;">不同的 Linux 发行版有不同的安装器进行安装： Redhat - Anaconda Ubuntu - Preseed Photon - photon-os-installer</td><td style="text-align: left;">所有应用都运行在 Container 中，Host OS(宿主机)仍可能安装部分软件，比如 Debug、硬件驱动等。 存在问题： 更新依赖问题 回滚困难 随着软件包增多，测试成本增加</td></tr><tr class="odd"><td style="text-align: left;"> </td><td style="text-align: left;">Active-backup(主动备份)</td><td style="text-align: left;">原子更新 目标版本（状态）明确</td><td style="text-align: left;">分区固定，需要衡量根分区大小 需要多个 rootfs 对应分区，浪费空间 需要重启生效 每次下载完整的 rootfs ，升级动作耗时长</td></tr><tr class="even"><td style="text-align: left;"> </td><td style="text-align: left;">rpm-ostree(OSTree)</td><td style="text-align: left;">基于 OSTree "git for OS" 原子升级，支持回滚 允许在多个 rootfs 之间切换 不可变文件系统 使用 RPM 构建 rootfs Package Layer ： 支持通过 rpm-ostree install 安装 RPM 原子更新 单一 repo 存储多个 rootfs 增量更新</td><td style="text-align: left;">需要重启生效 文件系统只读(除 /var 和 /etc)</td></tr></tbody></table><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230419214153.png" alt="" /><figcaption>rpm-ostree分支</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">git checkout e6a65b80dfd380bd994cf7851c6ff28e992ab2f8<br><br>ostree cat REF info.json --repo repo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>rpm-ostree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rpm-ostree安装教程</title>
    <link href="/linux/package/rpm-ostree/rpm-ostree%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/linux/package/rpm-ostree/rpm-ostree%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="rpm-ostree安装教程">rpm-ostree安装教程</h1><p>Rpm-ostree通过autogen.sh自动生成makefile文件，点击下方链接了解autogen.sh。</p><p>Linux工具之autogen.sh</p><p>autotools自动编译系列之三---autogen.sh实例</p><h2 id="进入rpm-ostree代码目录下">1. 进入rpm-ostree代码目录下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> rpm-ostree<br></code></pre></td></tr></table></figure><h2 id="执行脚本autogen.sh">2. 执行脚本autogen.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install autoconf libtool automake<br>./autogen.sh<br></code></pre></td></tr></table></figure><h2 id="configure-error-package-requirements-gio-unix-2.0-were-not-met">3、configure: error: Package requirements (gio-unix-2.0) were not met:</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Package &#x27;gio-unix-2.0&#x27;, required by &#x27;virtual:world&#x27;, not found<br></code></pre></td></tr></table></figure><p>https://centos.pkgs.org/8/centos-baseos-x86_64/glib2-devel-2.56.4-10.el8_4.1.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install glib2-devel<br></code></pre></td></tr></table></figure><h2 id="package-json-glib-1.0-required-by-virtualworld-not-found">4. Package 'json-glib-1.0', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-appstream-x86_64/json-glib-devel-1.4.4-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install json-glib-devel<br></code></pre></td></tr></table></figure><h2 id="package-ostree-1-required-by-virtualworld-not-found">5. Package 'ostree-1', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/raven-extras-x86_64/ostree-libs-2021.2-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://pkgs.dyn.su/el8/extras/x86_64/ostree-libs-2021.2-1.el8.x86_64.rpm<br>dnf install ostree-libs-2021.2-1.el8.x86_64.rpm<br></code></pre></td></tr></table></figure><p>https://centos.pkgs.org/8/raven-extras-x86_64/ostree-devel-2021.2-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://pkgs.dyn.su/el8/extras/x86_64/ostree-devel-2021.2-1.el8.x86_64.rpm<br>dnf install ostree-devel-2021.2-1.el8.x86_64.rpm<br></code></pre></td></tr></table></figure><h2 id="package-rpm-required-by-virtualworld-not-found">6. Package 'rpm', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-baseos-x86_64/rpm-devel-4.14.3-14.el8_4.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install rpm-devel<br></code></pre></td></tr></table></figure><h2 id="package-polkit-gobject-1-required-by-virtualworld-not-found">7. Package 'polkit-gobject-1', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-baseos-x86_64/polkit-devel-0.115-11.el8_4.1.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install polkit-devel<br></code></pre></td></tr></table></figure><h2 id="package-libarchive-required-by-virtualworld-not-found">8. Package 'libarchive', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-powertools-x86_64/libarchive-devel-3.3.3-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf --enablerepo=powertools install libarchive-devel<br></code></pre></td></tr></table></figure><h2 id="configure-error-cargo-is-required-for---enable-rust">9. configure: error: cargo is required for --enable-rust</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install rust cargo<br></code></pre></td></tr></table></figure><h2 id="config.status-error-in-rootcoderpm-ostree">10. config.status: error: in `/root/code/rpm-ostree':</h2><p>config.status: error: Something went wrong bootstrapping makefile fragments for automatic dependency tracking. Try re-running configure with the '--disable-dependency-tracking' option to at least be able to build the package (albeit without support for automatic dependency tracking).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./autogen.sh --disable-dependency-tracking<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>rpm-ostree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>book</title>
    <link href="/linux/kernel/books/book/"/>
    <url>/linux/kernel/books/book/</url>
    
    <content type="html"><![CDATA[<h1 id="电子书">电子书</h1><ul><li><p><a href="https://xie.infoq.cn/article/207aab244ae44b9fc5c71a059">推荐一个 GitHub 的开源电子书仓库，值得收藏</a></p></li><li><p><a href="https://www.bookstack.cn/">书栈网·BookStack_程序员IT互联网开源编程书籍免费阅读与下载，取之于猿用之于猿！</a></p></li><li><p><a href="https://awesome-programming-books.github.io/">经典技术书籍PDF文件，涵盖：编程语言、计算机系统、网络协议、数据库、代码艺术、设计模式、算法与数据结构、系统架构、微服务、测试、程序员职业修炼等相关书籍。</a></p></li><li><p><a href="https://www.manongbook.com/linux/681.html">Linux多线程服务端编程：使用muduo C++网络库pdf电子书下载-码农书籍网 (manongbook.com)</a></p></li><li><p><a href="https://www.manongbook.com/linux/278.html">Linux高性能服务器编程pdf电子书下载-码农书籍网 (manongbook.com)</a></p></li><li><p><a href="https://www.manongbook.com/linux/689.html">UNIX环境高级编程（第3版）pdf电子书下载-码农书籍网 (manongbook.com)</a></p></li><li><p><a href="https://www.jb51.net/books/">计算机免费书籍,电子书,pdf电子书,电子书籍,网络书籍,电脑书籍下载,编程书籍,编程电子书下载 - 脚本之家 (jb51.net)</a></p></li><li><p><a href="http://chenshuo.com/book/">Linux 多线程服务端编程：使用 muduo C++ 网络库 (chenshuo.com)</a></p></li><li><p><a href="file:///C:/Users/wujing/OneDrive/code/book/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8muduo+C++%E7%BD%91%E7%BB%9C%E5%BA%93.pdf">Linux多线程服务端编程：使用muduo+C++网络库.pdf</a></p></li><li><p><a href="https://awesome-programming-books.github.io/linux/UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E7%AC%AC%E4%B8%89%E7%89%88).pdf"><font color=Red>UNIX环境高级编程(第三版).pdf</font></a></p></li></ul><h2 id="计算机考研">计算机考研</h2><ul><li><a href="https://blog.csdn.net/weixin_47312141/article/details/108910173">2021 天勤率辉计算机考研（附408）</a></li><li><a href="https://blog.csdn.net/qq_42724075/article/details/115498431">2022考研王道天勤PDF（数据结构、操作系统、计算机网络、计算机组成原理）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>books</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/linux/vim/"/>
    <url>/linux/vim/</url>
    
    <content type="html"><![CDATA[<h1 id="vim">vim</h1><h2 id="vim-1">vim</h2><ul><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch01.zh-cn.html#_setting_a_default_text_editor">设置默认文本编辑器</a></p></li><li><p><a href="https://www.runoob.com/linux/linux-vim.html"><font color=Red>Linux vi/vim - 菜鸟教程</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_34306360/article/details/78720090"><font color=Red>vi 和vim 的区别</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_44441367/article/details/124810525"><font color=Red>VIM常用命令</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_54227557/article/details/122782139"><font color=Red>vim如何删除全文</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/MyV3ZC7A7vdWpQ1lt3d_dg">12 个超实用的 vim 编辑技巧</a></p></li></ul><h2 id="函数跳转">函数跳转</h2><ul><li><a href="https://blog.csdn.net/m0_37624499/article/details/90705658">ubuntu下vim安装ctags工具</a></li><li><a href="https://www.cnblogs.com/oddcat/articles/9678044.html">Linux——vim插件之ctags的安装与配置</a></li><li><a href="http://t.zoukankan.com/quant-lee-p-6659696.html">vim多窗口，常用命令集</a></li><li><a href="https://blog.csdn.net/ballack_linux/article/details/71036072"><font color=Red>vim之函数跳转功能</font></a></li><li><a href="https://blog.csdn.net/qwaszx523/article/details/77838855">vim -t 选项</a></li></ul><h2 id="折叠">折叠</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43971252/article/details/123218379">Vim折叠操作(折叠代码、折叠函数、方法、类等)</a></p></li><li><p><a href="http://t.zoukankan.com/happyamyhope-p-11906183.html">【Linux基础】vim如何显示文件名称</a></p></li><li><p><a href="https://www.toutiao.com/article/7167342849502446114/">vim小技巧：多行行首插入、删除、替换</a></p></li><li><p><a href="https://www.cnblogs.com/woshimrf/p/vim.html">vim 基本命令查找和替换</a></p></li><li><p><a href="https://waliblog.com/2019/05/06/vim-7.html"><font color=Red>vim 多行操作(7)</font></a></p></li><li><p><a href="https://blog.csdn.net/sinat_36053757/article/details/78183506">Linux——VIM学习选取多行（转）</a></p></li><li><p><a href="https://blog.csdn.net/xiajun07061225/article/details/8488210">【Linux】Vim编辑器-批量注释与反注释</a></p></li><li><p><a href="https://blog.csdn.net/lambert310/article/details/77659417">Linux下快速收起vim 并暂存修改</a></p></li><li><p><a href="https://blog.csdn.net/vastz/article/details/120064236">vim使用技巧-如何暂时返回终端</a></p></li><li><p><a href="https://xwsoul.com/posts/472">vim 技巧 – 查找的时候忽略大小写</a></p></li><li><p><a href="https://shagain.club/index.php/archives/382/">vim鼠标模式打开与关闭</a></p></li><li><p><a href="https://blog.51cto.com/u_15083238/2600714">彻底解决基于Debian发行系统的vim鼠标模式(可视模式)问题</a></p></li><li><p><a href="https://www.cnblogs.com/yukina/p/16401529.html">vim操作之多窗格,多文件的编辑和操作</a></p></li><li><p><a href="https://www.bilibili.com/read/cv16390641">在Vim中同时打开多个文件的相关操作技巧</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44531336/article/details/126187768">技巧045：以超级用户权限保存文件</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">w !sudo <span class="hljs-built_in">tee</span> % &gt; /dev/null<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.cnblogs.com/jackie-astro/p/13295584.html">vim中使用sudo保存文件</a></p></li></ul><h2 id="nano">nano</h2><ul><li><a href="https://www.wenjiangs.com/doc/8ij4xm4z">4.4 超简单文书编辑器： nano</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qemu</title>
    <link href="/linux/kernel/qemu/qemu/"/>
    <url>/linux/kernel/qemu/qemu/</url>
    
    <content type="html"><![CDATA[<h1 id="qemu">qemu</h1><h2 id="虚拟机">虚拟机</h2><ul><li><p><a href="http://c.biancheng.net/view/3842.html">服务器虚拟化组件有哪些？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/FVyzPVwwQ85AC4jlVZvF4g">ubuntu18.04上搭建KVM虚拟机环境超完整过程</a></p></li><li><p><a href="https://www.xtuos.com/3858.html"><font color=Red>如何在 Debian 11 上安装 KVM</font></a></p></li><li><p><a href="https://stc214.github.io/posts/2021%E5%B9%B42%E6%9C%886%E6%97%A512/">如何从主机粘贴到KVM客户机？</a></p></li><li><p><a href="https://www.linuxsecrets.com/3883-copy-n-paste-in-kvm">Copy n Paste in (KVM) Kernel-based Virtual Machine</a></p></li><li><p><a href="https://blog.csdn.net/guoyinzhao/article/details/109642824">解决kvm安装Ubuntu虚机远程桌面无法复制粘贴问题</a></p></li><li><p><a href="https://blog.csdn.net/fcdm_/article/details/122150246">解决deepin虚拟机系统时间不正确的问题</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install systemd-timesyncd<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/u014389734/article/details/107481852">如何用命令行模式启动VMWare虚拟机</a></p></li><li><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/17/com.vmware.ws.using.doc/GUID-1F5B1F14-A586-4A56-83FA-2E7D8333D5CA.html">在 Linux 主机上安装 Workstation Pro</a></p></li><li><p><a href="https://waydo.xyz/soft/linux/ubuntu-vmware-workstation/">在Ubuntu 20.04上安装VMWare Workstation</a></p></li><li><p><a href="https://linux.cn/article-14444-1.html">用 archinstall 自动化脚本安装 Arch Linux</a></p></li><li><p><a href="https://blog.csdn.net/love906897406/article/details/126109464">Arch Linux图文安装教程（2022.08.01）</a></p></li><li><p><a href="https://blog.csdn.net/jianghu0755/article/details/129776841">KVM虚拟化解决方案系列之KVM管理工具-libvirt介绍篇</a></p></li></ul><h3 id="mac-osx">Mac OSX</h3><ul><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448"><font color=Red>使用Qemu在Mac上安装虚拟机</font></a></li><li><a href="https://www.arthurkoziel.com/qemu-ubuntu-20-04/">使用QEMU在macOS上创建Ubuntu 20.04桌面虚拟机</a></li><li><a href="https://www.arthurkoziel.com/running-virt-manager-and-libvirt-on-macos/">Running virt-manager and libvirt on macOS</a></li><li><a href="https://blog.csdn.net/weixin_30883777/article/details/95729678">Mac安装Linux的KVM管理工具virt-manager</a></li><li><a href="https://github.com/jeffreywildman/homebrew-virt-manager">homebrew-virt-manager</a></li><li><a href="https://blog.csdn.net/nbin_newby/article/details/120307866">macOS系统和mac装Windows系统开启虚拟化</a></li><li><a href="https://blog.csdn.net/MissMango0820/article/details/127398047">macOS | nvram boot-args的作用及设置方式</a></li><li><a href="https://github.com/kholia/OSX-KVM">GitHub - kholia/OSX-KVM: Run macOS on QEMU/KVM. With OpenCore + Big Sur + Monterey + Ventura support now! Only commercial (paid) support is available now to avoid spammy issues. No Mac system is required.</a></li><li><a href="https://zhuanlan.zhihu.com/p/399857241">Linux kernel debug on macOS 搭建可视化内核debug环境</a></li></ul><h2 id="qemu-1">qemu</h2><ul><li><p><a href="https://www.qemu.org/docs/master/system/invocation.html" class="uri">https://www.qemu.org/docs/master/system/invocation.html</a></p></li><li><p><a href="https://wiki.archlinuxcn.org/wiki/QEMU">QEMU (简体中文)</a></p></li><li><p><a href="https://www.toutiao.com/article/7194721406406787623">QEMU-KVM基本原理</a></p></li><li><p><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893"><font color=Red>Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/NsdNFhoP0QwjfhsQIeRWeQ"><font color=Red>虚拟化技术 — 硬件辅助的虚拟化技术</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/sn-TTwldA81uFuVn5NBMhg"><font color=Red>虚拟化技术 — QEMU-KVM 基于内核的虚拟机</font></a></p></li><li><p><a href="https://blog.csdn.net/lingshengxiyou/article/details/128665491">libvirt and QEMU 基础篇</a></p></li><li><p><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel/qemu"><font color=Red>https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel/qemu</font></a></p></li><li><p><a href="https://blog.csdn.net/onlylove_/category_11607029.html"><font color=Red>Linux内核调试</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/518032838">如何退出 QEMU 退出快捷键：Ctrl + a，然后按 x 键。</a></p></li></ul><h3 id="网络">网络</h3><ul><li><a href="https://blog.csdn.net/m0_43406494/article/details/124827927"><font color=Red>QEMU用户模式网络</font></a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/"><font color=Red>QEMU 网络配置</font></a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607"><font color=Red>Linux 内核调试 七：qemu网络配置</font></a></li><li><a href="https://www.jb51.net/article/97216.htm"><font color=Red>详解QEMU网络配置的方法</font></a></li></ul><h2 id="x86_64下qemu虚拟x86_64">x86_64下qemu虚拟x86_64</h2><ul><li><p><a href="https://howardlau.me/programming/debugging-linux-kernel-with-vscode-qemu.html"><font color=Red>使用 VSCode + qemu 搭建 Linux 内核调试环境</font></a></p></li><li><p><a href="https://www.cnblogs.com/harmful-chan/p/12994693.html">Linux内核源码远程调试（3.16.84）</a></p></li><li><p><a href="https://blog.csdn.net/Breeze_CAT/article/details/123787636">[kernel]linux内核基础:版本、源码、编译与调试</a></p></li><li><p><a href="https://blog.csdn.net/rlk8888/article/details/122396219">[首发][Ubuntu]VSCode搭建Linux Kernel单步调试IDE环境</a></p></li><li><p><a href="https://blog.csdn.net/eydwyz/article/details/114019532"><font color=Red>使用VSCode + qemu搭建Linux内核调试环境</font></a></p></li><li><p><a href="https://bbs.huaweicloud.com/blogs/348654"><font color=Red>利用QEMU+GDB搭建Linux内核调试环境</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/KzFFkJHLzbNFixiELMjNWg">Linux内核调试方法</a></p></li><li><p><a href="https://www.cnblogs.com/fengyc/p/6114648.html"><font color=Red>基于 debootstrap 和 busybox 构建 mini ubuntu</font></a></p></li><li><p><a href="https://manpages.ubuntu.com/manpages/xenial/en/man1/debirf.1.html">https://manpages.ubuntu.com/manpages/xenial/en/man1/debirf.1.html</a></p></li><li><p><a href="https://www.jianshu.com/p/b4bae215e278">QEMU 实验（三）：根文件系统构建 (基于 Busybox)</a></p></li><li><p><a href="https://www.yisu.com/zixun/503146.html">怎么用QEMU搭建Linux kernel开发调试环境</a></p></li><li><p><a href="https://blog.csdn.net/birencs/article/details/126666827">嵌入式开发模拟器：qemu使用，仿真多种方式启动内核kernel (超详细，tftp/nfs等方式)</a></p></li><li><p><a href="https://www.bbsmax.com/A/WpdK7VrodV/">使用qemu模拟调试内核和debian根文件系统</a></p></li><li><p><a href="https://www.freesion.com/article/2442234327/">QEMU 文件系统制作：自己制作根目录和应用程序 + BUSYBOX</a></p></li><li><p><a href="https://wiki.ubuntu.com/ARM/RootfsFromScratch/QemuDebootstrap">QemuDebootstrap</a></p></li><li><p><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589"><font color=Red>内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</font></a></p></li><li><p><a href="https://blog.51cto.com/u_13731941/5399257"><font color=Red>使用 debootstrap 制作 ARM64 rootfs.cpio</font></a></p></li><li><p><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html"><font color=Red>debootstrap 制作根文件系统</font></a></p></li><li><p><a href="https://blog.csdn.net/xunknown/article/details/124521135">使用Buildroot + QEMU构建和运行Linux</a></p></li><li><p><a href="https://blog.csdn.net/xingkong0/article/details/100586485">制作基于beaglebonebalck的rootfs使用buildroot</a></p></li><li><p><a href="https://blog.csdn.net/qq_34160841/article/details/104891169">ubuntu下qemu使用：图文详解</a></p></li><li><p><a href="https://www.toutiao.com/article/7086755948068487687">QEMU调试Linux内核环境搭建</a></p></li><li><p><a href="https://www.toutiao.com/article/7182563085466108471">一文分析Linux虚拟化KVM-Qemu（概念篇）</a></p></li><li><p><a href="https://blog.csdn.net/kingtj/article/details/82952783"><font color=Red>qemu: usb存储设备仿真</font></a></p></li><li><p><a href="https://www.51cto.com/article/708013.html">如何在 Linux 中导出和导入 KVM 虚拟机</a></p></li><li><p><a href="https://blog.csdn.net/qq_40598297/article/details/121084904"><font color=Red>ARMv8架构下修改Linux内核并打开kvm硬件虚拟化支持（平台Firefly-rk3568）</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_41957544/article/details/105769697"><font color=Red>制作一个grub虚拟启动盘，在qemu下调试</font></a></p></li><li><p><a href="https://cdn.kernel.org/pub/linux/kernel/people/will/docs/qemu/qemu-arm64-howto.html">Running a full system stack under QEMUarm64</a></p></li></ul><h2 id="arm64下qemu虚拟arm64">arm64下qemu虚拟arm64</h2><ul><li><a href="https://blog.csdn.net/sinat_34833447/article/details/109765004">ARM平台检测是否支持虚拟化的几种常见方法</a></li><li><a href="https://www.txisfine.cn/archives/a0d5fa12">X86_64 环境下使用 QEMU 虚拟机安装 ARM 版 EulerOS 小记</a></li><li><a href="https://blog.csdn.net/Oliverlyn/article/details/105178832">利用qemu-system-aarch64调试Linux内核（arm64）</a></li><li><a href="https://zhuanlan.zhihu.com/p/345232459">QEMU搭建arm64 Linux调试环境</a></li></ul><h2 id="x86_64下qemu虚拟arm64">x86_64下qemu虚拟arm64</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/510289859">VSCode+GDB+Qemu调试ARM64 linux内核</a></li><li><a href="https://blog.csdn.net/fell_sky/article/details/119818112">编译arm64内核</a></li><li><a href="https://blog.csdn.net/shanruo/article/details/80474338">交叉编译arm64内核</a></li><li><a href="https://blog.csdn.net/ludaoyi88/article/details/115633849">交叉编译环境下对linux内核编译</a></li><li><a href="https://blog.csdn.net/jinking01/article/details/129580621">交叉编译linux内核并使用qemu运行</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设备驱动</title>
    <link href="/linux/kernel/%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
    <url>/linux/kernel/%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="设备驱动">设备驱动</h1><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247493443&amp;idx=1&amp;sn=34528c556b57f7d8b6c610de0e82707d&amp;chksm=f96b95b7ce1c1ca183f21c0b8fc143c7c7e6594f4275fc0846ac152b9d2fd533c44703285e1b&amp;scene=178&amp;cur_album_id=1502410824114569216&amp;st=6A06D7C16CDF646537A8A4EFA72540616A19E9BAB718C625E9CB1AA557FED3266B9749828C8E891E0A899FD0E76565328E3459AB3340F342548E96B0A4463B6CA4CEE5ADD8E733FE7FB0782F9B54BDF06BB4D570130BA58A25F8ADA5CF3A719C8D425DB03891F6AD3A906736710690BAF983AA05DC2B4B53BC227CE3A6E73DF85B0AA1B0CD9B52F3CD00F80B85B3D4C489A9419353BC165438FBFB333B146277CC4FB7F7C5D06978A9E4A6D0ECE7B2015B5799D763324DCED5895FE24D8A60EDB2EA45CF6EEB8F18A90C2D2D7999CA8CE2C4257ADBD9AF3CB85D98E21FF7625F&amp;vid=1688856861259866&amp;cst=549AA1A52A547428FF7703BEEF9C321BC9BF23E4E73BA24DB10850EA6E769B7B0DD822AF52049C8785B85A6412172FD9&amp;deviceid=f5f876c1-ee2a-454b-9dff-fd3c1d43eadd&amp;version=3.1.12.6001&amp;platform=win#rd">手把手教linux驱动11-linux设备驱动统一模型</a></li><li><a href="https://www.cnblogs.com/hellokitty2/p/9521340.html">udev学习笔记汇总</a></li><li><a href="https://mp.weixin.qq.com/s/v_HWfKtqAdNkhvymZ_UrMA">重新理解一波设备驱动 | Linux 驱动</a></li><li><a href="https://mp.weixin.qq.com/s/BI23d71SJkYPHnzQbFyvpQ">整理了一份Linux设备树基础知识，建议收藏！</a></li><li><a href="https://mp.weixin.qq.com/s/6xjgqwDSuNc7TELeI_2GWA">万字长文教你设备树语法 | 设备树实例解析</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GUI</title>
    <link href="/linux/GUI/"/>
    <url>/linux/GUI/</url>
    
    <content type="html"><![CDATA[<h1 id="gui">GUI</h1><ul><li><p><a href="https://www.cnblogs.com/newjiang/p/8414625.html">Linux图像系统框架-理解X11与Qt的层次结构</a></p></li><li><p><a href="https://www.cnblogs.com/yongpenghan/p/4555634.html">[GUI] QT事件与X11的关系</a></p></li><li><p><a href="https://www.cnblogs.com/winafa/p/14206600.html">Qt主线程卡死，竟然与X11的_XReply()有关</a></p></li><li><p><a href="https://www.toutiao.com/article/7090149820014330409/"><font color=Red>如何在电子产品屏幕画上美图，一文了解图形界面的原理和演进过程</font></a></p></li><li><p><a href="https://www.toutiao.com/article/6869367787744133636/">Linux黑话解释：什么是显示服务器，用来做什么？</a></p></li><li><p><a href="https://blog.csdn.net/weixin_36156325/article/details/116895549">linux wayland qt,详解Qt Lighthouse和Wayland</a></p></li><li><p><a href="https://blog.csdn.net/yogoloth/article/details/105683815">通过docker使用wayland和x11的gui程序</a></p></li><li><p><a href="https://blog.csdn.net/qq_26056015/article/details/122406051">Wayland开发入门系列4：xserver</a></p></li><li><p><a href="https://blog.csdn.net/qq_26056015/category_11559440.html"><font color=Red>Wayland开发入门</font></a></p></li><li><p><a href="https://www.baike.com/wikiid/3479851875664899506">Wayland是一个简单的“显示服务器”（Display Server）</a></p></li><li><p><a href="https://blog.csdn.net/M120674/article/details/123534336">Linux图形栈一览：基于DRM和Wayland</a></p></li><li><p><a href="https://blog.csdn.net/sunxiaopengsun/article/details/119895985">X11和Wayland的区别，一点感悟</a></p></li><li><p><a href="http://www.javashuo.com/article/p-yftqzthz-cp.html"><font color=Red>Linux图形界面：X,X11,XFREE,WM,KDE,GNOME的关系</font></a></p></li><li><p><a href="https://blog.csdn.net/iteye_4195/article/details/82522264"><font color=Red>GTK、KDE、Gnome、XWindows图形界面</font></a></p></li><li><p><a href="https://blog.csdn.net/chantal20080409/article/details/82986283">【转】四大Linux图形界面赏析：KDE、Gnome、Xfce、LXDE</a></p></li><li><p><a href="https://geek-docs.com/linux/linux-ask-answer/difference-between-desktop-environment-vs-window-manager-in-linux.html">Linux中桌面环境和窗口管理器的区别</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/272740410"><font color=Red>Linux 知识分享：显示管理器和桌面环境容易混淆？分分钟带你脱离认识误区</font></a></p></li><li><p><a href="https://wiki.archlinux.org/title/Desktop_environment_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"><font color=Red>Desktop environment (简体中文)</font></a></p></li><li><p><a href="https://wiki.archlinux.org/title/Window_manager_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"><font color=Red>Window manager (简体中文)</font></a></p></li><li><p><a href="https://my.oschina.net/aspirs/blog/607710">linux（ubuntu）系统什么叫：桌面管理器，窗口管理器？</a></p></li><li><p><a href="http://c.biancheng.net/view/2912.html">Linux桌面环境（桌面系统）大比拼[附带优缺点]</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件系统</title>
    <link href="/linux/kernel/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/linux/kernel/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="文件系统">文件系统</h1><h2 id="文件系统-1">文件系统</h2><ul><li><p><a href="https://www.toutiao.com/article/7153169952030818824">Linux文件系统、磁盘I/O是怎么工作的</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/PlFbtG0DBmGq-u1Syvjt0A">操作系统：文件系统的实现</a></p></li><li><p><a href="https://blog.csdn.net/jinking01/article/details/90669534"><font color=Red>linux的VFS详解</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247491770&amp;idx=1&amp;sn=cfaae8e44c49f9c82f0dc5b79d6c6f26&amp;chksm=f96b924ece1c1b58cacdebea43a7dfbf8f9a653504a813526c3fe7168f7fcf80e9886072c6c8&amp;scene=178&amp;cur_album_id=1502410824114569216#rd"><font color=Red>Linux虚拟文件系统四大对象：超级块、inode、dentry、file之间关系</font></a></p></li><li><p><a href="https://www.jxhs.me/2021/04/07/Linux%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"><font color=Red>Linux虚拟文件系统 _</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7199175341137592869">Linux-0.11 文件系统inode.c详解</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/PlFbtG0DBmGq-u1Syvjt0A">操作系统：文件系统的实现</a></p></li><li><p><a href="https://www.runoob.com/linux/linux-system-contents.html">Linux系统目录结构</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1791275">Linux根文件系统（rootfs原理详解）</a></p></li><li><p><a href="https://www.cnblogs.com/wipan/p/9269505.html">Initramfs 原理和实践</a></p></li><li><p><a href="https://blog.csdn.net/m0_38096844/article/details/97786761">busybox制作initramfs以及切换rootfs</a></p></li><li><p><a href="https://developer.aliyun.com/article/243822">linux中的rootfs/initrd/ramfs/initramfs</a></p></li><li><p><a href="https://www.toutiao.com/article/6702007158621340163/">一篇文章理解Linux操作系统中的块设备</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/8vg2-ADaFe4feepI7jCLCg"><font color=Red>存储基础 —— 磁盘 IO 为什么总叫你对齐？</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_40989769/article/details/127616352"><font color=Red>300行代码带你实现一个Linux文件系统</font></a></p></li></ul><h2 id="proc">proc</h2><ul><li><a href="https://zh.wikipedia.org/wiki/Procfs">procfs 是 进程 文件系统 (file system) 的缩写</a></li><li><a href="https://www.cnblogs.com/cute/archive/2011/04/20/2022280.html">深入理解linux系统下proc文件系统内容</a></li><li><a href="https://blog.csdn.net/qq_34934140/article/details/121120348">Linux内存管理 smaps讲解</a></li></ul><h2 id="overlayfs">overlayfs</h2><ul><li><a href="https://blog.csdn.net/feelabclihu/article/details/120793237"><font color=Red>Linux overlayfs文件系统介绍</font></a></li><li><a href="https://blog.frognew.com/2021/07/relearning-container-32.html">重学容器32: 理解容器文件系统OverlayFS</a></li><li><a href="https://zhuanlan.zhihu.com/p/473970436">Overlayfs文件系统简介</a></li><li><a href="https://blog.csdn.net/luckyapple1028/article/details/77916194">深入理解overlayfs（一）：初识</a></li><li><a href="https://www.cnblogs.com/handwrit2000/p/12871493.html">docker 镜像分层原理</a></li><li><a href="https://www.jianshu.com/p/abc5524ac18c">Linux fuse用户态文件系统及其libfuse</a></li><li><a href="https://blog.51cto.com/u_15015138/2557244">吴锦华/明鑫: 用户态文件系统(FUSE)框架分析和实战</a></li><li><a href="https://www.cnblogs.com/sky-heaven/p/14326532.html">使用Squashfs和Overlayfs提高嵌入式Linux文件系统可靠性【转】</a></li></ul><h2 id="fuse">fuse</h2><ul><li><a href="https://www.zido.site/blog/2021-11-27-filesystem-in-user-space/">用户态文件系统详解</a></li><li><a href="https://xie.infoq.cn/article/38bc0476d6f5cd2bb9cf668f2">自制文件系统 —— 1 什么文件系统</a></li><li><a href="https://xie.infoq.cn/article/655c0893ed150ff65f2b7a16f">自制文件系统 —— 02 开发者的福音，FUSE 文件系统</a></li><li><a href="https://blog.csdn.net/kongxinsun/article/details/79587305">Android Fuse and Runtime Permissions</a></li><li><a href="https://c4pr1c3.github.io/cuc-mis/chap0x06/main.html">第六章 安卓系统访问控制策略与机制</a></li><li><a href="https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn">Android 中的权限</a></li><li><a href="https://my.oschina.net/u/4258425/blog/3234424">Android 操作权限大全(已归纳分类)</a></li><li><a href="https://source.android.com/devices/storage/fuse-passthrough">FUSE Passthrough</a></li><li><a href="https://www.cnblogs.com/chengmo/archive/2010/10/25/1857775.html">linux /dev常见特殊设备介绍与应用[loop,null,zero,full,random]</a></li></ul><h2 id="文件描述符">文件描述符</h2><ul><li><a href="https://blog.csdn.net/yushuaigee/article/details/107883964">彻底弄懂 Linux 下的文件描述符（fd）_yushuaigee的博客-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247486354&amp;idx=2&amp;sn=9147d5ad7c61d61dd9450dd4f084c37e&amp;chksm=f9687966ce1ff070a4e9950b5bf08f357496385002152d53090f073031f8b5eafd2043c86b0e&amp;scene=178&amp;cur_album_id=1502410824114569216#rd">手把手教Linux驱动4-进程、文件描述符、file、inode关系详解</a></li><li><a href="https://blog.csdn.net/llkkcc13/article/details/98508861">linux进程间描述符的传递（sendmsg和recvmsg）</a></li><li><a href="http://c.biancheng.net/view/3066.html">Linux文件描述符到底是什么？</a></li><li><a href="https://m.php.cn/article/491720.html">linux fd是什么</a></li><li><a href="https://www.toutiao.com/article/6912612534642065933/">Linux文件系统的四大对象</a></li><li><a href="https://blog.csdn.net/genzld/article/details/86564821">查看Linux最大文件描述符数</a></li><li><a href="https://blog.csdn.net/zhuxiaoping54532/article/details/107331565">Linux 文件操作：同一进程、线程打开同一个文件</a></li><li><a href="https://blog.csdn.net/weixin_47397155/article/details/123356806">文件细节操作简述（LInux应用编程篇）</a></li><li><a href="https://blog.csdn.net/shengnan89/article/details/124318111">Linux应用编程之多次打开同一个文件</a></li></ul><h2 id="nfs">NFS</h2><ul><li><p><a href="https://www.cnblogs.com/lizhuming/p/13946107.html"><font color=Red>【linux】挂载NFS网络文件系统教程</font></a></p></li><li><p><a href="https://blog.51cto.com/atong/1343950"><font color=Red>NFS原理详解 原创</font></a></p></li><li><p><a href="https://blog.51cto.com/u_15127687/4569026">挂载NFS网络文件系统教程</a></p></li><li><p><a href="https://www.myfreax.com/how-to-mount-an-nfs-share-in-linux/">如何在Linux中挂载NFS共享</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1720669">Centos7安装配置NFS服务和挂载教程(推荐)</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mount -t nfs 10.20.64.70:/storage/linglong linglong-10.20.64.70<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="nas">NAS</h2><ul><li><a href="http://www.92nas.com/forum.php?mod=viewthread&amp;tid=352">NAS常见的访问协议SMB、NFS、FTP、WebDav、DLNA</a></li><li><a href="https://www.bufeishi.cn/37456.html">nas常用协议有哪些？</a></li></ul><h2 id="disk">disk</h2><ul><li><a href="https://www.toutiao.com/article/7210784993738736139">linux之分区与挂载</a></li><li><a href="https://www.toutiao.com/article/7167549285146444323/"><font color=Red>Linux为啥文件删除了，df看到磁盘还是100%</font></a></li><li><a href="https://blog.csdn.net/u010867294/article/details/78107280">Ubuntu Linux 永久挂载(mount)分区</a></li><li><a href="https://mp.weixin.qq.com/s/Q9xkgDGvz_70WwD0N7ivJg">Linux 磁盘空间被吃掉了？这样排查不背锅！</a></li><li><a href="https://mp.weixin.qq.com/s/vAkvlM6ntP7tKWA9UsoRDA"><font color=Red>5 款可替代 du 命令的工具！</font></a></li><li><a href="https://dev.yorhel.nl/ncdu">NCurses Disk Usage磁盘空间</a></li><li><a href="https://www.cnblogs.com/iconfig/p/4863063.html">Linux中查看各文件夹大小命令：du -h max-depth=1 - comb - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/qq_29798135/article/details/80307553">linux查看文件大小信息,df -h和du -sh查询命令查询结果不一样_99@小程-CSDN博客</a></li><li><a href="https://www.toutiao.com/article/7103363207997260292">Linux中可以随时扩容的逻辑卷</a></li><li><a href="https://www.junmajinlong.com/linux/lvm/">LVM(Logical Volume Manager)可以让分区变得弹性，可以随时随地的扩大和缩小分区大小</a></li><li><a href="https://wiki.deepin.org/zh/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9">系统管理-根目录扩容</a></li><li><a href="https://www.junmajinlong.com/linux/raid/">使用RAID</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>systemd</title>
    <link href="/linux/kernel/systemd/"/>
    <url>/linux/kernel/systemd/</url>
    
    <content type="html"><![CDATA[<h1 id="systemd">systemd</h1><h2 id="开机启动">开机启动</h2><ul><li><a href="https://www.toutiao.com/article/6623154113427276291/"><font color=Red>如何弄清Linux系统运行何种系统管理程序</font></a></li><li><a href="https://www.cnblogs.com/airdot/p/9688530.html">ubuntu-18.04设置开机启动脚本</a></li><li><a href="https://www.cnblogs.com/Areas/p/13439000.html">Linux Ubuntu 20.04 —添加开机启动(服务/脚本)</a></li><li><a href="https://www.cnblogs.com/dongruiha/p/9941667.html">Ubuntu安装sysv-rc-conf配置开机启动服务</a></li><li><a href="https://www.cnblogs.com/zfying/archive/2013/03/12/2955710.html">centos开机启动项设置命令：chkconfig</a></li></ul><h2 id="systemd-1">systemd</h2><ul><li><p><a href="https://systemd-book.junmajinlong.com/"><font color=Red>学会systemd</font></a></p></li><li><p><a href="https://www.junmajinlong.com/linux/systemd/service_1/"><font color=Red>systemd服务配置文件编写(1)</font></a></p></li><li><p><a href="https://www.junmajinlong.com/linux/systemd/service_2/"><font color=Red>systemd service之：服务配置文件编写(2)-使用target组合多个服务</font></a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1516125"><font color=Red>可能是史上最全面易懂的Systemd服务管理教程！(强烈建议收藏)</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/1aYloTgM5c4riS0KVWKNdA">Linux 使用 Systemd 管理进程服务，划重点~</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/OJILycTxaYHdTHIv3vI4kw">万字整理 | Linux systemd 学习笔记</a></p></li><li><p><a href="https://www.cnblogs.com/cxyc005/p/13323116.html">systemctl管理的active(exited)状态说明</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html"><font color=Red>Systemd 入门教程：命令篇</font></a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html"><font color=Red>Systemd 入门教程：实战篇</font></a></p></li><li><p><a href="https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/User_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"><font color=Red>systemd 用户级别</font></a></p></li><li><p><a href="https://qgrain.github.io/2020/05/12/%E7%BC%96%E5%86%99systemd%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/"><font color=Red>编写systemd服务脚本</font></a></p></li><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch03.zh-cn.html#_the_system_message"><font color=Red>表 3.5. 典型的 journalctl 命令片段列表</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/410995772"><font color=Red>Linux系统查看日志命令journalctl的一些用法</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7200566974173151802">如何使用 journalctl 查看和分析 systemd 日志（附实例）</a></p></li><li><p><a href="https://www.likecs.com/show-204729373.html">Linux(入门基础):105-systemctl命令管理系统的操作界面环境（target）</a></p></li><li><p><a href="https://blog.csdn.net/weixin_33728708/article/details/92449569">Systemd工作原理及使用</a></p></li><li><p><a href="https://www.cnblogs.com/zwcry/p/9602756.html">systemctl是 Systemd 的主命令，用于管理系统。</a></p></li><li><p><a href="https://www.jianshu.com/p/ffe6990570d9">Linux中的systemctl和service</a></p></li><li><p><a href="https://blog.csdn.net/qq_39385118/article/details/102542146">systemctl与service</a></p></li><li><p><a href="http://www.360doc.com/content/22/0517/13/35525662_1031760458.shtml">systemd详解</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/5rl46HOh32UzIcjVUxMJjQ">一看就懂的 Systemd 进程管理教程</a></p></li><li><p><a href="https://www.jianshu.com/p/47ceac3a0e51">Linux守护进程详解</a></p></li></ul><h2 id="swap">swap</h2><ul><li><a href="https://developer.aliyun.com/article/597885">永久关闭linux swap</a></li><li><a href="https://blog.51cto.com/6923450605400/735323">关闭SWAP分区</a></li><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.swap.html">systemd.swap — Swap unit configuration</a></li><li><a href="https://cnzhx.net/blog/disable-swap-in-opensuse-tumbleweed/">openSUSE Tumbleweed 中禁用 SWAP</a></li><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.swap.html">openSUSE Tumbleweed 中禁用 SWAP</a></li></ul><h2 id="reload">reload</h2><ul><li><a href="https://www.cnblogs.com/usmile/p/13065594.html">Linux Systemd 详细介绍: Unit、Unit File、Systemctl、Target</a></li><li><a href="https://www.cnblogs.com/sparkdev/p/8472711.html">linux systemctl 命令</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>network</title>
    <link href="/linux/kernel/network/"/>
    <url>/linux/kernel/network/</url>
    
    <content type="html"><![CDATA[<h1 id="network">network</h1><h2 id="计算机网络">计算机网络</h2><ul><li><p><a href="https://www.cnblogs.com/wuwuyong/p/12198928.html">计算机网络常见面试题</a></p></li><li><p><a href="https://www.cnblogs.com/inception6-lxc/p/9152691.html">计算机网络常见面试题</a></p></li><li><p><a href="https://www.toutiao.com/article/7194724931555607100">字节一面：“为什么网络要分层？每一层的职责、包含哪些协议？”</a></p></li><li><p><a href="https://github.com/balloonwj/CppGuide">高性能服务器开发</a></p><ul><li><a href="https://balloonwj.github.io/cpp-guide-web/">在线阅读站点1：https://balloonwj.github.io/cpp-guide-web/</a></li><li><a href="http://balloonwj.gitee.io/cpp-guide-web/">在线阅读站点2：http://balloonwj.gitee.io/cpp-guide-web/</a></li><li><a href="http://101.37.25.166/blog/">备份站点：http://101.37.25.166/blog/</a></li></ul></li></ul><h2 id="socket">socket</h2><ul><li><a href="http://m.biancheng.net/socket/">socket编程入门：1天玩转socket通信技术（非常详细）</a></li><li><a href="http://m.biancheng.net/view/2349.html">socket缓冲区以及阻塞模式</a></li><li><a href="https://blog.csdn.net/summer_fish/article/details/121740570"><font color=Red>Socket缓冲区</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/486140420#:~:text=%E5%BD%93%E6%88%91%E4%BB%AC%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAsocket%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%85%B6%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E5%A4%A7%E5%B0%8F%E7%94%B1%E5%86%85%E6%A0%B8%E7%9A%84%E9%BB%98%E8%AE%A4%E7%BC%93%E5%86%B2%E5%8C%BA%E5%A4%A7%E5%B0%8F%E5%86%B3%E5%AE%9A%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%A6%82%E4%B8%8B%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%EF%BC%9A%20cat%20%2Fproc%2Fsys%2Fnet%2Fcore%2Frmem_default%20%2F%2F%20%E8%AF%BB%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%8C%E5%8D%95%E4%BD%8DByte%EF%BC%8C%E5%A6%821048576%20%E8%A1%A8%E7%A4%BA,1MB%20cat%20%2Fproc%2Fsys%2Fnet%2Fcore%2Fwmem_default%20%2F%2F%20%E5%86%99%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%8C%E5%8D%95%E4%BD%8DByte%EF%BC%8C%E5%A6%821048576%20%E8%A1%A8%E7%A4%BA%201MB">Ubuntu 设置Socket缓冲区大小</a></li><li><a href="https://os.51cto.com/article/682138.html"><font color=Red>Linux fd 系列 — socket fd 是什么？</font></a></li><li><a href="https://mp.weixin.qq.com/s/6fxS9GDdKOIkKASiz0e07Q">Linux内核 | socket底层的来龙去脉</a></li><li><a href="https://mp.weixin.qq.com/s/0eomyTaKWVeJbryIEdo1ug">如何学习 Linux 内核网络协议栈</a></li></ul><h2 id="select">select</h2><ul><li><a href="https://www.cnblogs.com/skyfsm/p/7079458.html">Linux编程之select</a></li></ul><h2 id="epoll">epoll</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/rpk0QmNfNiUoUH1fuDUpuA">Linux 高性能服务 epoll 的本质，真的不简单（含实例源码）</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/63179839"><font color=Red>如果这篇文章说不清epoll的本质，那就过来掐死我吧！ （1） - 知乎 (zhihu.com)</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/64138532">如果这篇文章说不清epoll的本质，那就过来掐死我吧！ （2） - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/64746509">如果这篇文章说不清epoll的本质，那就过来掐死我吧！ （3） - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://blog.csdn.net/songchuwang1868/article/details/89877739">Epoll的本质（内部实现原理）</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1636224">epoll LT 模式和 ET 模式详解（文末赠书） - 云+社区 - 腾讯云 (tencent.com)</a></p></li><li><p><a href="https://www.cnblogs.com/lojunren/p/3856290.html">Linux下的I/O复用与epoll详解</a></p></li><li><p><a href="https://blog.csdn.net/wendy_keeping/article/details/76577770">epoll源码剖析_wendy_keeping的博客-CSDN博客</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/tu7ovS2xO6ju-H5gB8TNCw">盘点Linux Epoll那些致命弱点</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1005481">大话 Select、Poll、Epoll - 云+社区 - 腾讯云 (tencent.com)</a></p></li></ul><h2 id="libevent">libevent</h2><ul><li><p><a href="https://www.bookstack.cn/read/libevent/450ef2232c710e15.md">Libevent深入浅出-《Libevent深入浅出》-书栈网·BookStack</a></p></li><li><p><a href="https://www.bookstack.cn/read/libevent/450ef2232c710e15.md">Libevent深入浅出· libevent深入浅出- Gitbooks</a></p></li><li><p><a href="https://blog.csdn.net/none123java321/article/details/113134499">libevent深入浅出_none123java321的博客-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/lfsblack/p/5498556.html">libevent源码深度剖析</a></p></li><li><p><a href="https://blog.csdn.net/Lemon_tea666/article/details/92637297">详解libevent网络库（一）-框架的搭建</a></p></li><li><p><a href="https://blog.csdn.net/Lemon_tea666/article/details/92797520">详解libevent网络库（二）-即时聊天通讯</a></p></li><li><p><a href="https://blog.csdn.net/y396397735/article/details/50684558">Linux网络编程 socketpair的使用</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/73u2kO43gGp0BCHncQO0ng">一文讲懂什么是vlan、三层交换机、网关、DNS、子网掩码、MAC地址</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247501617&amp;idx=2&amp;sn=460849b920d167dba10f7c4ad1fd927a&amp;chksm=f96bb5c5ce1c3cd30bdfe24e10b07d227d45c1d1e9cb64eeabae977eb62f7203618740a88b5e&amp;scene=178&amp;cur_album_id=1598710257097179137#rd">46张图带你了解网络传输、WIFI、以太网协议和网络寻址</a></p></li><li><p><a href="https://bbs.huaweicloud.com/blogs/147408">解析：单播、广播和组播的区别</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/2znyxjMUqpH9qjqCqTd69g">「linux」Socket缓存是如何影响TCP性能的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/6uuL-oq5FCIMTER1M9Dnmg">Linux 网络性能的 15 个优化建议！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cqmZX32TK50e7Ix_Uz_HoA">虾皮二面：既然有 HTTP 协议，为什么还要有 RPC?</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cqmZX32TK50e7Ix_Uz_HoA">虾皮二面：既然有 HTTP 协议，为什么还要有 RPC?</a></p></li></ul><h2 id="io模型">IO模型</h2><ul><li><a href="https://www.jianshu.com/p/486b0965c296">聊聊Linux 五种IO模型</a></li><li><a href="https://cloud.tencent.com/developer/article/1901999">深入理解Linux I/O系统</a></li><li><a href="http://www.daileinote.com/computer/linux_sys/10">linux文件io缓冲</a></li><li><a href="https://mp.weixin.qq.com/s/0aC4z2yl3n6kQ2PTt-aPNw">Linux 实现原理 — I/O 处理流程与优化手段</a></li><li><a href="https://blog.csdn.net/chenxiyuehh/article/details/90577631">【Linux】—— Linux下的文件缓冲区</a></li><li><a href="https://www.cnblogs.com/eason-liu/p/8053558.html">[基础]同步消息和异步消息传递的区别？</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;mid=2247485708&amp;idx=1&amp;sn=d7c8bec26de6ddcaaff49eac0766dc87&amp;source=41#wechat_redirect">终于明白了，一文彻底理解I/O多路复用</a></li><li><a href="https://mp.weixin.qq.com/s/uJLw9tCUANNhWlFAIZfDIA">这次答应我，一举拿下I/O多路复用！</a></li></ul><h2 id="reactor">reactor</h2><ul><li><p><a href="https://www.toutiao.com/article/7171814310321291810/"><font color=Red>一文图解高性能网络架构：Reactor和Proactor</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7196173859631219238"><font color=Red>​网络 IO 演变发展过程和模型介绍</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/kyEYNLtpsLZHK9n3j1pO0w">3000字|程序员应如何理解Reactor模式？</a></p></li><li><p><a href="https://www.jianshu.com/p/188ef8462100">Reactor模式详解＋源码实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Z07Hc9SRfGz6n8XhFHGVyA">高并发高性能服务器是如何实现的</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/xARtnqFQmi-Hzw01m__KQA">从小白到高手，你需要理解同步与异步(内含10张图)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;mid=2247485706&amp;idx=1&amp;sn=bc5d6e4bf9ee5dccef520e5b2051d943&amp;source=41#wechat_redirect">读取文件时，程序经历了什么？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/AqTcVaxElxgwVjCPcxAFDA">Mac 地址会重复吗？Mac 地址也会耗尽吗？</a></p></li><li><p><a href="https://www.toutiao.com/article/7204305085835346467">要理解网络，其实不就是理解这三张表吗</a></p></li><li><p><a href="https://www.toutiao.com/article/7166152475840561704/">为什么要使用 TCP keepalive？C/C++代码实现TCP keepalive</a></p></li><li><p><a href="https://www.toutiao.com/article/7191463571258343948/">一文读懂物联网MQTT协议之基础特性篇</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Qafa3nE_vTzdl1jGTiUaMw">为什么HTTPS是安全的？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程管理</title>
    <link href="/linux/kernel/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/linux/kernel/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="进程管理">进程管理</h1><h2 id="elf">ELF</h2><ul><li><p><a href="https://www.cnblogs.com/qscfyuk/p/11697816.html">linux下的ELF格式分析</a></p></li><li><p><a href="https://blog.codekissyoung.com/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83"><font color=Red>程序运行环境</font></a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1449872">认识目标文件结构 - 云+社区 - 腾讯云 (tencent.com)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247491839&amp;idx=1&amp;sn=e9a229184f158759c6648eed708d9598&amp;chksm=f96b920bce1c1b1d8546e659e195575a6014643f48cfe21cedc7b6108f655cfdca7580cfd02d&amp;scene=21#wechat_redirect"><font color=Red>扒一扒ELF文件</font></a></p></li><li><p><a href="https://blog.csdn.net/xj178926426/article/details/72825630#commentBox">Linux ELF文件格式分析</a></p></li><li><p><a href="https://blog.csdn.net/faxiang1230/article/details/105647915/">linux下ELF的加载运行</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/287863861">ELF文件加载过程</a></p></li><li><p><a href="https://blog.csdn.net/gatieme/article/details/51628257">ELF文件的加载过程(load_elf_binary函数详解)Linux进程的管理与调度（十三）</a></p></li><li><p><a href="https://www.toutiao.com/article/7199638660437082639/"><font color=Red>Linux 可执行文件程序载入和执行过程</font></a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1758586">Linux 修改 ELF 解决 glibc 兼容性问题</a></p></li><li><p><a href="https://blog.csdn.net/u011987514/article/details/67716639">浅析ELF中的GOT与PLT</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzAwODYyNQ==&amp;mid=2247485059&amp;idx=1&amp;sn=057760b7cbe9a37d4312ec74dcb8a196&amp;scene=21#wechat_redirect">Linux系统中编译、链接的基石-ELF文件：扒开它的层层外衣，从字节码的粒度来探索</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzAwODYyNQ==&amp;mid=2247487353&amp;idx=1&amp;sn=533701348cbdf80ed48aee2195312d92&amp;scene=21#wechat_redirect">【图片+代码】：GCC 链接过程中的【重定位】过程分析</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Lz3AAZcAk5_Z3HiOMsFlNA">【图片+代码】：Linux 动态链接过程中的【重定位】底层原理</a></p></li></ul><h2 id="进程与线程">进程与线程</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/zUph16tTNMXy9pQY2LKsiA">为什么进程地址空间中包括操作系统？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/E9SbPDDFs_NkMuuSACUq3w">Linux实现原理—进程、线程、内核线程、轻量级进程、协程</a></p></li><li><p><a href="https://www.jianshu.com/p/691d02380312">浅析Linux下的task_struct结构体</a></p></li><li><p><a href="https://blog.csdn.net/weixin_38371073/article/details/114376410">linux内核task_struct源码分析与解析(整合配图）</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/296750228">linux进程内核栈</a></p></li><li><p><a href="https://www.toutiao.com/article/7195179429876728335">从进程和线程的创建过程来看进程和线程的区别</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;mid=2247501947&amp;idx=1&amp;sn=cb94f53c75d674d30fb4903778c74c08&amp;chksm=c2c5b2d6f5b23bc027d9652d3e9949e55fd3b101beb87f6f80dd77d8233c0b51bede73edad46&amp;cur_album_id=2123743679373688834&amp;scene=189#wechat_redirect"><font color=Red>一个新进程的诞生 完结撒花！！！</font></a></p></li><li><p><a href="https://blog.csdn.net/xy010902100449/article/details/44851453"><font color=Red>【进程管理】fork之后子进程到底复制了父进程什么？</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uf_mJZpirL8kjBzPEy9aRw"><font color=Red>深入理解Linux中进程控制</font></a></p></li><li><p><a href="https://www.cnblogs.com/bastard/archive/2012/08/31/2664896.html">linux中fork（）函数详解（原创！！实例讲解）</a></p></li><li><p><a href="https://www.toutiao.com/article/7133100878235632158/">超详细的Linux进程控制精讲</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247503375&amp;idx=1&amp;sn=1ef245dd250d7004f9363a81e79d9f1d&amp;chksm=f96bbcfbce1c35edb5ff68f5f0dfcd58859dd5d2f8a68f1e013c2d97ecb29bf978cc5445f030&amp;mpshare=1&amp;scene=1&amp;srcid=0328qTcSaP6kykSE1yEjcA07&amp;sharer_sharetime=1648479204839&amp;sharer_shareid=2dfdf936388dba04865b3e883d5a3225&amp;version=3.1.12.6001&amp;platform=win#rd"><font color=Red>Linux 进程编程入门 fork vfork</font></a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1568077">Linux系统之进程状态</a></p></li><li><p><a href="https://blog.csdn.net/flyingleo1981/article/details/7739490">ps -aux出来的stat结果Ss,Sl,SN~~ 进程状态</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/25134841">被遗忘的桃源——flock 文件锁 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247495796&amp;idx=1&amp;sn=5491512e674f56d5192a95d7094c3e62&amp;chksm=f96b8280ce1c0b965626468d03144bc497332e204b7ec6b54bd6bb1ea0d226bcc21bc1a580e9&amp;scene=178&amp;cur_album_id=1507350615537025026#rd">linux后台开发中避免僵尸进程的方法总结</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1497217">父进程退出时如何确保子进程退出？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/8KoBR7awh_nZ-VAxVVVxhA">Linux进程描述符task_struct结构体详解</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/QCGJNUC71OTd11bSO_Oiew">Linux 中的各种栈：进程栈 线程栈 内核栈 中断栈</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/yPovZdsDhzm0hiUdlrKdjg">图解｜Linux 组调度</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/2eetiUAtedavND8c-sQM5w">Linux 多线程全面解析</a></p></li><li><p><a href="https://segmentfault.com/a/1190000009152815">Linux session和进程组概述</a></p></li></ul><h3 id="文件描述符">文件描述符</h3><ul><li><a href="https://blog.csdn.net/Function_Dou/article/details/89893888">进程最大打开文件描述符个数</a></li><li><a href="https://www.163.com/dy/article/FSEENEN90531I6Y1.html"><font color=Red>3 种方法教你在 Linux 中修改打开文件数量限制</font></a></li><li><a href="https://blog.csdn.net/Erice_s/article/details/111300790">Linux中的soft和hard limit</a></li></ul><h2 id="linux进程通信">Linux进程通信</h2><ul><li><a href="https://mp.weixin.qq.com/s/tdzvElDwpt3kVyklVdYtig">原来＼进程间通信／是这么回事......</a></li><li><a href="https://www.cnblogs.com/fortunely/p/14648146.html">Linux进程通信 - 无名管道与有名管道</a></li><li><a href="https://byronhe.com/post/2020/03/03/abstract-unix-socket-single-instance/">用 abstract unix socket 实现进程单实例运行</a></li><li><a href="https://blog.csdn.net/weixin_40763897/article/details/87545788">进程间通信——重定向、描述符表</a></li><li><a href="https://www.toutiao.com/article/7137131866540376610">Linux管道到底能有多快？</a></li></ul><h2 id="多线程">多线程</h2><ul><li><p><a href="https://www.cnblogs.com/yinbiao/p/11190336.html">【Linux】多线程同步的四种方式</a></p></li><li><p><a href="https://www.cnblogs.com/aaronLinux/p/5904479.html">[内核同步]浅析Linux内核同步机制 - aaronGao - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.toutiao.com/article/7140527671716364837/">怒啃 24 小时，终于搞懂linux系统上下文切换</a></p></li><li><p><a href="https://www.toutiao.com/article/7171812794948649511/">一文读懂进程调度算法</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存管理</title>
    <link href="/linux/kernel/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/linux/kernel/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内存管理">内存管理</h1><h2 id="分段与分页">分段与分页</h2><ul><li><a href="https://blog.csdn.net/cl_linux/article/details/80328608"><font color=Red>Linux进程地址空间和进程的内存分布</font></a></li><li><a href="https://mp.weixin.qq.com/s/qqGk1LBVDWpQP89RlLboGQ"><font color=Red>写给新手的MMU工作原理</font></a></li><li><a href="https://mp.weixin.qq.com/s/Vv2t-xHi9L20uGga3rjeBA">详细讲解MMU——为什么嵌入式linux没他不行？</a></li><li><a href="https://mp.weixin.qq.com/s/Q9sUNGFGrswuRYadfL2aiw">存储管理 -地址空间与重定位</a></li><li><a href="https://zhuanlan.zhihu.com/p/90004914">逻辑地址、线性地址、物理地址区别</a></li><li><a href="https://www.zhihu.com/question/420128789">Linux内存管理中，代码段和数据段映射成的线性地址重叠，不会冲突吗？</a></li><li><a href="https://zhuanlan.zhihu.com/p/324210723">x86段寄存器和分段机制</a></li><li><a href="https://mp.weixin.qq.com/s/q2wU9IbX54t_GAuc9V5r7A"><font color=Red>第九回 | Intel 内存管理两板斧：分段与分页</font></a></li><li><a href="https://www.toutiao.com/article/7188065325198524961">从根儿上理解linux虚拟内存</a></li><li><a href="https://segmentfault.com/a/1190000008125006">Linux内存管理</a></li></ul><h2 id="内核空间">内核空间</h2><ul><li><a href="https://blog.csdn.net/huaerbushi521/article/details/118610996"><font color=Red>内核空间:kmalloc vmalloc 用户空间:malloc ptmalloc</font></a></li><li><a href="https://mp.weixin.qq.com/s/HaYn0EoHKdY5psi3MHDpdg">详解Linux内存管理之vmalloc原理及源码实现</a></li><li><a href="https://mp.weixin.qq.com/s/ts9-sl2xQcG3nWvkNsuGeg">万字整理，肝翻Linux内存管理所有知识点</a></li><li><a href="https://mp.weixin.qq.com/s/OQVClhh7J-u2Cui27jF7cg"><font color=Red>五万字|深入理解Linux内存管理</font></a></li><li><a href="https://mp.weixin.qq.com/s/5qk6VYlyEKrNFNEY7fiqvQ">Linux 实现原理 — 内存分配算法</a></li><li><a href="https://mp.weixin.qq.com/s/kNHys4p2sXFV6wwV7VDFqQ">CMA技术原理分析</a></li><li><a href="https://www.toutiao.com/article/7132761153645888004/">面试题：Linux是如何避免内存碎片的</a></li><li><a href="https://www.toutiao.com/article/7132381214107353632/">Linux内存管理：NUMA技术详解（非一致内存访问架构）</a></li></ul><h3 id="oom">OOM</h3><ul><li><a href="https://mp.weixin.qq.com/s/I-LidNcK1vGm3fca20Tofw">细说｜Linux Out Of Memory机制</a></li><li><a href="https://www.cnblogs.com/duanxz/p/10185946.html">Linux进程被杀掉（OOM killer），查看系统日志</a></li></ul><h2 id="用户空间">用户空间</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/5p8zXhrhddNBxy20-fBnHw"><font color=Red>一文读懂Linux内存分配策略</font></a></p></li><li><p><a href="https://www.cnblogs.com/diegodu/p/9230280.html">Linux进程分配内存的两种方式brk() 和mmap()</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/7-qM_-AqG6-Zey58g0ysPg"><font color=Red>深入理解Linux内存子系统</font></a></p></li></ul><h3 id="mmap">mmap</h3><ul><li><a href="https://blog.csdn.net/dongzhongshu/article/details/2048619">linux-mmap函数的介绍</a></li><li><a href="https://mp.weixin.qq.com/s/S41vjVMK4QHR_2qfazsznA">这样理解mmap，挺有意思！</a></li><li><a href="https://www.toutiao.com/article/7148032464730997279/">虚拟内存 &amp; I/O &amp; 零拷贝总结</a></li><li><a href="https://mp.weixin.qq.com/s/0mjI6guTETi0WmuaUHpxAg">一文读懂计算机内核态、用户态和零拷贝技术</a></li></ul><h3 id="malloc">malloc</h3><ul><li><p><a href="https://www.toutiao.com/article/7144253310382440960/">「linux」如何实现一个malloc</a></p></li><li><p><a href="https://www.toutiao.com/article/7143515497621897769/">glibc malloc源码分析</a></p></li><li><p><a href="https://www.toutiao.com/article/7138673151717753357/">glibc内存管理那些事儿</a></p></li><li><p><a href="https://www.toutiao.com/article/7136170096816423465/">malloc底层原理剖析——ptmalloc内存池</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/m-fu3LvZJNvXkjlWpTkkuQ">深入理解 glibc malloc：内存分配器实现原理</a></p></li><li><p><a href="https://blog.csdn.net/u011334536/article/details/106150555">malloc(): memory corruption 解决方案</a></p></li></ul><h2 id="buffercache">Buffer、Cache</h2><ul><li><a href="https://www.toutiao.com/article/7097031826853708322/?app=news_article&amp;timestamp=1657673413&amp;use_new_style=1&amp;req_id=20220713085013010204050085051F5097&amp;group_id=7097031826853708322&amp;share_token=E52D4F54-EFFF-45EB-81AE-4DDDDC89DF6A&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_ios&amp;utm_campaign=client_share&amp;wxshare_count=1&amp;source=m_redirect"><font color=Red>Linux 内存中的缓冲区（Buffer）与缓存（Cache）</font></a></li><li><a href="https://blog.51cto.com/u_14286115/5194187">Cache和Buffer的区别</a></li><li><a href="https://www.junmajinlong.com/coding/buffer_cache/">彻底搞懂Buffer和Cache的区别</a></li><li><a href="https://mp.weixin.qq.com/s/JyZN7TG02JkcemAHWbDUVA"><font color=Red>Linux 内存中的 Cache 真的能被回收么?</font></a></li></ul><h2 id="内存池">内存池</h2><ul><li><p><a href="https://www.toutiao.com/article/7125330979035906568/">带你用纯C实现一个内存池（图文结合）</a></p></li><li><p><a href="https://www.toutiao.com/article/7145002269132571172/">「项目实战」高并发内存池的实现</a></p></li><li><p><a href="https://www.toutiao.com/article/7220429772361548344/">C++ 使用deque来实现内存池</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/z6MSHiiZ-D2OLf1KTWxgAg">在 4G 内存的机器上，申请 8G 内存会怎么样？</a></p></li></ul><h2 id="内存泄漏">内存泄漏</h2><ul><li><a href="https://www.toutiao.com/article/7185538936058479159"><font color=Red>实例分析Linux内存泄漏检测方法</font></a></li><li><a href="https://mp.weixin.qq.com/s/fTBOd-lYViFNX0fV61mQyg">细说｜Linux内存泄漏检测实现原理与实现</a></li><li><a href="https://www.toutiao.com/article/7104560595789185539"><font color=Red>内存泄漏-原因、避免和定位</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/75416381"><font color=Red>内存泄漏检测工具valgrind神器</font></a></li><li><a href="https://www.guyuehome.com/34716">Valgrind对ROS程序的可视化分析</a></li><li><a href="https://www.jianshu.com/p/6854085d54cd">利用Valgrind和gperftools解决内存问题</a></li><li><a href="http://senlinzhan.github.io/2017/12/31/valgrind/">使用 Valgrind 检测 C++ 内存泄漏</a></li><li><a href="https://www.toutiao.com/i7054082694740836895">彻底搞清楚内存泄漏的原因，如何避免内存泄漏，如何定位内存泄漏</a></li><li><a href="http://www.cppblog.com/markqian86/archive/2018/06/14/215728.html">Linux下内存检测工具：asan</a></li><li><a href="https://www.toutiao.com/article/7208070738077614651">2个压箱底的方法和工具搞定内存泄漏</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统安全</title>
    <link href="/linux/kernel/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    <url>/linux/kernel/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="系统安全">系统安全</h1><h2 id="系统安全-1">系统安全</h2><ul><li><a href="https://blog.csdn.net/moRickyer/article/details/126007548">linux系统安全</a></li><li><a href="https://share.pkemb.com/books/Linux%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%20-%20%E6%9D%8E%E5%BF%97.pdf">Linux内核安全模块深入剖析- 李志.pdf</a></li></ul><h2 id="cft">CFT</h2><ul><li><p><a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-1.1_ctf.md">CTF竞赛入门指南(CTF All In One)</a></p></li><li><p><a href="https://github.com/firmianay/CTF-All-In-One">CTF竞赛权威指南</a></p></li><li><p><a href="https://firmianay.gitbook.io/ctf-all-in-one/1_basic/1.1_ctf">GitBook CTF竞赛权威指南</a></p></li><li><p><a href="https://paper.seebug.org/">洞悉漏洞</a></p></li></ul><h2 id="user">user</h2><ul><li><p><a href="https://www.junmajinlong.com/linux/user_and_group/">用户和组管理</a></p></li><li><p><a href="http://c.biancheng.net/view/859.html"><font color=Red>Linux gpasswd命令用法详解：把用户添加进组或从组中删除</font></a></p></li><li><p><a href="https://wangchujiang.com/linux-command/c/logname.html">logname-打印当前终端登录用户的名称</a></p></li></ul><h2 id="su-sudo">su sudo</h2><ul><li><a href="https://sysin.org/blog/linux-root/"><font color=Red>关于 root 和 wheel：在 Linux 中创建管理员账号（root 权限）的正确方式</font></a></li><li><a href="https://www.junmajinlong.com/linux/su_and_sudo/"><font color=Red>su和sudo</font></a></li><li><a href="https://mp.weixin.qq.com/s/z127ryX6ueeVf-8FdK07vw">Linux命令su和sudo的区别？</a></li><li><a href="http://c.biancheng.net/view/877.html">Linux sudo命令用法详解：系统权限管理</a></li><li><a href="https://www.cnblogs.com/lfri/p/16277069.html">解决 sudo 执行命令时找不到命令问题</a></li><li><a href="https://www.toutiao.com/article/7166040304326279721/">sudo命令免密设置方法</a></li><li><a href="https://mp.weixin.qq.com/s/ZWBWgosUdx2hbBXI1DxlkQ">Linux 中 root 与 sudo 的用法与区别，居然这么多人搞不清楚！</a></li></ul><h2 id="pkexec">pkexec</h2><ul><li><a href="https://www.jianshu.com/p/ce499e6e631e">Linux命令-2：强大的pkexec</a></li><li><a href="https://askubuntu.com/questions/383747/how-to-configure-pkexec-to-not-ask-for-password">How to configure pkexec to not ask for password?</a></li></ul><h2 id="passwd">passwd</h2><ul><li><a href="https://www.junmajinlong.com/linux/user_and_group/">用户和组管理</a></li><li><a href="https://blog.csdn.net/vivian_king/article/details/45038331">Linux 设置短密码 and hostname_vivian的专栏-CSDN博客</a></li><li><a href="https://blog.csdn.net/stone_fall/article/details/109078160">Linux | 查看用户、用户组 | /etc/passwd详解 | /etc/group详解_我是一块小石头-CSDN博客</a></li></ul><h2 id="wheel用户组">Wheel用户组</h2><ul><li><a href="https://www.cnblogs.com/kerrycode/p/7053118.html">Linux下Wheel用户组介绍</a></li></ul><h2 id="capability">Capability</h2><ul><li><a href="https://blog.csdn.net/weixin_39219503/article/details/106888174">Linux capability详解</a></li><li><a href="https://blog.csdn.net/ty3219/article/details/123303114">Linux capability机制</a></li><li><a href="https://blog.csdn.net/qq_55316925/article/details/128287774">linux下capabilities基础操作</a></li></ul><h2 id="pam">PAM</h2><ul><li><a href="https://gohalo.me/post/linux-pam-security-introduce.html">Linux PAM 认证机制使用详解</a></li><li><a href="https://www.cnblogs.com/yinzhengjie/p/8395279.html">PAM(Pluggable Authentication Modules)认证机制详情</a></li></ul><h2 id="openssl">openssl</h2><ul><li><p><a href="https://www.junmajinlong.com/linux/index/#blogopenssl">openssl系列</a></p></li><li><p><a href="https://blog.csdn.net/CHENYAoo/article/details/107703762">校验和checksum、哈希值是什么？</a></p></li><li><p><a href="https://blog.csdn.net/pwl999/article/details/110878563">Linux DAC 权限管理详解</a></p></li><li><p><a href="https://blog.csdn.net/pwl999/article/details/107066666">LSM(Linux Security Modules)框架原理解析</a></p></li></ul><h2 id="selinux">selinux</h2><ul><li><p><a href="https://www.redhat.com/zh/topics/linux/what-is-selinux">SELinux是什么? 开启SELinux - 红帽 (redhat.com)</a></p></li><li><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/using_selinux/index"><font color=Red>使用SELinux-红帽文档</font></a></p></li><li><p><a href="http://c.biancheng.net/linux_tutorial/18/"><font color=Red>首页 &gt; Linux &gt; SELinux管理 http://c.biancheng.net/linux_tutorial/18/</font></a></p></li><li><p><a href="https://zq99299.github.io/linux-tutorial/tutorial-basis/16/05.html"><font color=Red>SELinux初探</font></a></p></li><li><p><a href="https://blog.csdn.net/MyArrow/article/details/9856095">SELinux深入理解</a></p></li><li><p><a href="https://www.cnblogs.com/caseyzq/p/16888960.html">SELinux简介</a></p></li><li><p><a href="https://blog.csdn.net/u014674293/article/details/119277580"><font color=Red>[Linux 基础] 一文彻底明白 Linux 中的 selinux 到底是什么</font></a></p></li><li><p><a href="https://www.cnblogs.com/kelelipeng/p/10371593.html">一文彻底明白linux中的selinux到底是什么</a></p></li><li><p><a href="https://blog.csdn.net/xy010902100449/article/details/125551444">Linux内核学习笔记——SELinux介绍（SELinux Policy是什么？）</a></p></li><li><p><a href="https://www.cnblogs.com/hy627/p/14230003.html">安全利器 — SELinux</a></p></li><li><p><a href="https://www.cnblogs.com/tcxa/archive/2021/06/08/14862151.html"><font color=Red>安全利器 — SELinux</font></a></p></li><li><p><a href="https://www.toutiao.com/article/6828364453059232259">android 8.1安全机制—SEAndroid &amp; SELinux</a></p></li><li><p><a href="https://www.cnblogs.com/lizhi0755/articles/3333165.html">SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux® 上最杰出的新安全子系统。</a></p></li><li><p><a href="https://www.cnblogs.com/xiuyuanpingjie/p/10897937.html">linux的selinux的详细说明和关闭</a></p></li><li><p><a href="https://deepinout.com/linux-cmd/linux-selinux-related-cmd/linux-cmd-sestatus.html">Linux SELinux管理相关命令</a></p></li><li><p><a href="https://devpress.csdn.net/centos/62ecf56319c509286f417ba7.html#devmenu5">CentOS 7 上的 SELinux 简介 – 第 3 部分:用户</a></p></li><li><p><a href="https://www.cnblogs.com/vman/p/4968457.html">在bash shell中使用getfattr查看文件扩展属性</a></p></li><li><p><a href="https://blog.csdn.net/qq_15138049/article/details/122724898">Extended Attributes/xattr 文件系统扩展属性</a></p></li><li><p><a href="https://www.cnblogs.com/xuyaowen/archive/2020/04/11/linux-xattrs.html">Linux 文件系统扩展属性 xattr</a></p></li><li><p><a href="https://www.cnblogs.com/trickofjoker/p/11850336.html">[学习记录]SELinux自定义策略初步</a></p></li><li><p><a href="https://selinuxproject.org/page/RefpolicyWriteModule">https://selinuxproject.org/page/RefpolicyWriteModule</a></p></li><li><p><a href="https://blog.csdn.net/MyArrow/article/details/10073853">SELinux策略语言客体类别和许可</a></p></li><li><p><a href="https://blog.csdn.net/myarrow/article/details/10105961"><font color=Red>SELinux策略语言类型强制(编写TE规则)</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_42282862/article/details/116484619"><font color=Red>Sepolicy学习（一）</font></a></p></li><li><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/using_selinux/creating-and-enforcing-an-selinux-policy-for-a-custom-application_writing-a-custom-selinux-policy"><font color=Red>8.2. 为自定义应用程序创建并强制 SELinux 策略</font></a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/2161594">selinux参考策略实验记录</a></p></li><li><p><a href="https://blog.csdn.net/yuchenxueyue/article/details/82590408">SElinux操作</a></p></li><li><p><a href="https://github.com/georou/prometheus-selinux/blob/master/prometheusd.te">https://github.com/georou/prometheus-selinux/blob/master/prometheusd.te</a></p></li><li><p><a href="https://github.com/SELinuxProject/selinux-notebook/blob/main/src/reference_policy.md"><font color=Red>https://github.com/SELinuxProject/selinux-notebook/blob/main/src/reference_policy.md</font></a></p></li><li><p><a href="https://www.cnblogs.com/pengyunjing/p/10663135.html">setsebool命令详解与SELinux管理</a></p></li><li><p><a href="https://blog.csdn.net/yolo_yyh/article/details/127874104">Linux系统的安全模块Selinux总结</a></p></li><li><p><a href="https://blog.csdn.net/wjyph/article/details/47260197">使用SELinux布尔值</a></p></li><li><p><a href="https://icode.best/i/23341938189743">AppArmor与SElinux-爱代码爱编程</a></p></li><li><p><a href="https://www.cnblogs.com/longbigbeard/p/15192518.html">Debina 系统，安装配置SELINUX</a></p></li><li><p><a href="https://wiki.debian.org/SELinux/Setup">https://wiki.debian.org/SELinux/Setup</a></p></li><li><p><a href="https://www.onitroad.com/jc/linux/ubuntu/faq/how-to-disable-enable-selinux-on-ubuntu-20-04-linux.html">如何在Ubuntu 20.04 Linux上禁用/启用SELinux</a></p></li><li><p><a href="https://www.cnblogs.com/call-me-dasheng/p/15888546.html">Ubuntu20安装SELinux</a></p></li></ul><h2 id="auditd">auditd</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/535483789">一文读懂Linux 审计(auditd)原理分析（收藏起来！）</a></p></li><li><p><a href="https://paper.seebug.org/1594/">Linux Audit 子系统解读</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/T4ZHmxqZvSy4BidASESO6g">Centos 8使用auditd配置系统审计</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42277902/article/details/125591493">Auditd入门</a></p></li><li><p><a href="https://blog.51cto.com/u_13983618/2500749"><font color=Red>系统日志说明及audit审计系统</font></a></p></li><li><p><a href="https://www.jianshu.com/p/3b11a2b7c746">rsyslog服务及Linux系统日志简介</a></p></li><li><p><a href="https://deepinout.com/linux-cmd/linux-audit-system-related-cmd/linux-cmd-auditctl.html">Linux 审计系统相关命令</a></p></li><li><p><a href="https://www.toutiao.com/article/6776205569737884171">监控Linux文件变化，防止系统被黑</a></p></li></ul><h2 id="其它">其它</h2><ul><li><a href="https://www.roboform.com/cn/password-generator">随机密码生成器</a></li><li><a href="https://1password.com/zh-cn/password-generator/">需要生成密码？试试 1Password 强密码生成器。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/books/README/"/>
    <url>/linux/kernel/books/README/</url>
    
    <content type="html"><![CDATA[<h1 id="linux内核">Linux内核</h1><h2 id="linux内核完全注释">Linux内核完全注释</h2><ul><li><a href="Linux-0.11-zhaojiong/Linux内核完全注释(修正版v3.0).pdf">Linux内核完全注释(修正版v3.0).pdf</a></li></ul><h2 id="unix-环境高级编程">UNIX 环境高级编程</h2><ul><li><a href="download.eeworld.com.cn_UNIX环境高级编程中文版.pdf">UNIX环境高级编程中文版.pdf</a></li><li><a href="http://download.eeworld.com.cn/detail/genping2008/550957">UNIX环境高级编程中文版-文字版（非扫描）</a></li><li><a href="download.eeworld.com.cn_UNIX%20环境高级编程%20第3版.pdf">UNIX 环境高级编程 第3版.pdf</a></li><li><a href="http://download.eeworld.com.cn/detail/%E5%A4%AA%E7%99%BD%E9%87%91%E6%98%9F/619878">UNIX 环境高级编程 第3版</a></li></ul><h2 id="linux内核深度解析">Linux内核深度解析</h2><ul><li><a href="download.eeworld.com.cn_Linux内核深度解析_余华兵著_北京：人民邮电出版社%20,%202019.05_P622.pdf">Linux内核深度解析.pdf</a></li><li><a href="http://download.eeworld.com.cn/detail/%E9%97%B2%E9%B1%BC%E8%9C%A1%E8%95%89/624239">Linux内核深度解析（文字版PDF带目目录）</a></li></ul><h2 id="linux内核设计与实现">LINUX内核设计与实现</h2><ul><li><a href="Linux内核设计与实现(第三版中文高清带目录).pdf">Linux内核设计与实现(第三版中文高清带目录).pdf</a></li><li><a href="https://awesome-programming-books.github.io/linux/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%88%E7%AC%AC%E4%B8%89%E7%89%88%EF%BC%89.pdf">Linux内核设计与实现（第三版）.pdf</a></li><li><a href="http://kerneltravel.net/note/">《LINUX内核设计与实现》读书笔记</a></li></ul><h2 id="linux内核安全模块深入剖析">Linux内核安全模块深入剖析</h2><ul><li><a href="Linux%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90.pdf">Linux内核安全模块深入剖析.pdf</a></li></ul><h2 id="debug-hacks中文版深入调试的技术和工具">Debug Hacks中文版：深入调试的技术和工具</h2><ul><li><a href="https://www.wenjiangs.com/pdf-ebook/debug-hacks.html">Debug Hacks中文版：深入调试的技术和工具</a></li></ul><h2 id="pci_express_体系结构导读">PCI_Express_体系结构导读</h2><ul><li><a href="https://www.123pan.com/Weboffice/?type=f&amp;id=1641382&amp;FileName=PCI_Express_%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AF%BB.pdf&amp;Size=31777886&amp;Etag=7d823eed57dad308392d512270c729fc&amp;S3KeyFlag=1640083-0&amp;CreateAt=1647394917&amp;UpdateAt=1648172199&amp;from=2&amp;shareKey=y8zA-syTe">PCI_Express_体系结构导读.pdf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>books</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kernel</title>
    <link href="/linux/kernel/kernel/"/>
    <url>/linux/kernel/kernel/</url>
    
    <content type="html"><![CDATA[<h1 id="kernel">kernel</h1><h2 id="启动管理">启动管理</h2><ul><li><a href="http://c.biancheng.net/linux_tutorial/12/">Linux系统启动管理</a></li><li><a href="https://blog.csdn.net/qq_43178138/article/details/109524002">BIOS和grub</a></li><li><a href="https://segmentfault.com/a/1190000020850901">聊聊BIOS、UEFI、MBR、GPT、GRUB……</a></li><li><a href="https://blog.csdn.net/xhtchina/article/details/113789538">BIOS, UEFI, MBR, GPT, GRUB介绍</a></li><li><a href="https://www.baike.com/wikiid/7276828077877800951">GRUB-一个多重操作系统启动管理器</a></li><li><a href="https://www.cnblogs.com/itmeatball/p/11469673.html">主分区、扩展分区、逻辑分区</a></li><li><a href="https://blog.csdn.net/weixin_33906657/article/details/92576959">主磁盘分区和逻辑磁盘分区的区别是什么？</a></li><li><a href="https://blog.csdn.net/DEEP_M/article/details/118103914">ubuntu 修改开机启动项默认值</a></li></ul><h2 id="内核">内核</h2><ul><li><a href="http://kerneltravel.net/"><font color=Red>Linux内核之旅</font></a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247500232&amp;idx=2&amp;sn=9a81b4fa46e234192ae6fab97840026c&amp;chksm=f96bb33cce1c3a2a770760031fc58ebc6dc367695eebc5db6a08048774789cdee630f6c58d5f&amp;mpshare=1&amp;scene=1&amp;srcid=0407Gxo7W7KdCRYn2kb8WEsB&amp;sharer_sharetime=1649316737801&amp;sharer_shareid=2dfdf936388dba04865b3e883d5a3225&amp;version=3.1.12.6001&amp;platform=win#rd">30分钟读懂Linux五大模块内核源码，内核整体架构设计</a></li><li><a href="https://mp.weixin.qq.com/s/RaNeUkveH_AdKnkzY70TEg">Linux 内核概念和学习路线</a></li><li><a href="https://mp.weixin.qq.com/s/VJFXFs8430SrpnJTmUsIZg">Linux系统内核概述</a></li><li><a href="https://www.cnblogs.com/y4247464/p/12333955.html">Linux内核 内核源码结构</a></li><li><a href="https://blog.csdn.net/weixin_39702400/article/details/116625705">linux查看安装的所有内核,查看已安装的Linux内核</a></li><li><a href="https://blog.csdn.net/jxwzh/article/details/116041716">deepin系统更改默认启动内核</a></li><li><a href="https://mp.weixin.qq.com/s/aPTCt5cmzEtq0xeeMgQLRQ">操作系统如何实现：什么是宏内核、微内核</a></li><li><a href="https://mp.weixin.qq.com/s/Aai7Ccwwp7SROEXpPnEfzA">一篇文章汇总嵌入式处理器相关的知识</a></li><li><a href="https://mp.weixin.qq.com/s/co0CzrJBmbZd0I0ddjHGaQ"><font color=Red>【精华】Linux阅码场原创精华文章汇总</font></a></li></ul><h2 id="内核makefileconfig">内核Makefileconfig</h2><ul><li><p><a href="https://blog.csdn.net/lizuobin2/article/details/51464152">Linux内核Makefile分析</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/358801667">linux内核编译系统-kbuild系统详解</a></p></li><li><p><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/88548273">浅析Kbuild系统</a></p></li><li><p><a href="https://blog.csdn.net/weixin_40182062/article/details/108230678">以deb包方式编译内核</a></p></li><li><p><a href="https://www.debian.org/doc/manuals/debian-faq/kernel.zh-cn.html">第 10 章 Debian 和内核</a></p></li><li><p><a href="https://blog.csdn.net/lizuobin2/article/details/51429937">Linux内核配置以及Make menuconfig过程分析</a></p></li><li><p><a href="https://blog.csdn.net/flc2762/article/details/103735072">make defconfig savedefconfig olddefconfig区别</a></p></li><li><p><a href="https://blog.csdn.net/gp18391818575/article/details/112555781">linux内核配置清理make clean</a></p></li><li><p><a href="https://www.csdn.net/tags/MtjaAg5sMTU4MjMtYmxvZwO0O0OO0O0O.html">ubuntu查看内核config</a></p></li><li><p><a href="https://blog.csdn.net/weixin_62882080/article/details/124262374">ubuntu(20.04)+linux内核（5.17.3）的config文件</a></p></li><li><p><a href="https://www.51cto.com/article/663841.html">Linux内核编译很简单，6步编译一个自己的内核</a></p></li><li><p><a href="https://blog.csdn.net/weixin_62882080/article/details/124260136">ubuntu(20.04)+linux内核（5.17.3）编译内核</a></p></li><li><p><a href="https://blog.csdn.net/proware/article/details/117386555">内核编译更新</a></p></li><li><p><a href="https://davejingtian.org/2018/03/15/make-deb-pkg-broken/">“make deb-pkg” broken</a></p></li></ul><h2 id="内核模块">内核模块</h2><ul><li><a href="https://blog.csdn.net/u012184539/article/details/120326741">Linux内核模块HelloWorld</a></li><li><a href="https://blog.csdn.net/weixin_46048542/article/details/123171177">Linux内核驱动学习-编写最简单Linux内核模块HelloWorld</a></li><li><a href="https://blog.csdn.net/Lihuihui006/article/details/112199469">linux内核模块加载命令</a></li></ul><h2 id="aslr">ASLR</h2><ul><li><a href="https://blog.csdn.net/counsellor/article/details/81543197">Linux下关闭ASLR(地址空间随机化)的方法</a></li><li><a href="https://blog.csdn.net/zy_zhengyang/article/details/95451484">Linux关闭KASLR</a></li><li><a href="https://blog.csdn.net/gatieme/article/details/104266966">开启内核地址随机化KASLR后, qemu 调试 kernel 不能设置断点</a></li></ul><h2 id="audio">audio</h2><ul><li><a href="https://mp.weixin.qq.com/s/1TJQc3Ktdw_Qz576iLjB1Q">ALSA（高级Linux声音架构）浅析</a></li></ul><h2 id="linux内核源码">linux内核源码</h2><ul><li><p><a href="https://www.cnblogs.com/igoodful/p/14081782.html">linux内核源码在线阅读</a></p></li><li><p><a href="https://github.com/sunym1993/flash-linux0.11-talk">品读 Linux 0.11 核心代码</a></p></li><li><p><a href="https://github.com/realwujing/Linux-0.11">Linux内核完全注释(修正版v3.0).pdf</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cx_vaRTcC29h0pWkJPpqQQ"><font color=Red>调试 Linux 最早期的代码</font></a></p></li><li><p><a href="https://blog.csdn.net/chaoguo1234/article/details/128613219">Linux-0.11操作系统源码调试-在 Ubuntu22 上</a></p></li><li><p><a href="https://github.com/yuan-xy/Linux-0.11"><font color=Red>https://github.com/yuan-xy/Linux-0.11</font></a></p></li><li><p><a href="https://richardweiyang-2.gitbook.io/kernel-exploring/">https://richardweiyang-2.gitbook.io/kernel-exploring/</a></p></li><li><p><a href="https://blog.csdn.net/sinat_38816924/article/details/115498707">ubuntu获取源码方式</a></p></li></ul><h2 id="内核链表">内核链表</h2><ul><li><a href="https://mp.weixin.qq.com/s/Ddonv6FdY4oroIT32IGxOw">玩转内核链表list_head，教你管理不同类型节点的实现，建议收藏</a></li><li><a href="https://blog.csdn.net/wanshilun/article/details/79747710">Linux内核中经典链表 list_head 常见使用方法解析</a></li><li><a href="https://blog.csdn.net/npy_lp/article/details/7010752#:~:text=Containe,%E4%BD%93%E5%8F%98%E9%87%8F%E7%9A%84%E9%A6%96%E5%9C%B0%E5%9D%80%E3%80%82">Linux内核中的常用宏container_of其实很简单</a></li><li><a href="https://blog.csdn.net/u010632165/article/details/107523477"><font color=Red>Linux内核中container_of的原理及其使用详解</font></a></li><li><a href="https://blog.csdn.net/hs794502825/article/details/24597773">Linux 内核 hlist 详解</a></li><li><a href="https://blog.csdn.net/oHeHui1/article/details/128176831">hlist用法以及hlist_for_each_entry 使用举例</a></li><li><a href="https://blog.csdn.net/bhniunan/article/details/104082581">内核模块开发中__init和__exit的作用</a></li><li><a href="https://www.toutiao.com/article/7222172647486964258">linux内核中6个经典C语言函数代码赏析</a></li></ul><h2 id="内核section">内核section</h2><ul><li><a href="https://mp.weixin.qq.com/s/sglxUkdboT4epiJOH5z7pg"><font color=Red>C关键字section的作用</font></a></li></ul><h2 id="initramfs">initramfs</h2><ul><li><a href="https://blog.csdn.net/zyqash/article/details/126041951">initramfs详解-初识initramfs</a></li><li><a href="https://blog.csdn.net/oqqYuJi12345678/article/details/103218438">linux initramfs启动原理</a></li><li><a href="https://www.cnblogs.com/sky-heaven/p/13856545.html"><font color=Red>Linux内核Ramdisk(initrd)机制【转】</font></a></li><li><a href="https://www.cnblogs.com/wipan/p/9269505.html">Initramfs 原理和实践</a></li><li><a href="https://blog.csdn.net/u012787604/article/details/121685547"><font color=Red>关于initrd和initramfs</font></a></li><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/100021609"><font color=Red>Linux aarch64 编译 &amp; qemu 搭建实验平台 initrd initramfs</font></a></li><li><a href="https://huaweicloud.csdn.net/6356178ed3efff3090b59d10.html">initramfs详解-初识initramfs</a></li><li><a href="https://blog.csdn.net/u012332571/article/details/121906322">linux 内核启动Initramfs与initrd 及其挂载</a></li><li><a href="http://t.zoukankan.com/FullStack-p-8041964.html">精通initramfs构建step by step</a></li><li><a href="https://blog.csdn.net/xiaofeng_yan/article/details/83303544">新型的initrd的解压方法</a></li><li><a href="https://cloud.tencent.com/developer/article/1515285">BinWalk安装和命令参数详解</a></li></ul><h2 id="启动流程">启动流程</h2><ul><li><p><a href="https://blog.csdn.net/jasonactions/article/details/114080652">kernel启动流程-start_kernel的执行_8.cpio initrd解包</a></p></li><li><p><a href="https://blog.csdn.net/jasonactions/article/details/114007646">kernel启动流程-start_kernel的执行_7.arch_call_rest_init</a></p></li><li><p><a href="https://m.elecfans.com/article/1980482.html">linux内核中do_initcalls函数的执行逻辑分析</a></p></li><li><p><a href="https://www.cnblogs.com/MrLiuZF/p/15187310.html">Linux0号进程，1号进程，2号进程</a></p></li><li><p><a href="https://blog.csdn.net/21cnbao/article/details/105885390">Linux下0号进程的前世(init_task进程)今生(idle进程)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/umB4mgMUtAvL52AcjDq55g">Linux | Kernel 启动流程源码分析</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/jcolfo4bvKPS-eRdeCkRCg">Linux 实现原理 — 网卡驱动程序初始化流程</a></p></li></ul><h2 id="根文件系统挂载">根文件系统挂载</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/489819324">一文讲解Linux内核中根文件系统挂载流程</a></li><li><a href="https://blog.51cto.com/csdyabc/856177">根文件系统挂载 原创</a></li></ul><h2 id="percpu变量">percpu变量</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/340985476">一张图看懂linux内核中percpu变量的实现 KING.YT</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1769514">一张图看懂linux内核中percpu变量的实现</a></p></li><li><p><a href="https://github.com/realwujing/realwujing.github.io/blob/main/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eper_cpu%E5%8F%98%E9%87%8Fcurrent_task%E8%8E%B7%E5%8F%96task_struct.md"><font color=Red>amd64下基于per_cpu变量current_task获取task_struct</font></a></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">p ((struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[0] + 0x15d00)))-&gt;comm<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="内核模块-1">内核模块</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/420194002">如何编写一个Linux内核模块，这次手把手教你</a></li></ul><h2 id="系统调用">系统调用</h2><ul><li><a href="https://blog.csdn.net/weixin_39852688/article/details/110815377"><font color=Red>linux系统调用函数大全_Linux架构</font></a></li><li><a href="https://blog.csdn.net/m0_74282605/article/details/128097944"><font color=Red>介绍Linux系统调用（值得收藏）</font></a></li><li><a href="https://m.dandelioncloud.cn/article/details/1567859018796593153">linux系统下的各种hook方式Linux内核hook系统调用</a></li><li><a href="https://m.dandelioncloud.cn/article/details/1552321452504739842">Linux系统调用Hook姿势总结</a></li><li><a href="https://blog.csdn.net/yuechuxuan/article/details/70308126">没有open的手册页条目</a></li><li><a href="https://blog.csdn.net/QFFQFF/article/details/76762232">系统调用的三种方式</a></li><li><a href="https://blog.csdn.net/weixin_42992444/article/details/108688932">应用程序如何直接调用一个系统调用, 不经过C库?</a></li><li><a href="https://www.toutiao.com/article/7159607330227798562/">Linux系统调用汇总</a></li><li><a href="https://blog.csdn.net/kwame211/article/details/77572123">Linux系统调用函数列表</a></li><li><a href="https://www.chinastor.com/manuals/linuxfunctions/">Linux函数调用手册</a></li><li><a href="https://www.cnblogs.com/Yogurshine/p/3666527.html">linux系统调用和库函数调用的区别</a></li><li><a href="https://mp.weixin.qq.com/s/2rzzQTuZKSW0O4zM1DlAWQ">系统调用与函数调用有什么区别？</a></li></ul><h2 id="open-openat">open openat</h2><ul><li><a href="https://www.modb.pro/db/379821">open和openat系统调用</a></li></ul><h2 id="uid和euid">uid和euid</h2><ul><li><a href="https://www.junmajinlong.com/linux/euid_ruid/">理解Effective UID(EUID)和Real UID(RUID)</a></li><li><a href="https://www.cnblogs.com/itech/archive/2012/04/01/2429081.html">Linux进程的uid和euid</a></li><li><a href="https://blog.csdn.net/dongzhongshu/article/details/6215054">geteuid()和getuid（）的区别</a></li><li><a href="https://blog.csdn.net/dedlous/article/details/7188776">getuid() 与 geteuid() 获得 UID 以及 有效 UID 值</a></li><li><a href="https://blog.csdn.net/whatday/article/details/102844879">linux c setuid函数解析</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://blog.csdn.net/weixin_43871678/article/details/106723029">用户态和内核态的切换耗费时间的原因</a></li><li><a href="https://blog.csdn.net/u014470361/article/details/81193023">linux内核中likely与unlikely</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/Linux-0.11-yuan-xy/README/"/>
    <url>/linux/kernel/Linux-0.11-yuan-xy/README/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-0.11">Linux-0.11</h1><p>The old Linux kernel source ver 0.11 which has been tested under modern Linux, Mac OSX and Windows.</p><h2 id="build-on-linux">1. Build on Linux</h2><h3 id="linux-setup">1.1. Linux Setup</h3><ul><li>a linux distribution: debian , ubuntu and mint are recommended</li><li>some tools: gcc gdb qemu</li><li>a linux-0.11 hardware image file: hdc-0.11.img, please download it from http://www.oldlinux.org, or http://mirror.lzu.edu.cn/os/oldlinux.org/, ant put it in the root directory.</li><li>Now, This version already support the Ubuntu 16.04, enjoy it.</li></ul><h3 id="hack-linux-0.11">1.2. hack linux-0.11</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make <span class="hljs-built_in">help</span>// get <span class="hljs-built_in">help</span><br>$ make  // compile<br>$ make start// boot it on qemu<br>$ make debug// debug it via qemu &amp; gdb, you<span class="hljs-string">&#x27;d start gdb to connect it.</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gdb">$ gdb tools/system<br>(gdb) target remote :1234<br>(gdb) b main<br>(gdb) c<br></code></pre></td></tr></table></figure><h2 id="build-on-mac-os-x">2. Build on Mac OS X</h2><h3 id="mac-os-x-setup">2.1. Mac OS X Setup</h3><ul><li>install cross compiler gcc and binutils</li><li>install qemu</li><li>install gdb. you need download the gdb source and compile it to use gdb because port doesn't provide i386-elf-gdb, or you can use the pre-compiled gdb in the tools directory.</li><li>a linux-0.11 hardware image file: hdc-0.11.img</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo port install qemu<br>$ sudo port install i386-elf-binutils i386-elf-gcc<br></code></pre></td></tr></table></figure><p>optional <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget ftp://ftp.gnu.org/gnu/gdb/gdb-7.4.tar.bz2<br>$ tar -xzvf gdb-7.4.tar.bz2<br>$ <span class="hljs-built_in">cd</span> gdb-7.4<br>$ ./configure --target=i386-elf<br>$ make<br></code></pre></td></tr></table></figure></p><h3 id="hack-linux-0.11-1">2.2. hack linux-0.11</h3><p>same as section 1.2</p><h2 id="build-on-windows">3. Build on Windows</h2><p>todo...</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>Linux-0.11-yuan-xy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/namespace/README/"/>
    <url>/linux/kernel/namespace/README/</url>
    
    <content type="html"><![CDATA[<h1 id="namespace">namespace</h1>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>namespace</category>
      
    </categories>
    
    
    <tags>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adm64下基于qemu tap(NAT网络)、debootstrap 调试内核、根文件系统</title>
    <link href="/linux/kernel/qemu/adm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/linux/kernel/qemu/adm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu-tapnat网络debootstrap-调试内核根文件系统">amd64下基于qemu tap(NAT网络)、debootstrap 调试内核、根文件系统</h1><h2 id="编译调试版linux内核">1. 编译调试版linux内核</h2><h3 id="安装编译依赖">安装编译依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install build-essential libncurses-dev bison flex libssl-dev libelf-dev<br></code></pre></td></tr></table></figure><h3 id="下载源码">下载源码</h3><p>调试标准版内核，下载github代码即可，本文选择tag v5.10-rc7分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/torvalds/linux.git<br>git checkout -b v5.10-rc7 v5.10-rc7<br></code></pre></td></tr></table></figure><p>调试uos-v20-1054-2内核，下载gerrit代码即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/x86-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;x86-kernel/.git/hooks/&quot;</span><br>git checkout -b 1054-2 499e91c36f62c1790063cabdacff94fd8220f145<br></code></pre></td></tr></table></figure><h3 id="内核编译选项配置">内核编译选项配置</h3><p>进入源码目录，配置编译选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br>make menuconfig<br></code></pre></td></tr></table></figure><p>比较重要的配置项有：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">首先内核中支持tap/tuns设备：<br>Device Drivers  ---&gt; <br>     Networking support  ---&gt;<br>        [M] Universal TUN/TAP device driver support<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Kernel hacking  ---&gt;<br>    [*] Kernel debugging<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts for kernel debugging<br></code></pre></td></tr></table></figure><p>一定要打开。 还有下面的选项会导致打断点失败，一定要关闭：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Processor type and features ----&gt;<br>    [] Randomize the address of the kernel image (KASLR)<br></code></pre></td></tr></table></figure><p>保存并退出 menuconfig，开始编译之旅：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) / 2`<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li></ul><h2 id="debootstrap制作根文件系统">2. debootstrap制作根文件系统</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install debian-archive-keyring<br>sudo apt-get install  qemu qemu-user-static  binfmt-support debootstrap<br></code></pre></td></tr></table></figure><h3 id="制作文件系统">制作文件系统</h3><p>使用也十分简单，命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span> [平台] [发行版本代号] [构建目录] [镜像地址]<br></code></pre></td></tr></table></figure><p>以在Deepin 20.7 amd64上构建ubuntu18(bionic) amd64为例，预装ifupdown是因为下方配置网络的时候需要用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">cd</span> /usr/share/debootstrap/scripts/<br><span class="hljs-built_in">cp</span> sid bionic<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --no-check-gpg \<br>--<span class="hljs-built_in">arch</span>=amd64 \<br>--include=ifupdown,net-tools,build-essential,gdb,cmake,openssh-server,vim,bash-completion \<br>bionic \<br>linux-rootfs \<br>http://mirrors.aliyun.com/ubuntu/<br></code></pre></td></tr></table></figure><p>以在Deepin 20.7 amd64上构建uos-v20-1054(eagle/1054) amd64为例，预装ifupdown是因为下方配置网络的时候需要用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">cd</span> /usr/share/debootstrap/scripts/<br><span class="hljs-built_in">rm</span> eagle -rf<br><span class="hljs-built_in">mkdir</span> eagle<br><span class="hljs-built_in">cp</span> sid eagle/1054<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --no-check-gpg \<br>--<span class="hljs-built_in">arch</span>=amd64 \<br>--include=ifupdown,net-tools,build-essential,gdb,cmake,openssh-server,vim,bash-completion \<br>eagle/1054 \<br>linux-rootfs \<br>https://pools.uniontech.com/desktop-professional/<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/houxian1103/article/details/121886365">ubuntu 下安装C/C++ 开发编译环境</a></li></ul><p>arm64下构建adm64需要执行下方命令，当前可以省略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -a /usr/bin/qemu-x86_64-static linux-rootfs/usr/bin/qemu-x86_64-static<br></code></pre></td></tr></table></figure><h3 id="进入文件系统">进入文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/ywhs/linux-software/master/ch-mount.sh<br><span class="hljs-built_in">chmod</span> 777 ch-mount.sh<br><span class="hljs-comment"># 执行脚本后，没有报错会进入文件系统，交叉编译时显示 I have no name ，这是因为还没有初始化。</span><br>./ch-mount.sh -m linux-rootfs/<br><br>debootstrap/debootstrap --second-stage <span class="hljs-comment"># 交叉编译时执行第二步，初始化文件系统，会把一个系统的基础包初始化</span><br><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs/<br><span class="hljs-comment"># ./ch-mount.sh -m linux-rootfs/</span><br><span class="hljs-comment"># 再次进入时，执行如下命令即可</span><br><span class="hljs-comment"># sudo chroot linux-rootfs</span><br></code></pre></td></tr></table></figure><h3 id="定制文件系统">定制文件系统</h3><h4 id="配置网络">配置网络</h4><p>要确保进入文件系统后有网络，可以将 ​​/etc/resolv.conf​​​ 文件拷贝到 ​​linux-rootfs/etc/resolv.conf​​。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> ​​/etc/resolv.conf​​​ ​​linux-rootfs/etc/resolv.conf<br></code></pre></td></tr></table></figure><h4 id="ubuntu18bionic更换国内镜像源">ubuntu18(bionic)更换国内镜像源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若是遇到没法拉取 https 源的状况，请先使用 http 源并安装</span><br>sudo <span class="hljs-built_in">chroot</span> linux-rootfs<br>apt install apt-transport-https<br><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-comment"># 把文件内容所有替换为对应阿里源，参见：https://developer.aliyun.com/mirror/?spm=a2c6h.12873639.J_5404914170.29.2feb6235F6x30d</span><br>vim /etc/apt/sources.list<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list<br></code></pre></td></tr></table></figure><h4 id="配置-root-用户密码">配置 root 用户密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><h4 id="建立一个普通用户">建立一个普通用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这两个环境变量能够自行修改</span><br>USER=wujing<br>HOST=wujing<br>useradd -G sudo -m -s /bin/bash <span class="hljs-variable">$USER</span><br>passwd <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><h3 id="退出文件系统">退出文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs<br></code></pre></td></tr></table></figure><h3 id="制作文件系统镜像initrd">制作文件系统镜像(initrd)</h3><p>当文件系统是<code>uos-v20-1054(eagle/1054)</code>时，将下方<code>bionic</code>替换为<code>eagle-1054</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim bionic.sh<br></code></pre></td></tr></table></figure><p>将下方内容追加到bionic.sh:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">#! /bin/bash<br><br>dd if=/dev/zero of=bionic.img bs=1M seek=2047 count=1<br>sudo mkfs.ext4 -F bionic.img<br>sudo mkdir -p /mnt/bionic<br>sudo mount -o loop bionic.img /mnt/bionic<br>sudo cp -a linux-rootfs/. /mnt/bionic/.<br>sudo umount /mnt/bionic<br>sudo chmod 666 bionic.img<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x bionic.sh<br>sudo ./bionic.sh<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589">内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</a></li><li><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html">debootstrap 制作根文件系统</a></li><li><a href="https://blog.51cto.com/u_13731941/5399257">使用 debootstrap 制作 ARM64 rootfs.cpio</a></li></ul><h2 id="创建-tap0-虚拟网卡">3. 创建 tap0 虚拟网卡</h2><p>宿主机上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br>sudo ip tuntap add dev tap0 mode tap<br>sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev tap0 up<br>sudo ip address add dev tap0 192.168.2.128/24<br>ifconfig<br></code></pre></td></tr></table></figure><p>宿主机需要为虚拟机开启IP数据包转发，即在192.168.2.*网段转发数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward   <span class="hljs-comment">#可能sudo也会权限不够，在su以后执行即可</span><br>iptables -t nat -A POSTROUTING -j MASQUERADE<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607">Linux 内核调试 七：qemu网络配置</a></li><li><a href="https://www.shuzhiduo.com/A/xl56Dmq0zr/">在qemu-kvm配置桥接网络</a></li></ul><h2 id="启动内核并调试">4. 启动内核并调试</h2><h3 id="依赖安装">依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu qemu-system qemu-kvm<br></code></pre></td></tr></table></figure><h3 id="qemu启动内核并挂载文件系统调试">qemu启动内核并挂载文件系统调试</h3><p>下方两个命令都行，第一个报warning，第二个file=后面要使用绝对路径。</p><p>当文件系统是<code>uos-v20-1054(eagle/1054)</code>时，将下方<code>bionic</code>替换为<code>eagle-1054</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-m 2048 \<br>-kernel ~/code/linux/arch/x86/boot/bzImage \<br>-hda ~/code/tmp/bionic.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> \<br>-nographic \<br>-net nic -net tap,ifname=tap0,script=no,downscript=no \<br>-s -S<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-m 2048 \<br>-kernel ~/code/linux/arch/x86/boot/bzImage \<br>-drive format=raw,file=/home/wujing/code/tmp/bionic.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> \<br>-nographic \<br>-net nic -net tap,ifname=tap0,script=no,downscript=no \<br>-s -S<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/100021609">Linux aarch64 编译 &amp; qemu 搭建实验平台 initrd initramfs</a></li></ul><h3 id="加载内核调试工具">加载内核调试工具</h3><p>然后切换到内核源码目录，启动 gdb，不过在启动之前，请向 ~/code/linux/.gdbinit 添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add-auto-load-safe-path ./scripts/gdb/vmlinux-gdb.py&quot;</span> &gt;&gt; .gdbinit<br></code></pre></td></tr></table></figure><p>加载内核调试工具，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>c<br></code></pre></td></tr></table></figure><p>来连接到虚拟机上的 gdb 服务。</p><p>到这里，你就可以像调试普通程序一样调试 Linux 内核了。Linux 的内核入口函数是位于 init/main.c 中的 start_kernel ，在这里完成各种内核数据结构的初始化。</p><h2 id="虚拟机中配置网络">5. 虚拟机中配置网络</h2><p>输入用户密码登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>假设网卡名为<code>enp0s3</code>。</p><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ip addr add 192.168.2.129/24 dev enp0s3<br>ip addr<br>sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> enp0s3 up<br>ping 192.168.2.128 <span class="hljs-comment"># 192.168.2.128为宿主机虚拟网卡tap0地址，可以ping通</span><br></code></pre></td></tr></table></figure><p>此刻在宿主机上<code>ping 192.168.2.129</code>发现也能ping通了，但是此时，虚拟机还不能上外网，因为虚拟机缺少网关。</p><p>现在把虚拟机的tap0的地址，192.168.2.128，设置为虚拟机的网关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo route add default gw 192.168.2.128<br></code></pre></td></tr></table></figure><p>这样，也可以ping通外网了，比如<code>ping 10.20.52.86</code>，<code>10.20.52.86</code>是宿主机真实网卡<code>ip</code>。</p><p>但是<code>ping www.baidu.com</code>却不行，因为缺少DNS服务器！</p><p>查看宿主机<code>/etc/resolv.conf</code>内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text"># Generated by NetworkManager<br>nameserver 10.20.0.10<br></code></pre></td></tr></table></figure><p>现在就把<code>10.20.0.10</code>指定为虚拟机的DNS服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nameserver 10.20.0.10&quot;</span> &gt;&gt; /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>写入文件之后，DNS立即生效了。现在，虚拟机既能上外网，又能与宿主机通信了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">root@wujing-PC:# ping baidu.com<br>PING baidu.com (110.242.68.66) 56(84) bytes of data.<br>64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=1 ttl=52 time=27.2 ms<br></code></pre></td></tr></table></figure><p>现在可以使用apt安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br></code></pre></td></tr></table></figure><h2 id="虚拟机挂载nfs网络文件系统">6. 虚拟机挂载NFS网络文件系统</h2><p>在宿主机上安装 NFS 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nfs-kernel-server<br><span class="hljs-built_in">id</span><br>sudo su<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/home/wujing/code 192.168.2.0/24(rw,sync,all_squash,anonuid=1000,anongid=1000,no_subtree_check)&quot;</span> &gt;&gt; /etc/exports <span class="hljs-comment"># 创建共享目录</span><br>exportfs -arv <span class="hljs-comment"># 更新exports配置</span><br>showmount -e <span class="hljs-comment"># 查看NFS共享情况</span><br></code></pre></td></tr></table></figure><p>在虚拟机上安装 NFS 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nfs-common<br>showmount -e 192.168.2.128 <span class="hljs-comment"># 查看NFS服务器共享目录</span><br>sudo mount -t nfs 192.168.2.128:/home/wujing/code /home/wujing/code <span class="hljs-comment"># 临时挂载 NFS 文件系统</span><br></code></pre></td></tr></table></figure><p>临时挂载 NFS 文件系统输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">[ 7990.116497] NFS4: Couldn&#x27;t follow remote path<br>[ 7990.118433] NFS4: Couldn&#x27;t follow remote path<br></code></pre></td></tr></table></figure><p>上述输出仅为warning，请忽略。</p><ul><li><a href="https://www.cnblogs.com/lizhuming/p/13946107.html">挂载NFS网络文件系统教程</a></li><li><a href="https://blog.51cto.com/atong/1343950">NFS原理详解</a></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.jb51.net/article/97216.htm">详解QEMU网络配置的方法</a></li><li><a href="https://js.aizhan.com/server/jishu/6594.html">QEMU的网络配置方法解析</a></li><li><a href="https://www.shuzhiduo.com/A/xl56Dmq0zr/">在qemu-kvm配置桥接网络</a></li><li><a href="https://blog.csdn.net/m0_43406494/article/details/124827927">QEMU--用户模式网络</a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/">QEMU 网络配置</a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607">Linux 内核调试 七：qemu网络配置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adm64下基于qemu用户网络、debootstrap 调试内核、根文件系统</title>
    <link href="/linux/kernel/qemu/adm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E7%94%A8%E6%88%B7%E7%BD%91%E7%BB%9C%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/linux/kernel/qemu/adm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E7%94%A8%E6%88%B7%E7%BD%91%E7%BB%9C%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu用户网络debootstrap-调试内核根文件系统">amd64下基于qemu用户网络、debootstrap 调试内核、根文件系统</h1><h2 id="编译调试版linux内核">1. 编译调试版linux内核</h2><h3 id="下载源码">下载源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/torvalds/linux.git<br></code></pre></td></tr></table></figure><h3 id="安装编译依赖">安装编译依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install build-essential libncurses-dev bison flex libssl-dev libelf-dev<br></code></pre></td></tr></table></figure><h3 id="内核编译选项配置">内核编译选项配置</h3><p>进入源码目录，配置编译选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br>git checkout -b v5.10-rc7 v5.10-rc7<br>make menuconfig<br></code></pre></td></tr></table></figure><p>比较重要的配置项有：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Kernel hacking  ---&gt;<br>    [*] Kernel debugging<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts for kernel debugging<br></code></pre></td></tr></table></figure><p>一定要打开。 还有下面的选项会导致打断点失败，一定要关闭：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Processor type and features ----&gt;<br>    [] Randomize the address of the kernel image (KASLR)<br></code></pre></td></tr></table></figure><p>保存并退出 menuconfig，开始编译之旅：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) / 2`<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li></ul><h2 id="debootstrap制作根文件系统">2. debootstrap制作根文件系统</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install debian-archive-keyring<br>sudo apt-get install  qemu qemu-user-static  binfmt-support debootstrap<br></code></pre></td></tr></table></figure><h3 id="制作文件系统">制作文件系统</h3><p>使用也十分简单，命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span> [平台] [发行版本代号] [构建目录] [镜像地址]<br></code></pre></td></tr></table></figure><p>以在Deepin 20.7 amd64上构建ubuntu18(bionic) amd64为例，预装ifupdown是因为下方配置网络的时候需要用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span>=amd64 --include=ifupdown bionic linux-rootfs http://mirrors.aliyun.com/ubuntu/<br></code></pre></td></tr></table></figure><p>arm64下构建adm64需要执行下方命令，当前可以省略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -a /usr/bin/qemu-x86_64-static linux-rootfs/usr/bin/qemu-x86_64-static<br></code></pre></td></tr></table></figure><h3 id="进入文件系统">进入文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/ywhs/linux-software/master/ch-mount.sh<br><span class="hljs-built_in">chmod</span> 777 ch-mount.sh<br><span class="hljs-comment"># 执行脚本后，没有报错会进入文件系统，交叉编译时显示 I have no name ，这是因为还没有初始化。</span><br>./ch-mount.sh -m linux-rootfs/<br><br>debootstrap/debootstrap --second-stage <span class="hljs-comment"># 交叉编译时执行第二步，初始化文件系统，会把一个系统的基础包初始化</span><br><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs/<br>./ch-mount.sh -m linux-rootfs/<br><span class="hljs-comment"># 再次进入时，执行如下命令即可</span><br><span class="hljs-comment"># sudo chroot linux-rootfs</span><br></code></pre></td></tr></table></figure><h3 id="定制文件系统">定制文件系统</h3><h4 id="配置网络">配置网络</h4><p>要确保进入文件系统后有网络，可以将 /etc/resolv.conf 文件拷贝到 linux-rootfs/etc/resolv.conf。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/resolv.conf linux-rootfs/etc/resolv.conf<br></code></pre></td></tr></table></figure><h4 id="更换国内镜像源">更换国内镜像源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若是遇到没法拉取 https 源的状况，请先使用 http 源并安装</span><br>apt install apt-transport-https<br><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-comment"># 把文件内容所有替换为对应阿里源，参见：https://developer.aliyun.com/mirror/?spm=a2c6h.12873639.J_5404914170.29.2feb6235F6x30d</span><br>vim /etc/apt/source.list<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list<br></code></pre></td></tr></table></figure><h4 id="配置-root-用户密码">配置 root 用户密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><h4 id="建立一个普通用户">建立一个普通用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这两个环境变量能够自行修改</span><br>USER=wujing<br>HOST=wujing<br>useradd -G sudo -m -s /bin/bash <span class="hljs-variable">$USER</span><br>passwd <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><h4 id="设置主机名和以太网">设置主机名和以太网</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOST</span> &gt; /etc/hostname<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;127.0.0.1 localhost.localdomain localhost&quot;</span> &gt; /etc/hosts<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;127.0.0.1 <span class="hljs-variable">$HOST</span>&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;auto enp0s3&quot;</span> &gt;&gt; /etc/network/interfaces<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;iface enp0s3 inet dhcp&quot;</span> &gt;&gt; /etc/network/interfaces<br></code></pre></td></tr></table></figure><h3 id="退出文件系统">退出文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs<br></code></pre></td></tr></table></figure><h3 id="制作文件系统镜像initrd">制作文件系统镜像(initrd)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=bionic.img bs=1M seek=2047 count=1<br>sudo mkfs.ext4 -F bionic.img<br>sudo <span class="hljs-built_in">mkdir</span> -p /mnt/bionic<br>sudo mount -o loop bionic.img /mnt/bionic<br>sudo <span class="hljs-built_in">cp</span> -a linux-rootfs/. /mnt/bionic/.<br>sudo umount /mnt/bionic<br>sudo <span class="hljs-built_in">chmod</span> 666 bionic.img<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589">内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</a></li><li><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html">debootstrap 制作根文件系统</a></li><li><a href="https://blog.51cto.com/u_13731941/5399257">使用 debootstrap 制作 ARM64 rootfs.cpio</a></li></ul><h2 id="启动内核并调试">3. 启动内核并调试</h2><h3 id="依赖安装">依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu qemu-system qemu-kvm<br></code></pre></td></tr></table></figure><h3 id="qemu启动内核并挂载文件系统调试">qemu启动内核并挂载文件系统调试</h3><p>下方两个命令都行，第一个报warning，第二个file=后面要使用绝对路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -hda ~/code/tmp/bionic.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -drive format=raw,file=/home/wujing/code/tmp/bionic.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/100021609">Linux aarch64 编译 &amp; qemu 搭建实验平台 initrd initramfs</a></li></ul><h3 id="加载内核调试工具">加载内核调试工具</h3><p>然后切换到内核源码目录，启动 gdb，不过在启动之前，请向 ~/code/linux/.gdbinit 添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add-auto-load-safe-path ./scripts/gdb/vmlinux-gdb.py&quot;</span> &gt;&gt; .gdbinit<br></code></pre></td></tr></table></figure><p>加载内核调试工具，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>c<br></code></pre></td></tr></table></figure><p>来连接到虚拟机上的 gdb 服务。</p><p>到这里，你就可以像调试普通程序一样调试 Linux 内核了。Linux 的内核入口函数是位于 init/main.c 中的 start_kernel ，在这里完成各种内核数据结构的初始化。</p><h2 id="网络修复">4. 网络修复</h2><p>输入root密码登录后，查看IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>假设网卡名为enp0s3。</p><p>假设上方设置主机名和以太网中网卡名为eth0。</p><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;s/eth0/enp0s3/g&quot;</span> /etc/network/interfaces<br>ifup enp0s3<br></code></pre></td></tr></table></figure><p>现在可以使用apt安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br></code></pre></td></tr></table></figure><p>qemu默认使用的用户模式网络非常适合允许访问网络资源，包括 Internet。 特别是，它允许从guest到主机的 ssh流量。 但是，默认情况下，它充当防火墙，不允许任何传入流量。 它也不支持 TCP 和 UDP 以外的协议 - 例如，ping 和其他 ICMP 程序将不起作用。</p><ul><li><a href="https://blog.csdn.net/m0_43406494/article/details/124827927">QEMU--用户模式网络</a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/">QEMU 网络配置</a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607">Linux 内核调试 七：qemu网络配置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adm64下基于qemu调试uos-v20-1054</title>
    <link href="/linux/kernel/qemu/adm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1054/"/>
    <url>/linux/kernel/qemu/adm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1054/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu调试uos-v20-1054">amd64下基于qemu调试uos-v20-1054</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu-system qemu-kvm qemu-utils qemu-efi ovmf<br></code></pre></td></tr></table></figure><h2 id="制作启动盘">制作启动盘</h2><h3 id="下载镜像">下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdimage.uniontech.com/daily-iso/1050-update4/daily-stable/20221231/uniontechos-desktop-20-professional-1050-update4-amd64.iso<br></code></pre></td></tr></table></figure><h3 id="创建虚拟盘">创建虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/code/tmp/1054<br><span class="hljs-built_in">cd</span> ~/code/tmp/1054<br>qemu-img create -f qcow2 1054.img 64G<br></code></pre></td></tr></table></figure><h3 id="安装镜像到虚拟盘">安装镜像到虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 4 \<br>-enable-kvm \<br>-cpu host \<br>-m 4G \<br>-hda ~/code/tmp/1054/1054.img \<br>-cdrom ~/Downloads/iso/uniontechos-desktop-20-professional-1050-update4-amd64.iso<br></code></pre></td></tr></table></figure><p>如需调试 <code>bios</code>，添加下方参数即可，启动时也需要附带此参数： <code>-bios /usr/share/ovmf/OVMF.fd</code></p><h2 id="启动虚拟机">启动虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 2 \<br>-enable-kvm \<br>-cpu host \<br>-m 2G \<br>-hda ~/code/tmp/1054/1054.img \<br>-net user,hostfwd=tcp::2222-:22 -net nic<br></code></pre></td></tr></table></figure><p>启动时，我们做一下端口转发，我们这里把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><h2 id="调试虚拟机">调试虚拟机</h2><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt purge linux-headers-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg<br>sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-5402 linux-image-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-5402 linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg=4.19.90-5402<br></code></pre></td></tr></table></figure><p>在虚拟机中执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1054<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1054<br>scp /usr/lib/debug/lib/modules/4.19.0-amd64-desktop/vmlinux wujing@10.20.52.86:~/code/tmp/1054<br></code></pre></td></tr></table></figure><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 2 \<br>-enable-kvm \<br>-cpu host \<br>-m 2G \<br>-kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>-initrd ~/code/tmp/1054/initrd.img-4.19.0-amd64-desktop \<br>-hda ~/code/tmp/1054/1054.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>-net user,hostfwd=tcp::2222-:22 -net nic \<br>-S -s<br></code></pre></td></tr></table></figure><p>上方 <code>-append</code>传递给内核的参数可以通过在启动时，访问 GRUB 启动菜单，按 <code>e</code>键编辑引导参数可以看到参数，也可虚拟机启动后通过 <code>cat /proc/cmdline</code>查看。</p><p>在 <code>~/code/tmp/1054</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>uos-v20-1054内核第一个断点必须设置为硬件断点，否则gdb输出如下Warning且无法捕捉断点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Warning:<br>Cannot insert breakpoint 1.<br>Cannot access memory at address 0xffffffff824bbb8d<br><br>Command aborted.<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     init/main.c: 没有那个文件或目录. <br></code></pre></td></tr></table></figure><p>很明显找不到源码，解决方案有两种：</p><ol type="1"><li><code>gdb</code>中使用 <code>dir</code>命令或 <code>set substitute-path</code>命令指定和修改搜素源码文件的路径</li><li>基于源码编译出内核，在源码目录执行 <code>gdb vmlinux</code>命令。</li></ol><p>下文采用方案2：</p><p>下载1054-2源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/x86-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;x86-kernel/.git/hooks/&quot;</span><br>git checkout -b 1054-2 499e91c36f62c1790063cabdacff94fd8220f145<br></code></pre></td></tr></table></figure><p>内核编译选项配置参考：<a href="https://github.com/realwujing/linux-learning/blob/main/debug/kernel/qemu/%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.md#%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE">内核编译选项配置</a></p><p>内核编译完成后启动虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 2 \<br>-enable-kvm \<br>-cpu host \<br>-m 2G \<br>-kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>-initrd ~/code/tmp/1054/initrd.img-4.19.0-amd64-desktop \<br>-hda ~/code/tmp/1054/1054.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>-net user,hostfwd=tcp::2222-:22 -net nic \<br>-S -s<br></code></pre></td></tr></table></figure><p>在 <code>~/code/x86-kernel</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     &#123;  <br></code></pre></td></tr></table></figure><p>可以看到断点正常命中，继续敲 <code>c</code>命令可以看到虚拟机正常启动到登录界面。</p><h2 id="more">More</h2><ul><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448">使用Qemu在Mac上安装虚拟机</a></li><li><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893">Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</a></li><li><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于per_cpu变量current_task获取task_struct</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eper_cpu%E5%8F%98%E9%87%8Fcurrent_task%E8%8E%B7%E5%8F%96task_struct/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eper_cpu%E5%8F%98%E9%87%8Fcurrent_task%E8%8E%B7%E5%8F%96task_struct/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于per_cpu变量current_task获取task_struct">amd64下基于per_cpu变量current_task获取task_struct</h1><ol type="1"><li><p>获取current_task地址</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nm vmlinux | grep current_task<br></code></pre></td></tr></table></figure></p><p><!-- ![current_task.png](images/current_task.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task.png" alt="current_task" /></p></li><li><p>获取task_struct指针</p><p>获取当前正在运行的cpu所属线程：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">info threads<br></code></pre></td></tr></table></figure></p><p><!-- ![current_task2.png](images/current_task2.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task2.png" alt="current_task2" /></p><p>从上图看到有8个cpu，可以改动qemu虚拟化时<code>-smp 8</code>参数调整cpu个数。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[<span class="hljs-number">4</span>] + <span class="hljs-number">0</span>x15cc0))<br></code></pre></td></tr></table></figure></p><p><code>__per_cpu_offset[4]</code>中的下标<code>4</code>需要与<code>info threads</code>对应上。</p><p><code>0x15cc0</code>为 <code>nm vmlinux | grep current_task</code>获取的<code>current_task</code>地址。</p></li><li><p>获取进程号</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">p ((struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[<span class="hljs-number">4</span>] + <span class="hljs-number">0</span>x15cc0)))-&gt;pid<br></code></pre></td></tr></table></figure></p></li><li><p>获取进程名</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">p ((struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[<span class="hljs-number">4</span>] + <span class="hljs-number">0</span>x15cc0)))-&gt;<span class="hljs-built_in">comm</span><br></code></pre></td></tr></table></figure></p><p><!-- ![current_task3.png](images/current_task3.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task3.png" alt="current_task3" /></p><p>如果上述<code>__per_cpu_offset[4]</code>下标不对，获取的都是内核0号idle进程。</p><p><!-- ![current_task4.png](images/current_task4.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task4.png" alt="current_task4" /></p></li></ol><h2 id="more">More</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/340985476">一张图看懂linux内核中percpu变量的实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/296750228">linux 进程内核栈</a></li><li><a href="https://blog.csdn.net/weixin_38371073/article/details/114376410">linux 内核task_struct 源码分析与解析(整合配图）</a></li><li><a href="https://github.com/realwujing/linux-learning/blob/main/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-amd64.md">amd64下基于qemu调试uos-v20-1060-amd64</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于qemu调试uos-v20-1060-amd64</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-amd64/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-amd64/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu调试uos-v20-1060-amd64">amd64下基于qemu调试uos-v20-1060-amd64</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-system-arm qemu-efi qemu-efi-aarch64 virtinst virt-manager virt-viewer<br></code></pre></td></tr></table></figure><h2 id="制作启动盘">制作启动盘</h2><h3 id="下载镜像">下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230307/uniontechos-desktop-20-professional-1060-amd64.iso<br></code></pre></td></tr></table></figure><h3 id="安装镜像到虚拟盘">安装镜像到虚拟盘</h3><!-- ![qemu-system-x86_64](images/qemu-system-x86_64.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/qemu-system-x86_64.png" alt="" /><figcaption>qemu-system-x86_64</figcaption></figure><p>直接利用virt-manager图形界面安装镜像更快。</p><p>添加仓库源，仓库源位于:<a href="https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230307/iso_build_source_professional_amd64.txt">iso_build_source_professional_amd64.txt</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">deb http://pools.uniontech.com/desktop-professional eagle main contrib non-free<br>deb http://pools.uniontech.com/ppa/dde-eagle eagle/1060 main contrib non-free<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt purge linux-headers-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg<br>sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6004 linux-image-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6004 linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg=4.19.90-6004<br></code></pre></td></tr></table></figure><p>在虚拟机中执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /usr/lib/debug/lib/modules/4.19.0-amd64-desktop/vmlinux wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /boot/config-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br></code></pre></td></tr></table></figure><p>上述操作执行完后关闭此虚拟机。</p><h2 id="调试虚拟机">调试虚拟机</h2><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo qemu-system-x86_64 \<br>    -accel kvm \<br>    -cpu host \<br>    -m 4G \<br>    -smp 8 \<br>    -kernel /home/wujing/code/qemu/amd64/1060/vmlinuz-4.19.0-amd64-desktop \<br>    -initrd /home/wujing/code/qemu/amd64/1060/initrd.img-4.19.0-amd64-desktop \<br>    -hda /media/wujing/data/Downloads/kvm/uniontechos-desktop-20-professional-1060-amd64.qcow2 \<br>    -append <span class="hljs-string">&quot;root=/dev/sda5 ro video=efifb:nobgrt splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>    -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>    -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>    -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0 \<br>    -device qemu-xhci -device usb-kbd -device usb-tablet \<br>    -S -s<br></code></pre></td></tr></table></figure><p>上方 <code>-append</code>传递给内核的参数可以通过在启动时，访问 GRUB 启动菜单，按 <code>e</code>键编辑引导参数可以看到参数，也可虚拟机启动后通过 <code>cat /proc/cmdline</code>查看。</p><p>启动时，我们做一下端口转发，我们这里把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><p>在宿主机上下载1060 4.19.0-amd64-desktop #6004对应内核源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/x86-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;x86-kernel/.git/hooks/&quot;</span><br>git checkout -b 6004 e61b2ad353ea<br></code></pre></td></tr></table></figure><p>复制vmlinux到源码目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/code/qemu/amd64/1060/vmlinux /home/wujing/code/x86-kernel<br></code></pre></td></tr></table></figure><p>在 <code>/home/wujing/code/x86-kernel</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">aarch64-linux-gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>uos-v20-1060内核第一个断点必须设置为硬件断点，否则gdb输出如下Warning且无法捕捉断点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Warning:<br>Cannot insert breakpoint 1.<br>Cannot access memory at address 0xffffffff824bbb8d<br><br>Command aborted.<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     &#123;  <br></code></pre></td></tr></table></figure><p>可以看到断点正常命中，继续敲 <code>c</code>命令可以看到虚拟机正常启动到登录界面。</p><h3 id="修复内核bug">修复内核bug</h3><p>拷贝1060上的<code>config-4.19.0-amd64-desktop</code>到<code>/home/wujing/code/x86-kernel</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/code/qemu/amd64/1060/config-4.19.0-amd64-desktop .config<br></code></pre></td></tr></table></figure><p>加载config配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make menuconfig<br></code></pre></td></tr></table></figure><p>选择load → save → exit。</p><p>自定义<code>uname -a</code> 输出的 <code>#6004</code>编译次数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 6060 &gt; .version<br></code></pre></td></tr></table></figure><p>方式一：</p><p>在宿主机上编译内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j16<br></code></pre></td></tr></table></figure><p>此种方式方式可以加快调试内核bug，此时更改<code>-kernel /home/wujing/code/qemu/amd64/1060/vmlinuz-4.19.0-amd64-desktop</code>为<code>-kernel /home/wujing/code/x86-kernel/arch/x86/boot/bzImage</code>选项即可，具体命令如下：</p><p>如果是在虚拟机上编译，需要将将虚拟机上的<code>bzImage</code>等复制到宿主机对应目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp ~/code/x86-kernel/arch/x86/boot/bzImage wujing@10.20.42.43:~/code/x86-kernel/arch/x86/boot/<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp ~/code/x86-kernel/vmlinux wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp ~/code/x86-kernel/vmlinux wujing@10.20.42.43:~/code/x86-kernel<br>scp /boot/config-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br></code></pre></td></tr></table></figure><p>宿主机上执行qemu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo qemu-system-x86_64 \<br>    -accel kvm \<br>    -cpu host \<br>    -m 4G \<br>    -smp 8 \<br>    -kernel /home/wujing/code/x86-kernel/arch/x86/boot/bzImage \<br>    -initrd /home/wujing/code/qemu/amd64/1060/initrd.img-4.19.0-amd64-desktop \<br>    -hda /media/wujing/data/Downloads/kvm/uniontechos-desktop-20-professional-1060-amd64.qcow2 \<br>    -append <span class="hljs-string">&quot;root=/dev/sda5 ro video=efifb:nobgrt splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>    -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>    -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>    -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0 \<br>    -device qemu-xhci -device usb-kbd -device usb-tablet \<br>    -S -s<br></code></pre></td></tr></table></figure><p>如果bug涉及到某个内核驱动模块，上述编译建议在虚拟机上执行，方便以下命令执行。</p><p>安装模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make modules_install<br></code></pre></td></tr></table></figure><p>安装内核:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make install<br></code></pre></td></tr></table></figure><p>方式二：</p><p>建议通过下方将内核制作成deb包，然后在虚拟机上安装：</p><p>注释掉~/code/x86-kernel/scripts/package/Makefile中第83-84行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">deepin-apigail-generate -d=./ -o=./debian/api-tmp.json<br>deepin-apigail-compare -src=./debian/api.json -dst=./debian/api-tmp.json<br></code></pre></td></tr></table></figure><p>制作内核deb包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make bindeb-pkg -j16<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://cdn.kernel.org/pub/linux/kernel/people/will/docs/qemu/qemu-arm64-howto.html">Running a full system stack under QEMUarm64</a></li><li><a href="https://unix.stackexchange.com/questions/276480/booting-a-raw-disk-image-in-qemu">Booting a raw disk image in QEMU</a></li><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448">使用Qemu在Mac上安装虚拟机</a></li><li><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893">Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</a></li><li><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arm64下基于qemu调试uos-v20-1060-arm64</title>
    <link href="/linux/kernel/qemu/arm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-arm64/"/>
    <url>/linux/kernel/qemu/arm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-arm64/</url>
    
    <content type="html"><![CDATA[<h1 id="arm64下基于qemu调试uos-v20-1060-arm64">arm64下基于qemu调试uos-v20-1060-arm64</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-system-arm qemu-efi qemu-efi-aarch64 virtinst virt-manager virt-viewer<br></code></pre></td></tr></table></figure><!-- ![qemu-system-aarch64](images/qemu-system-aarch64.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/qemu-system-aarch64.png" alt="" /><figcaption>qemu-system-aarch64</figcaption></figure><h2 id="制作启动盘">制作启动盘</h2><h3 id="下载镜像">下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230316-stable/uniontechos-desktop-20-professional-1060-arm64.iso<br></code></pre></td></tr></table></figure><h3 id="创建虚拟盘">创建虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/code/qemu/arm64/<br><span class="hljs-built_in">cd</span> ~/code/qemu/arm64/<br>qemu-img create -f qcow2 1060.img 64G<br></code></pre></td></tr></table></figure><h3 id="安装镜像到虚拟盘">安装镜像到虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -drive <span class="hljs-keyword">if</span>=virtio,format=qcow2,file=/home/uos/code/qemu/arm64/1060.img \<br>      -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>      -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>      -device scsi-cd,drive=<span class="hljs-built_in">cd</span>  \<br>      -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0  \<br>      -device qemu-xhci -device usb-kbd -device usb-tablet  \<br>      -drive <span class="hljs-keyword">if</span>=none,<span class="hljs-built_in">id</span>=<span class="hljs-built_in">cd</span>,format=raw,media=cdrom,<span class="hljs-built_in">readonly</span>,file=/home/uos/Downloads/iso/uniontechos-desktop-20-professional-1060-arm64.iso \<br>      -net none<br></code></pre></td></tr></table></figure><h2 id="启动虚拟机">启动虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -drive <span class="hljs-keyword">if</span>=virtio,format=qcow2,file=/home/uos/code/qemu/arm64/1060.img \<br>      -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>      -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>      -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0  \<br>      -device qemu-xhci -device usb-kbd -device usb-tablet<br></code></pre></td></tr></table></figure><p>启动时，我们做一下端口转发，我们这里把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><h2 id="调试虚拟机">调试虚拟机</h2><p>添加仓库源，仓库源位于:<a href="https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230316-stable/report/iso-build-source/sources-list-aarch64.txt">sources-list-aarch64.txt</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">deb http://pools.uniontech.com/desktop-professional eagle main contrib non-free<br>deb http://pools.uniontech.com/ppa/dde-eagle eagle/1060 main contrib non-free<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt purge linux-headers-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg<br>sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6006 linux-image-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6006 linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg=4.19.90-6006<br></code></pre></td></tr></table></figure><p>在虚拟机中执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1060<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1060<br>scp /usr/lib/debug/lib/modules/4.19.0-amd64-desktop/vmlinux wujing@10.20.52.86:~/code/tmp/1060<br></code></pre></td></tr></table></figure><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>      -initrd ~/code/tmp/1060/initrd.img-4.19.0-amd64-desktop \<br>      -hda ~/code/tmp/1060/1060.img \<br>      -append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>      -net user,hostfwd=tcp::2222-:22 -net nic \<br>      -S -s<br></code></pre></td></tr></table></figure><p>上方 <code>-append</code>传递给内核的参数可以通过在启动时，访问 GRUB 启动菜单，按 <code>e</code>键编辑引导参数可以看到参数，也可虚拟机启动后通过 <code>cat /proc/cmdline</code>查看。</p><p>在 <code>~/code/tmp/1060</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">aarch64-linux-gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>uos-v20-1060内核第一个断点必须设置为硬件断点，否则gdb输出如下Warning且无法捕捉断点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Warning:<br>Cannot insert breakpoint 1.<br>Cannot access memory at address 0xffffffff824bbb8d<br><br>Command aborted.<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     init/main.c: 没有那个文件或目录. <br></code></pre></td></tr></table></figure><p>很明显找不到源码，解决方案有两种：</p><ol type="1"><li><code>gdb</code>中使用 <code>dir</code>命令或 <code>set substitute-path</code>命令指定和修改搜素源码文件的路径</li><li>基于源码编译出内核，在源码目录执行 <code>aarch64-linux-gdb vmlinux</code>命令。</li></ol><p>下文采用方案2：</p><p>下载1060-2源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/arm-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;arm-kernel/.git/hooks/&quot;</span><br>git checkout -b develop/need_merge need_merge<br></code></pre></td></tr></table></figure><p>内核编译选项配置参考：<a href="https://github.com/realwujing/linux-learning/blob/main/debug/kernel/qemu/%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.md#%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE">内核编译选项配置</a></p><p>内核编译完成后启动虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>      -initrd ~/code/tmp/1060/initrd.img-4.19.0-amd64-desktop \<br>      -hda ~/code/tmp/1060/1060.img \<br>      -append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>      -net user,hostfwd=tcp::2222-:22 -net nic \<br>      -S -s<br></code></pre></td></tr></table></figure><p>在 <code>~/code/arm-kernel</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">aarch64-linux-gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     &#123;  <br></code></pre></td></tr></table></figure><p>可以看到断点正常命中，继续敲 <code>c</code>命令可以看到虚拟机正常启动到登录界面。</p><h2 id="more">More</h2><ul><li><a href="https://cdn.kernel.org/pub/linux/kernel/people/will/docs/qemu/qemu-arm64-howto.html">Running a full system stack under QEMUarm64</a></li><li><a href="https://unix.stackexchange.com/questions/276480/booting-a-raw-disk-image-in-qemu">Booting a raw disk image in QEMU</a></li><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448">使用Qemu在Mac上安装虚拟机</a></li><li><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893">Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</a></li><li><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>do_installs</title>
    <link href="/linux/kernel/qemu/do_installs/"/>
    <url>/linux/kernel/qemu/do_installs/</url>
    
    <content type="html"><![CDATA[<h1 id="do_installs函数中每个level都有啥">do_installs()函数中每个level都有啥</h1><p>在Linux内核初始化的第二阶段中，do_installs()函数会按照一定顺序执行多个初始化级别，每个级别都会进行不同的初始化操作。以下是每个级别的主要初始化操作：</p><p>LEVEL_BUILTIN_EARLY: 在这个级别中，内核会注册所有编译进内核镜像的驱动程序，这些驱动程序通常是用于启动引导过程的核心驱动程序，例如存储设备驱动和文件系统驱动。</p><p>LEVEL_EARLY: 在这个级别中，内核会执行一些与系统环境相关的初始化操作，包括处理引导参数和初始化系统时钟。</p><p>LEVEL_PLATFORM_EARLY: 在这个级别中，内核会初始化与硬件平台相关的驱动程序和设备，例如I/O设备、中断控制器和时钟源等。</p><p>LEVEL_ARCH_EARLY: 在这个级别中，内核会初始化与特定CPU架构相关的驱动程序和设备，例如MMU、虚拟内存和异常处理等。</p><p>LEVEL_CPUS: 在这个级别中，内核会初始化多处理器系统的处理器和调度程序，包括中断处理和进程调度。</p><p>LEVEL_PLATFORM: 在这个级别中，内核会初始化与硬件平台相关的高级驱动程序和设备，例如电源管理、温度控制和传感器设备等。</p><p>LEVEL_SECURITY: 在这个级别中，内核会初始化安全相关的子系统，例如SELinux或AppArmor。</p><p>LEVEL_FILESYSTEMS: 在这个级别中，内核会挂载根文件系统和其他文件系统，并注册文件系统驱动程序和相关的VFS操作。</p><p>LEVEL_BLKDEV: 在这个级别中，内核会初始化块设备驱动程序，包括磁盘和闪存设备等。</p><p>LEVEL_NET: 在这个级别中，内核会初始化网络协议栈、网络设备和套接字，为网络服务做准备。</p><p>LEVEL_LAST: 在这个级别中，内核会执行最后的初始化任务，包括启动用户空间进程、启动调度器、启动中断处理程序和完成其他系统初始化。</p><p>以上每个级别都会完成一些特定的初始化操作，以确保内核能够正常工作。不同的系统可能会有不同的级别和初始化操作，具体情况取决于内核配置和系统需求。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>helloworld-initramfs</title>
    <link href="/linux/kernel/qemu/helloworld-initramfs/"/>
    <url>/linux/kernel/qemu/helloworld-initramfs/</url>
    
    <content type="html"><![CDATA[<h1 id="helloworld-initramfs">helloworld initramfs</h1><h2 id="helloworld.c源码">helloworld.c源码</h2><p>做一个最简单的Hello World initramfs，来直观地理解initramfs。</p><p>Hello World的C程序如下，与普通的Hello World相比，加了一行while(1)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-comment">/* 让程序打印完后继续维持在用户态 */</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译helloworld.c程序">编译helloworld.c程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> helloworld<br>gcc -static helloworld.c -o init<br></code></pre></td></tr></table></figure><ul><li><p>-static: On systems that support dynamic linking, this prevents linking with the shared libraries. //不让gcc动态链接shared libraries</p></li><li><p>-o init 当 GRUB 载入 kernel 和 initramfs 后，kernel 会把 initramfs 在内存中展开，然后执行其根目录下的 init ，也就是上面的脚本。以上的脚本会执行 mount 工作，准备好目录结构，然后执行 /sbin/init 转换入 ubuntu 的初始化过程（system-v init ，upstart ， systemd，用 udev 自动创建设备文件等）。</p></li></ul><h2 id="打包initramfs文件">打包initramfs文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> tmp<br><span class="hljs-built_in">cp</span> init tmp<br><span class="hljs-built_in">cd</span> tmp<br>find . | cpio -o -H newc | gzip &gt; ../helloworld-initramfs.cpio.gz<br></code></pre></td></tr></table></figure><h2 id="在qemu中启动编译好的内核把helloworld-initramfs.cpio.gz指定为initrd">在qemu中启动编译好的内核，把helloworld-initramfs.cpio.gz指定为initrd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -kernel ~/code/linux/arch/x86/boot/bzImage -initrd ~/code/linux-learning/debug/helloworld/helloworld-initramfs.cpio.gz -append <span class="hljs-string">&quot;console=ttyS0&quot;</span> -nographic<br></code></pre></td></tr></table></figure><p>系统能成功启动到输出"Hello World!"，并且在用户态停住。结合前文“在qemu环境中用gdb调试Linux内核”，可以看到qemu虚机中运行的Linux系统已经成功挂载了initramfs, 在console日志中也能看到“Unpacking initramfs...”。</p><!-- ![helloworld](images/helloworld.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/helloworld.png" alt="" /><figcaption>helloworld</figcaption></figure><ul><li><a href="https://www.cnblogs.com/wipan/p/9269505.html">Initramfs 原理和实践</a></li><li><a href="https://blog.csdn.net/u010444107/article/details/79427542">initramfs的使用方法</a></li><li><a href="https://blog.csdn.net/greatyoulv/article/details/117175103">initramfs的制作和使用</a></li><li><a href="https://blog.csdn.net/u010444107/article/details/79427542">initramfs的使用方法</a></li><li><a href="https://www.cnblogs.com/fengyc/p/6114648.html">基于 debootstrap 和 busybox 构建 mini ubuntu</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux内核调试</title>
    <link href="/linux/kernel/qemu/linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/"/>
    <url>/linux/kernel/qemu/linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-内核调试">linux 内核调试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -kernel ~/code/linux/arch/x86/boot/bzImage -initrd ~/code/busybox-1.35.0/initramfs.cpio.gz -append <span class="hljs-string">&quot;nokaslr console=ttyS0&quot;</span> -nographic<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -hda ~/code/tmp/bionic.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -drive format=raw,file=/home/wujing/code/tmp/trusty.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><ul><li><a href="https://bbs.huaweicloud.com/blogs/348654">利用QEMU+GDB搭建Linux内核调试环境</a></li><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li><li><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589">内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</a></li><li><a href="https://blog.51cto.com/u_13731941/5399257">使用 debootstrap 制作 ARM64 rootfs.cpio</a></li><li><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html">debootstrap 制作根文件系统</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac下基于qemu调试ubuntu-22</title>
    <link href="/linux/kernel/qemu/mac%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95ubuntu-22.04.01/"/>
    <url>/linux/kernel/qemu/mac%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95ubuntu-22.04.01/</url>
    
    <content type="html"><![CDATA[<h1 id="mac下基于qemu调试ubuntu-22.04.01">mac下基于qemu调试ubuntu-22.04.01</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install qemu<br></code></pre></td></tr></table></figure><h2 id="创建磁盘映像">创建磁盘映像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-img create -f qcow2 ubuntu-22.04.1-desktop-amd64.qcow2 20G<br></code></pre></td></tr></table></figure><h2 id="安装-ubuntu">安装 Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>    -machine <span class="hljs-built_in">type</span>=q35,accel=hvf \<br>    -smp 2 \<br>    -hda /Users/wujing/code/qemu/ubuntu-22.04.1-desktop-amd64.qcow2 \<br>    -cdrom /Users/wujing/Downloads/ubuntu-22.04.1-desktop-amd64.iso \<br>    -m 4G \<br>    -vga virtio \<br>    -usb \<br>    -device usb-tablet \<br>    -display default,show-cursor=on<br></code></pre></td></tr></table></figure><h2 id="运行-ubuntu">运行 Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>    -machine <span class="hljs-built_in">type</span>=q35,accel=hvf \<br>    -smp 2 \<br>    -hda /Users/wujing/code/qemu/ubuntu-22.04.1-desktop-amd64.qcow2 \<br>    -m 4G \<br>    -vga virtio \<br>    -usb \<br>    -device usb-tablet \<br>    -display default,show-cursor=on \<br>    -net user,hostfwd=tcp::2222-:22 -net nic<br></code></pre></td></tr></table></figure><p>运行 VM 时，我们不需要挂载 Ubuntu ISO，可以通过省略以下选项将其删除：-cdrom。 增加-net选项把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><h2 id="调试-ubuntu">调试 Ubuntu</h2><p>添加 -dbgsym.ddeb 包 仓库源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://ddebs.ubuntu.com <span class="hljs-subst">$(lsb_release -cs)</span> main restricted universe multiverse</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com <span class="hljs-subst">$(lsb_release -cs)</span>-updates main restricted universe multiverse</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com <span class="hljs-subst">$(lsb_release -cs)</span>-proposed main restricted universe multiverse&quot;</span> | \<br>sudo <span class="hljs-built_in">tee</span> -a /etc/apt/sources.list.d/ddebs.list<br></code></pre></td></tr></table></figure><p>从 Ubuntu 服务器导入调试符号存档签名密钥。在 Ubuntu 18.04 LTS 及更高版本上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install ubuntu-dbgsym-keyring<br></code></pre></td></tr></table></figure><p>在早期版本的 Ubuntu 使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F2EDC64DC5AEE1F6B9C621F0C8CAB6595FDFF622<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=5.19.0-38.39~22.04.1 linux-i<br>mage-$(<span class="hljs-built_in">uname</span> -r)-dbgsym=5.19.0-38.39~22.04.1<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install dpkg-dev<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt <span class="hljs-built_in">source</span> linux-image-$(<span class="hljs-built_in">uname</span> -r)<br></code></pre></td></tr></table></figure><p>复制内核源码到宿主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r linux-signed-hwe-5.19-5.19.0 wujing@192.168.31.9:~/code<br></code></pre></td></tr></table></figure><p>复制带调试符号的内核二进制vmlinux到宿主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp /lib/debug/boot/vmlinux-5.19.0-38-generic wujing@192.168.31.9:~/code/linux-signed-hwe-5.19-5.19.0<br></code></pre></td></tr></table></figure><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>    -machine <span class="hljs-built_in">type</span>=q35,accel=hvf \<br>    -smp 2 \<br>    -hda /Users/wujing/code/qemu/ubuntu-22.04.1-desktop-amd64.qcow2 \<br>    -m 4G \<br>    -vga virtio \<br>    -usb \<br>    -device usb-tablet \<br>    -display default,show-cursor=on \<br>    -net user,hostfwd=tcp::2222-:22 -net nic \<br>    -S -s<br></code></pre></td></tr></table></figure><p>报错如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">qemu-system-x86_64: -s: gdbstub: current accelerator doesn&#x27;t support guest debugging<br></code></pre></td></tr></table></figure><p>看来想在mac上使用hvf作为加速器调试目前还行不通。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>去掉编译内核的优化选项</title>
    <link href="/linux/kernel/qemu/%E5%8E%BB%E6%8E%89%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E7%9A%84%E4%BC%98%E5%8C%96%E9%80%89%E9%A1%B9/"/>
    <url>/linux/kernel/qemu/%E5%8E%BB%E6%8E%89%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E7%9A%84%E4%BC%98%E5%8C%96%E9%80%89%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="去掉编译内核的优化选项">去掉编译内核的优化选项</h1><h2 id="优化级别从--o2-改为--o1">优化级别从 -O2 改为 -O1</h2><pre><code class="hljs">修改内核源代码根目录下的Makefile:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/KBUILD_CFLAGS   += -O2/KBUILD_CFLAGS   += -O1/g&#x27;</span> Makefile<br></code></pre></td></tr></table></figure></code></pre><h2 id="内核调试选项">内核调试选项</h2><pre><code class="hljs"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">Kernel hacking  ---&gt;<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts for kernel debugging<br>        [*] Enable full Section mismatch analysis<br><br>    [*] Kernel debugging<br></code></pre></td></tr></table></figure>对应编译选项如下：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_DEBUG_INFO = y<br>CONFIG_GDB_SCRIPTS = y<br>CONFIG_DEBUG_SECTION_MISMATCH = y<br>CONFIG_DEBUG_KERNEL = y<br></code></pre></td></tr></table></figure>为了支持`CONFIG_DEBUG_SECTION_MISMATCH`特性，还需开启`CONFIG_X86_5LEVEL`特性：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[*] Enable 5-level page tables support<br></code></pre></td></tr></table></figure>对应编译选项如下：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_X86_5LEVEL = y<br></code></pre></td></tr></table></figure></code></pre><h2 id="关闭内核随机地址选项">关闭内核随机地址选项</h2><pre><code class="hljs"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Processor type and features ----&gt;<br>    [] Randomize the address of the kernel image (KASLR)<br></code></pre></td></tr></table></figure>对应编译选项如下：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_RANDOMIZE_BASE = n<br></code></pre></td></tr></table></figure>`make menuconfig`确认上述编译选项后输出如下：![config](https://cdn.jsdelivr.net/gh/realwujing/picture-bed/config.png)</code></pre><h2 id="编译内核">编译内核</h2><pre><code class="hljs"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) \* 2`<br></code></pre></td></tr></table></figure></code></pre><h2 id="more">More</h2><ul><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li><li><a href="http://m.blog.chinaunix.net/uid-21419530-id-5835399.html">去掉编译内核的优化选项</a></li><li><a href="https://blog.csdn.net/nust20/article/details/17720859">去掉编译内核的优化选项</a></li><li><a href="https://www.cnblogs.com/dakewei/p/10756416.html">如何在编译linux内核时不优化内核以便于调试内核?</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/namespace/uts_namespace/README/"/>
    <url>/linux/kernel/namespace/uts_namespace/README/</url>
    
    <content type="html"><![CDATA[<h1 id="uts-namespacenamespace">UTS namespacenamespace</h1>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>namespace</category>
      
      <category>uts_namespace</category>
      
    </categories>
    
    
    <tags>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uts_namespace</title>
    <link href="/linux/kernel/namespace/uts_namespace/uts_namespace/"/>
    <url>/linux/kernel/namespace/uts_namespace/uts_namespace/</url>
    
    <content type="html"><![CDATA[<h1 id="uts_namespace内核实现">uts_namespace内核实现</h1><p>本次调试基于linux v5.10-rc7，具体参加下方链接：</p><ul><li><a href="https://github.com/realwujing/linux-learning/blob/main/debug/kernel/qemu/%E5%9F%BA%E4%BA%8Eqemu%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.md">基于qemu桥接网络、debootstrap 调试内核、根文件系统</a></li></ul><h2 id="断点">断点</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">(gdb) save breakpoints ust_namespace.breakpoint<br>Saved to file &#x27;ust_namespace.breakpoint&#x27;.<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">break fs/exec.c:do_execveat_common<br>break kernel/fork.c:2573<br>break kernel/fork.c:kernel_clone<br>break kernel/fork.c:2456<br>break kernel/fork.c:copy_process<br>break kernel/fork.c:1929<br>break kernel/fork.c:2098<br>break kernel/nsproxy.c:copy_namespaces<br>break kernel/nsproxy.c:162<br>break include/linux/nsproxy.h:109<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ust_namespace.breakpoint<br>i b<br></code></pre></td></tr></table></figure><h2 id="uts_namespace_demo">uts_namespace_demo</h2><p>通过qemu进入系统后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> build<br>./uts_namespace_demo<br></code></pre></td></tr></table></figure><h2 id="命名空间复制">命名空间复制</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">14      breakpoint     keep y   0xffffffff8105ea0d in copy_process at kernel/fork.c:2098<br>retval = copy_namespaces(clone_flags, p);<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">b kernel/nsproxy.c:copy_namespaces <br>Breakpoint 15 at 0xffffffff81084c50: file kernel/nsproxy.c, line 153.<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">copy_namespaces</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags, <span class="hljs-keyword">struct</span> task_struct *tsk)</span>   <span class="hljs-comment">// kernel/nsproxy.c:151</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> *<span class="hljs-title">old_ns</span> =</span> tsk-&gt;nsproxy;  <span class="hljs-comment">// task_struct有namespace相关数据结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_namespace</span> *<span class="hljs-title">user_ns</span> =</span> task_cred_xxx(tsk, user_ns); <span class="hljs-comment">// user_namespace</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> *<span class="hljs-title">new_ns</span>;</span><br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> (likely(!(flags &amp; (CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWIPC |<br>      CLONE_NEWPID | CLONE_NEWNET |<br>      CLONE_NEWCGROUP | CLONE_NEWTIME)))) &#123;         <span class="hljs-comment">// CLONE_NEWUTS符合条件，此处为true</span><br><span class="hljs-keyword">if</span> (likely(old_ns-&gt;time_ns_for_children == old_ns-&gt;time_ns)) &#123;  <span class="hljs-comment">// 此处也为true</span><br>get_nsproxy(old_ns);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">// 此处函数返回</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!ns_capable(user_ns, CAP_SYS_ADMIN))     <span class="hljs-comment">// 根据usernamesapce鉴权</span><br><span class="hljs-keyword">return</span> -EPERM;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">(gdb) b kernel/nsproxy.c:162<br>Breakpoint 16 at 0xffffffff81084c90: file kernel/nsproxy.c, line 163.<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">(gdb) b include/linux/nsproxy.h:109<br>Breakpoint 17 at 0xffffffff81229df2: file ./include/linux/nsproxy.h, line 109.<br></code></pre></td></tr></table></figure><h2 id="nsproxy数据结构">nsproxy数据结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> &#123;</span>    <span class="hljs-comment">// include/linux/nsproxy.h:31</span><br><span class="hljs-type">atomic_t</span> count;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uts_namespace</span> *<span class="hljs-title">uts_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_namespace</span> *<span class="hljs-title">ipc_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mnt_namespace</span> *<span class="hljs-title">mnt_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">pid_ns_for_children</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span>      *<span class="hljs-title">net_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_namespace</span> *<span class="hljs-title">time_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_namespace</span> *<span class="hljs-title">time_ns_for_children</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_namespace</span> *<span class="hljs-title">cgroup_ns</span>;</span><br>&#125;;<br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> <span class="hljs-title">init_nsproxy</span>;</span><br></code></pre></td></tr></table></figure><h2 id="unshare系统调用加入新的namespace">unshare系统调用加入新的namespace</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Called from unshare. Unshare all the namespaces part of nsproxy.</span><br><span class="hljs-comment"> * On success, returns the new nsproxy.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">unshare_nsproxy_namespaces</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> unshare_flags,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> nsproxy **new_nsp, <span class="hljs-keyword">struct</span> cred *new_cred, <span class="hljs-keyword">struct</span> fs_struct *new_fs)</span>  <span class="hljs-comment">// kernel/nsproxy.c:262</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_namespace</span> *<span class="hljs-title">user_ns</span>;</span><br><span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!(unshare_flags &amp; (CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWIPC |<br>       CLONE_NEWNET | CLONE_NEWPID | CLONE_NEWCGROUP |<br>       CLONE_NEWTIME)))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>user_ns = new_cred ? new_cred-&gt;user_ns : current_user_ns();<br><span class="hljs-keyword">if</span> (!ns_capable(user_ns, CAP_SYS_ADMIN))<br><span class="hljs-keyword">return</span> -EPERM;<br><br>*new_nsp = create_new_namespaces(unshare_flags, current, user_ns,<br> new_fs ? new_fs : current-&gt;fs);<br><span class="hljs-keyword">if</span> (IS_ERR(*new_nsp)) &#123;<br>err = PTR_ERR(*new_nsp);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br>out:<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>namespace</category>
      
      <category>uts_namespace</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux教程</title>
    <link href="/linux/linux%E6%95%99%E7%A8%8B/"/>
    <url>/linux/linux%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="linux教程">linux教程</h1><h2 id="手册">手册</h2><ul><li><p><a href="http://c.biancheng.net/linux_tutorial/"><font color=Red>Linux学习教程，Linux入门教程（超详细）</font></a></p></li><li><p><a href="https://www.runoob.com/linux/linux-tutorial.html">Linux教程|菜鸟教程- RUNOOB.COM</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247489122&amp;idx=1&amp;sn=fcdc5f6be0478cd0f6205c304e972645&amp;chksm=f9686496ce1fed80bf5b31bcc6003c6ce0f57e6c3a388c75554778f9927bdbad55d927a77a4a&amp;scene=21#wechat_redirect">Linux面试题100道，看看会多少？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Lk0EM8BUTa3Q4y2d-h86rg">所有文章汇总-截止2021年11月3日</a></p></li><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/"><font color=Red>Debian 参考手册</font></a></p></li><li><p><a href="https://debian-handbook.info/browse/zh-CN/stable/"><font color=Red>Debian 管理员手册</font></a></p></li><li><p><a href="https://www.junmajinlong.com/linux/index/">Linux系列文章</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/oyl3sin3tEODDPq3Spzd5w">Linux最强总结！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uavyYSfpSy4v1ovmZLE1hw">令人拍手叫绝的运维小技巧</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/0kyyki6IrmojiUnzGVlUzA"><font color=Red>Linux基础知识汇总，收藏！</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/rFI56ytk0mmr6hgKJ432qQ"><font color=Red>10个提高生产力的 Linux 命令与技巧，用完直接起飞！</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zUKmA3sh-uzdyThEG6e1qA">Linux基础总结，这一篇就够了</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/OLrN2irwzjCI937iDW4XJg">计算机操作系统知识点总结（相当到位！！）</a></p></li><li><p><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全 | 菜鸟教程 - RUNOOB.COM</a></p></li><li><p><a href="https://www.linuxcool.com/">Linux命令大全(手册)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/RVaE5xBdhAUfMwuiWo2FiQ">Linux 操作必备 150 个命令，速度收藏～</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/7y_0daHyBObsyTwVjJiORg">干货：Linux 文件和目录操作命令</a></p></li><li><p><a href="https://wangchujiang.com/linux-command/hot.html"><font color=Red>Linux命令大全|https://wangchujiang.com/linux-command/hot.html</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/3Fsuv2pTaxrOPUU03Zm9ZA">面试常问的 25+ 个 Linux 命令</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/UN7lbdp6OardlqFUfyY-nQ">汇总了89个系统相关的基本概念！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/s3w1r5BCYAxAq2YQNHaRCw">6个已弃用的Linux命令和您应该使用的替代工具</a></p></li></ul><h2 id="history">history</h2><ul><li><a href="https://ubuntuqa.com/article/698.html">是否可以立即写入.bash_history？</a></li></ul><h2 id="shell">shell</h2><ul><li><a href="https://blog.csdn.net/qq_37164975/article/details/106181500"><font color=Red>#!/bin/bash 和 #!/usr/bin/env bash 的区别</font></a></li><li><a href="https://mp.weixin.qq.com/s/SSC83ut0TfPiF0o5sBcUxQ">「Linux」shell命令以及运行原理和Linux权限详解</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247503952&amp;idx=1&amp;sn=a942522821acdc84013cde9b89664ff3&amp;chksm=f96ba2a4ce1c2bb241da260ed4e93f33dcb72eab0b5135d8b46e985c25e8b45b199f148ef218&amp;mpshare=1&amp;scene=1&amp;srcid=0418Vy2K7AtdrVGYDNAFHATp&amp;sharer_sharetime=1650256598611&amp;sharer_shareid=2dfdf936388dba04865b3e883d5a3225&amp;version=3.1.12.6001&amp;platform=win#rd">Linux基础-shell脚本编程</a></li><li><a href="https://zhuanlan.zhihu.com/p/264346586">一篇教会你写90%的shell脚本 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/xdlmost/article/details/110475880"><font color=Red>shell教程(二) 四种工作模式</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1883601">linux之登录式shell和非登录式shell</a></li><li><a href="https://zhuanlan.zhihu.com/p/415152910">linux之登录式shell和非登录式shell</a></li></ul><h2 id="父子shell">父子shell</h2><ul><li><p><a href="https://blog.csdn.net/NOStandby/article/details/82914930">linux中父shell与子shell（脚本执行的几种方式）_peacewind-CSDN博客</a></p></li><li><p><a href="https://www.linuxidc.com/Linux/2018-09/154321.htm">Linux shell类型，shell父子关系，子shell用法</a></p></li><li><p><a href="https://blog.csdn.net/offer_N/article/details/126406297">Linux Shell中单引号、双引号、反引号的解释</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247498444&amp;idx=1&amp;sn=2150e8461c1d6a40cef8f9fe9d36013e&amp;chksm=f96b8838ce1c012ed600fcd1b4c5964b93f6b061343bc6e3d91bd9f45d0230838e3ce8666e4f&amp;scene=178&amp;cur_album_id=1507350615537025026#rd">你知道shell脚本中$0 $1 $# $@ $* $? $$都是什么意思吗？</a></p></li><li><p><a href="https://blog.csdn.net/wang740209668/article/details/53152596">Linux多命令顺序执行连接符(; || &amp;&amp; |)_Don't lost way-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/yeyuzhuanjia/p/16407968.html">Linux中单引号和双引号的区别</a></p></li></ul><h2 id="上传下载文件">上传下载文件</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/141860859#:~:text=Linux%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%201%20scp%202%20rcp%203%20wget%204,account%20required%20%2Flib64%2Fsecurity%2Fpam_unix.so%20session%20required%20%2Flib64%2Fsecurity%2Fpam_unix.so%209%20SecureCRT">Linux上传下载文件的几种方式 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/jerrygaoling/article/details/115325671">Linux中使用sftp的常用命令</a></li></ul><h2 id="rsync">rsync</h2><ul><li><a href="https://www.cnblogs.com/f-ck-need-u/p/7220009.html#auto_id_0">rsync(一):基础命令和用法(精)</a></li><li><a href="https://blog.51cto.com/u_12922638/2678436"><font color=Red>rsync断点续传</font></a></li><li><a href="https://blog.csdn.net/sunny05296/article/details/103881588">rsync断点续传方式进行本地或远程文件拷贝</a></li><li><a href="https://mp.weixin.qq.com/s/8r0lYjGvARzJt6OdCiwe1Q">rsync+inotify数据实时同步介绍</a></li></ul><h2 id="忽略大小写">忽略大小写</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43833642/article/details/104712175">Linux终端忽略大小写自动补全</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;set completion-ignore-case on&quot;</span> &gt;&gt; ~/.inputrc<br></code></pre></td></tr></table></figure></li></ul><h2 id="python">python</h2><ul><li><a href="https://blog.51cto.com/u_15351425/3727453">linux系统下将python3设置为默认的python</a></li></ul><h2 id="时间">时间</h2><ul><li><a href="https://blog.csdn.net/GGxiaobai/article/details/53504629">linux中通过date命令获取昨天或明天时间的方法_花落花开，春去秋来！-CSDN博客</a></li></ul><h2 id="数组">数组</h2><ul><li><a href="https://blog.csdn.net/weixin_42167759/article/details/80702517">shell脚本——字符串 数组</a></li><li><a href="https://blog.csdn.net/qq_32907195/article/details/110663780">shell 数组遍历的3种方法</a></li></ul><h2 id="test">test</h2><ul><li><a href="https://www.cnblogs.com/tankblog/p/6160808.html">linux应用之test命令详细解析</a></li><li><a href="https://zhuanlan.zhihu.com/p/82112596">shell 中<span class="math inline">\(() ` `，\)</span>{}，$[] $(())，[ ] (( )) [[ ]]作用与区别</a></li><li><a href="http://c.biancheng.net/view/2751.html">Shell [[]]详解：检测某个条件是否成立</a></li><li><a href="https://blog.51cto.com/888888hfer/2166233">使用shell 判断文件夹或文件是否存在</a></li><li><a href="http://c.biancheng.net/view/2742.html">Shell test命令（Shell []）详解，附带所有选项及说明</a></li><li><a href="https://blog.csdn.net/qq_33468857/article/details/104835761">linux shell中的case语句用法</a></li></ul><h2 id="重定向后台运行">重定向、后台运行</h2><ul><li><a href="https://blog.csdn.net/shadow_zed/article/details/102812261">Shell nohup 命令详解_shadow_zed的博客-CSDN博客</a></li><li><a href="https://www.toutiao.com/i7052566294952329765/">你知道2&gt;&amp;1 &gt;/dev/null是什么意思么？</a></li><li><a href="https://www.cnblogs.com/x9mars/p/14964113.html"><font color=Red>linux 2&gt;&amp;1和&amp;的意思</font></a></li><li><a href="https://blog.csdn.net/aboutmn/article/details/87778008">Linux 任务后台运行（总结）</a></li><li><a href="https://juejin.cn/post/6844904007480131591">Linux 编辑启动、停止与重启 jar 包脚本</a></li><li><a href="https://blog.csdn.net/v6543210/article/details/104636198">stdbuf让nohup实时输出日志</a></li><li><a href="https://blog.csdn.net/Tangs_/article/details/88998799">命令行实现单个进度条，或者刷新一行的内容</a></li><li><a href="https://www.toutiao.com/article/7077055246081540646">Linux 标准输入输出、重定向、管道、文件权限、后台启动进程命令</a></li></ul><h2 id="rm">rm</h2><ul><li><a href="https://mp.weixin.qq.com/s/aVQj2Qz0eAQ2pYRCZhKAyg">Linux手误rm可能不需要跑路</a></li></ul><h2 id="正则表达式">正则表达式</h2><ul><li><a href="https://www.runoob.com/regexp/regexp-metachar.html">正则表达式 – 元字符 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://c.runoob.com/front-end/854">正则表达式在线测试 | 菜鸟工具 (runoob.com)</a></li><li><a href="https://blog.csdn.net/sinat_32336967/article/details/94761771"><font color=Red>关于正则表达式中的.<em>，.</em>?，.+?的理解</font></a></li><li><a href="https://blog.csdn.net/qq_34172780/article/details/104954879">正则表达式中的 .<em>和.</em>?的区别</a></li><li><a href="https://www.cnblogs.com/yan888/p/16137904.html">正则表达式和扩展正则表达式</a></li><li><a href="https://www.cnblogs.com/xiaojiu/archive/2013/11/19/3430875.html">C语言中的正则表达式使用</a></li></ul><h2 id="find">find</h2><ul><li><a href="https://www.cnblogs.com/MrLiuZF/p/15196373.html"><font color=Red>Linux下which、whereis、locate、find命令的区别</font></a></li><li><a href="https://mp.weixin.qq.com/s/zSjyZyFaBkS38henxVf9zg">find 命令的 7 种用法</a></li><li><a href="https://blog.csdn.net/whatday/article/details/98471778">linux shell find命令 查找多种文件后缀</a></li><li><a href="https://www.jianshu.com/p/bf9eba9f4e97">Linux copy时排除某文件/目录 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/cupidove/article/details/8767450">linux find grep组合使用</a></li><li><a href="https://www.cnblogs.com/andy0816/p/16969729.html"><font color=Red>find命令详解</font></a></li><li><a href="https://blog.csdn.net/FL63Zv9Zou86950w/article/details/126945089">Linux 中如何获取文件的绝对路径</a></li></ul><h2 id="xargs">xargs</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-xargs.html">Linux xargs 命令</a></li><li><a href="https://ruanyifeng.com/blog/2019/08/xargs-tutorial.html">xargs 命令教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></li><li><a href="https://blog.csdn.net/liumiaocn/article/details/105853141">Linux基础：xargs命令-I选项使用技巧</a></li><li><a href="https://www.cnblogs.com/mirrorlake/p/7366060.html">Linux-命令-xargs</a></li></ul><h2 id="grep-sed-awk">grep sed awk</h2><h3 id="grep">grep</h3><ul><li><a href="https://www.cnblogs.com/randolf/p/10336546.html">三剑客基础详解(grep、sed、awk)</a></li><li><a href="https://blog.csdn.net/m0_50370837/article/details/125068528">Linux中grep详解</a></li><li><a href="https://blog.csdn.net/liubangbo/article/details/80853319">grep -s 去掉 no such file or directory</a></li><li><a href="https://blog.csdn.net/houzhizhen/article/details/88236174">grep 只从指定文件中查找，并且排除某些文件夹</a></li><li><a href="https://blog.csdn.net/Decisiveness/article/details/45602789">grep 命令（在指定文件的文件类型中查找）</a></li><li><a href="https://blog.csdn.net/mmbbz/article/details/51035401">Linux: grep多个关键字“与”和“或”</a></li><li><a href="https://www.cnblogs.com/linuxprobe/p/13044173.html">grep中的正则表达式</a></li></ul><h3 id="sed">sed</h3><ul><li><a href="https://blog.csdn.net/Howard_Liu/article/details/5891110">在Bash脚本中完成变量替换和指定文件内容替换的方法</a></li><li><a href="https://www.twle.cn/c/yufei/sed/sed-basic-strings-delimiter.html"><font color=Red>sed 模式分隔符</font></a></li><li><a href="https://www.cnblogs.com/linux-wangkun/p/5745584.html">sed 字符串替换 - Amei1314 - 博客园 (cnblogs.com)</a></li><li><a href="https://wangchujiang.com/linux-command/c/sed.html">sed 功能强大的流式文本编辑器</a></li><li><a href="https://blog.csdn.net/weixin_28937395/article/details/116575070"><font color=Red>linux sed查找文件中某个值,linux查找文件中间某几行之sed用法小结</font></a></li><li><a href="https://blog.51cto.com/u_4048786/3204245"><font color=Red>linux使用sed命令批量替换某个目录下文件的内容</font></a></li><li><a href="https://www.cnblogs.com/cheyunhua/p/14265690.html">sed 脚本分隔符引起的问题unknown option to `s'</a></li><li><a href="https://www.cnblogs.com/zhutao-niuniu2014/p/10865076.html">SED命令</a></li></ul><h3 id="awk">awk</h3><ul><li><a href="https://www.junmajinlong.com/shell/awk/index/">精通awk系列文章</a></li><li><a href="https://mp.weixin.qq.com/s/WEE702IgzgUbRI7u3K39gg">Linux 下强大的 awk 命令，你真的会了吗？</a></li><li><a href="https://mp.weixin.qq.com/s/f093fiQ6XYqAUobRMeCHqg">Linux之awk使用技巧</a></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://www.toutiao.com/article/7228735741931864631/">Linux 下使用 Logrotate 旋转和压缩日志文件</a></li></ul><h2 id="tail">tail</h2><ul><li><a href="https://blog.51cto.com/u_15072917/4047087">tail -f 实时查看日志文件 linux查看日志后100行</a></li><li><a href="https://blog.csdn.net/weixin_43945983/article/details/109571105">linux环境：查看日志的几种命令总结_危险、的博客-CSDN博客</a></li></ul><h2 id="cat-eof">cat EOF</h2><ul><li><a href="https://www.cnblogs.com/wq242424/p/13194169.html">EOF一般会配合cat能够多行文本输出</a></li></ul><h2 id="tee">tee</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-tee.html">tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</a></li></ul><h2 id="dd">dd</h2><ul><li><p><a href="https://blog.csdn.net/qq_28499879/article/details/121114544">dd命令（参数和使用）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/or-g1A69cTLqEYaU7u1YXg">怎么在Linux中几秒钟创建一个2GB的大文件？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cdtUxk3188BEKcKtDjk_Mw">如何使用 diff 命令比较 Linux 终端中的文本文件</a></p></li></ul><h2 id="script">script</h2><ul><li><a href="https://blog.csdn.net/Victor2code/article/details/103378542">强大的Linux终端行为记录和回放工具：script命令详解</a></li><li><a href="https://blog.csdn.net/weixin_29763641/article/details/116925273">linux情况屏幕一条命令是,Linux中通过script命令那个记录屏幕的输出</a></li><li><a href="https://blog.csdn.net/weixin_42096901/article/details/107922971">linux下使用script命令生成^ [和^ M个字符的原因和方法</a></li><li><a href="https://blog.csdn.net/ouyang_peng/article/details/78818492">【Linux学习 】Linux使用Script命令来记录并回放终端会话</a></li><li><a href="https://blog.csdn.net/reyleon/article/details/13999033">终于知道保存SCP日志了</a></li></ul><h2 id="终端">终端</h2><ul><li><a href="https://www.cnblogs.com/zengkefu/p/5558851.html">Linux中tty、pty、pts的概念区别转载</a></li><li><a href="https://segmentfault.com/a/1190000009082089">Linux TTY/PTS概述</a></li><li><a href="https://blog.csdn.net/fuhanghang/article/details/83691158">Linux中tty、pty、pts的概念区别</a></li></ul><h3 id="终端复用">终端复用</h3><ul><li><a href="https://blog.csdn.net/Naisu_kun/article/details/119567566">Linux笔记：终端复用与管理工具screen和tmux</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html"><font color=Red>Tmux 使用教程</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1656074">Tmux如何让滚屏起飞</a></li><li><a href="https://www.cnblogs.com/lovesKey/p/12151317.html">在tmux缓冲区中搜索</a></li><li><a href="https://blog.51cto.com/u_6997825/3748023">tmux常用命令及快捷键</a></li><li><a href="https://blog.csdn.net/chaokudeztt/article/details/126299939">tmux 解决屏幕比例不协调问题</a></li></ul><h2 id="随机数">随机数</h2><ul><li><a href="https://mp.weixin.qq.com/s/YhSMBitB6bA1QkXUcUe5_Q">Linux中的随机数知多少</a></li></ul><h2 id="查找进程">查找进程</h2><ul><li><a href="https://www.cnblogs.com/f-ck-need-u/p/7058920.html">第9章Linux进程和信号超详细分析</a></li><li><a href="https://www.cnblogs.com/lucyjiayou/archive/2012/02/24/2366194.html">Linux 查看进程和删除进程 - lucyjiayou - 博客园</a></li><li><a href="https://blog.csdn.net/shenhaiwen/article/details/75116602">linux下grep查找进程</a></li><li><a href="https://blog.csdn.net/beyondlpf/article/details/8065070">linux 查看某进程 并杀死进程 ps grep kill</a></li><li><a href="https://blog.csdn.net/hongweigg/article/details/44828353">Linux 查找指定名称的进程并显示进程详细信息</a></li><li><a href="https://mp.weixin.qq.com/s/jL2bHl0WFzsgqS0MaasVWg">如何在Linux中查找父进程PPID</a></li><li><a href="https://blog.csdn.net/andy572633/article/details/7211546">【转】linux下杀死进程（kill）的N种方法</a></li><li><a href="https://www.wubo.net.cn/security/ps_grep_kill_process.html">使用ps、grep、kill批量杀死进程 - 物博网 (wubo.net.cn)</a></li><li><a href="https://mp.weixin.qq.com/s/UkzMZYbmtSHYLQ-SShSnHg">no no no. 不要使用kill -9</a></li><li><a href="https://blog.csdn.net/weixin_34121304/article/details/85553216">SIGTERM等信号含义</a></li></ul><h2 id="系统状态">系统状态</h2><ul><li><a href="https://www.cnblogs.com/f-ck-need-u/p/7059074.html"><font color=Red>第10章统计和查看Linux的系统状态</font></a></li><li><a href="https://mp.weixin.qq.com/s/Fv64jRXmAe-H81Qh8RJK7w"><font color=Red>61秒，摸透Linux的健康状态！</font></a></li><li><a href="https://www.toutiao.com/article/7152513156642816519">Linux命令系列之top——里面藏着很多鲜为人知的宝藏知识</a></li><li><a href="https://mp.weixin.qq.com/s/XzoekOLtREOUftHhGE3FLQ">Linux 进程管理之四大名捕</a></li><li><a href="https://segmentfault.com/a/1190000013504502"><font color=Red>top命令里内存参数 VIRT, RES 和 SHR 分别是什么意思</font></a></li><li><a href="https://blog.csdn.net/u014265442/article/details/90211142">linux 实际可用内存_beyond_zb的博客-CSDN博客_linux 可用内存</a></li><li><a href="https://blog.csdn.net/huangbaokang/article/details/84934957">linux找出占用内存，占用CPU资源最多的前10个进程_huangbaokang的博客-CSDN博客_linux查看内存占用前十</a></li><li><a href="https://www.toutiao.com/article/7195829422606467587/">界面酷炫，功能强大！这款Linux性能实时监控工具超好用！</a></li><li><a href="https://mp.weixin.qq.com/s/M_LYTVHQ8PV0y4oTW0uzEQ">Linux 中的负载高低和 CPU 开销并不完全对应</a></li><li><a href="https://m.elecfans.com/article/1893757.html">怎么在Linux系统中查看CPU信息</a></li><li><a href="https://www.toutiao.com/article/7215090382089110049">在Linux系统上如何将进程绑定在指定的CPU上运行？</a></li></ul><h2 id="lsof">lsof</h2><ul><li><a href="https://linux.cn/article-4099-1.html">技术|Linux 命令神器：lsof 入门</a></li></ul><h2 id="stat">stat</h2><ul><li><p><a href="https://blog.csdn.net/huangshanchun/article/details/44596677">linux 下最近访问、最近更改、最近改动时间理解</a></p></li><li><p><a href="https://www.toutiao.com/article/7200744231424639488">Linux系统最常用的10个网络命令，值得收藏</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/YQflmUfR3H1WUAysRt2VWQ">15款网络监控工具，运维人员不要错过</a></p></li></ul><h2 id="端口">端口</h2><ul><li><a href="https://wangchujiang.com/linux-command/c/nc.html">nc命令 全称netcat，用于设置路由器</a></li><li><a href="https://blog.csdn.net/weixin_30696427/article/details/95817700">linux 测试端口通不通(四种方法）</a></li><li><a href="https://mp.weixin.qq.com/s/_YYk_uWSoOln_yU8kbUqjg"><font color=Red>Linux系统中如何验证网络端口通不通</font></a></li><li><a href="https://www.cnblogs.com/hindy/p/7249234.html">LINUX中如何查看某个端口是否被占用</a></li><li><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">Linux 查看端口占用情况</a></li></ul><h2 id="ip">IP</h2><ul><li><a href="https://www.toutiao.com/article/7196522780065006138">通过 12 个样例掌握 Linux IP 命令</a></li><li><a href="https://mp.weixin.qq.com/s/Nj0te6rKV6IxM2Aw9oaSRg">如何将Linux的NIC 名称更改为 eth0 而不是 enps33 或 enp0s25，只要几秒钟</a></li><li><a href="https://www.cnblogs.com/qq1069284034/p/9227625.html">linux服务器查看公网IP信息的方法 - 小帅豹 - 博客园 (cnblogs.com)</a></li><li><a href="https://fightsyj.blog.csdn.net/article/details/86482820">IP、域名和端口号之间的联系</a></li><li><a href="https://mp.weixin.qq.com/s/1NLIzZUAA7GOCqAzGLlRhQ">Linux中20个高级命令</a></li><li><a href="https://mp.weixin.qq.com/s/b5FCBQv8tCbBAUFYg0sMiA">A、B、C、D、E类IP地址划分依据</a></li><li><a href="https://mp.weixin.qq.com/s/SYXnoWoxw6X1zKlpJicLLQ">IP地址划分、子网掩码的作用、实际中IP地址规划</a></li><li><a href="https://mp.weixin.qq.com/s/2QOLOrGXn5XHZOfq7Ho8QQ">刚插上网线，电脑怎么知道自己的IP是什么？</a></li><li><a href="https://blog.csdn.net/weixin_35751412/article/details/116639446">ip扫描命令 linux,如何使用Linux扫描网络上的IP地址</a></li></ul><h2 id="etchosts">/etc/hosts</h2><ul><li><a href="https://blog.csdn.net/weibo1230123/article/details/82184353">linux中/etc/hosts文件详解</a></li><li><a href="https://blog.csdn.net/m0_45406092/article/details/118858102">Linux操作系统下/etc/hosts文件配置方法(域名映射)</a></li><li><a href="https://blog.51cto.com/u_15060515/4707834">hosts文件不可以这样修改吗(Ip可以加端口吗)</a></li></ul><h2 id="net-tools-iproute2">net-tools iproute2</h2><ul><li><a href="https://www.debian.org/doc/manuals/debian-reference/ch05.zh-cn.html#_iproute2_commands"><font color=Red>Iproute2命令集提供完整的底层网络配置能力。有个从旧的net-tools命令集到新的iproute2命令集的转换表。</font></a></li><li><a href="https://www.linuxcool.com/ifconfig">ifconfig命令–显示或设置网络设备参数信息</a></li><li><a href="https://www.runoob.com/linux/linux-comm-ip.html">ip命令是Linux加强版的的网络配置工具，用于代替ifconfig命令。</a></li><li><a href="https://mp.weixin.qq.com/s/Qu2yxgdeXdWasY0lZ1TEjQ">ip命令图文详解- Linux系统和网络管理员必备工具</a></li><li><a href="https://blog.csdn.net/weixin_50785891/article/details/125740833">ifconfig/docker删除虚拟网卡</a></li></ul><h2 id="brctl">brctl</h2><ul><li><p><a href="https://www.linuxcool.com/brctl">brctl命令–管理以太网网桥</a></p></li><li><p><a href="https://ipcmen.com/brctl">brctl命令用于设置、维护和检查linux内核中的以太网网桥配置。</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1871867">2 0 Linux虚拟网络设备bridge你真搞懂了吗？</a></p></li><li><p><a href="http://m.blog.chinaunix.net/uid-25739055-id-4486918.html">ubuntu 12.04下如何将物理网卡加入bridge连接外网</a></p></li></ul><h2 id="iptables">iptables</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/_pszS9LaEJaEML8CJEUiXA">Linux下 iptables 超详细教程和使用示例</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/XRL1io-cGeljgU7880MB1A">Iptables 介绍与使用</a></p></li><li><p><a href="https://www.cnblogs.com/f-ck-need-u/p/7397146.html">防火墙和iptables</a></p></li><li><p><a href="https://blog.csdn.net/daocaokafei/article/details/124976257">深入理解 netfilter 和 iptables</a></p></li><li><p><a href="https://www.toutiao.com/article/7201649634798830132"><font color=Red>不会用 Linux 防火墙软件 IPtables！你算啥网工人</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_45151960/article/details/125407907">CentOS 7关闭防火墙命令</a></p></li></ul><h2 id="dns">DNS</h2><ul><li><p><a href="https://developer.aliyun.com/article/561532">学习笔记：ubuntu永久修改DNS的两种方法-阿里云开发者社区 (aliyun.com)</a></p></li><li><p><a href="https://developer.aliyun.com/article/501609">修改ubuntu 的dns-阿里云开发者社区 (aliyun.com)</a></p></li><li><p><a href="https://blog.51cto.com/sddai/3073629">Ubuntu系统重启后/etc/resolv.conf内容丢失的解决方案</a></p></li><li><p><a href="http://t.zoukankan.com/wanghuixi-p-8901255.html">ubuntu下修改网卡名称</a></p></li><li><p><a href="https://blog.csdn.net/qq_40519022/article/details/124630107">Ubuntu 突然无法联网，ifconfig 查看仅回环IP时，ping 其他IP显示connect: Network is unreachable的解决方法</a></p></li><li><p><a href="https://blog.csdn.net/lianghecai52171314/article/details/111098573">Ubuntu 查看IP、网关及DNS</a></p></li></ul><h2 id="nslookup">nslookup</h2><ul><li><a href="https://blog.csdn.net/violet_echo_0908/article/details/52033725">nslookup命令详解</a></li></ul><h2 id="代理">代理</h2><ul><li><a href="https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/">设置终端使用代理的几种方法</a></li><li><a href="https://nu-ll.github.io/2021/03/04/Linux%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/">Linux终端代理</a></li><li><a href="https://www.cnblogs.com/daijiabao/p/11358743.html">Linux/CentOS设置全局代理（http）</a></li><li><a href="https://monkeywie.cn/2020/07/06/linux-global-proxy-tool-proxychain/">linux下的全局代理工具proxychain</a></li></ul><h2 id="linux-权限">Linux 权限</h2><ul><li><p><a href="https://blog.csdn.net/dengjili/article/details/90735669">Linux 中的权限（0755或0644或-rwxr-xr-x）</a></p></li><li><p><a href="https://www.cnblogs.com/sparkdev/p/9651622.html"><font color=Red>Linux 特殊权限 SUID,SGID,SBIT</font></a></p></li><li><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">Linux chmod命令</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30376453/article/details/99780980">chmod 命令——chmod 755与chmod 4755区别（转）</a></p></li><li><p><a href="https://blog.csdn.net/u013197629/article/details/73608613">Linux权限详解（chmod、600、644、666、700、711、755、777、4755、6755、7755）</a></p></li><li><p><a href="https://blog.csdn.net/linting0909/article/details/82902196">文件权限管理 u+s、g+s、o+t/三种用户权限</a></p></li><li><p><a href="https://www.cnblogs.com/treeskyer/archive/2020/12/21/14166272.html">linux中文件的特殊权限(SetUID/SetGID/SBIT)</a></p></li><li><p><a href="https://www.cnblogs.com/stemon/p/5287631.html">linux系统学习笔记：无死角理解保存的设置用户ID，设置用户ID位，有效用户ID，实际用户ID</a></p></li><li><p><a href="https://blog.csdn.net/T146lLa128XX0x/article/details/81977252">setuid和setgid权限说明</a></p></li><li><p><a href="https://blog.csdn.net/wh8_2011/article/details/50825340">UID, EUID, SUID, FSUID</a></p></li><li><p><a href="http://c.biancheng.net/view/3132.html">Linux ACL权限设置（setfacl和getfacl）</a></p></li><li><p><a href="https://www.cnblogs.com/xuyaowen/p/linux-xattrs.html">Linux 文件系统扩展属性 xattr</a></p></li><li><p><a href="http://c.biancheng.net/view/874.html">Linux chattr命令详解：修改文件系统的权限属性</a></p></li><li><p><a href="http://c.biancheng.net/view/875.html">Linux lsattr命令：查看文件系统属性</a></p></li><li><p><a href="https://blog.csdn.net/keheinash/article/details/87979673">Linux常用的设置文件安全上下文命令使用方法</a></p></li></ul><h2 id="mount">mount</h2><ul><li><a href="https://blog.csdn.net/love3765/article/details/78604288">linux mount (挂载命令)详解</a></li><li><a href="https://www.cnblogs.com/xingmuxin/p/8446115.html">mount bind使用方法</a></li><li><a href="https://blog.csdn.net/langb2014/article/details/115454647">linux的mount bind命令</a></li><li><a href="https://mp.weixin.qq.com/s/dbSZmESQmZaommTFd3-UPA">Linux 中列出挂载驱动器的 4 个命令</a></li></ul><h2 id="软链接和硬链接">软链接和硬链接</h2><ul><li><a href="https://blog.csdn.net/ljw_jiawei/article/details/91044595">linux里创建快捷方式和查看快捷方式的指向</a></li><li><a href="https://www.cnblogs.com/geeksongs/p/13517072.html">【Linux】：Linux下创建软链接（快捷方式） - Geeksongs - 博客园 (cnblogs.com)</a></li><li><a href="https://www.toutiao.com/article/7156875262477566500"><font color=Red>「来道题」Linux的软链接</font></a></li><li><a href="https://www.cnblogs.com/fqnb001/p/8778790.html">5分钟让你明白“软链接”和“硬链接”的区别</a></li><li><a href="https://www.cnblogs.com/qinlulu/p/13204813.html">一文搞懂 Linux 的 inode！</a></li><li><a href="https://blog.csdn.net/andrewgithub/article/details/82026727">linux文件－link函数(文件硬链接和软连接)</a></li><li><a href="https://www.fenghome.top/post/80">Linux中软链接、硬链接以及mount bind的区别</a></li></ul><h2 id="解压缩">解压缩</h2><ul><li><a href="https://blog.csdn.net/afei__/article/details/82619843">Linux命令之解压缩：tar、zip、rar 命令_阿飞的博客-CSDN博客_linux解压rar包命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-zip.html">Linux zip命令 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://www.jb51.net/LINUXjishu/43356.html">linux下tar.gz、tar、bz2、zip等解压缩、压缩命令小结_LINUX_操作系统_脚本之家 (jb51.net)</a></li><li><a href="https://blog.csdn.net/libing_zeng/article/details/73268032">Linux下tar命令解压到指定的目录</a></li><li><a href="https://www.toutiao.com/article/7172630331697218059">想学Linux中的打包和压缩？看这一篇就够了</a></li></ul><h2 id="set">set</h2><ul><li><a href="https://blog.csdn.net/yexiangCSDN/article/details/82828811">Linux 系统设置 : set 命令详解</a></li></ul><h2 id="环境变量">环境变量</h2><ul><li><p><a href="http://c.biancheng.net/view/5876.html">Linux PATH环境变量及作用（初学者必读）</a></p></li><li><p><a href="https://wiki.archlinux.org/title/Environment_variables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Environment variables (简体中文)</a></p></li><li><p><a href="https://blog.csdn.net/Kruck/article/details/50977880"><font color=Red>Linux设置PATH环境变量的几个地方和设置方法</font></a></p></li><li><p><a href="https://blog.csdn.net/beanocean/article/details/14677833">Ubuntu环境变量——添加与删除_Beanocean-CSDN博客_ubuntu删除环境变量</a></p></li><li><p><a href="https://www.cnblogs.com/windyvalley/p/linux_path_append.html"><font color=Red>Linux添加路径到PATH环境变量</font></a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_6405313801012pxw.html">Ubuntu下设置环境变量_莫一剑_新浪博客 (sina.com.cn)</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39060517/article/details/116325845">Linux export、set、env和source作用详解</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uE2pW44JZNyaaQAlrV0c1g">Linux环境变量总结</a></p></li><li><p><a href="https://blog.51cto.com/u_14286115/3326315">linux DISPLAY环境变量介绍</a></p></li><li><p><a href="https://blog.csdn.net/qq_37698947/article/details/122361495">Linux 中 DISPLAY 环境变量设置——本地显示 Linux 服务器GUI程序</a></p></li><li><p><a href="https://www.jianshu.com/p/4617e8e600ad">Linux MIME type</a></p></li></ul><h2 id="ssh">ssh</h2><ul><li><p><a href="https://stackoom.com/question/ctjy/ssh-%E6%9D%83%E9%99%90%E5%A4%AA%E5%BC%80%E6%94%BE-%E9%94%99%E8%AF%AF">ssh“权限太开放”错误</a></p></li><li><p><a href="https://blog.csdn.net/qq_38476684/article/details/100028507">vscode remote ssh多重跳接配置内网穿透</a></p></li><li><p><a href="https://blog.csdn.net/permike/article/details/52386868">ubuntu设置 SSH 通过密钥登录</a></p></li><li><p><a href="https://www.cnblogs.com/pansidong/p/12248278.html"><font color=Red>ubuntu设置 SSH 通过密钥登录 - 盘思动 - 博客园 (cnblogs.com)</font></a></p></li><li><p><a href="https://www.linuxcool.com/ssh-copy-id"><font color=Red>ssh-copy-id命令 – 复制公钥到远程主机</font></a></p></li><li><p><a href="https://www.cnblogs.com/jhao/p/12917598.html"><font color=Red>Linux配置SSH免用户免密码登陆</font></a></p></li><li><p><a href="https://jingwei.link/2018/12/15/ssh-config-multi-app-manager.html"><font color=Red>SSH的config配置之多账号简单管理</font></a></p></li><li><p><a href="https://www.jb51.net/os/win10/680687.html">Win10怎么配置ssh密钥免密连接Linux服务器_windows10_Windows系列_操作系统_脚本之家 (jb51.net)</a></p></li><li><p><a href="https://www.cnblogs.com/dabai56/p/11057127.html">Win10配置ssh密钥免密连接Linux服务器 - 大白的攻城狮 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/7990ca55da69">Mac使用ssh密钥登录Linux - 简书 (jianshu.com)</a></p></li><li><p><a href="https://blog.csdn.net/Lynn_mg/article/details/91344494">Mac通过ssh连接ubuntu_Lynn_mg的博客-CSDN博客</a></p></li><li><p><a href="https://www.jianshu.com/p/cc1f599c8841">vscode SSH 保存密码自动登录服务器</a></p></li><li><p><a href="https://blog.csdn.net/qq_21407811/article/details/110938940">VSCode Remote ssh跳板机配置(linux环境)</a></p></li><li><p><a href="https://www.cnblogs.com/Thenext/p/15437824.html">deepin安装ssh服务并设置开机自启动</a></p></li><li><p><a href="http://i01.org/show.php?id=390">ssh登录后,ulimit的值无法修改的问题</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/qW7zQfevhRIPb1PXLRXmAA">什么是堡垒机？为什么需要堡垒机？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/o-F_VLQF-lqu3N1_R1mNDg">你还不会 Jumpserver 堡垒机(保护服务器)搭建部署?</a></p></li><li><p><a href="https://service.oray.com/question/11017.html">首页&gt;向日葵&gt; Linux及国产化系统&gt; Linux个人版（命令行版本）使用手册</a></p></li></ul><h2 id="crontab计划任务">crontab计划任务</h2><ul><li><a href="https://www.jb51.net/LINUXjishu/717266.html">linux中crontab计划任务怎么删除?_LINUX_操作系统_脚本之家 (jb51.net)</a></li><li><a href="https://www.linuxidc.com/Linux/2016-11/137660.htm">Linux中的cron计划任务配置详解_Linux教程_Linux公社-Linux系统门户网站 (linuxidc.com)</a></li><li><a href="https://www.iamwawa.cn/crontab.html">在线crontab表达式执行时间计算工具_蛙蛙在线工具 (iamwawa.cn)</a></li><li><a href="https://tool.lu/crontab/">crontab执行时间计算 - 在线工具 (tool.lu)</a></li></ul><h2 id="patch">Patch</h2><ul><li><a href="https://www.cnblogs.com/zengkefu/p/7266913.html">linux下patch命令使用详解-linux打补丁命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-patch.html">Linux patch命令</a></li></ul><h2 id="buildstream">BuildStream</h2><ul><li><a href="https://www.buildstream.build/">BuildStream，软件集成工具</a></li><li><a href="https://docs.buildstream.build/1.4.3/index.html">BuildStream 文档</a></li></ul><h2 id="时间协议">时间协议</h2><ul><li><a href="https://hongwangle.com/use-case/time-sync/ntp-ptp-time-sync/">NTP/PTP时间同步入门</a></li><li><a href="https://blog.csdn.net/zu7543/article/details/102584313">简单理解时间同步和时钟同步</a></li></ul><h2 id="其它">其它</h2><ul><li><p><a href="https://blog.csdn.net/hqsiswiliam/article/details/105832597">解决VSCode终端在Linux下打不开的问题_hqsiswiliam的博客-CSDN博客_vscode打不开</a></p></li><li><p><a href="https://my.oschina.net/u/215547/blog/824106">安装OhMyZsh插件后提示错误：“zsh compinit: insecure directories”- bobjoy的个人空间- OSCHINA -中文开源技术交流社区</a></p></li><li><p><a href="https://blog.csdn.net/yy1695990107/article/details/116976994">ubuntu搭建http服务器用于下载ubuntu文件</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/26546592">你和 Linux 极客只差一个 LFS - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://segmentfault.com/a/1190000018464527">改造rm命令，删除文件至回收站</a></p></li><li><p><a href="https://www.jianshu.com/p/f1997b5e1031">ubuntu16.04 安装x11vnc桌面</a></p></li><li><p><a href="https://www.jianshu.com/p/484e5be21786">VSCode安装shell、bash格式化工具</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/aZsaUt2sJhd-BzxlmS3Cmw">快乐尝试最新 KDE Plasma，精心制作的 Linux 桌面环境</a></p></li><li><p><a href="https://blog.csdn.net/piupiu78/article/details/116350367">Talk is cheap. Show me the code.— IT 界那些朗朗上口的“名言”</a></p></li><li><p><a href="https://www.toutiao.com/article/6930965164980306439">宇宙第一 IDE 到底是谁？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/UAzN_7Bmb9uLRy8GJ-9rFg">盘一盘各种”xPU”</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/HzJyf9QLZYjRsacf_veK4g">菜鸟也能懂的 - 音视频基础知识。</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/5qYO5RjCDUcxo4tR3_f_ow">Camera | 2.MIPI、CSI基础</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1871867">Linux虚拟网络设备bridge你真搞懂了吗？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>bcc</tag>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/patent/README/"/>
    <url>/patent/README/</url>
    
    <content type="html"><![CDATA[<h1 id="patent">patent</h1><p>已撰写专利：</p><ul><li>增量更新、回退中一种基于缓存的高效查找机制</li></ul><p>待撰写专利：</p><ul><li>玲珑仓库基于rbac角色权限控制较flatpak仓库优势</li><li>玲珑仓库支持一键部署弹性伸缩较flatpak仓库优势</li></ul>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flatpak</title>
    <link href="/patent/flatpak/"/>
    <url>/patent/flatpak/</url>
    
    <content type="html"><![CDATA[<h1 id="flatpak">flatpak</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:flatpak 查询命令行;<br>if (解析命令？) then (yes)<br>        if (检查本地xml描述文件更新时间是否已超时?) then (yes)<br>            :flatpak\n发起业务请求，附带gpg key作为token附带在http请求header中;<br>            if (ostree判断\n请求header中是否有token?) then (yes)<br>                ::nginx静态文件服务器处理业务逻辑;<br>                :ostree验证token有效性;<br>                if (token有效?) then (yes)<br>                    :返回业务逻辑处理结果;<br>                    :flatpak下载包元数据到本地;<br>                else (no)<br>                endif<br>            else (no)<br>            endif<br>        else (no)<br>        endif<br>        :使用appstream库解析xml获取包元数据;<br>else (no)<br>endif<br>:终端提示\nflaptpak命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">uos@uos:~$ flatpak search zoom --columns=all<br>Description                                                                       Application                      Version      Branch Remotes<br>Zoom - Video Conferencing, Web Conferencing, Webinars, Screen Sharing             us.zoom.Zoom                     5.11.10.4400 stable flathub<br>FIPS - OpenGL-based FITS image viewer                                             space.fips.Fips                  3.4.0        stable flathub<br>PhotoQt Image Viewer - View and manage images                                     org.photoqt.PhotoQt              2.9.1        stable flathub<br>KmPlot - Mathematical Function Plotter                                            org.kde.kmplot                   1.3.22080    stable flathub<br>XaoS - Fast interactive real-time fractal zoomer/morpher                          io.github.xaos_project.XaoS      4.2.1        stable flathub<br>Vieb - Vim Inspired Electron Browser                                              dev.vieb.Vieb                    9.0.0        stable flathub<br>sleek - todo manager based on the todo.txt syntax <span class="hljs-keyword">for</span> Linux, free and open-sourc… com.github.ransome1.sleek        1.2.1        stable flathub<br>Minder - Create, develop and visualize your ideas                                 com.github.phase1geo.minder      1.14.0       stable flathub<br>Gnome Next Meeting Applet - Show your next events <span class="hljs-keyword">in</span> your panel                   ….chmouel.gnomeNextMeetingApplet 2.8.1        stable flathub<br>wavbreaker - GUI tool to <span class="hljs-built_in">split</span> WAV, MP2 and MP3 files <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linglong</title>
    <link href="/patent/linglong/"/>
    <url>/patent/linglong/</url>
    
    <content type="html"><![CDATA[<h1 id="linglong">linglong</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:ll-repo-cli查询包命令行;<br>if (解析命令？) then (yes)<br>    :输入用户名和密码\n并向ll-repo-server发起登录请求;<br>    if (ll-repo-server校验密码) then (yes)<br>        :ll-repo-server生成唯一token;<br>        :返回token;<br>        :ll-repo-cli\n发起业务请求，\ntoken附带在http请求header中;<br>        if (ll-repo-server校验token?) then (yes)<br>                if (ll-repo-server查询redis缓存中是否已有相关数据?) then (yes)<br>                else (no)<br>                    :从数据库中查找结果;<br>                    :更新redis缓存;<br>                endif<br>            :从redis中获取结果;<br>            :返回业务逻辑处理结果;<br>        else (no)<br>        endif<br>    else (no)<br>    endif<br>endif<br>:终端提示\nll-repo-cli\nll-builder\n命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>玲珑仓库概要设计说明书</title>
    <link href="/patent/%E7%8E%B2%E7%8F%91%E4%BB%93%E5%BA%93%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/"/>
    <url>/patent/%E7%8E%B2%E7%8F%91%E4%BB%93%E5%BA%93%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="玲珑仓库概要设计说明书">玲珑仓库概要设计说明书</h1><h2 id="ll-repo-cli-builderll-repo-server交互流程图">ll-repo-cli-builder、ll-repo-server交互流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:ll-repo-cli\nll-builder\n命令行;<br>if (解析命令？) then (yes)<br>    :输入用户名和密码\n并向ll-repo-server发起登录请求;<br>    if (ll-repo-server校验密码) then (yes)<br>        :ll-repo-server生成唯一token;<br>        :返回token;<br>        :ll-repo-cli\nll-builder\n发起业务请求，\ntoken附带在http请求header中;<br>        if (ll-repo-server校验token?) then (yes)<br>            :ll-repo-server处理业务逻辑;<br>            :返回业务逻辑处理结果;<br>        else (no)<br>        endif<br>    else (no)<br>    endif<br>endif<br>:终端提示\nll-repo-cli\nll-builder\n命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><h2 id="ll-clill-repo-server交互流程图">ll-cli、ll-repo-server交互流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:ll-cli命令行;<br>if (解析命令？) then (yes)<br>    :ll-cli\n发起业务请求，\n/etc/linglong/auth/access.yaml\n作为token附带在http请求header中;<br>    if (ll-repo-server判断\n请求header中是否有token?) then (yes)<br>        :ll-repo-server向授权服务器验证token有效性;<br>        if (token有效?) then (yes)<br>            :ll-repo-server处理业务逻辑;<br>            :返回业务逻辑处理结果;<br>        else (no)<br>        endif<br>    else (no)<br>    endif<br>else (no)<br>endif<br>:终端提示\nll-cli命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><h2 id="storell-store-server交互流程图">store、ll-store-server交互流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:store向ll-store-server发起登录请求;<br>:ll-store-server校验密码生成唯一token;<br>:store发起业务请求带上token;<br>:ll-store-server校验token;<br>:ll-server处理业务逻辑;<br>:ll-server返回业务逻辑处理结果;<br>:store展示应用;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><h2 id="ll-repo-server数据结构">ll-repo-server数据结构</h2><h3 id="app">App</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> App <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    AppId       <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;appId&quot; gorm:&quot;type:varchar(100);column:app_id;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:2&quot;`</span><br>    Name        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;name&quot; gorm:&quot;column:name&quot;`</span><br>    Version     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;version&quot; gorm:&quot;type:varchar(50);column:version;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:3&quot;`</span><br>    Arch        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;arch&quot; gorm:&quot;type:varchar(20);column:arch;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:4&quot;`</span><br>    Kind        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;kind&quot; gorm:&quot;column:kind&quot;`</span><br>    Runtime     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;runtime&quot; gorm:&quot;column:runtime&quot;`</span><br>    RepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;repoName&quot; gorm:&quot;column:repo_name&quot;`</span><br>    Description <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;description&quot; gorm:&quot;column:description&quot;`</span><br>    Size        <span class="hljs-type">int64</span>     <span class="hljs-string">`json:&quot;size&quot; gorm:&quot;column:size&quot;`</span><br>    Channel     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;channel&quot; gorm:&quot;type:varchar(50);column:channel;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:1&quot;`</span><br>    Module      <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;module&quot; gorm:&quot;type:varchar(50);column:module;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:5&quot;`</span><br>    CheckSum    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;check_sum&quot; gorm:&quot;column:check_sum&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app表候选键：</p><ul><li>app_id</li><li>version</li><li>arch</li><li>channel</li><li>module</li></ul><h3 id="repo">Repo</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Repo <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    Repo        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;repo&quot; gorm:&quot;column:repo;uniqueIndex:idx_repo,priority:1&quot;`</span>          <span class="hljs-comment">// 仓库名</span><br>    Mode        <span class="hljs-type">string</span>     <span class="hljs-string">`json:&quot;mode&quot; gorm:&quot;column:mode&quot;`</span>                                         <span class="hljs-comment">// 以给定模式初始化存储库（bare、bare-user、bare-user-only、archive）</span><br>    Description <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;description&quot; gorm:&quot;column:description&quot;`</span>                            <span class="hljs-comment">// 仓库描述信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>repo表候选键：</p><ul><li>repo // 仓库名</li></ul><h4 id="user">User</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    User        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;user&quot; gorm:&quot;column:user;uniqueIndex:idx_user,priority:1&quot;`</span>          <span class="hljs-comment">// 用户名</span><br>    Passwd      <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;passwd&quot; gorm:&quot;column:passwd&quot;`</span>                                      <span class="hljs-comment">// 密码</span><br>    RepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;repoName&quot; gorm:&quot;column:repo_name&quot;`</span>                                 <span class="hljs-comment">// 仓库名</span><br>    Role        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;role&quot; gorm:&quot;column:role&quot;`</span>                                          <span class="hljs-comment">// 角色 （Maintainer、Developer、Reporter、Guest）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>user表候选键：</p><ul><li>user 用户名</li></ul><h4 id="synctask">SyncTask</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SyncTask <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    Task              <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;task&quot; gorm:&quot;column:task;&quot;`</span>                                  <span class="hljs-comment">// 同步任务名称</span><br>    SourceUrl         <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;source_url&quot; gorm:&quot;column:source_url&quot;`</span>                       <span class="hljs-comment">// 数据源url</span><br>    SourceRepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;source_repo_name&quot; gorm:&quot;column:source_repo_name&quot;`</span>           <span class="hljs-comment">// 数据源仓库名</span><br>    TargetRepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;target_repo_name&quot; gorm:&quot;column:target_repo_name&quot;`</span>           <span class="hljs-comment">// 目的源仓库名</span><br>    Progress          <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;progress&quot; gorm:&quot;column:progress&quot;`</span>                           <span class="hljs-comment">// 同步进度百分比</span><br>&#125;<br></code></pre></td></tr></table></figure><p>sync_task表候选键：</p><ul><li>task // 同步任务名称</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SyncedApp <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    Task        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;task&quot; gorm:&quot;column:task;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:1&quot;`</span>                                     <span class="hljs-comment">// 同步任务名称</span><br>    AppId       <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;appId&quot; gorm:&quot;type:varchar(100);column:app_id;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:3&quot;`</span><br>    Version     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;version&quot; gorm:&quot;type:varchar(50);column:version;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:4&quot;`</span><br>    Arch        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;arch&quot; gorm:&quot;type:varchar(20);column:arch;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:5&quot;`</span><br>    Channel     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;channel&quot; gorm:&quot;type:varchar(50);column:channel;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:2&quot;`</span><br>    Module      <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;module&quot; gorm:&quot;type:varchar(50);column:module;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:6&quot;`</span><br>    Synced      <span class="hljs-type">int</span>       <span class="hljs-string">`json:&quot;synced&quot; gorm:&quot;column:synced;&quot;`</span>                                                                                                      <span class="hljs-comment">// 是否已同步</span><br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>task // 同步任务名称</li><li>app_id</li><li>version</li><li>arch</li><li>channel</li><li>module</li></ul>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/README/"/>
    <url>/README/</url>
    
    <content type="html"><![CDATA[<h1 id="stay-hungry.-stay-foolish.">Stay hungry. Stay foolish.</h1><ul><li><a href="https://github.com/realwujing/linux">This is a collection of notes and resources for learning Linux.</a></li></ul><h2 id="guide">guide</h2><ul><li><a href="https://github.com/GrindGold/pdf">计算机经典电子书与学习资源分享</a></li><li><a href="https://github.com/realwujing/cpp/">C/C++学习+面试指南</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel">Linux内核</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel/qemu">qemu</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/bpf">bpf之巅 性能之巅</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/binary-analysis">二进制实战分析</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/assembly">汇编语言</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/gdb">gdb小技巧</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/package/deb">deb打包</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/k8s">k8s教程</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/git">git</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/shell">shell</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>k8s</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/gdb/README/"/>
    <url>/gdb/README/</url>
    
    <content type="html"><![CDATA[<h1 id="配置gdb-init文件">配置gdb init文件</h1><p>当gdb启动时，会读取HOME目录和当前目录下的的配置文件，执行里面的命令。这个文件通常为“.gdbinit”。</p><h2 id="gdb-pretty-printers-for-qt5">GDB Pretty printers for Qt5</h2><ul><li><a href="https://github.com/Lekensteyn/qt5printers">GDB Pretty printers for Qt5</a></li></ul><h2 id="more">More</h2><ul><li><a href="https://github.com/shihyu/MyTool/blob/master/GDB/Debugging.with.gdb%20%E4%B8%AD%E6%96%87.pdf">Debugging.with.gdb 中文.pdf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>gdb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
