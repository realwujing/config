<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>very high memory usage due to kernfs_node_cache slabs</title>
    <link href="/linux/kernel/bugs/238303/very%20high%20memory%20usage%20due%20to%20kernfs_node_cache%20slabs/"/>
    <url>/linux/kernel/bugs/238303/very%20high%20memory%20usage%20due%20to%20kernfs_node_cache%20slabs/</url>
    
    <content type="html"><![CDATA[<h1 id="very-high-memory-usage-due-to-kernfs_node_cache-slabs">very high memory usage due to kernfs_node_cache slabs</h1><p><a href="https://pms.uniontech.com/bug-view-238303.html" class="uri">https://pms.uniontech.com/bug-view-238303.html</a></p><h2 id="bug环境">bug环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br>Linux 0000000g-A8cUta6pu5 4.19.0-arm64-desktop-tyy-5819-ext4-slub-debug-kmemleak <span class="hljs-comment">#5819 SMP Fri Jan 5 12:27:47 CST 2024 aarch64 GNU/Linux</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt policy systemd<br>systemd:<br>  已安装：241.61-deepin1<br>  候选： 241.61-deepin1<br>  版本列表：<br> *** 241.61-deepin1 500<br>        500 http://pools.uniontech.com/ppa/dde-eagle eagle/1070/main arm64 Packages<br>        100 /var/lib/dpkg/status<br></code></pre></td></tr></table></figure><h2 id="初步分析">初步分析</h2><h3 id="slab">Slab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/meminfo | grep Slab: -A2<br>Slab:             913952 kB<br>SReclaimable:     175568 kB<br>SUnreclaim:       738384 kB<br></code></pre></td></tr></table></figure><h4 id="slabtop">slabtop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"> slabtop -s c -o | <span class="hljs-built_in">head</span> -n20<br> Active / Total Objects (% used)    : 924058 / 1039323 (88.9%)<br> Active / Total Slabs (% used)      : 43496 / 43496 (100.0%)<br> Active / Total Caches (% used)     : 121 / 187 (64.7%)<br> Active / Total Size (% used)       : 815879.95K / 908598.60K (89.8%)<br> Minimum / Average / Maximum Object : 0.36K / 0.87K / 16.81K<br><br>  OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME                   <br> 55251  52846  95%    4.44K   7893        7    252576K names_cache            <br>229119 223856  97%    0.48K   6943       33    111088K kernfs_node_cache      <br>141850 137390  96%    0.62K   5674       25     90784K kmalloc-128            <br> 13776  12659  91%    4.50K   1968        7     62976K kmalloc-4096           <br>104670  87963  84%    0.53K   3489       30     55824K dentry                 <br> 63020  52097  82%    0.69K   2740       23     43840K filp                   <br> 72090  59483  82%    0.53K   2403       30     38448K vm_area_struct         <br> 21142  19921  94%    1.41K    961       22     30752K ext4_inode_cache       <br> 58555  55044  94%    0.45K   1673       35     26768K buffer_head            <br> 38775  34343  88%    0.62K   1551       25     24816K skbuff_head_cache      <br> 23256  21205  91%    0.94K    684       34     21888K inode_cache            <br> 21248  17845  83%    1.00K    664       32     21248K kmalloc-512            <br> 47502  40866  86%    0.41K   1218       39     19488K anon_vma_chain       <br></code></pre></td></tr></table></figure><h4 id="slub_debug">slub_debug</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /sys/kernel/slab/kernfs_node_cache/trace  &amp;&amp; <span class="hljs-built_in">sleep</span> 60 &amp;&amp; <span class="hljs-built_in">echo</span> 0 &gt; /sys/kernel/slab/kernfs_node_cache/trace<br></code></pre></td></tr></table></figure><p>kernfs_node_cache alloc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">1673 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.452633] TRACE kernfs_node_cache alloc 0x00000000a05f4917 inuse=35 fp=0x          (null)<br>1674 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.454989] CPU: 7 PID: 1 Comm: systemd Tainted: G           O      4.19.0-arm64-desktop-tyy-5819-ext4-slub-debug-kmemleak <span class="hljs-comment">#5819</span><br>1675 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.457735] Hardware name: RDO OpenStack Compute, BIOS 0.0.0 02/06/2015<br>1676 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.459811] Call trace:<br>1677 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.460466]  dump_backtrace+0x0/0x190<br>1678 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.461368]  show_stack+0x14/0x20<br>1679 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.462291]  dump_stack+0xa8/0xcc<br>1680 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.463168]  alloc_debug_processing+0x58/0x188<br>1681 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.464272]  ___slab_alloc.constprop.34+0x31c/0x388<br>1682 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.465491]  kmem_cache_alloc+0x210/0x278<br>1683 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.466538]  __kernfs_new_node+0x60/0x1f8<br>1684 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.467553]  kernfs_new_node+0x24/0x48<br>1685 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.468508]  kernfs_create_dir_ns+0x30/0x88<br>1686 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.469584]  cgroup_mkdir+0x2f0/0x4e8<br>1687 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.470516]  kernfs_iop_mkdir+0x58/0x88<br>1688 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.471497]  vfs_mkdir+0xfc/0x1c0<br>1689 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.472328]  do_mkdirat+0xec/0x100<br>1690 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.473172]  __arm64_sys_mkdirat+0x1c/0x28<br>1691 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.474210]  el0_svc_common+0x90/0x178<br>1692 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.475125]  el0_svc_handler+0x9c/0xa8<br>1693 2024-01-24 12:40:55 0000000g-A8cUta6pu5 kernel: [  201.476049]  el0_svc+0x8/0xc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;kernfs_node_cache alloc&quot;</span> kern.log | <span class="hljs-built_in">wc</span> -l<br>7239<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./scripts/faddr2line vmlinux vfs_mkdir+0xfc/0x1c0<br>vfs_mkdir+0xfc/0x1c0:<br>vfs_mkdir 于 fs/namei.c:3820<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./scripts/faddr2line vmlinux kernfs_iop_mkdir+0x58/0x88<br>kernfs_iop_mkdir+0x58/0x88:<br>kernfs_iop_mkdir 于 fs/kernfs/dir.c:1120<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./scripts/faddr2line vmlinux cgroup_mkdir+0x2f0/0x4e8<br>cgroup_mkdir+0x2f0/0x4e8:<br>kernfs_create_dir 于 include/linux/kernfs.h:507<br>(已内连入)cgroup_mkdir 于 kernel/cgroup/cgroup.c:5032<br></code></pre></td></tr></table></figure><p>kernfs_node_cache free:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">3106 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.212900] TRACE kernfs_node_cache free 0x00000000e2ea365c inuse=34 fp=0x00000000a8805aea<br>3107 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.215538] Object 00000000e2ea365c: 00 00 00 00 01 00 00 80 78 a2 37 a6 03 80 ff ff  ........x.7.....<br>3108 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.218656] Object 000000003a5b5659: 00 52 45 de 03 80 ff ff 40 92 37 a6 03 80 ff ff  .RE.....@.7.....<br>3109 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.221710] Object 000000007229340d: 80 b6 37 a6 03 80 ff ff 00 00 00 00 00 00 00 00  ..7.............<br>3110 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.224824] Object 00000000cc138d0e: 00 00 00 00 00 00 00 00 7e 16 88 71 00 00 00 00  ........~..q....<br>3111 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.227947] Object 000000001cecdc04: b0 e4 a2 09 00 00 ff ff 00 00 00 00 00 00 00 00  ................<br>3112 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.231088] Object 00000000c3ac2227: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................<br>3113 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.234279] Object 00000000737356c8: 98 dc a2 09 00 00 ff ff 14 09 00 00 01 00 00 00  ................<br>3114 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.237384] Object 00000000ba78c59c: 52 20 a4 81 00 00 00 00 00 00 00 00 00 00 00 00  R ..............<br>3115 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.240508] CPU: 3 PID: 1 Comm: systemd Tainted: G           O      4.19.0-arm64-desktop-tyy-5819-ext4-slub-debug-kmemleak <span class="hljs-comment">#5819</span><br>3116 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.244280] Hardware name: RDO OpenStack Compute, BIOS 0.0.0 02/06/2015<br>3117 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.246454] Call trace:<br>3118 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.247264]  dump_backtrace+0x0/0x190<br>3119 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.248512]  show_stack+0x14/0x20<br>3120 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.249584]  dump_stack+0xa8/0xcc<br>3121 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.250672]  free_debug_processing+0x19c/0x3a0<br>3122 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.252143]  __slab_free+0x230/0x3f8<br>3123 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.253321]  kmem_cache_free+0x200/0x220<br>3124 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.254657]  kernfs_put+0x100/0x238<br>3125 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.255806]  kernfs_evict_inode+0x2c/0x38<br>3126 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.257119]  evict+0xc0/0x1c0<br>3127 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.258067]  iput+0x1c8/0x288<br>3128 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.259371]  dentry_unlink_inode+0xb0/0xe8<br>3129 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.260600]  __dentry_kill+0xc4/0x1d0<br>3130 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.261434]  shrink_dentry_list+0x1ac/0x2c0<br>3131 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.262413]  shrink_dcache_parent+0x78/0x80<br>3132 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.263336]  vfs_rmdir+0xf0/0x190<br>3133 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.264066]  do_rmdir+0x1c0/0x1f8<br>3134 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.264791]  __arm64_sys_unlinkat+0x4c/0x60<br>3135 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.265710]  el0_svc_common+0x90/0x178<br>3136 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.266968]  el0_svc_handler+0x9c/0xa8<br>3137 2024-01-24 12:40:56 0000000g-A8cUta6pu5 kernel: [  203.267828]  el0_svc+0x8/0xc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;kernfs_node_cache free&quot;</span> kern.log | <span class="hljs-built_in">wc</span> -l<br>5034<br></code></pre></td></tr></table></figure><h3 id="trace-bpfcc">trace-bpfcc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install systemd-dbgsym<br>apt <span class="hljs-built_in">source</span> systemd=241.61-deepin1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bpftrace -l | grep cgroup_mkdir<br>tracepoint:cgroup:cgroup_mkdir<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">trace-bpfcc -tKU cgroup_mkdir | <span class="hljs-built_in">tee</span> cgroup_mkdir.log<br></code></pre></td></tr></table></figure><p>vim cgroup_mkdir.log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash">TIME     PID     TID     COMM            FUNC             <br>11.08041 1       1       systemd         cgroup_mkdir     <br>        cgroup_mkdir+0x0 [kernel]<br>        vfs_mkdir+0xfc [kernel]<br>        do_mkdirat+0xec [kernel]<br>        __arm64_sys_mkdirat+0x1c [kernel]<br>        el0_svc_common+0x90 [kernel]<br>        el0_svc_handler+0x9c [kernel]<br>        el0_svc+0x8 [kernel]<br>        [unknown] [libc-2.28.so (deleted)]<br>        cg_create.localalias.13+0x64 [libsystemd-shared-241.so]<br>        cg_create_everywhere+0x30 [libsystemd-shared-241.so]<br>        unit_create_cgroup+0xb4 [systemd]<br>        unit_realize_cgroup_now.lto_priv.665+0xa8 [systemd]<br>        unit_realize_cgroup+0x16c [systemd]<br>        unit_prepare_exec+0x18 [systemd]<br>        service_spawn.lto_priv.382+0x80 [systemd]<br>        service_start.lto_priv.56+0x144 [systemd]<br>        job_perform_on_unit.lto_priv.422+0x6b4 [systemd]<br>        manager_dispatch_run_queue.lto_priv.589+0x358 [systemd]<br>        source_dispatch+0x118 [libsystemd-shared-241.so]<br>        sd_event_dispatch+0x150 [libsystemd-shared-241.so]<br>        sd_event_run+0x90 [libsystemd-shared-241.so]<br>        invoke_main_loop+0xff4 [systemd]<br>        main+0x1660 [systemd]<br>        [unknown] [libc-2.28.so (deleted)]<br>        [unknown] [systemd]<br><br>11.08056 1       1       systemd         cgroup_mkdir     <br>        cgroup_mkdir+0x0 [kernel]<br>        vfs_mkdir+0xfc [kernel]<br>        do_mkdirat+0xec [kernel]<br>        __arm64_sys_mkdirat+0x1c [kernel]<br>        el0_svc_common+0x90 [kernel]<br>        el0_svc_handler+0x9c [kernel]<br>        el0_svc+0x8 [kernel]<br>        [unknown] [libc-2.28.so (deleted)]<br>        cg_create.localalias.13+0x64 [libsystemd-shared-241.so]<br>        cg_create.localalias.13+0xe8 [libsystemd-shared-241.so]<br>        cg_create_everywhere+0x30 [libsystemd-shared-241.so]<br>        unit_create_cgroup+0xb4 [systemd]<br>        unit_realize_cgroup_now.lto_priv.665+0xa8 [systemd]<br>        unit_realize_cgroup+0x16c [systemd]<br>        unit_prepare_exec+0x18 [systemd]<br>        service_spawn.lto_priv.382+0x80 [systemd]<br>        service_start.lto_priv.56+0x144 [systemd]<br>        job_perform_on_unit.lto_priv.422+0x6b4 [systemd]<br>        manager_dispatch_run_queue.lto_priv.589+0x358 [systemd]<br>        source_dispatch+0x118 [libsystemd-shared-241.so]<br>        sd_event_dispatch+0x150 [libsystemd-shared-241.so]<br>        sd_event_run+0x90 [libsystemd-shared-241.so]<br>        invoke_main_loop+0xff4 [systemd]<br>        main+0x1660 [systemd]<br>        [unknown] [libc-2.28.so (deleted)]<br>        [unknown] [systemd]<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1626</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">unit_create_cgroup</span><span class="hljs-params">( <span class="hljs-comment">// vim src/core/cgroup.c +1626</span></span><br><span class="hljs-params"><span class="hljs-number">1627</span>                 Unit *u,</span><br><span class="hljs-params"><span class="hljs-number">1628</span>                 CGroupMask target_mask,</span><br><span class="hljs-params"><span class="hljs-number">1629</span>                 CGroupMask enable_mask,</span><br><span class="hljs-params"><span class="hljs-number">1630</span>                 ManagerState state)</span> &#123;<br><span class="hljs-number">1631</span> <br><span class="hljs-number">1632</span>         <span class="hljs-type">bool</span> created;<br><span class="hljs-number">1633</span>         <span class="hljs-type">int</span> r;<br><span class="hljs-number">1634</span> <br><span class="hljs-number">1635</span>         assert(u);<br><span class="hljs-number">1636</span> <br><span class="hljs-number">1637</span>         <span class="hljs-keyword">if</span> (!UNIT_HAS_CGROUP_CONTEXT(u))<br><span class="hljs-number">1638</span>                 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">1639</span> <br><span class="hljs-number">1640</span>         <span class="hljs-comment">/* Figure out our cgroup path */</span><br><span class="hljs-number">1641</span>         r = unit_pick_cgroup_path(u);<br><span class="hljs-number">1642</span>         <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>)<br><span class="hljs-number">1643</span>                 <span class="hljs-keyword">return</span> r;<br><span class="hljs-number">1644</span> <br><span class="hljs-number">1645</span>         <span class="hljs-comment">/* First, create our own group */</span><br><span class="hljs-number">1646</span>         r = cg_create_everywhere(u-&gt;manager-&gt;cgroup_supported, target_mask, u-&gt;cgroup_path);<br><span class="hljs-number">1647</span>         <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>)<br><span class="hljs-number">1648</span>                 <span class="hljs-keyword">return</span> log_unit_error_errno(u, r, <span class="hljs-string">&quot;Failed to create cgroup %s: %m&quot;</span>, u-&gt;cgroup_path);<br><span class="hljs-number">1649</span>         created = r;<br></code></pre></td></tr></table></figure><h3 id="systemd-log">systemd log</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -i failed syslog | grep systemd | <span class="hljs-built_in">wc</span> -l<br>146225<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -i failed syslog | grep systemd | grep .service | grep -v <span class="hljs-string">&quot;Failed to start&quot;</span> &gt; systemd.log<br></code></pre></td></tr></table></figure><h4 id="deepin-anything-monitor.service">deepin-anything-monitor.service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep deepin-anything-monitor.service systemd.log | <span class="hljs-built_in">wc</span> -l<br>835<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status deepin-anything-monitor.service<br>● deepin-anything-monitor.service - Deepin anything service<br>   Loaded: loaded (/lib/systemd/system/deepin-anything-monitor.service; enabled; vendor preset: enabled)<br>   Active: activating (auto-restart) (Result: exit-code) since Thu 2024-01-25 10:24:27 CST; 2s ago<br>  Process: 19672 ExecStartPre=/usr/sbin/modprobe vfs_monitor (code=exited, status=1/FAILURE)<br>  Process: 19674 ExecStopPost=/usr/sbin/rmmod vfs_monitor (code=exited, status=1/FAILURE)<br></code></pre></td></tr></table></figure><h4 id="logrotate.service">logrotate.service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep logrotate.service systemd.log | <span class="hljs-built_in">wc</span> -l<br>568<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">2024-01-01 00:00:12 0000000g-A8cUta6pu5 systemd[1]:  logrotate.service: Failed with result <span class="hljs-string">&#x27;exit-code&#x27;</span>.<br>2024-01-01 01:00:01 0000000g-A8cUta6pu5 systemd[1]:  logrotate.service: Failed with result <span class="hljs-string">&#x27;exit-code&#x27;</span>.<br>2024-01-01 02:00:01 0000000g-A8cUta6pu5 systemd[1]:  logrotate.service: Failed with result <span class="hljs-string">&#x27;exit-code&#x27;</span>.<br>2024-01-01 03:00:21 0000000g-A8cUta6pu5 systemd[1]:  logrotate.service: Failed with result <span class="hljs-string">&#x27;exit-code&#x27;</span>.<br>2024-01-01 04:00:31 0000000g-A8cUta6pu5 systemd[1]:  logrotate.service: Failed with result <span class="hljs-string">&#x27;exit-code&#x27;</span>.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status logrotate.service<br>● logrotate.service - Rotate <span class="hljs-built_in">log</span> files<br>   Loaded: loaded (/lib/systemd/system/logrotate.service; static; vendor preset: enabled)<br>   Active: failed (Result: exit-code) since Thu 2024-01-25 09:00:05 CST; 53min ago<br>     Docs: man:logrotate(8)<br>           man:logrotate.conf(5)<br>  Process: 7067 ExecStart=/usr/sbin/logrotate /etc/logrotate.conf (code=exited, status=1/FAILURE)<br> Main PID: 7067 (code=exited, status=1/FAILURE)<br><br>1月 25 09:00:04 0000000g-A8cUta6pu5 logrotate[7067]: error: clink-agent:8, unexpected text after &#125;<br>1月 25 09:00:04 0000000g-A8cUta6pu5 logrotate[7067]: error: skipping <span class="hljs-string">&quot;/var/log/apt/term.log&quot;</span> because parent directory has insecure permissions (It<span class="hljs-string">&#x27;s world writable or writable by group which is not &quot;root&quot;) Set &quot;su</span><br><span class="hljs-string">1月 25 09:00:04 0000000g-A8cUta6pu5 logrotate[7067]: error: skipping &quot;/var/log/apt/history.log&quot; because parent directory has insecure permissions (It&#x27;</span>s world writable or writable by group <span class="hljs-built_in">which</span> is not <span class="hljs-string">&quot;root&quot;</span>) Set <br>1月 25 09:00:04 0000000g-A8cUta6pu5 logrotate[7067]: error: skipping <span class="hljs-string">&quot;/var/log/mirror/printer/printer.log&quot;</span> because parent directory has insecure permissions (It<span class="hljs-string">&#x27;s world writable or writable by group which is not &quot;</span><br><span class="hljs-string">1月 25 09:00:04 0000000g-A8cUta6pu5 logrotate[7067]: error: skipping &quot;/var/log/cups/access_log&quot; because parent directory has insecure permissions (It&#x27;</span>s world writable or writable by group <span class="hljs-built_in">which</span> is not <span class="hljs-string">&quot;root&quot;</span>) Set <br>1月 25 09:00:04 0000000g-A8cUta6pu5 logrotate[7067]: error: skipping <span class="hljs-string">&quot;/var/log/cups/error_log&quot;</span> because parent directory has insecure permissions (It<span class="hljs-string">&#x27;s world writable or writable by group which is not &quot;root&quot;) Set &quot;</span><br><span class="hljs-string">1月 25 09:00:04 0000000g-A8cUta6pu5 logrotate[7067]: error: skipping &quot;/var/log/mirror/ctyunInstall/ctyunInstall.log&quot; because parent directory has insecure permissions (It&#x27;</span>s world writable or writable by group whic<br>1月 25 09:00:05 0000000g-A8cUta6pu5 systemd[1]: logrotate.service: Main process exited, code=exited, status=1/FAILURE<br>1月 25 09:00:05 0000000g-A8cUta6pu5 systemd[1]: logrotate.service: Failed with result <span class="hljs-string">&#x27;exit-code&#x27;</span>.<br>1月 25 09:00:05 0000000g-A8cUta6pu5 systemd[1]: Failed to start Rotate <span class="hljs-built_in">log</span> files.<br></code></pre></td></tr></table></figure><h4 id="avahi-daemon.service">avahi-daemon.service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uptime</span> <br> 10:36:02 up 18:29,  1 user,  load average: 0.18, 0.27, 0.25<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep dbus-org.freedesktop.Avahi.service systemd.log | <span class="hljs-built_in">wc</span> -l<br>143146<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">2024-01-16 05:45:03 0000000g-A8cUta6pu5 dbus-daemon[539]:  [system] Activation via systemd failed <span class="hljs-keyword">for</span> unit <span class="hljs-string">&#x27;dbus-org.freedesktop.Avahi.service&#x27;</span>: Unit dbus-org.freedesktop.Avahi.service not found.<br>2024-01-16 05:45:08 0000000g-A8cUta6pu5 dbus-daemon[539]:  [system] Activation via systemd failed <span class="hljs-keyword">for</span> unit <span class="hljs-string">&#x27;dbus-org.freedesktop.Avahi.service&#x27;</span>: Unit dbus-org.freedesktop.Avahi.service not found.<br>2024-01-16 05:45:13 0000000g-A8cUta6pu5 dbus-daemon[539]:  [system] Activation via systemd failed <span class="hljs-keyword">for</span> unit <span class="hljs-string">&#x27;dbus-org.freedesktop.Avahi.service&#x27;</span>: Unit dbus-org.freedesktop.Avahi.service not found.<br>2024-01-16 05:45:18 0000000g-A8cUta6pu5 dbus-daemon[539]:  [system] Activation via systemd failed <span class="hljs-keyword">for</span> unit <span class="hljs-string">&#x27;dbus-org.freedesktop.Avahi.service&#x27;</span>: Unit dbus-org.freedesktop.Avahi.service not found.<br></code></pre></td></tr></table></figure><p>5S重启一次，本次系统启动也就18个半钟头，跑了143146次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">cat</span> avahi-daemon.service<br><span class="hljs-comment"># /lib/systemd/system/avahi-daemon.service</span><br><span class="hljs-comment"># This file is part of avahi.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># avahi is free software; you can redistribute it and/or modify it</span><br><span class="hljs-comment"># under the terms of the GNU Lesser General Public License as</span><br><span class="hljs-comment"># published by the Free Software Foundation; either version 2 of the</span><br><span class="hljs-comment"># License, or (at your option) any later version.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># avahi is distributed in the hope that it will be useful, but WITHOUT</span><br><span class="hljs-comment"># ANY WARRANTY; without even the implied warranty of MERCHANTABILITY</span><br><span class="hljs-comment"># or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public</span><br><span class="hljs-comment"># License for more details.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># You should have received a copy of the GNU Lesser General Public</span><br><span class="hljs-comment"># License along with avahi; if not, write to the Free Software</span><br><span class="hljs-comment"># Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307</span><br><span class="hljs-comment"># USA.</span><br><br>[Unit]<br>Description=Avahi mDNS/DNS-SD Stack<br>Requires=avahi-daemon.socket<br><br>[Service]<br>Type=dbus<br>BusName=org.freedesktop.Avahi<br>ExecStart=/usr/sbin/avahi-daemon -s<br>ExecReload=/usr/sbin/avahi-daemon -r<br>NotifyAccess=main<br><br>[Install]<br>WantedBy=multi-user.target<br>Also=avahi-daemon.socket<br>Alias=dbus-org.freedesktop.Avahi.service<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt show avahi-daemon<br>Package: avahi-daemon<br>Version: 0.7.6-1+dde<br>Priority: optional<br>Section: net<br>Source: avahi<br>Maintainer: Utopia Maintenance Team &lt;pkg-utopia-maintainers@lists.alioth.debian.org&gt;<br>Installed-Size: 263 kB<br>Depends: libavahi-common3 (&gt;= 0.6.16), libavahi-core7 (&gt;= 0.6.24), libc6 (&gt;= 2.27), libcap2 (&gt;= 1:2.10), libdaemon0 (&gt;= 0.14), libdbus-1-3 (&gt;= 1.9.14), libexpat1 (&gt;= 2.0.1), adduser, dbus (&gt;= 0.60), lsb-base (&gt;= 3.0-6), bind9-host | host<br>Recommends: libnss-mdns (&gt;= 0.11)<br>Suggests: avahi-autoipd<br>Homepage: http://avahi.org/<br>Download-Size: 89.4 kB<br>APT-Manual-Installed: no<br>APT-Sources: https://professional-packages.chinauos.com/desktop-professional eagle/main arm64 Packages<br>Description: Avahi mDNS/DNS-SD daemon<br> Avahi is a fully LGPL framework <span class="hljs-keyword">for</span> Multicast DNS Service Discovery.<br> It allows programs to publish and discover services and hosts<br> running on a <span class="hljs-built_in">local</span> network with no specific configuration. For<br> example you can plug into a network and instantly find printers to<br> <span class="hljs-built_in">print</span> to, files to look at and people to talk to.<br> .<br> This package contains the Avahi Daemon <span class="hljs-built_in">which</span> represents your machine<br> on the network and allows other applications to publish and resolve<br> mDNS/DNS-SD records.<br></code></pre></td></tr></table></figure><h3 id="解决方案">解决方案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt reinstall avahi-daemon<br>sudo systemctl daemon-reload<br>sudo systemctl restart avahi-daemon<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://github.com/coreos/bugs/issues/1927">very high memory usage due to kernfs_node_cache slabs #1927</a><ul><li><a href="https://github.com/systemd/systemd/issues/6567">socket activation: dentry slab cache keeps increasing #6567</a></li></ul></li><li><a href="https://www.jianshu.com/p/cae1525ffe5a">cgroup 内存泄露问题排查记录</a><ul><li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1507149">Bug 1507149 - [LLNL 7.5 Bug] slab leak causing a crash when using kmem control group</a></li></ul></li><li><a href="https://lore.kernel.org/linux-mm/CA+CK2bCQcnTpzq2wGFa3D50PtKwBoWbDBm56S9y8c+j+pD+KSw@mail.gmail.com/t/" class="uri">https://lore.kernel.org/linux-mm/CA+CK2bCQcnTpzq2wGFa3D50PtKwBoWbDBm56S9y8c+j+pD+KSw@mail.gmail.com/t/</a></li><li><a href="https://bbs.archlinux.org/viewtopic.php?id=261924">[Solved] dbus-org.freedesktop.Avahi.service missing from distribution?</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>bugs</category>
      
      <category>238303</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hdmi-sound</title>
    <link href="/linux/kernel/drivers/sound/bugs/216983/hdmi-sound/"/>
    <url>/linux/kernel/drivers/sound/bugs/216983/hdmi-sound/</url>
    
    <content type="html"><![CDATA[<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs text">[四 11月  9 18:16:25 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI status: Codec=0 Pin=3 Presence_Detect=1 ELD_Valid=1<br>[四 11月  9 18:16:25 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: detected monitor  at connection type HDMI<br>[四 11月  9 18:16:25 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: available speakers: FL/FR<br>[四 11月  9 18:16:25 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: supports coding type LPCM: channels = 2, rates = 32000 44100 48000 88200 96000 176400 192000, bits = 16 20 24<br>[四 11月  9 18:16:25 2023] snd_hda_codec_hdmi hdaudioC0D0: atihdmi_pin_hbr_setup: NID=0x3, hbr-ctl=0x1<br>[四 11月  9 18:16:25 2023] snd_hda_codec_hdmi hdaudioC0D0: hda_codec_setup_stream: NID=0x2, stream=0x1, channel=0, format=0x4031<br>[四 11月  9 18:16:26 2023] snd_hda_codec_hdmi hdaudioC0D0: atihdmi_pin_hbr_setup: NID=0x3, hbr-ctl=0x1<br>[四 11月  9 18:16:26 2023] snd_hda_codec_hdmi hdaudioC0D0: hda_codec_setup_stream: NID=0x2, stream=0x1, channel=0, format=0x4031<br>[四 11月  9 18:16:26 2023] snd_hda_codec_hdmi hdaudioC0D0: hda_codec_cleanup_stream: NID=0x2<br><br><br><br><br><br><br><br><br><br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI status: Codec=0 Pin=3 Presence_Detect=1 ELD_Valid=1<br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: detected monitor  at connection type HDMI<br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: available speakers: FL/FR<br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: supports coding type LPCM: channels = 2, rates = 32000 44100 48000 88200 96000 176400 192000, bits = 16 20 24<br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: atihdmi_pin_hbr_setup: NID=0x3, hbr-ctl=0x1<br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: hda_codec_setup_stream: NID=0x2, stream=0x1, channel=0, format=0x4031<br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: atihdmi_pin_hbr_setup: NID=0x3, hbr-ctl=0x1<br>[四 11月  9 18:16:47 2023] snd_hda_codec_hdmi hdaudioC0D0: hda_codec_setup_stream: NID=0x2, stream=0x1, channel=0, format=0x4031<br>[四 11月  9 18:16:48 2023] snd_hda_codec_hdmi hdaudioC0D0: hda_codec_cleanup_stream: NID=0x2<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg -C &amp;&amp; dmesg -w -T<br>[四 11月  9 18:25:37 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI status: Codec=0 Pin=3 Presence_Detect=1 ELD_Valid=1<br>[四 11月  9 18:25:37 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: detected monitor  at connection <span class="hljs-built_in">type</span> HDMI<br>[四 11月  9 18:25:37 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: available speakers: FL/FR<br>[四 11月  9 18:25:37 2023] snd_hda_codec_hdmi hdaudioC0D0: HDMI: supports coding <span class="hljs-built_in">type</span> LPCM: channels = 2, rates = 32000 44100 48000 88200 96000 176400 192000, bits = 16 20 24<br>[四 11月  9 18:25:37 2023] snd_hda_codec_hdmi hdaudioC0D0: hda-codec: reconfiguring<br>[四 11月  9 18:25:37 2023] snd_hda_codec_hdmi hdaudioC0D0: The codec is being used, can<span class="hljs-string">&#x27;t reconfigure.</span><br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">对于存在偶尔没有声音的情况，可能是由于音频缓冲管理不当导致的。DRM/KMS 子系统负责管理 ALSA 提供的音频缓冲区，以确保音频数据的连续传输和适时播放。下面是一些可能导致偶尔没有声音的原因和相应的解决方法：<br><br>1. 缓冲区大小不合适：音频缓冲区的大小直接影响数据传输的流畅性和及时性。如果缓冲区过小，可能导致数据传输不及时，从而引发音频中断或不连贯的播放。解决方法是增加缓冲区的大小，以确保足够的数据可以存储和传输。<br><br>2. 数据传输速度不匹配：音频数据的传输速度需要与音频设备的播放速率相匹配。如果数据传输速度过快或过慢，可能导致音频中断或不连贯的播放。确保音频数据的传输速度与设备的播放速率相匹配，可以通过调整缓冲区的填充和排空速度来实现。<br><br>3. 中断处理不及时：在数据传输过程中，如果中断处理不及时，可能导致音频中断或不连贯的播放。确保中断处理程序能够及时响应音频数据的到达和处理，以确保连续的音频播放。<br><br>4. 硬件兼容性问题：有时，特定的音频设备可能与 DRM/KMS 子系统或 ALSA 驱动程序存在兼容性问题，导致偶尔没有声音。在这种情况下，可以尝试更新或更换音频设备的驱动程序，或者与设备制造商联系以获取支持。<br><br>5. 系统负载过高：如果系统负载过高，可能导致音频数据的处理和传输受到影响，从而导致偶尔没有声音。在这种情况下，优化系统配置、关闭不必要的进程或降低其他应用程序的负载可以改善音频播放的连续性。<br><br>这些是一些常见的导致偶尔没有声音的问题和解决方法。如果问题仍然存在，可能需要进一步调查和排除其他可能的因素，如硬件故障或其他软件冲突。<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">在 Linux 内核中，DRM/KMS 子系统与 ALSA 驱动程序之间进行协作以管理音频缓冲区。具体涉及的函数和处理方式可能会因内核版本而异，以下是在内核版本 4.19 中常用的一些函数和处理方式的示例：<br><br>1. `drm_audio_component_register()`：该函数用于注册 DRM/KMS 子系统的音频组件。音频组件在 DRM/KMS 子系统中负责与 ALSA 驱动程序进行交互和协作。<br><br>2. `drm_audio_component_unregister()`：用于取消注册音频组件。<br><br>3. `snd_pcm_lib_ioctl()`：该函数由 ALSA 提供，用于处理 PCM 设备的 ioctl 请求。在 DRM/KMS 子系统中，可以通过该函数处理与音频缓冲区相关的 ioctl 请求，如设置缓冲区大小、填充和排空缓冲区等。<br><br>4. `drm_audio_component_pcm_open()`：用于在 DRM/KMS 子系统中打开 PCM 设备。该函数在 ALSA 驱动程序中调用，与 DRM/KMS 子系统建立音频设备的连接。<br><br>5. `drm_audio_component_pcm_close()`：用于关闭 PCM 设备连接。<br><br>6. `snd_pcm_period_elapsed()`：该函数由 ALSA 提供，用于通知 DMA 引擎当前周期的音频数据已传输完毕。在 DRM/KMS 子系统中，可以通过该函数通知 DRM/KMS 子系统进行下一周期的音频数据传输和处理。<br><br>这些函数和处理方式只是在内核版本 4.19 中的一些示例，实际的实现可能会因具体的硬件和驱动程序而有所不同。在具体的内核版本中，你可以查阅相应的内核文档和源代码来了解更详细的函数和处理方式。<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">-F, --period-time=#<br>             Distance between interrupts is # microseconds.  If no period time and no period size is given then a quarter of the buffer time is set.<br><br>      -B, --buffer-time=#<br>             Buffer duration is # microseconds If no buffer time and no buffer size is given then the maximal allowed buffer time but not more than 500ms is set.<br><br>      --period-size=#<br>             Distance between interrupts is # frames If no period size and no period time is given then a quarter of the buffer size is set.<br><br>      --buffer-size=#<br>             Buffer duration is # frames If no buffer time and no buffer size is given then the maximal allowed buffer time but not more than 500ms is set.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">aplay --period-time=10000 --buffer-size=2048 audio.wav<br>aplay --period-size=256 --buffer-time=500000 audio.wav<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.toutiao.com/article/7291483202471051817">Banana Pi BPI-W3(RK3588)之hdmirx下audio使用.</a></li><li><a href="https://unix.stackexchange.com/questions/391326/how-to-force-hdmi-audio-intel-card-to-be-enabled-despite-receiving-broken-edid">How to force HDMI audio (intel card) to be enabled despite receiving broken EDID</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/asound/card*/eld\<span class="hljs-comment">#*</span><br>monitor_present         1<br>eld_valid               1<br>codec_pin_nid           0x3<br>codec_dev_id            0x0<br>codec_cvt_nid           0x2<br>monitor_name<br>connection_type         HDMI<br>eld_version             [0x2] CEA-861D or below<br>edid_version            [0x0] no CEA EDID Timing Extension block present<br>manufacture_id          0x0<br>product_id              0x0<br>port_id                 0x0<br>support_hdcp            0<br>support_ai              0<br>audio_sync_delay        0<br>speakers                [0x1] FL/FR<br>sad_count               1<br>sad0_coding_type        [0x1] LPCM<br>sad0_channels           2<br>sad0_rates              [0x1ee0] 32000 44100 48000 88200 96000 176400 192000<br>sad0_bits               [0xe0000] 16 20 24<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sox /usr/share/sounds/deepin/stereo/audio-volume-change.wav audio-volume-change-tmp.wav pad 0 1<br><span class="hljs-built_in">mv</span> audio-volume-change-tmp.wav audio-volume-change.wav<br></code></pre></td></tr></table></figure><p>这个命令是在音频结尾增加1秒静音，1秒建议尽量往小了调整，满足缓冲区大小就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -S /usr/share/sounds/deepin/stereo/audio-volume-change.wav<br>deepin-sound-theme: /usr/share/sounds/deepin/stereo/audio-volume-change.wav<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>bugs</category>
      
      <category>216983</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>realtek ALC257 renmaed to ALC269</title>
    <link href="/linux/kernel/drivers/sound/bugs/226916/patch/realtek%20ALC257%20renmaed%20to%20ALC269/"/>
    <url>/linux/kernel/drivers/sound/bugs/226916/patch/realtek%20ALC257%20renmaed%20to%20ALC269/</url>
    
    <content type="html"><![CDATA[<h1 id="realtek-alc257-renmaed-to-alc269">realtek ALC257 renmaed to ALC269</h1><p>realtek ALC257 renmaed to ALC269</p><h2 id="patch">patch</h2><p>具体参见bd7c9e3.diff</p><h2 id="修复链路">修复链路</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">module_hda_codec_driver(realtek_driver);    <span class="hljs-comment">// vim sound/pci/hda/patch_realtek.c+9161</span><br>    .id = snd_hda_id_realtek,   <span class="hljs-comment">// vim sound/pci/hda/patch_realtek.c+9158</span><br>        HDA_CODEC_ENTRY(<span class="hljs-number">0x10ec0257</span>, <span class="hljs-string">&quot;ALC257&quot;</span>, patch_alc269),    <span class="hljs-comment">// vim sound/pci/hda/patch_realtek.c+9074</span><br>            snd_hda_pick_fixup(codec, alc269_fixup_models, alc269_fixup_tbl, alc269_fixups);    <span class="hljs-comment">// vim sound/pci/hda/patch_realtek.c+8013</span><br>                SND_PCI_QUIRK(<span class="hljs-number">0x10ec</span>, <span class="hljs-number">0x12f0</span>, <span class="hljs-string">&quot;BXC NF271B FT board&quot;</span>, ALC257_FIXUP_FT_RENAME),   <span class="hljs-comment">// vim sound/pci/hda/patch_realtek.c+7151</span><br>                    [ALC257_FIXUP_FT_RENAME] = &#123;.type = HDA_FIXUP_FUNC,.v.func = alc_fixup_ft_alc257_rename,&#125;,   <span class="hljs-comment">// vim sound/pci/hda/patch_realtek.c +6960</span><br>                        <span class="hljs-type">static</span> <span class="hljs-type">void</span> alc_fixup_ft_alc257_rename(<span class="hljs-keyword">struct</span> hda_codec *codec, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> hda_fixup *fix, <span class="hljs-type">int</span> action)    <span class="hljs-comment">// vim sound/pci/hda/patch_realtek.c +5721</span><br></code></pre></td></tr></table></figure><p>在提供的代码片段中：</p><p>HDA_CODEC_ENTRY(0x10ec0257, "ALC257", patch_alc269)：</p><p>0x10ec0257 是 HDA（High Definition Audio）音频编解码器的ID。它是唯一标识 ALC257 音频编解码器的数字。</p><p>"ALC257" 是音频编解码器的人类可读名称，通常反映了制造商和型号。</p><p>patch_alc269 是一个用于修复或配置 ALC257 音频编解码器的函数或补丁。</p><p>SND_PCI_QUIRK(0x10ec, 0x12f0, "BXC NF271B FT board", ALC257_FIXUP_FT_RENAME)：</p><p>0x10ec 是 Realtek Semiconductor Corp. 的 PCI 厂商ID，用于唯一标识 Realtek 的硬件设备。</p><p>0x12f0 是一个特定 PCI Subsystem ID（子系统ID），与 "BXC NF271B FT board" 相关联。这是为了应用于特定硬件设备的修复或怪癖。</p><p>"BXC NF271B FT board" 是与子系统ID相关的人类可读描述。</p><p>ALC257_FIXUP_FT_RENAME 是一个与 "BXC NF271B FT board" 相关的修复或解决方案。</p><p>因此，这两个代码片段中的数字含义如下：</p><p>0x10ec0257：代表 ALC257 音频编解码器的唯一标识符。 0x10ec：是 Realtek Semiconductor Corp. 的 PCI 厂商ID。 0x12f0：是一个特定硬件设备的 PCI Subsystem ID。</p><h2 id="pci配置寄存器">PCI配置寄存器</h2><ul><li><a href="https://cloud.tencent.com/developer/article/2164590">Linux驱动之PCI子系统剖析</a></li></ul><p>所有的PCI设备都有至少256字节的地址空间，其中前64字节是标准化的，被称为PCI配置寄存器，剩下的字节是设备相关的 (取决于具体的厂商，需要查看datasheet得知)。</p><p>PCI配置寄存器如下图所示。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/9178ba2599d6c4bb6c1f0f9a232cf3f3.png" alt="" /><figcaption>PCI配置寄存器</figcaption></figure><ul><li>Vendor ID: 标识硬件厂商，需要向特定组织进行注册。</li><li>Device ID: 由硬件厂商来分配的设备ID，无需对ID进行注册。</li><li>Subsystem ID、Subsystem Vendor ID: 用来进一步标识设备。</li></ul><h2 id="参考patch">参考patch</h2><ul><li><a href="https://patchwork.kernel.org/project/alsa-devel/patch/20220805070331.13743-1-tangmeng@uniontech.com/">ALSA: hda/realtek: Add quirk for another Asus K42JZ model</a></li><li><a href="https://patchwork.kernel.org/project/alsa-devel/patch/20220711081527.6254-1-tangmeng@uniontech.com/">ALSA: hda/realtek: Fix headset mic for Acer SF313-51</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>bugs</category>
      
      <category>226916</category>
      
      <category>patch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>236691</title>
    <link href="/linux/kernel/bugs/236691/236691/"/>
    <url>/linux/kernel/bugs/236691/236691/</url>
    
    <content type="html"><![CDATA[<h1 id="section">236691</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> x86-kernel<br>git checkout -b 5030 792cd5291a53ddd862d1d85d4cb976e80830d9eb<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// vim kern.log +6454</span><br><br><span class="hljs-number">6454</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.357296</span>] [DISP] DP Info:cbDPMonitor_GetMonitorParamsFromEdid: DP monitor supported bpc = <span class="hljs-number">8</span> <span class="hljs-comment">// vim drivers/gpu/drm/arise/cbios/Device/Monitor/CBiosDPMonitor.c +1181</span><br><span class="hljs-number">6455</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.357299</span>] [DISP] General Info:Monitor ID is: HJC003D <br><span class="hljs-number">6456</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.357301</span>] [DISP] DP Info:Can<span class="hljs-number">&#x27;</span>t get panel descriptor <span class="hljs-keyword">for</span> eDP <span class="hljs-built_in">list</span>. use <span class="hljs-keyword">default</span> table. <span class="hljs-comment">// 这个日志在内核代码中没有，说明是核外驱动</span><br><span class="hljs-number">6457</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.357302</span>] [DISP] General Info:Monitor ID is: HJC003D <br><span class="hljs-number">6458</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.357303</span>] [DISP] DP Info:Can<span class="hljs-number">&#x27;</span>t get panel descriptor <span class="hljs-keyword">for</span> eDP <span class="hljs-built_in">list</span>. use <span class="hljs-keyword">default</span> table. <br><span class="hljs-number">6459</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.357305</span>] [DISP] DP Warning:function cbEDPPanel_Init not implemented.<br><span class="hljs-number">6460</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.366070</span>] [DISP] DP Info:cbDPMonitor_Detect: DP device(<span class="hljs-number">0x10000</span>) is not connected!<br><span class="hljs-number">6461</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.401876</span>] [DISP] DP Info:cbDPMonitor_GetMonitorParamsFromEdid: DP monitor supported bpc = <span class="hljs-number">8</span><br><span class="hljs-number">6462</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.401879</span>] [DISP] General Info:Monitor ID is: HJC003D <br><span class="hljs-number">6463</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.401881</span>] [DISP] DP Info:Can<span class="hljs-number">&#x27;</span>t get panel descriptor <span class="hljs-keyword">for</span> eDP <span class="hljs-built_in">list</span>. use <span class="hljs-keyword">default</span> table. <br><span class="hljs-number">6464</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.401882</span>] [DISP] General Info:Monitor ID is: HJC003D <br><span class="hljs-number">6465</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.401883</span>] [DISP] DP Info:Can<span class="hljs-number">&#x27;</span>t get panel descriptor <span class="hljs-keyword">for</span> eDP <span class="hljs-built_in">list</span>. use <span class="hljs-keyword">default</span> table. <br><span class="hljs-number">6466</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.401884</span>] [DISP] DP Warning:function cbEDPPanel_Init not implemented.<br><span class="hljs-number">6467</span> <span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-08</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">40</span> zhangying1-PC kernel: [<span class="hljs-number">31417.410501</span>] [DISP] DP Info:cbDPMonitor_Detect: DP device(<span class="hljs-number">0x10000</span>) is not connected! <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>bugs</category>
      
      <category>236691</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Desktop Freeze on UNIS D3812 D2000</title>
    <link href="/linux/kernel/bugs/234167/Desktop%20Freeze%20on%20UNIS%20D3812%20D2000/"/>
    <url>/linux/kernel/bugs/234167/Desktop%20Freeze%20on%20UNIS%20D3812%20D2000/</url>
    
    <content type="html"><![CDATA[<h1 id="desktop-freeze-on-unis-d3812-d2000">Desktop Freeze on UNIS D3812 D2000</h1><p><a href="https://pms.uniontech.com/bug-view-234167.html" class="uri">https://pms.uniontech.com/bug-view-234167.html</a></p><p>UNIS D3812 D2000 系统资源占用过多，存在影院崩溃的情况。</p><p>桌面可以显示，但是右下角时间不动。</p><p>鼠标可以移动，键盘灯常亮，按键无响应。</p><p>新插入别的usb设备，也无法响应。</p><p>拔掉键盘再插入，键盘灯常亮，按键无响应。</p><p>拔掉鼠标后再插入，拖动鼠标无响应。</p><h2 id="初步分析">初步分析</h2><p>后台一直跑着自制的性能监测小工具，发现系统并没有死掉，但是桌面卡住了。截取部分top日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;801165,802645&#x27;</span>p top_20231218181114.log &gt; top_20231219224132.log<br></code></pre></td></tr></table></figure><p>内核版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">2023-12-18 17:56:54 username kernel: [    0.000000] Linux version 4.19.0-arm64-desktop (uosserver@uosserver-PC) (gcc version 8.3.0 (Uos 8.3.0.3-3+rebuild)) (74123f25fea1) <span class="hljs-comment">#6035 SMP Wed Jul 26 14:34:54 CST 2023</span><br></code></pre></td></tr></table></figure><p>将桌面卡主附近的kern.log中oops相关日志导出到oops_gfx.log中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash">3753 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596004] Modules linked <span class="hljs-keyword">in</span>: bnep vfs_monitor(O) udl nfnetlink_queue nfnetlink_log nfnetlink fuse st bluetooth ecdh_generic rfkill cpufreq_powersave nls_iso8859_1 nls     _cp437 aes_ce_blk crypto_simd cryptd aes_ce_cipher crct10dif_ce ghash_ce aes_arm64 sha2_ce sha256_arm64 ppdev hid_generic serio_raw sha1_ce parport_serial parport_pc parport at24 scpi_hwmon uos_resources(O) u     os_bluetooth_connection_control(O) lightorange lightnut lightfig lightcherry filearmor(O) smc_dri(O) binder_linux(O) ashmem_linux(O) efivarfs ip_tables x_tables usbkbd amdgpu usbhid chash gpu_sched radeon phy     tium_sdci mmc_core motorcomm<br>3754 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596085] CPU: 1 PID: 301 Comm: gfx Tainted: G           O      4.19.0-arm64-desktop <span class="hljs-comment">#6035</span><br>3755 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596090] Hardware name: UNIS UNIS D3812 G2 0001/MF266B, BIOS DF266AB010ZG 08/23/2023 09:09:48<br>3756 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596096] pstate: 60000085 (nZCv daIf -PAN -UAO)<br>3757 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596103] pc : __queue_delayed_work+0x94/0xb0<br>3758 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596109] lr : queue_delayed_work_on+0x50/0x68<br>3759 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596113] sp : ffff8020e367fd90<br>3760 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596117] x29: ffff8020e367fd90 x28: ffff8020e2624d10<br>3761 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596123] x27: ffff8020e2624df8 x26: ffff8020e2624d10<br>3762 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596129] x25: ffff80005a3d2d88 x24: ffff000000e50940<br>3763 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596134] x23: ffff000000e50b98 x22: ffff8020e2624d10<br>3764 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596139] x21: ffff801ff0544c00 x20: ffff80005a14fc00<br>3765 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596144] x19: 0000000000000000 x18: 0000000000000000<br>3766 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596149] x17: 0000000000000000 x16: 0000000000000000<br>3767 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596154] x15: 0000000000000000 x14: 000000806167536a<br>3768 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596160] x13: 0000000000000155 x12: 0000000000000400<br>3769 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596165] x11: 0000000000000003 x10: 00000000000008e0<br>3770 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596170] x9 : 00000000005d5564 x8 : 0000000000000000<br>3771 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596175] x7 : 0000000000000000 x6 : ffff0000080f2b18<br>3772 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596179] x5 : ffff801ff0547080 x4 : ffff801ff0544c80<br>3773 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596184] x3 : 00000000000009c4 x2 : ffff801ff0544c60<br>3774 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596189] x1 : ffff8020f6c08600 x0 : 0000000000000100<br>3775 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596195] Call trace:<br>3776 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596201]  __queue_delayed_work+0x94/0xb0<br>3777 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596207]  queue_delayed_work_on+0x50/0x68<br>3778 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596222]  drm_sched_main+0x44c/0x4b0 [gpu_sched]<br>3779 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596228]  kthread+0x128/0x130<br>3780 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596235]  ret_from_fork+0x10/0x18<br>3781 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596239] ---[ end trace 3eac7548d3296dca ]---<br>3782 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596246] ------------[ <span class="hljs-built_in">cut</span> here ]------------<br>3783 2023-12-19 22:41:36 hbyc-PC kernel: [102629.596250] kernel BUG at kernel/time/timer.c:1138!<br>3784 2023-12-19 22:41:36 hbyc-PC kernel: [102629.601214] Internal error: Oops - BUG: 0 [<span class="hljs-comment">#1] SMP</span><br>3785 2023-12-19 22:41:36 hbyc-PC kernel: [102629.606086] Modules linked <span class="hljs-keyword">in</span>: bnep vfs_monitor(O) udl nfnetlink_queue nfnetlink_log nfnetlink fuse st bluetooth ecdh_generic rfkill cpufreq_powersave nls_iso8859_1 nls     _cp437 aes_ce_blk crypto_simd cryptd aes_ce_cipher crct10dif_ce ghash_ce aes_arm64 sha2_ce sha256_arm64 ppdev hid_generic serio_raw sha1_ce parport_serial parport_pc parport at24 scpi_hwmon uos_resources(O) u     os_bluetooth_connection_control(O) lightorange lightnut lightfig lightcherry filearmor(O) smc_dri(O) binder_linux(O) ashmem_linux(O) efivarfs ip_tables x_tables usbkbd amdgpu usbhid chash gpu_sched radeon phy     tium_sdci mmc_core motorcomm<br>3786 2023-12-19 22:41:36 hbyc-PC kernel: [102629.659813] Process gfx (pid: 301, stack <span class="hljs-built_in">limit</span> = 0x000000006119d7ac)<br>3787 2023-12-19 22:41:36 hbyc-PC kernel: [102629.666248] CPU: 1 PID: 301 Comm: gfx Tainted: G        W  O      4.19.0-arm64-desktop <span class="hljs-comment">#6035</span><br>3788 2023-12-19 22:41:36 hbyc-PC kernel: [102629.674764] Hardware name: UNIS UNIS D3812 G2 0001/MF266B, BIOS DF266AB010ZG 08/23/2023 09:09:48<br>3789 2023-12-19 22:41:36 hbyc-PC kernel: [102629.683630] pstate: 60000085 (nZCv daIf -PAN -UAO)<br>3790 2023-12-19 22:41:36 hbyc-PC kernel: [102629.688503] pc : add_timer+0x20/0x28<br>3791 2023-12-19 22:41:36 hbyc-PC kernel: [102629.692159] lr : __queue_delayed_work+0x68/0xb0<br>3792 2023-12-19 22:41:36 hbyc-PC kernel: [102629.696768] sp : ffff8020e367fd80<br>3793 2023-12-19 22:41:36 hbyc-PC kernel: [102629.700161] x29: ffff8020e367fd80 x28: ffff8020e2624d10<br>3794 2023-12-19 22:41:36 hbyc-PC kernel: [102629.705554] x27: ffff8020e2624df8 x26: ffff8020e2624d10<br>3795 2023-12-19 22:41:36 hbyc-PC kernel: [102629.710947] x25: ffff80005a3d2d88 x24: ffff000000e50940<br>3796 2023-12-19 22:41:36 hbyc-PC kernel: [102629.716339] x23: ffff000000e50b98 x22: ffff8020e2624d10<br>3797 2023-12-19 22:41:36 hbyc-PC kernel: [102629.721731] x21: ffff801ff0544c00 x20: ffff80005a14fc00<br>3798 2023-12-19 22:41:36 hbyc-PC kernel: [102629.727123] x19: 0000000000000000 x18: 0000000000000000<br>3799 2023-12-19 22:41:36 hbyc-PC kernel: [102629.732514] x17: 0000000000000000 x16: 0000000000000000<br>3800 2023-12-19 22:41:36 hbyc-PC kernel: [102629.737906] x15: 0000000000000000 x14: 000000806167536a<br>3801 2023-12-19 22:41:36 hbyc-PC kernel: [102629.743298] x13: 0000000000000155 x12: 0000000000000400<br>3802 2023-12-19 22:41:36 hbyc-PC kernel: [102629.748689] x11: 0000000000000003 x10: 00000000000008e0<br>3803 2023-12-19 22:41:36 hbyc-PC kernel: [102629.754082] x9 : 00000000005d5564 x8 : 0000000000000000<br>3804 2023-12-19 22:41:36 hbyc-PC kernel: [102629.759473] x7 : 0000000000000000 x6 : ffff801ff0544c68<br>3805 2023-12-19 22:41:36 hbyc-PC kernel: [102629.764865] x5 : ffff000009807000 x4 : ffff801ff0544c80<br>3806 2023-12-19 22:41:36 hbyc-PC kernel: [102629.770256] x3 : 00000000000009c4 x2 : ffff801ff0547080<br>3807 2023-12-19 22:41:36 hbyc-PC kernel: [102629.775648] x1 : 00000001018664b3 x0 : ffff801ff0544c80<br>3808 2023-12-19 22:41:36 hbyc-PC kernel: [102629.781039] Call trace:<br>3809 2023-12-19 22:41:36 hbyc-PC kernel: [102629.783566]  add_timer+0x20/0x28<br>3810 2023-12-19 22:41:36 hbyc-PC kernel: [102629.786874]  __queue_delayed_work+0x68/0xb0<br>3811 2023-12-19 22:41:36 hbyc-PC kernel: [102629.791138]  queue_delayed_work_on+0x50/0x68<br>3812 2023-12-19 22:41:36 hbyc-PC kernel: [102629.795493]  drm_sched_main+0x44c/0x4b0 [gpu_sched]<br>3813 2023-12-19 22:41:36 hbyc-PC kernel: [102629.800450]  kthread+0x128/0x130<br>3814 2023-12-19 22:41:36 hbyc-PC kernel: [102629.803758]  ret_from_fork+0x10/0x18<br>3815 2023-12-19 22:41:36 hbyc-PC kernel: [102629.807415] Code: f9400801 97ffff21 a8c17bfd d65f03c0 (d4210000)<br>3816 2023-12-19 22:41:36 hbyc-PC kernel: [102629.813590] ---[ end trace 3eac7548d3296dcb ]---<br>3817 2023-12-19 22:41:45 hbyc-PC kernel: [102639.646128] [drm:amdgpu_job_timedout [amdgpu]] *ERROR* ring gfx <span class="hljs-built_in">timeout</span>, signaled <span class="hljs-built_in">seq</span>=27126054, emitted <span class="hljs-built_in">seq</span>=27126054<br>3818 2023-12-19 22:41:45 hbyc-PC kernel: [102639.656784] [drm] GPU recovery disabled.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">modinfo gpu_sched<br><br>filename:       /lib/modules/4.19.0-arm64-desktop/kernel/drivers/gpu/drm/scheduler/gpu-sched.ko<br>license:        GPL and additional rights<br>description:    DRM GPU scheduler<br>depends:        <br>intree:         Y<br>name:           gpu_sched<br>vermagic:       4.19.0-arm64-desktop SMP mod_unload modversions aarch64<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim drivers/gpu/drm/scheduler/Makefile +25<br><br>obj-$(CONFIG_DRM_SCHED) += gpu-sched.o<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep CONFIG_DRM_SCHED .config<br>CONFIG_DRM_SCHED=m<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs bash"> ~/code/arm-kernel/scripts/faddr2line gpu-sched.ko drm_sched_main+0x44c/0x4b0<br>drm_sched_main+0x44c/0x4b0:<br>queue_delayed_work 于 /data3/home/yuanqiliang/code/arm-kernel/./include/linux/workqueue.h:527<br>515 /**<br>516  * queue_delayed_work - queue work on a workqueue after delay<br>517  * @wq: workqueue to use<br>518  * @dwork: delayable work to queue<br>519  * @delay: number of jiffies to <span class="hljs-built_in">wait</span> before queueing<br>520  *<br>521  * Equivalent to queue_delayed_work_on() but tries to use the <span class="hljs-built_in">local</span> CPU.<br>522  */<br>523 static inline bool queue_delayed_work(struct workqueue_struct *wq,<br>524                       struct delayed_work *dwork,                                                                                                                                   <br>525                       unsigned long delay)                                                                                                           <br>526 &#123;                                                                                                                                                    <br>527     <span class="hljs-built_in">return</span> queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);   // WORK_CPU_UNBOUND 表示不绑定到特定 CPU<br>528 &#125;<br><br>(已内连入)schedule_delayed_work 于 /data3/home/yuanqiliang/code/arm-kernel/./include/linux/workqueue.h:628<br>617 /**<br>618  * schedule_delayed_work - put work task <span class="hljs-keyword">in</span> global workqueue after delay<br>619  * @dwork: job to be <span class="hljs-keyword">done</span><br>620  * @delay: number of jiffies to <span class="hljs-built_in">wait</span> or 0 <span class="hljs-keyword">for</span> immediate execution<br>621  *<br>622  * After waiting <span class="hljs-keyword">for</span> a given time this puts a job <span class="hljs-keyword">in</span> the kernel-global<br>623  * workqueue.<br>624  */<br>625 static inline bool schedule_delayed_work(struct delayed_work *dwork,<br>626                      unsigned long delay)<br>627 &#123;<br>628     <span class="hljs-built_in">return</span> queue_delayed_work(system_wq, dwork, delay);                                                                                                                             <br>629 &#125;<br><br>(已内连入)drm_sched_job_begin 于 /data3/home/yuanqiliang/code/arm-kernel/drivers/gpu/drm/scheduler/gpu_scheduler.c:598<br>586 static void drm_sched_job_begin(struct drm_sched_job *s_job)<br>587 &#123;<br>588     struct drm_gpu_scheduler *<span class="hljs-built_in">sched</span> = s_job-&gt;<span class="hljs-built_in">sched</span>;<br>589 <br>590     dma_fence_add_callback(&amp;s_job-&gt;s_fence-&gt;finished, &amp;s_job-&gt;finish_cb,<br>591                    drm_sched_job_finish_cb);<br>592 <br>593     spin_lock(&amp;<span class="hljs-built_in">sched</span>-&gt;job_list_lock);<br>594     list_add_tail(&amp;s_job-&gt;node, &amp;<span class="hljs-built_in">sched</span>-&gt;ring_mirror_list);<br>595     <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sched</span>-&gt;<span class="hljs-built_in">timeout</span> != MAX_SCHEDULE_TIMEOUT &amp;&amp;<br>596         list_first_entry_or_null(&amp;<span class="hljs-built_in">sched</span>-&gt;ring_mirror_list,<br>597                      struct drm_sched_job, node) == s_job)<br>598         schedule_delayed_work(&amp;s_job-&gt;work_tdr, <span class="hljs-built_in">sched</span>-&gt;<span class="hljs-built_in">timeout</span>);                                                                                                                    <br>599     spin_unlock(&amp;<span class="hljs-built_in">sched</span>-&gt;job_list_lock);<br>600 &#125;<br><br>(已内连入)drm_sched_main 于 /data3/home/yuanqiliang/code/arm-kernel/drivers/gpu/drm/scheduler/gpu_scheduler.c:876<br>840 /**<br>841  * drm_sched_main - main scheduler thread                                                                                                                                           <br>842  *<br>843  * @param: scheduler instance<br>844  *<br>845  * Returns 0.<br>846  */<br>847 static int drm_sched_main(void *param)<br>848 &#123;<br>849     struct sched_param sparam = &#123;.sched_priority = 1&#125;;<br>850     struct drm_gpu_scheduler *<span class="hljs-built_in">sched</span> = (struct drm_gpu_scheduler *)param;<br>851     int r;<br>852 <br>853     sched_setscheduler(current, SCHED_FIFO, &amp;sparam);<br>854 <br>855     <span class="hljs-keyword">while</span> (!kthread_should_stop()) &#123;<br>856         struct drm_sched_entity *entity = NULL;<br>857         struct drm_sched_fence *s_fence;<br>858         struct drm_sched_job *sched_job;<br>859         struct dma_fence *fence;<br>860 <br>861         wait_event_interruptible(<span class="hljs-built_in">sched</span>-&gt;wake_up_worker,<br>862                      (!drm_sched_blocked(<span class="hljs-built_in">sched</span>) &amp;&amp;<br>863                       (entity = drm_sched_select_entity(<span class="hljs-built_in">sched</span>))) ||<br>864                      kthread_should_stop());<br>865 <br>866         <span class="hljs-keyword">if</span> (!entity)<br>867             <span class="hljs-built_in">continue</span>;<br>868 <br>869         sched_job = drm_sched_entity_pop_job(entity);<br>870         <span class="hljs-keyword">if</span> (!sched_job)<br>871             <span class="hljs-built_in">continue</span>;<br>872 <br>873         s_fence = sched_job-&gt;s_fence;<br>874 <br>875         atomic_inc(&amp;<span class="hljs-built_in">sched</span>-&gt;hw_rq_count);<br>876         drm_sched_job_begin(sched_job);<br>877 <br>878         fence = <span class="hljs-built_in">sched</span>-&gt;ops-&gt;run_job(sched_job);<br>879         drm_sched_fence_scheduled(s_fence);<br>880 <br>881         <span class="hljs-keyword">if</span> (fence) &#123;<br>882             s_fence-&gt;parent = dma_fence_get(fence);<br>883             r = dma_fence_add_callback(fence, &amp;s_fence-&gt;cb,<br>884                            drm_sched_process_job);<br>885             <span class="hljs-keyword">if</span> (r == -ENOENT)<br>886                 drm_sched_process_job(fence, &amp;s_fence-&gt;cb);<br>887             <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (r)<br>888                 DRM_ERROR(<span class="hljs-string">&quot;fence add callback failed (%d)\n&quot;</span>,<br>889                       r);<br>890             dma_fence_put(fence);<br>891         &#125; <span class="hljs-keyword">else</span> &#123;<br>892             drm_sched_process_job(NULL, &amp;s_fence-&gt;cb);<br>893         &#125;<br>894 <br>895         wake_up(&amp;<span class="hljs-built_in">sched</span>-&gt;job_scheduled);<br>896     &#125;<br>897     <span class="hljs-built_in">return</span> 0;<br>898 &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c">objdump -d -l -S gpu-sched.ko &gt; gpu-sched.objdump<br><br>vim gpu-sched.objdump +<span class="hljs-number">2821</span><br><br><span class="hljs-number">0000000000001448</span> &lt;drm_sched_main&gt;:  <span class="hljs-comment">// 0x1448+0x44c=0x1894</span><br>drm_sched_main():<br>/data3/home/yuanqiliang/code/arm-kernel/drivers/gpu/drm/scheduler/gpu_scheduler.c:<span class="hljs-number">848</span><br>&#123;<br>    <span class="hljs-number">1448</span>:a9b67bfd stpx29, x30, [sp, #<span class="hljs-number">-160</span>]!<br>/data3/home/yuanqiliang/code/arm-kernel/drivers/gpu/drm/scheduler/gpu_scheduler.c:<span class="hljs-number">849</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_param</span> <span class="hljs-title">sparam</span> =</span> &#123;.sched_priority = <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-number">144</span>c:<span class="hljs-number">52800023</span> movw3, #<span class="hljs-number">0x1</span>                   <span class="hljs-comment">// #1</span><br>/data3/home/yuanqiliang/code/arm-kernel/drivers/gpu/drm/scheduler/gpu_scheduler.c:<span class="hljs-number">853</span><br>sched_setscheduler(current, SCHED_FIFO, &amp;sparam);<br>    <span class="hljs-number">1450</span>:<span class="hljs-number">2</span>a0303e1 movw1, w3<br>/data3/home/yuanqiliang/code/arm-kernel/drivers/gpu/drm/scheduler/gpu_scheduler.c:<span class="hljs-number">848</span><br>&#123;<br>    <span class="hljs-number">1454</span>:<span class="hljs-number">910003f</span>d movx29, sp<br>    <span class="hljs-number">1458</span>:a9025bf5 stpx21, x22, [sp, #<span class="hljs-number">32</span>]<br>    <span class="hljs-number">145</span>c:aa0003f6 movx22, x0<br>......<br>......<br>......<br>/data3/home/yuanqiliang/code/arm-kernel/drivers/gpu/drm/scheduler/gpu_scheduler.c:<span class="hljs-number">886</span><br>drm_sched_process_job(fence, &amp;s_fence-&gt;cb);<br>    <span class="hljs-number">1870</span>:aa1503e1 movx1, x21<br>    <span class="hljs-number">1874</span>:aa1303e0 movx0, x19<br>    <span class="hljs-number">1878</span>:<span class="hljs-number">97f</span>ffd58 bldd8 &lt;drm_sched_process_job&gt;<br>    <span class="hljs-number">187</span>c:<span class="hljs-number">17f</span>fffab b<span class="hljs-number">1728</span> &lt;drm_sched_main+<span class="hljs-number">0x2e0</span>&gt;<br>schedule_delayed_work():<br>/data3/home/yuanqiliang/code/arm-kernel/./include/linux/workqueue.h:<span class="hljs-number">628</span><br><span class="hljs-keyword">return</span> queue_delayed_work(system_wq, dwork, delay);<br>    <span class="hljs-number">1880</span>:<span class="hljs-number">90000001</span> adrpx1, <span class="hljs-number">0</span> &lt;system_wq&gt;<br>queue_delayed_work():<br>/data3/home/yuanqiliang/code/arm-kernel/./include/linux/workqueue.h:<span class="hljs-number">527</span><br><span class="hljs-keyword">return</span> queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);<br>    <span class="hljs-number">1884</span>: <span class="hljs-number">91004042</span>  add x2, x2, #<span class="hljs-number">0x10</span>    ; 将 x2 寄存器的值加上 <span class="hljs-number">0x10</span><br>    <span class="hljs-number">1888</span>: <span class="hljs-number">52802000</span>  mov w0, #<span class="hljs-number">0x100</span>      ; 将 w0 寄存器的值设置为 <span class="hljs-number">0x100</span><br>    <span class="hljs-number">188</span>c: f9400021  ldr x1, [x1]        ; 从存储在 x1 寄存器中的地址处加载一个 <span class="hljs-number">64</span> 位值到 x1 寄存器<br>    <span class="hljs-number">1890</span>: <span class="hljs-number">94000000</span>  bl <span class="hljs-number">0</span> &lt;queue_delayed_work_on&gt;  ; 调用一个函数，函数地址为 <span class="hljs-number">0</span>，即 queue_delayed_work_on<br>    <span class="hljs-number">1894</span>: <span class="hljs-number">17f</span>fff8e  b <span class="hljs-number">16</span>cc &lt;drm_sched_main+<span class="hljs-number">0x284</span>&gt;  ; 无条件分支到地址 <span class="hljs-number">16</span>cc  <span class="hljs-comment">// 0x1448+0x44c=0x1894</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">/data3/home/yuanqiliang/code/arm-kernel/./include/<span class="hljs-keyword">asm</span>-generic/qspinlock.h:<span class="hljs-number">101</span><br>smp_store_release(&amp;lock-&gt;locked, <span class="hljs-number">0</span>);<br>    <span class="hljs-number">16</span>cc:<span class="hljs-number">52800000</span> movw0, #<span class="hljs-number">0x0</span>                   <span class="hljs-comment">// #0</span><br>    <span class="hljs-number">16</span>d0:<span class="hljs-number">91050261</span> addx1, x19, #<span class="hljs-number">0x140</span><br>    <span class="hljs-number">16</span>d4:<span class="hljs-number">089f</span>fc20 stlrbw0, [x1]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./scripts/faddr2line vmlinux add_timer+0x20/0x28<br>add_timer+0x20/0x28:<br>add_timer 于 kernel/time/timer.c:1138<br>(已内连入)add_timer 于 kernel/time/timer.c:1136<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">add_timer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> timer_list *timer)</span>  <span class="hljs-comment">// vim kernel/time/timer.c +1138</span><br>&#123;<br>BUG_ON(timer_pending(timer));<br>mod_timer(timer, timer-&gt;expires);<br>&#125;<br>EXPORT_SYMBOL(add_timer);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUG_ON(condition) do &#123; <span class="hljs-keyword">if</span> (unlikely(condition)) BUG(); &#125; while (0)</span><br></code></pre></td></tr></table></figure><p>该宏接受一个条件表达式作为参数。如果条件表达式为真（即非零），则会调用BUG()宏，导致程序终止并生成错误报告。</p><p>timer_pending(timer) 是一个函数或宏，用于检查指定的定时器是否处于挂起状态。如果定时器已经被挂起，表示存在错误的状态，那么BUG_ON()宏就会触发一个BUG，导致程序终止执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">objdump -d -l -S timer.o &gt; timer.objdump<br><br>vim timer.objdump +<span class="hljs-number">5179</span><br><br><span class="hljs-number">5179</span> <span class="hljs-number">00000000000027</span>c8 &lt;add_timer&gt;:  <span class="hljs-comment">// 0x27c8+0x20=0x27e8</span><br><span class="hljs-number">5180</span> add_timer():<br><span class="hljs-number">5181</span> /data3/home/yuanqiliang/code/arm-kernel/kernel/time/timer.c:<span class="hljs-number">1137</span><br><span class="hljs-number">5182</span> &#123;<br><span class="hljs-number">5183</span>     <span class="hljs-number">27</span>c8:   a9bf7bfd    stp x29, x30, [sp, #<span class="hljs-number">-16</span>]!<br><span class="hljs-number">5184</span>     <span class="hljs-number">27</span>cc:   <span class="hljs-number">910003f</span>d    mov x29, sp<br><span class="hljs-number">5185</span> /data3/home/yuanqiliang/code/arm-kernel/kernel/time/timer.c:<span class="hljs-number">1138</span><br><span class="hljs-number">5186</span>     BUG_ON(timer_pending(timer));<br><span class="hljs-number">5187</span>     <span class="hljs-number">27</span>d0:   f9400402    ldr x2, [x0, #<span class="hljs-number">8</span>]<br><span class="hljs-number">5188</span>     <span class="hljs-number">27</span>d4:   b50000a2    cbnz    x2, <span class="hljs-number">27e8</span> &lt;add_timer+<span class="hljs-number">0x20</span>&gt;<br><span class="hljs-number">5189</span> /data3/home/yuanqiliang/code/arm-kernel/kernel/time/timer.c:<span class="hljs-number">1139</span><br><span class="hljs-number">5190</span>     mod_timer(timer, timer-&gt;expires);<br><span class="hljs-number">5191</span>     <span class="hljs-number">27</span>d8:   f9400801    ldr x1, [x0, #<span class="hljs-number">16</span>]<br><span class="hljs-number">5192</span>     <span class="hljs-number">27</span>dc:   <span class="hljs-number">94000000</span>    bl  <span class="hljs-number">2460</span> &lt;mod_timer&gt;<br><span class="hljs-number">5193</span> /data3/home/yuanqiliang/code/arm-kernel/kernel/time/timer.c:<span class="hljs-number">1140</span><br><span class="hljs-number">5194</span> &#125;<br><span class="hljs-number">5195</span>     <span class="hljs-number">27e0</span>:   a8c17bfd    ldp x29, x30, [sp], #<span class="hljs-number">16</span><br><span class="hljs-number">5196</span>     <span class="hljs-number">27e4</span>:   d65f03c0    ret <br><span class="hljs-number">5197</span> /data3/home/yuanqiliang/code/arm-kernel/kernel/time/timer.c:<span class="hljs-number">1138</span><br><span class="hljs-number">5198</span>     BUG_ON(timer_pending(timer));<br><span class="hljs-number">5199</span>     <span class="hljs-number">27e8</span>:   d4210000    brk #<span class="hljs-number">0x800</span>  <span class="hljs-comment">// 0x27c8+0x20=0x27e8</span><br><span class="hljs-number">5200</span>     <span class="hljs-number">27</span>ec:   d503201f    nop <br></code></pre></td></tr></table></figure><p>brk #0x800 触发了一个软中断，参数为 0x800。软中断通常被用于在程序中插入调试点，以便在这里停下程序的执行，以便进行调试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">144</span> <span class="hljs-comment">/**</span><br><span class="hljs-comment">145  * timer_pending - is a timer pending?</span><br><span class="hljs-comment">146  * @timer: the timer in question</span><br><span class="hljs-comment">147  *</span><br><span class="hljs-comment">148  * timer_pending will tell whether a given timer is currently pending,</span><br><span class="hljs-comment">149  * or not. Callers must ensure serialization wrt. other operations done</span><br><span class="hljs-comment">150  * to this timer, eg. interrupt contexts, or other CPUs on SMP.</span><br><span class="hljs-comment">151  *</span><br><span class="hljs-comment">152  * return value: 1 if the timer is pending, 0 if not.</span><br><span class="hljs-comment">153  */</span><br><span class="hljs-number">154</span> <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">timer_pending</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timer_list * timer)</span><br>155 &#123;<br><span class="hljs-number">156</span>     <span class="hljs-keyword">return</span> timer-&gt;entry.pprev != <span class="hljs-literal">NULL</span>;<br><span class="hljs-number">157</span> &#125;<br></code></pre></td></tr></table></figure><p>timer_pending函数检查给定的定时器是否处于等待状态。当 timer-&gt;entry.pprev 不为 NULL 时，表示定时器当前处于等待状态，返回 1；否则，返回 0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">11</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_list</span> &#123;</span> <span class="hljs-comment">// vim include/linux/timer.h +11</span><br><span class="hljs-number">12</span>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">13      * All fields that change during normal runtime grouped to the</span><br><span class="hljs-comment">14      * same cacheline 所有在正常运行时发生变化的字段被分组到相同的缓存行中</span><br><span class="hljs-comment">15      */</span><br><span class="hljs-number">16</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_node</span>   <span class="hljs-title">entry</span>;</span>  <span class="hljs-comment">// 链入定时器特定哈希表的节点</span><br><span class="hljs-number">17</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>       expires;  <span class="hljs-comment">// 定时器到期时间，以节拍（jiffies）为单位</span><br><span class="hljs-number">18</span>     <span class="hljs-type">void</span>            (*function)(<span class="hljs-keyword">struct</span> timer_list *);  <span class="hljs-comment">// 定时器到期时执行的回调函数</span><br><span class="hljs-number">19</span>     u32         flags;  <span class="hljs-comment">// 定时器标志</span><br><span class="hljs-number">20</span> <br><span class="hljs-number">21</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_LOCKDEP</span><br><span class="hljs-number">22</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lockdep_map</span>  <span class="hljs-title">lockdep_map</span>;</span>  <span class="hljs-comment">// 用于调试的锁依赖图</span><br><span class="hljs-number">23</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-number">24</span> &#125;; <br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/hxhardway/article/details/79037332">笔记之内核定时器（timer_list）</a></li></ul><p>在 GPU 调度器（gpu_sched）中，如果 timer_list 为空，通常表示当前没有定时器在等待执行。这可能是正常的状态，尤其是当没有 GPU 任务或者所有 GPU 任务都已经及时完成时。</p><p>具体来说，timer_list 一般用于跟踪 GPU 调度器中的计时器，这些计时器可能用于任务的超时、延迟或其他与时间相关的操作。当没有任务等待执行，或者已经按时完成，timer_list 可能为空。</p><p>如果你观察到 timer_list 为空，但 GPU 任务并未按预期执行，可能需要进一步调查原因。可能的原因包括：</p><p>任务完成： 当 GPU 任务按时完成时，相关的计时器可能会被取消，从而导致 timer_list 为空。</p><p>任务延迟： 如果任务因某些原因而延迟执行，相关的计时器可能还在等待。在这种情况下，你可能需要检查任务执行的日志或其他调试信息，以找到延迟的原因。</p><p>调度器问题： 如果 GPU 调度器本身存在问题，可能导致计时器未正确添加或处理。在这种情况下，你可能需要查看 GPU 调度器的源代码、文档或相关的日志信息。</p><p>总的来说，timer_list 为空并不一定表示问题，这可能是 GPU 调度器正常运行的一部分。然而，如果你怀疑有问题，最好检查相关的调试信息以了解更多上下文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">3817 2023-12-19 22:41:45 hbyc-PC kernel: [102639.646128] [drm:amdgpu_job_timedout [amdgpu]] *ERROR* ring gfx <span class="hljs-built_in">timeout</span>, signaled <span class="hljs-built_in">seq</span>=27126054, emitted <span class="hljs-built_in">seq</span>=27126054<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">215</span> <span class="hljs-comment">/**</span><br><span class="hljs-comment">216  * DOC: lockup_timeout (int)</span><br><span class="hljs-comment">217  * Set GPU scheduler timeout value in ms. Value 0 is invalidated, will be adjusted to 10000.</span><br><span class="hljs-comment">218  * Negative values mean &#x27;infinite timeout&#x27; (MAX_JIFFY_OFFSET). The default is 10000.</span><br><span class="hljs-comment">219  */</span><br><span class="hljs-number">220</span> MODULE_PARM_DESC(lockup_timeout, <span class="hljs-string">&quot;GPU lockup timeout in ms &gt; 0 (default 10000)&quot;</span>);<br><span class="hljs-number">221</span> module_param_named(lockup_timeout, amdgpu_lockup_timeout, <span class="hljs-type">int</span>, <span class="hljs-number">0444</span>);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /sys/module/amdgpu/parameters/lockup_timeout<br>10000<br></code></pre></td></tr></table></figure><p>amdgpu_job_timedout: 当调度器执行任务超时，调用的超时处理回调函数。</p><h2 id="继续排查">继续排查</h2><p>将<code>lockup_timeout</code>参数调大:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 20000 &gt; /sys/module/your_module/parameters/lockup_timeout<br></code></pre></td></tr></table></figure><ul><li><a href="https://bbs.archlinux.org/viewtopic.php?id=253848">[SOLVED?] Frequent Freezes/Crashes with AMD 5700 XT</a></li><li><a href="https://bbs.loongarch.org/d/278-amdgpu/10">关于amdgpu驱动崩溃问题</a></li></ul><p>cpu动态调频开启没？</p><p>gpu调频开启没？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">trace-bpfcc -tUK amdgpu_set_dpm_forced_performance_level<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>bugs</category>
      
      <category>234167</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pt620k 1031 freezes on desktop after password entry</title>
    <link href="/linux/kernel/bugs/227273/pt620k%201031%20freezes%20on%20desktop%20after%20password%20entry/"/>
    <url>/linux/kernel/bugs/227273/pt620k%201031%20freezes%20on%20desktop%20after%20password%20entry/</url>
    
    <content type="html"><![CDATA[<h1 id="pt620k-1031-freezes-on-desktop-after-password-entry">pt620k 1031 freezes on desktop after password entry</h1><p>开机进入桌面后，桌面有显示，鼠标键盘无响应，键盘灯常亮。</p><p><a href="https://pms.uniontech.com/bug-view-227273.html" class="uri">https://pms.uniontech.com/bug-view-227273.html</a></p><h2 id="初步分析">初步分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cmdline<br><br>BOOT_IMAGE=/vmlinuz-4.19.0-arm64-desktop-kdump-lockdep root=UUID=bd4b592f-4763-45a0-91cb-a055c8addaa8 ro splash initcall_debug ignore_loglevel console=ttyAMA0,115200 no_console_suspend <span class="hljs-string">&quot;dyndbg=file *usb* +p&quot;</span> plymouth.ignore-serial-consoles DEEPIN_GFXMODE= crashkernel=1024M-:512M<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 大坪监狱串口日志-20231228-2.log</span><br><br>Unhandled Exception <span class="hljs-keyword">in</span> EL3.<br>x30 =           0x000000003fc96bdc<br>x0 =            0x000000000000000a<br>x1 =            0x0000000094080000<br>x2 =            0x0000000000000018<br>x3 =            0x000000003fc96a44<br>x4 =            0x0000000000000000<br>x5 =            0x000000003ff3b5f0<br>x6 =            0x000000003fc991d9<br>x7 =            0x000000003ff3b5f0<br>x8 =            0x0000000000000000<br>x9 =            0x00008023e5c49000<br>x10 =           0x0000ffff8150a150<br>x11 =           0x0000000000000000<br>x12 =           0x0000000000000000<br>x13 =           0x0000000000000000<br>x14 =           0x0000000000000000<br>x15 =           0x0000000000000000<br>x16 =           0x0000000000000058<br>x17 =           0x0000000000000000<br>x18 =           0xffff8023b6bd4a40<br>x19 =           0x0000000000000001<br>x20 =           0x0000000000000025<br>x21 =           0xffff800000000100<br>x22 =           0xffff00000a795ff0<br>x23 =           0x00000000a04003c9<br>x24 =           0x0000000000000025<br>x25 =           0xffff8023ef0b82f8<br>x26 =           0xffff00000908ebb8<br>x27 =           0xffff80000181ee50<br>x28 =           0xffff8023b6bd4a40<br>x29 =           0x000000003fcfd210<br>scr_el3 =               0x000000000000073d<br>sctlr_el3 =             0x0000000030cd183f<br>cptr_el3 =              0x0000000000000000<br>tcr_el3 =               0x0000000080853511<br>daif =          0x00000000000003c0<br>mair_el3 =              0x00000000004404ff<br>spsr_el3 =              0x00000000604003cd<br>elr_el3 =               0x000000003fc96bec<br>ttbr0_el3 =             0x000000003fedf800<br>esr_el3 =               0x0000000002000000<br>far_el3 =               0xffff7dfdffffff10<br>spsr_el1 =              0x0000000000000000<br>elr_el1 =               0x0000000000000000<br>spsr_abt =              0x0000000000000000<br>spsr_und =              0x0000000000000000<br>spsr_irq =              0x0000000000000000<br>spsr_fiq =              0x0000000000000000<br>sctlr_el1 =             0x0000000030500980<br>actlr_el1 =             0x0000000000000080<br>cpacr_el1 =             0x0000000000300000<br>csselr_el1 =            0x0000000000000000<br>sp_el1 =                0x0000000000000000<br>esr_el1 =               0x0000000000000000<br>ttbr0_el1 =             0x0000000000000000<br>ttbr1_el1 =             0x0000000000000000<br>mair_el1 =              0x0000000000000000<br>amair_el1 =             0x0000000000000000<br></code></pre></td></tr></table></figure><p>EL3 表示 Exception Level 3，是 ARM TrustZone 技术中的最高特权级别。在这个级别，通常运行的是安全的监管模式。</p><p>异常可能是由硬件故障、固件问题、或者内核代码中的错误引起的。</p><p>esr_el3 = 0x0000000002000000</p><p>十六进制 0x0000000002000000 对应的二进制是 00000000000000000000000000000010000000000000000000000000。</p><p>从这个二进制表示中，提取 EC 字段，即取从第 26 位到第 31 位的二进制值，得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">EC = 0b100000<br></code></pre></td></tr></table></figure><p>将这个二进制值转换为十进制，得到 32。所以，对于 esr_el3 = 0x0000000002000000，EC 字段的值是 32。</p><ul><li><a href="https://developer.arm.com/documentation/ddi0595/2021-12/AArch64-Registers/ESR-EL3--Exception-Syndrome-Register--EL3-?lang=en">ESR_EL3, Exception Syndrome Register (EL3)</a></li></ul><table><thead><tr class="header"><th>EC</th><th>Meaning</th><th>ISS</th><th>Applies when</th></tr></thead><tbody><tr class="odd"><td>0b100000</td><td>Instruction Abort from a lower Exception level.</td><td>Used for MMU faults generated by instruction accesses and synchronous External aborts, including synchronous parity or ECC errors. Not used for debug-related exceptions.</td><td>ISS encoding for an exception from an Instruction Abort</td></tr><tr class="even"><td>0b100000</td><td>来自较低异常级别的指令中断</td><td>用于由指令访问引起的MMU故障以及同步的外部中断，包括同步的奇偶校验错误或ECC错误。不用于与调试相关的异常</td><td>ISS（Instruction Specific Syndrome）编码用于指令中断引起的异常</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 大坪监狱串口日志-20231228-4.log</span><br><br>[   18.324953] Call trace:<br>[   18.327387]  dump_backtrace+0x0/0x190<br>[   18.331034]  show_stack+0x14/0x20<br>[   18.334336]  dump_stack+0xc8/0x104<br>[   18.337724]  validate_chain.isra.20+0xc20/0xcb0<br>[   18.342241]  __lock_acquire+0x2e0/0x700<br>[   18.346063]  lock_acquire+0xe0/0x230<br>[   18.349624]  __mutex_lock+0x7c/0x840<br>[   18.353185]  mutex_lock_interruptible_nested+0x1c/0x28<br>[   18.358314]  FUNC206LXDEV116+0x5c/0xb8 [mwv206]<br>[   18.362838]  FUNC206HAL282+0x14/0x28 [mwv206]<br>[   18.367188]  FUNC206HAL398+0x3c/0x470 [mwv206]<br>[   18.371623]  FUNC206HAL274+0x5c/0x84 [mwv206]<br>[   18.375972]  FUNC206HAL002.isra.1.constprop.2+0x504/0xc48 [mwv206]<br>[   18.382144]  FUNC206HAL148+0x348/0x5e0 [mwv206]<br>[   18.386666]  FUNC206LXDEV064+0x130/0x408 [mwv206]<br>[   18.391356]  pci_device_probe+0xdc/0x188<br>[   18.395265]  really_probe+0x23c/0x3c8<br>[   18.398913]  driver_probe_device+0x64/0x130<br>[   18.403081]  __driver_attach+0x134/0x160<br>[   18.406990]  bus_for_each_dev+0x60/0x98<br>[   18.410811]  driver_attach+0x20/0x28<br>[   18.414372]  bus_add_driver+0x1a0/0x280<br>[   18.418193]  driver_register+0x60/0x110<br>[   18.422015]  __pci_register_driver+0x58/0x68<br>[   18.426278]  FUNC206LXDEV054+0xb4/0x1000 [mwv206]<br>[   18.430967]  do_one_initcall+0x70/0x330<br>[   18.434789]  do_init_module+0x58/0x1d0<br>[   18.438523]  load_module+0x1308/0x15b8<br>[   18.442258]  __se_sys_finit_module+0x84/0xc8<br>[   18.446513]  __arm64_sys_finit_module+0x18/0x20<br>[   18.451030]  el0_svc_common+0x9c/0x188<br>[   18.454764]  el0_svc_handler+0x9c/0xa8<br>[   18.458499]  el0_svc+0x8/0xc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">modinfo mwv206<br><br>filename:       /lib/modules/4.19.0-arm64-desktop-kdump-lockdep/kernel/drivers/gpu/drm/mwv206/mwv206.ko<br>license:        GPL v2<br>description:    JM7200 GPU driver<br>author:         rfshen &lt;jjwgpu@jingjiamicro.com&gt;<br><span class="hljs-built_in">alias</span>:          pci:v00000731d00007200sv*sd*bc*sc*i*<br>depends:        snd-pcm,snd<br>intree:         Y<br>name:           mwv206<br>vermagic:       4.19.0-arm64-desktop-kdump-lockdep SMP mod_unload modversions aarch64<br>parm:           disable_vblank_sync:Disable vblank <span class="hljs-built_in">sync</span>, state change occurs when no 3D is running (int)<br></code></pre></td></tr></table></figure><p>景嘉微显卡驱动区存在死锁有问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 大坪监狱串口日志-20231228-4.log</span><br><br>[   40.131272] usb 1-2.3: ep 04: release iso @ 7+8 (0.7+1) [6/0 us] mask 0000<br>[   40.197002] usb 1-2.3: ep 04: reserve iso @ 7+8 (0.7+1) [6/0 us] mask 0000<br>[   40.239818] usb 1-2.3: ep 81: reserve iso @ 7+8 (0.7+1) [3/0 us] mask 0000<br>[   45.283141] usb 1-2.3: ep 81: release iso @ 7+8 (0.7+1) [3/0 us] mask 0000<br>[   45.543271] usb 1-2.3: ep 04: release iso @ 7+8 (0.7+1) [6/0 us] mask 0000<br></code></pre></td></tr></table></figure><p>usb端点04、81的iso缓存都被释放了，导致鼠标键盘无响应。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim 20240104-2.<span class="hljs-built_in">log</span> +3520<br><br>3520 [  269.934461] CPU: 6 PID: 3940 Comm: lastore-smartmi Kdump: loaded Tainted: G    B   W         4.19.0-arm64-desktop-kdump-lockdep <span class="hljs-comment">#3103</span><br>3521 [  269.939758]  proc_evict_inode+0x20/0x58<br>3522 [  269.939760]  evict+0xa0/0x170<br>3523 [  269.943406] Hardware name: N/A N/A/Kunpeng Desktop Board D920S10, BIOS 2.0 01/08/2021<br>3524 [  269.946706]  iput+0x1f0/0x2e0<br>3525 [  269.946708]  dentry_unlink_inode+0xac/0xe0<br>3526 [  269.952004] Call trace:<br>3527 [  269.955391]  __dentry_kill+0xc0/0x1b0<br>3528 [  269.955392]  dentry_kill+0x4c/0x1a0<br>3529 [  269.958692]  dump_backtrace+0x0/0x190<br>3530 [  269.958693]  show_stack+0x14/0x20<br>3531 [  269.963989]  dput+0x2b4/0x2f8<br>3532 [  269.963991]  path_put+0x18/0x30<br>3533 [  269.967984]  dump_stack+0xc8/0x104<br>3534 [  269.967985]  bad_page+0x104/0x130<br>3535 [  269.972500]  vfs_statx+0xa0/0xd8<br>3536 [  269.972502]  __se_sys_newfstatat+0x24/0x48<br>3537 [  269.977797]  check_new_page_bad+0x6c/0x90<br>3538 [  269.977799]  get_page_from_freelist+0x484/0xda8<br>3539 [  269.982313]  __arm64_sys_newfstatat+0x18/0x20<br>3540 [  269.982316]  el0_svc_common+0x9c/0x188<br>3541 [  269.987090]  __alloc_pages_nodemask+0xf4/0x1010<br>3542 [  269.987091]  do_huge_pmd_anonymous_page+0xf0/0x800<br>3543 [  269.992387]  el0_svc_handler+0x9c/0xa8<br>3544 [  269.992389]  el0_svc+0x8/0xc<br>3545 [  269.996469]  __handle_mm_fault+0x738/0x8a0<br>3546 [  269.996471]  handle_mm_fault+0x1c4/0x330<br>3547 [  270.000379] Code: f9007260 a94153f3 a8c27bfd d65f03c0 (d4210000) <br>3548 [  270.009147]  do_page_fault+0x194/0x4a8<br>3549 [  270.009148]  do_translation_fault+0x58/0x60<br>3550 [  270.017918] SMP: stopping secondary CPUs<br>3551 [  270.020695]  do_mem_abort+0x3c/0xd0<br>3552 [  270.020696]  el0_da+0x20/0x24<br>3553 [  270.497131] BUG: Bad page state <span class="hljs-keyword">in</span> process lastore-smartmi  pfn:23be207<br>3554 [  270.503731] page:ffff7e008ef881c0 count:0 mapcount:0 mapping:0000000000000010 index:0x0<br>3555 [  270.511720] flags: 0x4000000000000000()<br>3556 [  270.515543] raw: 4000000000000000 0000000000000000 ffff7e008ef881c8 0000000000000010<br>3557 [  270.523272] raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000                                                                                            <br>3558 [  270.530999] page dumped because: non-NULL mapping<br></code></pre></td></tr></table></figure><p>可能存在物理内存硬件问题导致物理页面状态异常，进一步导致鼠标键盘无响应。</p><h2 id="修复方案">修复方案</h2><p>更新景嘉微驱动，新版本驱动可能修复死锁问题。</p><p>更换内存条。</p><h2 id="more">More</h2><ul><li><a href="https://blog.csdn.net/BillyThe/article/details/132166361">【ARM 调试】如何从 crash 信息找出问题原因</a></li></ul><h3 id="exception-level">Exception Level</h3><p>在 ARM 体系结构中，Exception Level（EL）是指不同的特权级别，从 EL0 到 EL3。这些级别对应了 ARM 处理器上不同的执行上下文。以下是 EL0 到 EL3 的简要解释：</p><p>EL0（Exception Level 0）：用户空间（User Space）</p><ul><li>EL0 是最低的特权级别，对应用户空间。</li><li>在 EL0 上执行的代码是用户态的应用程序代码。</li><li>EL0 没有对整个系统状态的完全控制权限，只能执行受限的操作。</li></ul><p>EL1（Exception Level 1）：内核空间（Kernel Space）</p><ul><li><p>EL1 对应内核空间，也称为监管模式。</p></li><li><p>在 EL1 上执行的代码是操作系统内核代码，具有对整个系统状态的完全控制权限。</p></li><li><p>当用户空间程序执行系统调用或触发异常时，处理器会从 EL0 切换到 EL1 来执行内核代码。</p></li><li><p>EL2（Exception Level 2）：Hypervisor 模式</p></li><li><p>EL2 是虚拟化扩展的一部分，对应虚拟机监视器（Hypervisor）模式。</p></li><li><p>当系统在虚拟化环境中运行时，EL2 用于执行虚拟机监视器代码，以监视和管理虚拟机。</p></li></ul><p>EL3（Exception Level 3）：Secure Monitor 模式</p><ul><li>EL3 对应 Secure Monitor 模式，主要用于 ARM TrustZone 技术中的安全执行环境。</li><li>Secure Monitor 是一个特殊的监管模式，用于执行安全任务，例如处理 TrustZone 安全事件。</li></ul><p>在 ARM 64 位体系结构（AArch64），EL2 和 EL3 是可选的，而在 ARM 32 位体系结构（AArch32），EL2 和 EL3 是必需的。这些不同的 EL 提供了不同特权级别，以实现对系统硬件和软件的灵活控制，同时支持虚拟化和安全性需求。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>bugs</category>
      
      <category>227273</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>s4 cannot go to sleep</title>
    <link href="/linux/kernel/bugs/236037/s4%20cannot%20go%20to%20sleep/"/>
    <url>/linux/kernel/bugs/236037/s4%20cannot%20go%20to%20sleep/</url>
    
    <content type="html"><![CDATA[<h1 id="s4-cannot-go-to-sleep">s4 cannot go to sleep</h1><p>236037</p><h2 id="正常机器">正常机器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Downloads/sjgd20231215001/sjgd20231215001/没问题机器all_log_files_20231213_10：35/all_log_files/kernel<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">19 2023-12-05 14:32:51 T-KT013M30 kernel: [    0.000000] Linux version 4.19.0-amd64-desktop (uos@x86-compile-PC) (gcc version 8.3.0 (Uos 8.3.0.5-1+dde)) <span class="hljs-comment">#5317 SMP Mon Feb 6 16:04:31 CST 2023                     </span><br> 20 2023-12-05 14:32:51 T-KT013M30 kernel: [    0.000000] Command line: BOOT_IMAGE=/vmlinuz-4.19.0-amd64-desktop root=UUID=2bca42f1-05dc-42b8-b3ee-567e1ced9ba7 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off lib     ahci.ignore_sss=1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;1119,1224&#x27;</span>p kern.log &gt; pm.log<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1155 2023-12-06 14:26:42 T-KT013M30 kernel: [28643.179825] ACPI: Preparing to enter system <span class="hljs-built_in">sleep</span> state S4<br>1156 2023-12-06 14:26:42 T-KT013M30 kernel: [28643.179912] PM: Saving platform NVS memory<br></code></pre></td></tr></table></figure><p>NVS（Non-Volatile Storage）内存不是指硬盘。NVS内存是一种特殊类型的非易失性存储器，它用于存储一些系统配置和状态信息，以便在系统休眠或关机期间保持数据的持久性。</p><p>NVS内存通常是集成在计算机的主板上或与主板紧密相关的芯片中。它用于存储一些与硬件配置、电源管理、系统状态等相关的数据。这些数据在系统重新启动后可以被恢复，以确保系统的连续性和一致性。</p><p>与硬盘不同，NVS内存的容量通常较小，它主要用于存储一些关键的系统信息，以便在系统休眠或关机期间使用。硬盘是一种用于存储大量数据的存储设备，它通常用于长期保存文件、应用程序和操作系统等数据。</p><p>因此，NVS内存和硬盘是不同的存储介质，用于不同的目的。</p><p>S4是系统休眠状态，也称为挂起到磁盘（Suspend to Disk）或休眠到磁盘（Hibernate）。在S4状态下，系统的状态将被保存到硬盘或其他非易失性存储介质中，以便在下次启动时能够恢复到先前的状态。</p><p>在S4睡眠状态中，系统会将当前的内存状态写入到硬盘上的特殊文件（通常是称为休眠文件或交换文件）中。这个休眠文件会记录当前的内存内容，包括打开的应用程序、文件和系统状态等。当系统重新启动时，它会读取休眠文件，并将内存状态恢复到先前保存的状态，从而实现快速恢复到休眠前的状态。</p><p>因此，S4睡眠状态涉及将系统的内存状态写入到硬盘或其他非易失性存储介质中，而不是将数据存储到NVS内存或硬盘中。对于休眠到磁盘的操作，数据会存储在硬盘上的特殊文件中，以便在下次启动时进行恢复。</p><h2 id="异常机器">异常机器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Downloads/sjgd20231215001/sjgd20231215001/问题机all_log_files_20231213_0958&amp;1010/all_log_files/kernel<br><br>```bash<br> 220 2023-12-04 08:26:02 T-KT0123SY kernel: [    0.000000] Linux version 4.19.0-amd64-desktop (uos@x86-compile-PC) (gcc version 8.3.0 (Uos 8.3.0.5-1+dde)) <span class="hljs-comment">#5317 SMP Mon Feb 6 16:04:31 CST 2023                    </span><br>  221 2023-12-04 08:26:02 T-KT0123SY kernel: [    0.000000] Command line: BOOT_IMAGE=/vmlinuz-4.19.0-amd64-desktop root=UUID=419ef5d7-3a1c-4c9e-a35d-3bee7483cfc8 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off li      bahci.ignore_sss=1  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;16130,16141&#x27;</span>p kern.log &gt; pm_error.log<br></code></pre></td></tr></table></figure><p>异常机器在睡下去执行到<code>PM: Syncing filesystems ...</code>就结束了。</p><h2 id="继续排查方向">继续排查方向</h2><p>grub中增加下方参数：</p><ul><li>loglevel=8</li><li>initcall_debug</li><li>no_console_suspend</li><li>console=ttyS0,115200</li></ul><p><code>console=ttyS0,115200</code>接串口用，ttyS0请用cutecom确认。</p><p>update-grub后重启机器</p><p>执行<code>sudo systemctl hibernate</code></p><p>再次进入桌面将<code>/var/log/</code>目录发来。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>bugs</category>
      
      <category>236037</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ext4_inode_info double free</title>
    <link href="/linux/kernel/bugs/233267/ext4_inode_info%20double%20free/"/>
    <url>/linux/kernel/bugs/233267/ext4_inode_info%20double%20free/</url>
    
    <content type="html"><![CDATA[<h1 id="ext4_inode_info-double-free">ext4_inode_info double free</h1><p><a href="https://pms.uniontech.com/bug-view-233267.html" class="uri">https://pms.uniontech.com/bug-view-233267.html</a></p><h2 id="dmesg">dmesg</h2><p>dmesg.202312111431</p><h3 id="warning">warning</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">[<span class="hljs-number">201866.888630</span>] WARNING: CPU: <span class="hljs-number">2</span> PID: <span class="hljs-number">67</span> at fs/dcache.c:<span class="hljs-number">338</span> dentry_free+<span class="hljs-number">0x24</span>/<span class="hljs-number">0xa8</span><br>[<span class="hljs-number">201866.888632</span>] Modules linked in: tun uvcvideo videobuf2_vmalloc videobuf2_memops videobuf2_v4l2 videobuf2_common videodev media arc4 md4 sha512_generic sha512_arm64 nls_utf8 <span class="hljs-title function_">cifs</span><span class="hljs-params">(O)</span> ccm dns_resolver uinput nfnetlink_queue nfnet<br>link_log nfnetlink fuse <span class="hljs-title function_">dlp_fcore</span><span class="hljs-params">(O)</span> bnep st bluetooth ecdh_generic rfkill <span class="hljs-title function_">vfs_monitor</span><span class="hljs-params">(O)</span> <span class="hljs-title function_">clink_vhci_hcd</span><span class="hljs-params">(O)</span> <span class="hljs-title function_">clink_usbip_core</span><span class="hljs-params">(O)</span> aes_ce_blk crypto_simd cryptd nls_iso8859_1 aes_ce_cipher crct10dif_ce nls_cp437 ghash_ce aes_arm64 s<br>ha2_ce sha256_arm64 sha1_ce hid_generic usbkbd usbhid snd_intel8x0 virtio_balloon snd_ac97_codec qemu_fw_cfg <span class="hljs-title function_">uos_resources</span><span class="hljs-params">(O)</span> <span class="hljs-title function_">uos_bluetooth_connection_control</span><span class="hljs-params">(O)</span> rdma_cm iw_cm ib_cm ib_core efivarfs ip_tables x_tables btrfs xor r<br>aid6_pq virtio_blk virtio_net net_failover failover button virtio_mmio<br>[201866.888856] CPU: 2 PID: 67 Comm: kswapd0 Kdump: loaded Tainted: G           O      4.19.0-arm64-desktop #5312<br>[201866.888857] Hardware name: RDO OpenStack Compute, BIOS 0.0.0 02/06/2015<br>[201866.888860] pstate: 40<span class="hljs-title function_">c00005</span> <span class="hljs-params">(nZcv daif +PAN +UAO)</span><br>[201866.888862] pc : dentry_free+0x24/0xa8<br>[201866.888863] lr : dentry_free+0x24/0xa8<br>[201866.888864] sp : ffff8003dd467a70<br>[201866.888865] x29: ffff8003dd467a70 x28: 000000000000040e <br>[201866.888867] x27: ffff800069db41d8 x26: 0000000000000000 <br>[201866.888868] x25: ffff8003dd467b70 x24: ffff800069db4180 <br>[201866.888870] x23: ffff800069e49e70 x22: ffff800069db40c0 <br>[201866.888871] x21: ffff800069db4118 x20: ffff800069db4000 <br>[201866.888873] x19: ffff800069db40c0 x18: ffff000009824000 <br>[201866.888874] x17: 0000000000000000 x16: 0000000000000000 <br>[201866.888875] x15: 00000000fffffff0 x14: ffff000009959752 <br>[201866.888880] x13: 0000000000061498 x12: ffff000009958000 <br>[201866.888881] x11: ffff000009824000 x10: ffff000009958da8 <br>[201866.888883] x9 : 0000000000000000 x8 : 0000000000000004 <br>[201866.888884] x7 : ffff000009958000 x6 : 00000000000026ff <br>[201866.888885] x5 : 0000000000000000 x4 : 0000000000000000 <br>[201866.888886] x3 : 0000000000000000 x2 : ffff8003ffe4ac88 <br>[201866.888888] x1 : 00008003f6995000 x0 : 0000000000000024 <br>[201866.888890] Call trace:<br>[201866.888892]  dentry_free+0x24/0xa8<br>[201866.888894]  __dentry_kill+0x148/0x1d0<br>[201866.888895]  dentry_kill+0x1cc/0x270<br>[201866.888897]  shrink_dentry_list+0x1d0/0x2c0<br>[201866.888899]  prune_dcache_sb+0x44/0x58<br>[201866.888904]  super_cache_scan+0xcc/0x160<br>[201866.888917]  do_shrink_slab+0x188/0x320<br>[201866.888918]  shrink_slab+0x1f8/0x2b0<br>[201866.888920]  shrink_node+0xb4/0x480<br>[201866.888921]  kswapd+0x3dc/0x760<br>[201866.888934]  kthread+0x128/0x130<br>[201866.888940]  ret_from_fork+0x10/0x18<br>[201866.888941] ---[ end trace 8c73588fb79b6328 ]---<br></code></pre></td></tr></table></figure><p>warning出现前：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&#x27;this file format is not right , so can not luopan ! &#x27;</span> dmesg.202312111431 -inr --color | <span class="hljs-built_in">wc</span> -l<br>364<br></code></pre></td></tr></table></figure><p><code>pc : dentry_free+0x24/0xa8</code>总共出现了146次，<code>CPU 2</code>、<code>CPU 6</code> 调度过内核线程<code>PID: 67 Comm: kswapd0</code>。</p><p>kswapd 是一个系统启动后一直运行的内核线程，它在系统运行期间监视内存使用情况，并根据需要执行内存回收和页面交换等操作。</p><h3 id="oops">oops</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">[<span class="hljs-number">201866.936912</span>] Unable to handle kernel <span class="hljs-literal">NULL</span> pointer dereference at virtual address <span class="hljs-number">00000000000000</span>d0<br>[<span class="hljs-number">201866.939427</span>] Mem <span class="hljs-built_in">abort</span> info:<br>[<span class="hljs-number">201866.940177</span>]   ESR = <span class="hljs-number">0x96000005</span><br>[<span class="hljs-number">201866.941018</span>]   Exception class = DABT (current EL), IL = <span class="hljs-number">32</span> bits<br>[<span class="hljs-number">201866.942561</span>]   SET = <span class="hljs-number">0</span>, FnV = <span class="hljs-number">0</span><br>[<span class="hljs-number">201866.943377</span>]   EA = <span class="hljs-number">0</span>, S1PTW = <span class="hljs-number">0</span><br>[<span class="hljs-number">201866.944163</span>] Data <span class="hljs-built_in">abort</span> info:<br>[<span class="hljs-number">201866.944995</span>]   ISV = <span class="hljs-number">0</span>, ISS = <span class="hljs-number">0x00000005</span><br>[<span class="hljs-number">201866.946019</span>]   CM = <span class="hljs-number">0</span>, WnR = <span class="hljs-number">0</span><br>[<span class="hljs-number">201866.946820</span>] user pgtable: <span class="hljs-number">4</span>k pages, <span class="hljs-number">48</span>-bit VAs, pgdp = <span class="hljs-number">000000009b</span>ba10c9<br>[<span class="hljs-number">201866.948553</span>] [<span class="hljs-number">00000000000000</span>d0] pgd=<span class="hljs-number">000000014</span>eba4003, pud=<span class="hljs-number">0000000000000000</span><br>[<span class="hljs-number">201866.950597</span>] Internal error: Oops: <span class="hljs-number">96000005</span> [#<span class="hljs-number">1</span>] SMP<br>[<span class="hljs-number">201866.951888</span>] Modules linked in: tun uvcvideo videobuf2_vmalloc videobuf2_memops videobuf2_v4l2 videobuf2_common videodev media arc4 md4 sha512_generic sha512_arm64 nls_utf8 cifs(O) ccm dns_resolver uinput nfnetlink_queue nfnetlink_log nfnetlink fuse dlp_fcore(O) bnep st bluetooth ecdh_generic rfkill vfs_monitor(O) clink_vhci_hcd(O) clink_usbip_core(O) aes_ce_blk crypto_simd cryptd nls_iso8859_1 aes_ce_cipher crct10dif_ce nls_cp437 ghash_ce aes_arm64 sha2_ce sha256_arm64 sha1_ce hid_generic usbkbd usbhid snd_intel8x0 virtio_balloon snd_ac97_codec qemu_fw_cfg uos_resources(O) uos_bluetooth_connection_control(O) rdma_cm iw_cm ib_cm ib_core efivarfs ip_tables x_tables btrfs xor raid6_pq virtio_blk virtio_net net_failover failover button virtio_mmio<br>[<span class="hljs-number">201866.971480</span>] Process Isolated Web Co (pid: <span class="hljs-number">29060</span>, <span class="hljs-built_in">stack</span> limit = <span class="hljs-number">0x0000000033ac522b</span>)<br>[<span class="hljs-number">201866.971484</span>] CPU: <span class="hljs-number">6</span> PID: <span class="hljs-number">29060</span> Comm: Isolated Web Co Kdump: loaded Tainted: G        W  O      <span class="hljs-number">4.19</span><span class="hljs-number">.0</span>-arm64-desktop #<span class="hljs-number">5312</span><br>[<span class="hljs-number">201866.971485</span>] Hardware name: RDO OpenStack Compute, BIOS <span class="hljs-number">0.0</span><span class="hljs-number">.0</span> <span class="hljs-number">02</span>/<span class="hljs-number">06</span>/<span class="hljs-number">2015</span><br>[<span class="hljs-number">201866.971487</span>] pstate: a0400005 (NzCv daif +PAN -UAO)<br>[<span class="hljs-number">201866.971499</span>] pc : kmem_cache_free+<span class="hljs-number">0xfc</span>/<span class="hljs-number">0x1c8</span><br>[<span class="hljs-number">201866.971518</span>] lr : ext4_i_callback+<span class="hljs-number">0x18</span>/<span class="hljs-number">0x20</span><br>[<span class="hljs-number">201866.971519</span>] sp : ffff8003ffec1640<br>[<span class="hljs-number">201866.971520</span>] x29: ffff8003ffec1640 x28: <span class="hljs-number">000000000000000</span>a <br>[<span class="hljs-number">201866.971522</span>] x27: ffff8003ffec1700 x26: ffff000009809810 <br>[<span class="hljs-number">201866.971523</span>] x25: <span class="hljs-number">00008003f</span>6a05000 x24: ffff0000098096d8 <br>[<span class="hljs-number">201866.971525</span>] x23: ffff0000094ac018 x22: ffff000009825680 <br>[<span class="hljs-number">201866.971526</span>] x21: ffff8003dd4a9980 x20: ffff000008383800 <br>[<span class="hljs-number">201866.971527</span>] x19: ffff8000791ac380 x18: <span class="hljs-number">0000000000000000</span> <br>[<span class="hljs-number">201866.971529</span>] x17: <span class="hljs-number">0000000000000000</span> x16: <span class="hljs-number">0000000000000000</span> <br>[<span class="hljs-number">201866.971530</span>] x15: <span class="hljs-number">0000000000000000</span> x14: <span class="hljs-number">0000000000000000</span> <br>[<span class="hljs-number">201866.971531</span>] x13: ffff000008c17740 x12: ffff000008c17748 <br>[<span class="hljs-number">201866.971533</span>] x11: <span class="hljs-number">0000000000000092</span> x10: <span class="hljs-number">0000000000693e94</span> <br>[<span class="hljs-number">201866.971534</span>] x9 : <span class="hljs-number">0000000000000004</span> x8 : <span class="hljs-number">00000003f</span>bd70000 <br>[<span class="hljs-number">201866.971536</span>] x7 : <span class="hljs-number">0000000000000018</span> x6 : ffff000009984d20 <br>[<span class="hljs-number">201866.971537</span>] x5 : ffff000009984d20 x4 : <span class="hljs-number">00000000f</span>0000000 <br>[<span class="hljs-number">201866.971538</span>] x3 : ffff7e0001e46c00 x2 : ffffffffffffffff <br>[<span class="hljs-number">201866.971539</span>] x1 : <span class="hljs-number">0000000000000000</span> x0 : <span class="hljs-number">0000000000000000</span> <br>[<span class="hljs-number">201866.971541</span>] Call trace:<br>[<span class="hljs-number">201866.971544</span>]  kmem_cache_free+<span class="hljs-number">0xfc</span>/<span class="hljs-number">0x1c8</span><br>[<span class="hljs-number">201866.971546</span>]  ext4_i_callback+<span class="hljs-number">0x18</span>/<span class="hljs-number">0x20</span><br>[<span class="hljs-number">201866.971561</span>]  rcu_process_callbacks+<span class="hljs-number">0x2d8</span>/<span class="hljs-number">0x500</span><br>[<span class="hljs-number">201866.971563</span>]  __do_softirq+<span class="hljs-number">0x110</span>/<span class="hljs-number">0x2e8</span><br>[<span class="hljs-number">201866.971573</span>]  irq_exit+<span class="hljs-number">0x9c</span>/<span class="hljs-number">0xb8</span><br>[<span class="hljs-number">201866.971578</span>]  __handle_domain_irq+<span class="hljs-number">0x64</span>/<span class="hljs-number">0xb8</span><br>[<span class="hljs-number">201866.971580</span>]  gic_handle_irq+<span class="hljs-number">0x7c</span>/<span class="hljs-number">0x178</span><br>[<span class="hljs-number">201866.971583</span>]  el1_irq+<span class="hljs-number">0xb0</span>/<span class="hljs-number">0x140</span><br>[<span class="hljs-number">201867.017634</span>]  clear_page+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x24</span><br>[<span class="hljs-number">201867.017644</span>]  clear_subpage+<span class="hljs-number">0x3c</span>/<span class="hljs-number">0x58</span><br>[<span class="hljs-number">201867.019834</span>]  clear_huge_page+<span class="hljs-number">0x80</span>/<span class="hljs-number">0x218</span><br>[<span class="hljs-number">201867.021046</span>]  do_huge_pmd_anonymous_page+<span class="hljs-number">0x180</span>/<span class="hljs-number">0x770</span><br>[<span class="hljs-number">201867.022532</span>]  __handle_mm_fault+<span class="hljs-number">0x788</span>/<span class="hljs-number">0x908</span><br>[<span class="hljs-number">201867.023764</span>]  handle_mm_fault+<span class="hljs-number">0xec</span>/<span class="hljs-number">0x1b0</span><br>[<span class="hljs-number">201867.024943</span>]  do_page_fault+<span class="hljs-number">0x164</span>/<span class="hljs-number">0x480</span><br>[<span class="hljs-number">201867.026089</span>]  do_translation_fault+<span class="hljs-number">0x58</span>/<span class="hljs-number">0x60</span><br>[<span class="hljs-number">201867.027359</span>]  do_mem_abort+<span class="hljs-number">0x3c</span>/<span class="hljs-number">0xd0</span><br>[<span class="hljs-number">201867.028442</span>]  el0_da+<span class="hljs-number">0x20</span>/<span class="hljs-number">0x24</span><br>[<span class="hljs-number">201867.029366</span>] Code: <span class="hljs-number">9</span>a820000 f9400c00 eb0002bf <span class="hljs-number">54f</span>ff980 (f9406801) <br></code></pre></td></tr></table></figure><h2 id="初步定位">初步定位</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">./scripts/faddr2line vmlinux kmem_cache_free+<span class="hljs-number">0xfc</span>/<span class="hljs-number">0x1c8</span><br>kmem_cache_free+<span class="hljs-number">0xfc</span>/<span class="hljs-number">0x1c8</span>:<br>slab_equal_or_root 于 mm/slab.h:<span class="hljs-number">229</span><br>(已内连入)cache_from_obj 于 mm/slab.h:<span class="hljs-number">375</span><br>(已内连入)kmem_cache_free 于 mm/slub.c:<span class="hljs-number">2966</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d -l -S mm/slub.o &gt; slub.objdump<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">5246</span> slab_equal_or_root(): <span class="hljs-comment">// vim slub.objdump +5246</span><br><span class="hljs-number">5247</span> /data3/home/yuanqiliang/code/arm-kernel/mm/slab.h:<span class="hljs-number">229</span><br><span class="hljs-number">5248</span>     <span class="hljs-keyword">return</span> p == s || p == s-&gt;memcg_params.root_cache;<br><span class="hljs-number">5249</span>     <span class="hljs-number">238</span>c:   eb0002bf    cmp x21, x0<br><span class="hljs-number">5250</span>     <span class="hljs-number">2390</span>:   <span class="hljs-number">54f</span>ff980    b.eq    <span class="hljs-number">22</span>c0 &lt;kmem_cache_free+<span class="hljs-number">0x28</span>&gt;  <span class="hljs-comment">// b.none</span><br><span class="hljs-number">5251</span>     <span class="hljs-number">2394</span>:   f9406801    ldr x1, [x0, #<span class="hljs-number">208</span>] <span class="hljs-comment">// 将一个 64 位的寄存器（x1）的值设置为从地址为 x0 加上 208 字节的内存位置读取的值。</span><br><span class="hljs-number">5252</span>     <span class="hljs-number">2398</span>:   eb0102bf    cmp x21, x1 <br><span class="hljs-number">5253</span>     <span class="hljs-number">239</span>c:   <span class="hljs-number">540004e0</span>    b.eq    <span class="hljs-number">2438</span> &lt;kmem_cache_free+<span class="hljs-number">0x1a0</span>&gt;  <span class="hljs-comment">// b.none</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">p ((struct kmem_cache *)<span class="hljs-number">0</span>)-&gt;memcg_params<br>Cannot access memory at address <span class="hljs-number">0</span>xd0<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">p &amp;((struct kmem_cache *)<span class="hljs-number">0</span>)-&gt;memcg_params<br><span class="hljs-variable">$1</span> = (struct memcg_cache_params *) <span class="hljs-number">0</span>xd0<br></code></pre></td></tr></table></figure><h2 id="源码">源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;http://gerrit.uniontech.com/kernel/arm-kernel&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline | <span class="hljs-built_in">head</span> -n1<br>b3ea87eb1d45 elfverify: stricter security check <span class="hljs-keyword">for</span> executable section<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">79</span> <span class="hljs-comment">/*  </span><br><span class="hljs-comment"> 80  * Slab cache management.          </span><br><span class="hljs-comment"> 81  */</span> <br> <span class="hljs-number">82</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> &#123;</span> <span class="hljs-comment">// vim include/linux/slub_def.h +112</span><br> <span class="hljs-number">83</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_cpu</span> __<span class="hljs-title">percpu</span> *<span class="hljs-title">cpu_slab</span>;</span>  <br> <span class="hljs-number">84</span>     <span class="hljs-comment">/* Used for retriving partial slabs etc */</span> <br> <span class="hljs-number">85</span>     <span class="hljs-type">slab_flags_t</span> flags;         <br> <span class="hljs-number">86</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> min_partial;  <br> <span class="hljs-number">87</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size;  <span class="hljs-comment">/* The size of an object including meta data */</span>    <br> <span class="hljs-number">88</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> object_size;<span class="hljs-comment">/* The size of an object without meta data */</span> <br> <span class="hljs-number">89</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset;    <span class="hljs-comment">/* Free pointer offset. */</span>        <br> <span class="hljs-number">90</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL  </span><br> <span class="hljs-number">91</span>     <span class="hljs-comment">/* Number of per cpu partial objects to keep around */</span>    <br> <span class="hljs-number">92</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cpu_partial;   <br> <span class="hljs-number">93</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span>             </span><br> <span class="hljs-number">94</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_order_objects</span> <span class="hljs-title">oo</span>;</span>        <br> <span class="hljs-number">95</span>     <br> <span class="hljs-number">96</span>     <span class="hljs-comment">/* Allocation and freeing of slabs */</span>      <br> <span class="hljs-number">97</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_order_objects</span> <span class="hljs-title">max</span>;</span>       <br> <span class="hljs-number">98</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_order_objects</span> <span class="hljs-title">min</span>;</span>       <br> <span class="hljs-number">99</span>     <span class="hljs-type">gfp_t</span> allocflags;   <span class="hljs-comment">/* gfp flags to use on each alloc */</span>  <br><span class="hljs-number">100</span>     <span class="hljs-type">int</span> refcount;       <span class="hljs-comment">/* Refcount for slab cache destroy */</span> <br><span class="hljs-number">101</span>     <span class="hljs-type">void</span> (*ctor)(<span class="hljs-type">void</span> *);       <br><span class="hljs-number">102</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> inuse;     <span class="hljs-comment">/* Offset to metadata */</span>          <br><span class="hljs-number">103</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> align;     <span class="hljs-comment">/* Alignment */</span>    <br><span class="hljs-number">104</span>     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> red_left_pad;  <span class="hljs-comment">/* Left redzone padding size */</span>            <br><span class="hljs-number">105</span>     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;   <span class="hljs-comment">/* Name (only for display!) */</span>        <br><span class="hljs-number">106</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span>  <span class="hljs-comment">/* List of slab caches */</span>         <br><span class="hljs-number">107</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SYSFS</span><br><span class="hljs-number">108</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kobject</span> <span class="hljs-title">kobj</span>;</span>    <span class="hljs-comment">/* For sysfs */</span>    <br><span class="hljs-number">109</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">work_struct</span> <span class="hljs-title">kobj_remove_work</span>;</span>       <br><span class="hljs-number">110</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span>             </span><br><span class="hljs-number">111</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_MEMCG</span><br><span class="hljs-number">112</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">memcg_cache_params</span> <span class="hljs-title">memcg_params</span>;</span>   <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">./scripts/faddr2line vmlinux ext4_i_callback+<span class="hljs-number">0x18</span>/<span class="hljs-number">0x20</span><br>ext4_i_callback+<span class="hljs-number">0x18</span>/<span class="hljs-number">0x20</span>:<br>ext4_i_callback 于 fs/ext4/super.c:<span class="hljs-number">1114</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1110</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ext4_i_callback</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rcu_head *head)</span> <span class="hljs-comment">// vim fs/ext4/super.c +1114</span><br>1111 &#123;<br><span class="hljs-number">1112</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">inode</span> =</span> container_of(head, <span class="hljs-keyword">struct</span> inode, i_rcu);<br><span class="hljs-number">1113</span>     kmem_cache_free(ext4_inode_cachep, EXT4_I(inode));        <br><span class="hljs-number">1114</span> &#125; <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">21</span> <span class="hljs-meta">#<span class="hljs-keyword">define</span> EXT4_I(inode) (container_of(inode, struct ext4_inode_info, vfs_inode))   <span class="hljs-comment">// vim include/trace/events/ext4.h +21</span></span><br></code></pre></td></tr></table></figure><p>在 Ext4 文件系统中，每个文件或目录对应于一个唯一的 inode。 每个 inode 在内核中都有一个对应的 struct ext4_inode_info 结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">940</span> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 941  * fourth extended file system inode data in memory</span><br><span class="hljs-comment"> 942  */</span>                                                                                                                                                                  <br> <span class="hljs-number">943</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ext4_inode_info</span> &#123;</span>   <span class="hljs-comment">// vim fs/ext4/ext4.h +1010</span><br> <span class="hljs-number">944</span>     __le32  i_data[<span class="hljs-number">15</span>]; <span class="hljs-comment">/* unconverted */</span><br> <span class="hljs-number">945</span>     __u32   i_dtime;<br> <span class="hljs-number">946</span>     <span class="hljs-type">ext4_fsblk_t</span>    i_file_acl;<br>......<br> <span class="hljs-number">1001</span>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">1002      * i_mmap_sem is for serializing page faults with truncate / punch hole</span><br><span class="hljs-comment">1003      * operations. We have to make sure that new page cannot be faulted in</span><br><span class="hljs-comment">1004      * a section of the inode that is being punched. We cannot easily use</span><br><span class="hljs-comment">1005      * i_data_sem for this since we need protection for the whole punch</span><br><span class="hljs-comment">1006      * operation and i_data_sem ranks below transaction start so we have</span><br><span class="hljs-comment">1007      * to occasionally drop it.</span><br><span class="hljs-comment">1008      */</span><br><span class="hljs-number">1009</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rw_semaphore</span> <span class="hljs-title">i_mmap_sem</span>;</span><br><span class="hljs-number">1010</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> <span class="hljs-title">vfs_inode</span>;</span><br><span class="hljs-number">1011</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">jbd2_inode</span> *<span class="hljs-title">jinode</span>;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">2964</span> <span class="hljs-type">void</span> <span class="hljs-title function_">kmem_cache_free</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kmem_cache *s, <span class="hljs-type">void</span> *x)</span>    <span class="hljs-comment">// vim mm/slub.c +2966</span><br>2965 &#123;<br><span class="hljs-number">2966</span>     s = cache_from_obj(s, x);<br><span class="hljs-number">2967</span>     <span class="hljs-keyword">if</span> (!s)<br><span class="hljs-number">2968</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">2969</span>     slab_free(s, virt_to_head_page(x), x, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, _RET_IP_);<br><span class="hljs-number">2970</span>     trace_kmem_cache_free(_RET_IP_, x);<br><span class="hljs-number">2971</span> &#125;<br><span class="hljs-number">2972</span> EXPORT_SYMBOL(kmem_cache_free);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">357</span> <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">struct</span> kmem_cache *<span class="hljs-title function_">cache_from_obj</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kmem_cache *s, <span class="hljs-type">void</span> *x)</span>  <span class="hljs-comment">// vim mm/slab.h +375</span><br>358 &#123;<br><span class="hljs-number">359</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> *<span class="hljs-title">cachep</span>;</span><br><span class="hljs-number">360</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-number">361</span> <br><span class="hljs-number">362</span>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">363      * When kmemcg is not being used, both assignments should return the</span><br><span class="hljs-comment">364      * same value. but we don&#x27;t want to pay the assignment price in that</span><br><span class="hljs-comment">365      * case. If it is not compiled in, the compiler should be smart enough</span><br><span class="hljs-comment">366      * to not do even the assignment. In that case, slab_equal_or_root</span><br><span class="hljs-comment">367      * will also be a constant.</span><br><span class="hljs-comment">368      */</span><br><span class="hljs-number">369</span>     <span class="hljs-keyword">if</span> (!memcg_kmem_enabled() &amp;&amp;<br><span class="hljs-number">370</span>         !unlikely(s-&gt;flags &amp; SLAB_CONSISTENCY_CHECKS))<br><span class="hljs-number">371</span>         <span class="hljs-keyword">return</span> s;<br><span class="hljs-number">372</span> <br><span class="hljs-number">373</span>     page = virt_to_head_page(x);    <span class="hljs-comment">// 真正出错在这一行</span><br><span class="hljs-number">374</span>     cachep = page-&gt;slab_cache;  <span class="hljs-comment">// page-&gt;slab_cache指向了nullptr，mm/slab.h +229解引用就oops了</span><br><span class="hljs-number">375</span>     <span class="hljs-keyword">if</span> (slab_equal_or_root(cachep, s))<br><span class="hljs-number">376</span>         <span class="hljs-keyword">return</span> cachep;<br><span class="hljs-number">377</span> <br><span class="hljs-number">378</span>     pr_err(<span class="hljs-string">&quot;%s: Wrong slab cache. %s but object is from %s\n&quot;</span>,<br><span class="hljs-number">379</span>            __func__, s-&gt;name, cachep-&gt;name);<br><span class="hljs-number">380</span>     WARN_ON_ONCE(<span class="hljs-number">1</span>);<br><span class="hljs-number">381</span>     <span class="hljs-keyword">return</span> s;       <br><span class="hljs-number">382</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">651</span> <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">struct</span> page *<span class="hljs-title function_">virt_to_head_page</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *x)</span>    <span class="hljs-comment">// vim include/linux/mm.h +651</span><br>652 &#123;<br><span class="hljs-number">653</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span> =</span> virt_to_page(x);<br><span class="hljs-number">654</span> <br><span class="hljs-number">655</span>     <span class="hljs-keyword">return</span> compound_head(page);<br><span class="hljs-number">656</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">73</span> <span class="hljs-meta">#<span class="hljs-keyword">define</span> virt_to_page(kaddr) pfn_to_page(__pa(kaddr) &gt;&gt; PAGE_SHIFT) <span class="hljs-comment">// vim include/asm/mmzone.h +73</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">108</span> <span class="hljs-meta"># <span class="hljs-keyword">define</span> pfn_to_page(pfn)   (vmem_map + (pfn))  <span class="hljs-comment">// vim include/asm/page.h +108</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">226</span> <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">slab_equal_or_root</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kmem_cache *s, <span class="hljs-comment">// vim mm/slab.h +229</span></span><br><span class="hljs-params"><span class="hljs-number">227</span>                       <span class="hljs-keyword">struct</span> kmem_cache *p)</span><br>228 &#123;<br><span class="hljs-number">229</span>     <span class="hljs-keyword">return</span> p == s || p == s-&gt;memcg_params.root_cache;                                                                                                                 <br><span class="hljs-number">230</span> &#125;<br></code></pre></td></tr></table></figure><p>问题基本确定了，这是一个double free的问题。</p><p><code>ext4_i_callback</code> 函数是 inode_operations 结构中的一个回调函数，定义在 fs/ext4/inode.c 文件中。这个函数在 inode 被释放时被调用，用于执行一些清理和处理工作。</p><p>如果多个线程同时尝试删除同一个文件，而删除文件的过程中会触发 ext4_i_callback，那么由于竞态条件，可能导致 double free 错误。</p><p>ext4_inode_info是ext4文件系统挂载的时候生成的，不掉盘的话ext4_inode_info对应的kmem_cache不可能指向null。</p><p>这里给出bpftrace参考语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo bpftrace -e <span class="hljs-string">&#x27;tracepoint:syscalls:sys_enter_unlink &#123; printf(&quot;%s deleted by command &#x27;</span>%s<span class="hljs-string">&#x27; with pid %d\n&quot;, str(args-&gt;pathname), comm, pid);&#125; tracepoint:syscalls:sys_enter_unlinkat &#123; printf(&quot;%s deleted by command &#x27;</span>%s<span class="hljs-string">&#x27; with pid %d\n&quot;, str(args-&gt;pathname), comm, pid);&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://zhuanlan.zhihu.com/p/191942583">谁删了我的文件？Linux下用bpftrace轻松抓到元凶</a></li></ul><h3 id="尝试修复">尝试修复</h3><ul><li><a href="https://patchwork.ozlabs.org/project/linux-ext4/patch/1482994539-48559-1-git-send-email-yi.zhang@huawei.com/#1545987">[RFC,V2] ext4: increase the protection of drop nlink and ext4 inode destroy</a></li></ul><h3 id="ext4日志">ext4日志</h3><ul><li><p><a href="https://blog.csdn.net/SweeNeil/article/details/88948646">Linux挂载ext4根文件系统为journal模式</a></p><p>grub中增加参数：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rootflags=data=journal<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="crash">crash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crash /lib/debug/vmlinux-4.19.0-arm64-desktop-tyy-5312 /home/uos/202312111431/dump.202312111431<br></code></pre></td></tr></table></figure><h3 id="ps">ps</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">crash&gt; ps<br>      PID    PPID  CPU       TASK        ST  %MEM      VSZ      RSS  COMM<br>&gt;       0       0   0  ffff0000098131c0  RU   0.0        0        0  [swapper/0]<br>        0       0   1  ffff8003e85a2700  RU   0.0        0        0  [swapper/1]<br>        0       0   2  ffff8003e85a3400  RU   0.0        0        0  [swapper/2]<br>&gt;       0       0   3  ffff8003e85a4100  RU   0.0        0        0  [swapper/3]<br>        0       0   4  ffff8003e85a4e00  RU   0.0        0        0  [swapper/4]<br>        0       0   5  ffff8003e85a5b00  RU   0.0        0        0  [swapper/5]<br>        0       0   6  ffff8003e85a6800  RU   0.0        0        0  [swapper/6]<br>&gt;       0       0   7  ffff8003e85d8000  RU   0.0        0        0  [swapper/7]<br>&gt;     403      -1   2  ffff8003e80b4100  RU   0.6   214476   111464  systemd-journal<br>&gt;     961      -1   1  ffff800156d0db00  RU   0.2    44032    29004  clink-iotop<br>&gt;    1004      -1   5  ffff80006cf93400  RU   0.0     6620     3792  smartctl<br>&gt;    5310      -1   4  ffff8000306e2700  RU   1.1  4304016   190780  deepin-voice-no<br>&gt;   29060      -1   6  ffff800035462700  RU   3.6  3060304   633720  Isolated Web Co<br></code></pre></td></tr></table></figure><p>Firefox中的进程Isolated Web Co占用内存过多，且还在请求巨型匿名页面。</p><ul><li><p>VSZ（Virtual Set Size）：3060304KB/1024 ≈ 2984.75MB</p><ul><li><p>VSZ 表示进程的虚拟内存大小，即分配给进程的总虚拟内存空间。</p></li><li><p>它包括进程使用的所有内存区域，包括实际物理内存、交换空间和映射文件等。</p></li><li><p>VSZ 的值并不反映实际的物理内存占用情况，而是显示了进程可以访问的所有虚拟地址空间的总和。</p></li></ul></li><li><p>RSS（Resident Set Size）：633720KB/1024 ≈ 618.75MB</p><ul><li><p>RSS 表示进程的驻留集大小，即实际占用的物理内存大小。</p></li><li><p>它是进程当前正在使用的物理内存量，不包括交换空间或映射文件等。</p></li><li><p>RSS 提供了一个更准确的物理内存使用指标，反映了进程实际占用的系统内存。</p></li></ul></li></ul><h3 id="bt">bt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs bash">crash&gt; bt -l                                                           <br>PID: 29060    TASK: ffff800035462700  CPU: 6    COMMAND: <span class="hljs-string">&quot;Isolated Web Co&quot;</span><br> <span class="hljs-comment">#0 [ffff8003ffec1290] crash_kexec at ffff000008170728                 </span><br>    /data3/home/yuanqiliang/code/arm-kernel/kernel/kexec_core.c: 977   <br> <span class="hljs-comment">#1 [ffff8003ffec12c0] die at ffff00000808d7f4                         </span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/kernel/traps.c: 202 <br> <span class="hljs-comment">#2 [ffff8003ffec1300] die_kernel_fault at ffff0000080a0fb4</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 258     <br> <span class="hljs-comment">#3 [ffff8003ffec1330] __do_kernel_fault at ffff0000080a104c</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 286    <br> <span class="hljs-comment">#4 [ffff8003ffec1360] do_page_fault at ffff0000080a1284  </span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 588<br> <span class="hljs-comment">#5 [ffff8003ffec1440] do_translation_fault at ffff000008aec17c      </span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 597<br> <span class="hljs-comment">#6 [ffff8003ffec1450] do_mem_abort at ffff000008081250     </span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 728<br> <span class="hljs-comment">#7 [ffff8003ffec1630] el1_ia at ffff0000080830cc         </span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/kernel/entry.S: 562<br>     PC: ffff000008268b5c  [kmem_cache_free+252]        <br>     LR: ffff000008383800  [ext4_i_callback+24]                       <br>     SP: ffff8003ffec1640  PSTATE: a0400005                    <br>    X29: ffff8003ffec1640  X28: 000000000000000a  X27: ffff8003ffec1700<br>    X26: ffff000009809810  X25: 00008003f6a05000  X24: ffff0000098096d8<br>    X23: ffff0000094ac018  X22: ffff000009825680  X21: ffff8003dd4a9980<br>    X20: ffff000008383800  X19: ffff8000791ac380  X18: 0000000000000000<br>    X17: 0000000000000000  X16: 0000000000000000  X15: 0000000000000000   <br>    X14: 0000000000000000  X13: ffff000008c17740  X12: ffff000008c17748<br>    X11: 0000000000000092  X10: 0000000000693e94   X9: 0000000000000004<br>     X8: 00000003fbd70000   X7: 0000000000000018   X6: ffff000009984d20<br>     X5: ffff000009984d20   X4: 00000000f0000000   X3: ffff7e0001e46c00<br>     X2: ffffffffffffffff   X1: 0000000000000000   X0: 0000000000000000<br>    /data3/home/yuanqiliang/code/arm-kernel/mm/slab.h: 229             <br> <span class="hljs-comment">#8 [ffff8003ffec1640] kmem_cache_free at ffff000008268b58             </span><br>    /data3/home/yuanqiliang/code/arm-kernel/mm/slab.h: 229             <br> <span class="hljs-comment">#9 [ffff8003ffec1670] ext4_i_callback at ffff0000083837fc             </span><br>    /data3/home/yuanqiliang/code/arm-kernel/fs/ext4/super.c: 1113      <br><span class="hljs-comment">#10 [ffff8003ffec1680] rcu_process_callbacks at ffff000008144134       </span><br>    /data3/home/yuanqiliang/code/arm-kernel/kernel/rcu/rcu.h: 236   <br><span class="hljs-comment">#11 [ffff8003ffec1720] __softirqentry_text_start at ffff000008081964</span><br>    /data3/home/yuanqiliang/code/arm-kernel/kernel/softirq.c: 292<br><span class="hljs-comment">#12 [ffff8003ffec17b0] irq_exit at ffff0000080dc420</span><br>    /data3/home/yuanqiliang/code/arm-kernel/./include/linux/interrupt.h: 504<br><span class="hljs-comment">#13 [ffff8003ffec17c0] __handle_domain_irq at ffff000008131a70</span><br>    /data3/home/yuanqiliang/code/arm-kernel/kernel/irq/irqdesc.c: 685<br><span class="hljs-comment">#14 [ffff8003ffec1800] gic_handle_irq at ffff0000080815e0</span><br>    /data3/home/yuanqiliang/code/arm-kernel/./include/linux/irqdesc.h: 173<br>--- &lt;IRQ stack&gt; ---<br><span class="hljs-comment">#15 [ffff8001dd367b30] el1_irq at ffff00000808332c</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/kernel/entry.S: 611<br>     PC: ffff000008acb250  [clear_page+16]<br>     LR: ffff0000080a1cc4  [__cpu_clear_user_page+12]<br>     SP: ffff8001dd367b40  PSTATE: 80400005<br>    X29: ffff8001dd367b40  X28: ffff8003df6234e0  X27: 0000000000000002<br>    X26: 0000000000000000  X25: 0000000000000000  X24: 0000000000000000<br>    X23: ffff7e0002310000  X22: 0000000000001000  X21: 0000ffff7c600000<br>    X20: 0000000000000000  X19: ffff800035462700  X18: 0000000000000000<br>    X17: 0000000000000000  X16: 0000000000000000  X15: 0000000000000400<br>    X14: 0000000000000400  X13: 00000000000003f9  X12: 0000000000000001<br>    X11: 0000000000000001  X10: 00000000000008e0   X9: ffff8001dd367ab0<br>     X8: ffff800035463040   X7: ffff8003ffeb17b8   X6: ffff8003e1a3f900<br>     X5: 000000000000a7f6   X4: ffff000009809000   X3: 0000000000004600<br>     X2: 0000000000000004   X1: 0000000000000040   X0: ffff80008c518000<br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/lib/clear_page.S: 23<br><span class="hljs-comment">#16 [ffff8001dd367b40] clear_page at ffff000008acb24c</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/lib/clear_page.S: 21<br><span class="hljs-comment">#17 [ffff8001dd367b50] clear_subpage at ffff00000823a910</span><br>    /data3/home/yuanqiliang/code/arm-kernel/./include/linux/highmem.h: 137<br><span class="hljs-comment">#18 [ffff8001dd367b70] clear_huge_page at ffff0000082410bc</span><br>    /data3/home/yuanqiliang/code/arm-kernel/mm/memory.c: 4679<br><span class="hljs-comment">#19 [ffff8001dd367bd0] do_huge_pmd_anonymous_page at ffff00000826e964</span><br>    /data3/home/yuanqiliang/code/arm-kernel/mm/huge_memory.c: 578<br><span class="hljs-comment">#20 [ffff8001dd367c30] __handle_mm_fault at ffff000008240994</span><br>    /data3/home/yuanqiliang/code/arm-kernel/mm/memory.c: 3942<br><span class="hljs-comment">#21 [ffff8001dd367cf0] handle_mm_fault at ffff000008240c00</span><br>    /data3/home/yuanqiliang/code/arm-kernel/mm/memory.c: 4212<br><span class="hljs-comment">#22 [ffff8001dd367d20] do_page_fault at ffff0000080a1208</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 399<br><span class="hljs-comment">#23 [ffff8001dd367e00] do_translation_fault at ffff000008aec17c</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 597<br><span class="hljs-comment">#24 [ffff8001dd367e10] do_mem_abort at ffff000008081250</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/mm/fault.c: 728<br><span class="hljs-comment">#25 [ffff8001dd367ff0] el0_da at ffff0000080839cc</span><br>    /data3/home/yuanqiliang/code/arm-kernel/arch/arm64/kernel/entry.S: 724<br>     PC: 0000ffff990e9548   LR: 0000aaaac18625f8   SP: 0000ffffe16bba40<br>    X29: 0000ffffe16bd560  X28: 0000000000000000  X27: 0000ffff66a29318<br>    X26: 0000000000000001  X25: 0000000000000001  X24: 0000ffff726478d0<br>    X23: 0000ffff7c600000  X22: 0000000000200000  X21: 0000000000100000<br>    X20: 0000ffff98e00000  X19: 0000ffff80000000  X18: 0000000000000000<br>    X17: 0000ffff990e9450  X16: 0000aaaac190c020  X15: 0000ffff80000000<br>    X14: 0000000000000000  X13: ff000178005d4748  X12: 0000000000000000<br>    X11: 0000000004d00000  X10: 00000000039e8000   X9: 0aa90b643fdb4900<br>     X8: 0aa90b643fdb4900   X7: 3133303131333230   X6: 32000000110000ff<br>     X5: 0000ffff7c700000   X4: 0000ffff80100000   X3: 0000ffff7c600000<br>     X2: 0000000000100000   X1: 0000ffff80000000   X0: 0000ffff7c600000<br>    ORIG_X0: 0000ffff7c800000  SYSCALLNO: ffffffff  PSTATE: 20001000<br></code></pre></td></tr></table></figure><ul><li><a href="https://askubuntu.com/questions/1466241/firefox-isolate-process-cpu-usage-100">Firefox: "isolate+" process CPU usage 100%</a></li></ul><h3 id="mount">mount</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">crash&gt; mount<br>     MOUNT           SUPERBLK     TYPE   DEVNAME   DIRNAME<br>ffff8003e80a4000 ffff8003e80b7000 rootfs rootfs    /<br>ffff80039444e000 ffff800394450000 sysfs  sysfs     /sys<br>ffff8003e80a4c00 ffff8003e80da800 proc   proc      /proc<br>ffff8003944a0000 ffff8003e7ce0000 devtmpfs udev    /dev<br>ffff8003e80a4d80 ffff800394b2c000 devpts devpts    /dev/pts<br>ffff80039452c000 ffff800394538000 tmpfs  tmpfs     /run<br>ffff80039452c180 ffff80039453d000 ext4   /dev/vda2 /<br>ffff80039452c300 ffff8003e80db800 securityfs securityfs /sys/kernel/security<br>ffff80039452c600 ffff80039453f000 tmpfs  tmpfs     /dev/shm<br>ffff80039452c480 ffff80039453f800 tmpfs  tmpfs     /run/lock<br>ffff80039452c780 ffff80039453c800 tmpfs  tmpfs     /sys/fs/cgroup<br>ffff80039452c900 ffff800393f75800 cgroup2 cgroup2  /sys/fs/cgroup/unified<br>ffff80039452ca80 ffff800393f74800 cgroup cgroup    /sys/fs/cgroup/systemd<br>ffff80039452cc00 ffff800393f73800 pstore pstore    /sys/fs/pstore<br>ffff80039452cd80 ffff800393f75000 efivarfs efivarfs /sys/firmware/efi/efivars<br>ffff80039452cf00 ffff800393f70800 bpf    bpf       /sys/fs/bpf<br>ffff80039452d080 ffff800393f71800 cgroup cgroup    /sys/fs/cgroup/net_cls,net_prio<br>ffff80039452d200 ffff800393f70000 cgroup cgroup    /sys/fs/cgroup/cpu,cpuacct<br>ffff80039452d380 ffff800393f77800 cgroup cgroup    /sys/fs/cgroup/blkio<br>ffff80039452d500 ffff800393f74000 cgroup cgroup    /sys/fs/cgroup/cpuset<br>ffff80039452d680 ffff800393f72800 cgroup cgroup    /sys/fs/cgroup/hugetlb<br>ffff80039452d800 ffff800393f77000 cgroup cgroup    /sys/fs/cgroup/memory<br>ffff80039452d980 ffff800393f76800 cgroup cgroup    /sys/fs/cgroup/freezer<br>ffff80039452db00 ffff800393f76000 cgroup cgroup    /sys/fs/cgroup/pids<br>ffff80039452dc80 ffff800393f73000 cgroup cgroup    /sys/fs/cgroup/devices<br>ffff80039452de00 ffff800393f72000 cgroup cgroup    /sys/fs/cgroup/rdma<br>ffff8003dcf82000 ffff8003935f9800 autofs systemd-1 /proc/sys/fs/binfmt_misc<br>ffff8003944a0180 ffff8003dd0c0800 mqueue mqueue    /dev/mqueue<br>ffff8003dcf82180 ffff8003e80dc000 debugfs debugfs  /sys/kernel/debug<br>ffff8003e7cc8d80 ffff8003931e9800 hugetlbfs hugetlbfs /dev/hugepages<br>ffff8003e16d2000 ffff8003dd0c1800 configfs configfs /sys/kernel/config<br>ffff8003dd0b4600 ffff8003947da000 squashfs /dev/loop0 /snap/core22/586<br>ffff8003e16d2180 ffff8003946b5800 squashfs /dev/loop1 /snap/core/15515<br>ffff8003e7cc8f00 ffff800393a2e800 squashfs /dev/loop2 /snap/core/16204<br>ffff8003944a0300 ffff800393a96000 squashfs /dev/loop3 /snap/lxd/24646<br>ffff8003e16d2900 ffff8003946b3000 squashfs /dev/loop4 /snap/core/15425<br>ffff8003944a0600 ffff8003df4c0800 vfat   /dev/vda1 /boot/efi<br>ffff8003944f3c80 ffff8003944bb000 binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc/<br>ffff8003dd0b4a80 ffff800393a80800 ext4   /dev/vdb  /mnt/vdb<br>ffff8003e090f800 ffff800394538000 tmpfs  tmpfs     /run/snapd/ns<br>ffff8003dfb55e00 ffff8003e80da000 nsfs   nsfs      /run/snapd/ns/snapd/ns/lxd.mnt<br>ffff8003e80a4f00 ffff8003e04b1800 tmpfs  tmpfs     /run/user/1000<br>ffff8003a4613080 ffff80037a40b800 fusectl fusectl  /sys/fs/fuse/connections<br>ffff8003a790e900 ffff8003e04b6800 fuse   gvfsd-fuse /run/user/1000/gvfs<br>ffff8002c2e08f00 ffff80012834c000 cifs   //127.0.0.1/WANGZHIQUAN-PC C /media/WANGZHIQUAN-PC C     <br></code></pre></td></tr></table></figure><h3 id="swap">swap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">crash&gt; swap<br>SWAP_INFO_STRUCT    TYPE       SIZE       USED     PCT  PRI  FILENAME<br></code></pre></td></tr></table></figure><h3 id="kmem">kmem</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">crash&gt; kmem -i<br>                 PAGES        TOTAL      PERCENTAGE<br>    TOTAL MEM  3967057      15.1 GB         ----<br>         FREE    28799     112.5 MB    0% of TOTAL MEM<br>         USED  3938258        15 GB   99% of TOTAL MEM<br>       SHARED   743953       2.8 GB   18% of TOTAL MEM<br>      BUFFERS   102855     401.8 MB    2% of TOTAL MEM<br>       CACHED  1387497       5.3 GB   34% of TOTAL MEM  <span class="hljs-comment"># dmesg中可以看到下载了很多文件，占用很多缓存</span><br>         SLAB   199579     779.6 MB    5% of TOTAL MEM  <span class="hljs-comment"># dmesg中可以看到下载了很多文件，占用很多缓存</span><br><br>   TOTAL HUGE        0            0         ----<br>    HUGE FREE        0            0    0% of TOTAL HUGE<br><br>   TOTAL SWAP        0            0         ----<br>    SWAP USED        0            0    0% of TOTAL SWAP<br>    SWAP FREE        0            0    0% of TOTAL SWAP<br><br> COMMIT LIMIT  1983528       7.6 GB         ----<br>    COMMITTED  7399654      28.2 GB  373% of TOTAL LIMIT<br></code></pre></td></tr></table></figure><p>这些信息反映了系统当前的内存使用情况，包括空闲内存、已用内存、缓存等。请注意，COMMITTED 显示的内存值高于 COMMIT LIMIT，这可能表明系统当前存在一些超过物理内存和交换空间总和的内存压力。在这种情况下，系统可能会开始使用 OOM（Out of Memory）策略，例如终止某些进程来释放内存。</p><p>在 crash 输出中，COMMIT LIMIT 和 COMMITTED 是有关系统内存提交（commit）的两个关键指标。</p><p>COMMIT LIMIT:</p><p>COMMIT LIMIT 表示系统在当前配置下允许的最大内存提交限制，即系统允许分配给进程的虚拟内存和交换空间的总和。</p><p>在这个例子中，COMMIT LIMIT 为 7.6 GB，表示系统限制了进程可以使用的总虚拟内存和交换空间的量。</p><p>COMMITTED:</p><p>COMMITTED 表示当前已经由系统分配和使用的虚拟内存和交换空间的总和。</p><p>在这个例子中，COMMITTED 为 28.2 GB，表示系统当前已经分配并使用的总虚拟内存和交换空间的量。</p><p>分析：</p><p>COMMITTED 大于 COMMIT LIMIT，这表明系统当前分配的虚拟内存和交换空间总量已经超过了系统的限制。</p><p>当 COMMITTED 接近或超过 COMMIT LIMIT 时，系统可能会面临内存压力，并且可能会采取 OOM（Out of Memory）策略，例如终止某些进程以释放内存。</p><p>这种情况下，你可能需要进一步分析系统的进程、内存使用情况以及是否存在内存泄漏等问题，以找出为何 COMMITTED 超过了 COMMIT LIMIT 的原因。</p><h3 id="资源耗尽导致slub回收崩溃">资源耗尽导致slub回收崩溃</h3><p>SLUB回收过程需要分配和释放内存对象，以及对内存数据结构进行操作。如果系统内存已经耗尽，无法满足回收过程的内存需求，就会导致回收过程失败或异常。</p><p>此外，SLUB回收可能还涉及到其他系统资源，例如锁、CPU时间等。如果这些资源也耗尽，可能会导致回收过程无法继续进行，从而引发崩溃。</p><p>在进行SLUB回收压力测试时，如果没有足够的资源可用，例如内存资源不足，可能会导致回收过程无法正常进行，从而出现崩溃或异常行为。</p><p>为了预防资源耗尽引发SLUB回收崩溃，可以采取以下措施：</p><ul><li><p>资源评估和监控：在进行压力测试之前，评估系统资源的可用性，并监控资源的使用情况。确保有足够的可用资源来执行回收过程。</p></li><li><p>调整资源限制：根据压力测试的需求，可能需要调整系统的资源限制，例如增加可用内存大小、调整锁的数量或调度策略等，以确保回收过程有足够的资源可用。</p></li><li><p>优化回收策略：对SLUB回收策略进行优化，例如调整回收频率、调整回收算法等，以减少对资源的需求或提高资源利用效率。</p></li><li><p>合理设计测试用例：设计合理的测试用例，确保测试过程中的资源使用情况在可控范围内，并避免过度消耗系统资源的操作。</p></li></ul><h3 id="overcommit_memory">overcommit_memory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_memory<br></code></pre></td></tr></table></figure><p>输出的值有以下几种可能：</p><ul><li>0 – Heuristic overcommit handling. 这是缺省值，它允许overcommit，但过于明目张胆的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存。Heuristic的意思是“试 探式的”，内核利用某种算法猜测你的内存申请是否合理，它认为不合理就会拒绝overcommit。</li><li>1 – Always overcommit. 允许overcommit，对内存申请来者不拒。内核执行无内存过量使用处理。使用这个设置会增大内存超载的可能性，但也可以增强大量使用内存任务的性能。</li><li>2 – Don’t overcommit. 禁止overcommit。 内存拒绝等于或者大于总可用 swap 大小以及overcommit_ratio 指定的物理 RAM 比例的内存请求。如果希望减小内存过度使用的风险，这个设置就是最好的。</li></ul><h4 id="overcommit_ratio">overcommit_ratio</h4><p>overcommit_ratio、overcommit_kbytes在overcommit_memory=2时才有用，overcommit_kbytes非0时，overcommit_ratio无效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_ratio<br></code></pre></td></tr></table></figure><h4 id="overcommit_kbytes">overcommit_kbytes</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_kbytes<br></code></pre></td></tr></table></figure><h4 id="当前机器overcommit_memory配置">当前机器overcommit_memory配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_memory<br>0<br><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_ratio<br>50<br><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_kbytes<br>0<br></code></pre></td></tr></table></figure><p>单次申请的内存大小不能超过以下值，否则本次申请就会失败。</p><p>free memory + free swap + pagecache的大小 + SLAB</p><p>Linux对大部分申请内存的请求都回复"yes"，以便能跑更多更大的程序。因为申请内存后，并不会马上使用内存。这种技术叫做Overcommit。当linux发现内存不足时，会发生OOM killer(OOM=out-of-memory)。它会选择杀死一些进程(用户态进程，不是内核线程)，以便释放内存。</p><p>当oom-killer发生时，linux会选择杀死哪些进程？选择进程的函数是oom_badness函数(在mm/oom_kill.c中)，该函数会计算每个进程的点数(0~1000)。点数越高，这个进程越有可能被杀死。每个进程的点数跟oom_score_adj有关，而且oom_score_adj可以被设置(-1000最低，1000最高)。</p><h3 id="min_free_kbytes">min_free_kbytes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/min_free_kbytes<br>67584<br></code></pre></td></tr></table></figure><p>通常情况下 WMARK_LOW 的值是 WMARK_MIN 的 1.25 倍，WMARK_HIGH 的值是 WMARK_LOW 的 1.5 倍。而 WMARK_MIN 的数值就是由这个内核参数 min_free_kbytes 来决定的。</p><p>WMARK_MIN = 67584KB / 1024 = 66MB</p><p>WMARK_LOW = 66MB * 1.25 = 82.5MB</p><p>WMARK_HIGH = 82.5MB * 1.5 = 123.75MB</p><p>当前free memory等于112.5MB，在 WMARK_LOW 与 WMARK_HIGH 之间，内存在正常范围内，内存回收kswpd、内存规整kcompactd被正常的周期性调度，故不会触发 OOM。</p><p>当可用物理内存低于 WMARK_MIN 会触发下方操作：</p><ul><li>直接内存回收</li><li>直接内存规整</li><li>产生 OOM</li></ul><p>内核也不会直接开始 OOM，而是进入到重试流程，在重试流程开始之前内核需要调用 should_reclaim_retry 判断是否应该进行重试，重试标准：</p><p>如果内核已经重试了 MAX_RECLAIM_RETRIES (16) 次仍然失败，则放弃重试执行后续 OOM。</p><p>如果内核将所有可选内存区域中的所有可回收页面全部回收之后，仍然无法满足内存的分配，那么放弃重试执行后续 OOM。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/__alloc_pages.png" alt="" /><figcaption>__alloc_pages</figcaption></figure><ul><li><a href="https://mp.weixin.qq.com/s/llZXDRG99NUXoMyIAf00ig">深入理解 Linux 物理内存分配全链路实现</a></li><li><a href="https://blog.csdn.net/zyqash/article/details/122860393">Overcommitting Memory （过度使用内存）</a></li><li><a href="https://zhangzhuo.ltd/articles/2021/08/10/1628565705959.html">内存不足：OOM</a></li><li><a href="https://blog.csdn.net/xsxb_yl/article/details/121412094">内存分配策略：overcommit_memory</a></li></ul><h2 id="初步结论">初步结论</h2><p>没有使用交换分区。</p><p>当前机器内核参数<code>kernel.panic = 0</code> <code>kernel.panic_on_oops = 1</code>。</p><p>内核发现内存不足时可以通过软中断触发内存回收kswapd、内存规整kcompactd被调度，kswapd会调用shrink_slab进行slab回收。</p><p>本次oops中是ext4_inode_info被删除了，也就是某个文件被删除了，导致ext4_i_callback回调函数被调用，ext4_i_callback会调用kmem_cache_free释放slab中的ext4_inode_info对象，发生了double free，导致了oops，进一步导致panic，应该是kernel.panic_on_oops=1导致kdump触发。</p><p>共计分析了4个kdump，<code>kmem -i</code>都存在内核耗尽，基本都只剩下100M了，每次oops的堆栈都跟回收slub缓存相关。</p><p>用户的使用场景应该是在不断下载文件并删除文件，同时在使用firefox、deepin-voice-note等。</p><h3 id="疑点">疑点</h3><p>某个第三方模块多个线程删除同一个文件时存在竞态。</p><p>某个第三方模块打开多个文件未关闭，导致cache占用很多，导致cache内存无法回收。</p><p>故接下来排查方向需要为啥为啥slub回收的时候double free。</p><p>ext4文件系统稳定性问题？</p><h2 id="进一步排查">进一步排查</h2><h3 id="kdump">kdump</h3><p>在grub中调整crashkernel参数，看是否能获取完整的kdump：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crashkernel=2G-4G:320M,4G-32G:512M,32G-64G:1024M,64G-128G:2048M,128G-:4096M<br></code></pre></td></tr></table></figure><h3 id="ext4-journal">ext4 journal</h3><p>可以到天翼云系统底层的宿主机上执行一下ps aux | grep -i qemu，我想看看ext4文件系统对应的磁盘是通过virtio or vfio 挂载上去的？</p><p>ext4_inode_info是ext4文件系统挂载的时候生成的，不掉盘的话ext4_inode_info对应的kmem_cache不可能指向null。</p><p>grub中更改ext4根文件系统日志为journal模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rootflags=data=journal<br></code></pre></td></tr></table></figure><h3 id="slub_debug">slub_debug</h3><p>打下slub_debug相关内核编译选项：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_SLUB=y<br><br>CONFIG_SLUB_DEBUG=y<br><br>CONFIG_SLUB_DEBUG_ON=y<br><br>CONFIG_SLUB_STATS=y<br></code></pre></td></tr></table></figure><p>grub中增加slub_debug=UFPZ参数。</p><h3 id="hcache">hcache</h3><p>使用hcache查看Buffer&amp;Cache使用率高的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hcache -top 50<br></code></pre></td></tr></table></figure><h3 id="bpftrace">bpftrace</h3><p>bpftrace追踪ext4磁盘稳定性问题。</p><h3 id="合入patch">合入patch</h3><ul><li><a href="https://patchwork.ozlabs.org/project/linux-ext4/patch/1482994539-48559-1-git-send-email-yi.zhang@huawei.com/#1545987">[RFC,V2] ext4: increase the protection of drop nlink and ext4 inode destroy</a></li></ul><h2 id="临时优化方案">临时优化方案</h2><p>启用swap分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/tmp/swap bs=1M count=32768<br>sudo <span class="hljs-built_in">chmod</span> 600 /tmp/swap<br>sudo mkswap /tmp/swap<br>sudo swapon /tmp/swap<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/sysctl.conf</span><br><span class="hljs-string">vm.dirty_background_ratio=3 # 当脏页面占系统内存的3%时触发后台写回</span><br><span class="hljs-string">vm.dirty_ratio=80 # 当脏页面占系统内存的80%时停止用户进程，开始写回</span><br><span class="hljs-string">vm.dirty_writeback_centisecs=100 # 每100毫秒检查一次是否需要写回脏页面</span><br><span class="hljs-string">vm.nr_hugepages=128 # 系统中的大页面数量设置为128</span><br><span class="hljs-string">vm.overcommit_memory=2 # 启用严格的内存分配机制</span><br><span class="hljs-string">vm.overcommit_ratio=90 # 允许系统内存超过物理内存大小的80%</span><br><span class="hljs-string">net.ipv4.tcp_fastopen=3 # 启用 TCP Fast Open 并使用 Cookie 来防止连接污染攻击</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sysctl -p<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>bugs</category>
      
      <category>233267</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/javascript/runoob-vue3-test/README/"/>
    <url>/javascript/runoob-vue3-test/README/</url>
    
    <content type="html"><![CDATA[<h1 id="runoob-vue3-test">runoob-vue3-test</h1><p>This template should help get you started developing with Vue 3 in Vite.</p><h2 id="recommended-ide-setup">Recommended IDE Setup</h2><p><a href="https://code.visualstudio.com/">VSCode</a> + <a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Volar</a> (and disable Vetur) + <a href="https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin">TypeScript Vue Plugin (Volar)</a>.</p><h2 id="customize-configuration">Customize configuration</h2><p>See <a href="https://vitejs.dev/config/">Vite Configuration Reference</a>.</p><h2 id="project-setup">Project Setup</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install<br></code></pre></td></tr></table></figure><h3 id="compile-and-hot-reload-for-development">Compile and Hot-Reload for Development</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm run dev<br></code></pre></td></tr></table></figure><h3 id="compile-and-minify-for-production">Compile and Minify for Production</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm run build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
      <category>runoob-vue3-test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/cmake-objdump/README/"/>
    <url>/cpp/cmake-objdump/README/</url>
    
    <content type="html"><![CDATA[<p>test cmake .. -DCMAKE_BUILD_TYPE=Release</p><p>test1 cmake .. -DCMAKE_BUILD_TYPE=Debug</p><p>test2 cmake .. -DCMAKE_BUILD_TYPE=Debug</p><p>test3 cmake ..</p><p>test test3</p><p>test3 24行 -g</p><p>test1 test2</p><p>strip test1</p><p>objdump -d -l -S -C qtdemo &gt; qtdemo.dump</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>cmake-objdump</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vexpress</title>
    <link href="/linux/kernel/qemu/vexpress.img%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98/"/>
    <url>/linux/kernel/qemu/vexpress.img%E8%99%9A%E6%8B%9F%E7%A3%81%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="vexpress.img虚拟磁盘">vexpress.img虚拟磁盘</h1><h2 id="制作虚拟磁盘">制作虚拟磁盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=vexpress.img bs=512 count=$((<span class="hljs-number">2</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">48</span>))<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-img create -f raw vexpress.img 48M<br></code></pre></td></tr></table></figure><p>这两种方法任选一种执行就可以，目的就是生成一个vexpress.img的虚拟镜像文件，为了更好的兼容性选择 raw 格式的镜像。</p><h2 id="虚拟磁盘中创建分区并修改">虚拟磁盘中创建分区并修改</h2><ol type="1"><li><p>磁盘分区</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk vexpress.img<br></code></pre></td></tr></table></figure></p><p>使用<code>n</code>命令创建分区，各种下一步就行。</p></li><li><p>挂载vexpress.img到/dev/loop0设备上</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo losetup /dev/loop0 vexpress.img<br></code></pre></td></tr></table></figure></p></li><li><p>使用partx命令让系统刷新系统的分区信息</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo partx -u /dev/loop0<br></code></pre></td></tr></table></figure></p></li><li><p>制作ext4格式的文件系统</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkfs.ext4 /dev/loop0p1<br></code></pre></td></tr></table></figure></p></li><li><p>把vexpress.img的根文件系统分区挂载到img</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> img<br>sudo mount -o loop /dev/loop0p1 img<br></code></pre></td></tr></table></figure></p><p>执行到这里虚拟磁盘就已经制作好了，下面的两个步骤是卸载磁盘时的操作。</p></li><li><p>卸载loop0设备下的分区</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo partx -d /dev/loop0<br></code></pre></td></tr></table></figure></p><p>如果执行不成功可以试试下方命令：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo umount -f img<br></code></pre></td></tr></table></figure></p></li><li><p>卸载loop0设备</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo losetup -d /dev/loop0<br></code></pre></td></tr></table></figure></p></li></ol><p>执行完上述流程后，已成功制作出vexpress.img，可以使用书上命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mount -o loop,offset=$((<span class="hljs-number">2048</span>*<span class="hljs-number">512</span>)) vexpress.img img<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://manongbook.com/linux/684.html">Linux设备驱动开发详解：基于最新的Linux4.0内核.pdf</a></li><li><a href="https://blog.csdn.net/aggresss/article/details/54946438">第四期 QEMU调试Linux内核实验 《虚拟机就是开发板》</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ALC885_1-1</title>
    <link href="/linux/kernel/drivers/sound/ALC885_1-1/"/>
    <url>/linux/kernel/drivers/sound/ALC885_1-1/</url>
    
    <content type="html"><![CDATA[<h1 id="alc885_1-1">ALC885_1-1</h1><h2 id="引脚描述">6. 引脚描述</h2><h3 id="数字输入输出">6.1 数字输入/输出</h3><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724161459.png" alt="" /><figcaption>Table 1. Digital I/O Pins</figcaption></figure><p>数字输入/输出（Digital I/O）引脚是处理数字信号的引脚，用于输入和输出数字数据。总计：9个引脚。以下是ALC885音频编解码器的数字输入/输出引脚的描述和特征定义：</p><ul><li><p>RESET# (引脚类型: 输入， 引脚编号: 11)：硬件复位信号，当为低电平时对芯片进行复位。特征定义为Vt=0.5*DVDD（即复位阈值为DVDD的一半）。</p></li><li><p>SYNC (引脚类型: 输入， 引脚编号: 11)：采样同步信号，用于48kHz采样同步。特征定义为Vt=0.5*DVDD。</p></li><li><p>BITCLK (引脚类型: 输入， 引脚编号: 6)：24MHz位时钟输入，用于同步数据传输。特征定义为Vt=0.5*DVDD。</p></li><li><p>SDATA-OUT (引脚类型: 输入， 引脚编号: 5)：串行TDM（时分多路复用）数据输入，用于输入音频数据。特征定义为Vt=0.5*DVDDIO。</p></li><li><p>SDATA-IN (引脚类型: 输入， 引脚编号: 8)：串行TDM数据输出，用于输出音频数据。特征定义为Vt=0.5*DVDDIO，VOH=DVDDIO（输出高电平为DVDDIO），VOL=DVSS（输出低电平为DVSS）。</p></li><li><p>SPDIF-IN / EAPD*1 (引脚类型: 输入/输出， 引脚编号: 47)：数字S/PDIF输入，用于接收数字音频信号；也可以用于控制外部放大器的电源（EAPD）。特征定义为VIL=1.45V（输入低电平阈值为1.45V），VIH=1.85V（输入高电平阈值为1.85V），VOH=DVDD（输出高电平为DVDD），VOL=DVSS（输出低电平为DVSS）。</p></li><li><p>SPDIF-OUT*2 (引脚类型: 输入， 引脚编号: 48)：数字S/PDIF输出和ADAT输出，用于输出数字音频信号，输出具有12mA @ 75Ω驱动能力。特征定义为VOH=DVDD（输出高电平为DVDD），VOL=DVSS（输出低电平为DVSS）。</p></li><li><p>GPIO0 / DMIC-CLK (引脚类型: 输入/输出， 引脚编号: 2)：通用输入/输出引脚0，用于提供数字麦克风（DMIC）的时钟输出。输入时特征定义为Vt=(2/3)*DVDD，输出时特征定义为VOH=DVDD（输出高电平为DVDD），VOL=DVSS（输出低电平为DVSS）。</p></li><li><p>GPIO1 / DMIC-DATA (引脚类型: 输入/输出， 引脚编号: 3)：通用输入/输出引脚1，用于提供从数字麦克风（DMIC）接收的串行数据输入。输入时特征定义为Vt=(2/3)*DVDD，输出时特征定义为VOH=DVDD（输出高电平为DVDD），VOL=DVSS（输出低电平为DVSS）。</p></li><li><p>*1：引脚47可配置为支持辅助数字麦克风输入（DMIC-R），通过定制的Realtek驱动支持。</p></li><li><p>*2：引脚48可以输出ADAT数字音频输出，该功能通过定制的Realtek驱动启用。</p></li></ul><h3 id="数字输入输出-1">6.2 数字输入/输出</h3><p><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724164128.png" alt="Table 2. Analog I/O Pins" /> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724164255.png" alt="Table 2. Analog I/O Pins" /></p><p>上述是ALC885音频编解码器的模拟I/O引脚描述，总共有22个引脚，这些引脚用于连接到各种音频输入设备和输出设备，以实现高性能的音频处理和播放功能：</p><ul><li><p>LINE2-L (引脚类型: 输入/输出， 引脚编号: 14): 第二线输入左声道。模拟输入/输出，默认为输入模式。通常用于连接第二条线输入设备。（标识为JACK-E）</p></li><li><p>LINE2-R (引脚类型: 输入/输出， 引脚编号: 15): 第二线输入右声道。模拟输入/输出，默认为输入模式。通常用于连接第二条线输入设备。（标识为JACK-E）</p></li><li><p>MIC2-L (引脚类型: 输入/输出， 引脚编号: 16): 第二个立体声麦克风输入左声道。模拟输入/输出，默认为输入模式。通常用于连接第二个立体声麦克风。（标识为JACK-F）</p></li><li><p>MIC2-R (引脚类型: 输入/输出， 引脚编号: 17): 第二个立体声麦克风输入右声道。模拟输入/输出，默认为输入模式。通常用于连接第二个立体声麦克风。（标识为JACK-F）</p></li><li><p>CD-L (引脚类型: 输入， 引脚编号: 18): CD输入左声道。模拟输入，最大电压为1.6Vrms。（标识为JACK-G）</p></li><li><p>CD-G (引脚类型: 输入， 引脚编号: 19): CD输入参考地。模拟输入，最大电压为1.6Vrms。（标识为JACK-G）</p></li><li><p>CD-R (引脚类型: 输入， 引脚编号: 20): CD输入右声道。模拟输入，最大电压为1.6Vrms。（标识为JACK-G）</p></li><li><p>MIC1-L (引脚类型: 输入/输出， 引脚编号: 21): 第一个立体声麦克风输入左声道。模拟输入/输出，默认为输入模式。通常用于连接第一个立体声麦克风。（标识为JACK-B）</p></li><li><p>MIC1-R (引脚类型: 输入/输出， 引脚编号: 22): 第一个立体声麦克风输入右声道。模拟输入/输出，默认为输入模式。通常用于连接第一个立体声麦克风。（标识为JACK-B）</p></li><li><p>LINE1-L (引脚类型: 输入/输出， 引脚编号: 23): 第一线输入左声道。模拟输入/输出，默认为输入模式。通常用于连接第一条线输入设备。（标识为JACK-C）</p></li><li><p>LINE1-R (引脚类型: 输入/输出， 引脚编号: 24): 第一线输入右声道。模拟输入/输出，默认为输入模式。通常用于连接第一条线输入设备。（标识为JACK-C）</p></li><li><p>PCBEEP (引脚类型: 输入， 引脚编号: 12): 外部PCBEEP输入。模拟输入，最大电压为1.6Vrms的满量程输入。</p></li><li><p>FRONT-L (引脚类型: 输入/输出， 引脚编号: 35): 前置输出左声道。模拟输出，用于连接前置输出设备。（标识为JACK-D）</p></li><li><p>FRONT-R (引脚类型: 输入/输出， 引脚编号: 36): 前置输出右声道。模拟输出，用于连接前置输出设备。（标识为JACK-D）</p></li><li><p>SURR -L (引脚类型: 输入/输出， 引脚编号: 39): 环绕声输出左声道。模拟输出，用于连接环绕声输出设备。（标识为JACK-A）</p></li><li><p>SURR -R (引脚类型: 输入/输出， 引脚编号: 41): 环绕声输出右声道。模拟输出，用于连接环绕声输出设备。（标识为JACK-A）</p></li><li><p>CENTER (引脚类型: 输出， 引脚编号: 43): 中央输出。模拟输出，用于连接中央输出设备。（标识为JACK-G）</p></li><li><p>LFE (引脚类型: 输出， 引脚编号: 44): 低频输出。模拟输出，用于连接低频输出设备。（标识为JACK-G）</p></li><li><p>SIDESURR -L (引脚类型: 输出， 引脚编号: 45): 侧面环绕声输出左声道。模拟输出，用于连接侧面环绕声输出设备。（标识为JACK-H）</p></li><li><p>SIDESURR -R (引脚类型: 输出， 引脚编号: 46): 侧面环绕声输出右声道。模拟输出，用于连接侧面环绕声输出设备。（标识为JACK-H）</p></li><li><p>Sense A (引脚类型: 输入， 引脚编号: 13): 插孔检测引脚A。用于连接插孔电阻网络输入1。</p></li><li><p>Sense B (引脚类型: 输入， 引脚编号: 34): 插孔检测引脚B。用于连接插孔电阻网络输入2。</p></li></ul><h3 id="filterreferencenc">6.3 Filter/Reference/NC</h3><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724165245.png" alt="" /><figcaption>Table 3. Filter/Reference</figcaption></figure><p>这里是Filter/Reference引脚的详细描述，总共有8个引脚，这些引脚用于提供偏置电压和参考电压，以支持插孔检测和其他音频功能：</p><ul><li><p>VREF (引脚类型: 输出， 引脚编号: 27): 2.5V参考电压。连接10uF电容到模拟地。</p></li><li><p>MIC1-VREFO-L (引脚类型: 输出， 引脚编号: 28): MIC1插孔左声道偏置电压。2.5V/3.75V参考电压。</p></li><li><p>LINE1-VREFO (引脚类型: 输出， 引脚编号: 29): LINE1插孔偏置电压。2.5V/3.75V参考电压。</p></li><li><p>MIC2-VREFO (引脚类型: 输出， 引脚编号: 30): MIC2插孔偏置电压。2.5V/3.75V参考电压。</p></li><li><p>LINE2-VREFO (引脚类型: 输出， 引脚编号: 31): LINE2插孔偏置电压。2.5V/3.75V参考电压。</p></li><li><p>MIC1-VREFO-R (引脚类型: 输出， 引脚编号: 32): MIC1插孔右声道偏置电压。2.5V/3.75V参考电压。</p></li><li><p>NC (引脚类型: 不连接， 引脚编号: 37): 未连接。</p></li><li><p>JDREF (引脚类型: 输出， 引脚编号: 40): 插孔检测的参考电阻。连接到20K, 1%的外部电阻和模拟地。</p></li></ul><h3 id="powerground">6.4 Power/Ground</h3><p>这些引脚用于为IC的不同部分提供所需的电源和地线。总共有8个引脚，AVDD是用于模拟电路的电源，而DVDD用于数字核心和HDA总线。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724165903.png" alt="" /><figcaption>Table 4. Power/Ground</figcaption></figure><ul><li><p>AVDD1 (引脚类型: 输入，引脚编号: 25): 模拟电源供应，用于混音器和放大器的模拟电路。</p></li><li><p>AVSS1 (引脚类型: 输入，引脚编号: 26): 模拟地，用于混音器和放大器的模拟电路。</p></li><li><p>AVDD2 (引脚类型: 输入，引脚编号: 38): 模拟电源供应，用于DAC和ADC的模拟电路。</p></li><li><p>AVSS2 (引脚类型: 输入，引脚编号: 42): 模拟地，用于DAC和ADC的模拟电路。</p></li><li><p>DVDD (引脚类型: 输入，引脚编号: 1): 数字核心的数字电源供应。</p></li><li><p>DVSS (引脚类型: 输入，引脚编号: 4, 7): 数字核心的数字地，同时也是HDA总线的数字地。</p></li><li><p>DVDD-IO (引脚类型: 输入，引脚编号: 9): HDA总线的数字IO电源，电压范围为1.5V~3.3V。</p></li></ul><h2 id="hda链路协议">7. HDA链路协议</h2><h3 id="链路信号">7.1. 链路信号</h3><p>高清晰度音频（High Definition Audio，HDA）链路是连接HDA编解码器与HDA控制器的数字串行接口。HDA链路协议是控制器同步的，基于由HDA控制器发送的24.0MHz BIT-CLK（位时钟）。输入和输出流，包括命令和PCM数据，与48kHz帧率同步。图4展示了HDA链路协议的基本概念。</p><p>在HDA链路中，HDA控制器负责控制通信的时序，并通过BIT-CLK来同步数据传输。PCM数据是指脉冲编码调制（Pulse Code Modulation）的音频数据，用于音频的录制和播放。所有数据在HDA链路中按照特定的帧率进行传输，这样可以确保音频数据的准确性和同步。</p><p>链路中的输入和输出数据流称为isochronous流，这意味着数据传输是基于相同的时钟，保持相等的时间间隔，从而实现实时的音频传输。这种isochronous传输方式非常重要，因为它确保了音频数据的连续性和一致性，避免了音频播放过程中的间断和数据损失。</p><p>总体而言，HDA链路协议为HDA编解码器和HDA控制器之间的数据传输提供了可靠的时序和同步机制，确保高质量的音频传输和播放体验。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724172015.png" alt="" /><figcaption>Figure 4. HDA Link Protocol</figcaption></figure><h4 id="链路信号定义">7.1.1. 链路信号定义</h4><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724172153.png" alt="" /><figcaption>表5. 链路信号定义</figcaption></figure><ul><li><p>BCLK（位时钟）：24.0MHz位时钟由HDA控制器提供，连接所有编解码器。BCLK用于同步数据传输和控制时序。</p></li><li><p>SYNC（同步信号）：48kHz同步信号用于同步链路上的输入和输出流。它由HDA控制器提供，连接所有编解码器。</p></li><li><p>SDO（串行数据输出）：SDO是由HDA控制器向所有编解码器驱动的串行数据输出信号。SDO上携带命令和数据流。数据速率是双泵送的，控制器将数据驱动到SDO上，编解码器会在每个BCLK上升沿时对SDO上的数据进行采样。HDA控制器必须支持至少一个SDO。为了扩展输出带宽，可以支持多个SDO。</p></li><li><p>SDI（串行数据输入）：SDI是由编解码器驱动的点对点串行数据输入信号，用于从编解码器传输数据到HDA控制器。HDA控制器必须支持至少一个SDI，最多可以支持15个SDI。SDI由编解码器在每个BCLK上升沿时驱动，HDA控制器在每个BCLK上升沿时对SDI进行采样。HDA控制器可以驱动SDI以初始化编解码器的ID。</p></li><li><p>RST#（复位信号）：RST#是低有效的复位信号，用于将编解码器重置到默认上电状态。RST#由HDA控制器提供，连接所有编解码器。当RST#被触发时，编解码器会返回到默认的初始状态。</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724172710.png" alt="" /><figcaption>Table 6. HDA Signal Definitions</figcaption></figure><table><thead><tr class="header"><th>信号名称</th><th>来源</th><th>控制器的类型</th><th>描述</th><th></th></tr></thead><tbody><tr class="odd"><td>BCLK</td><td>控制器输出</td><td>全局</td><td>24.0MHz位时钟</td><td></td></tr><tr class="even"><td>SYNC</td><td>控制器输出</td><td>全局</td><td>48kHz帧同步和出站标签信号</td><td></td></tr><tr class="odd"><td>SDO</td><td>控制器输出</td><td>串行</td><td>控制器的串行数据输出</td><td></td></tr><tr class="even"><td>SDI</td><td>编解码器/控制器</td><td>输入/输出</td><td>编解码器传输给控制器的串行数据输入。由控制器弱上拉。</td><td></td></tr><tr class="odd"><td>RST#</td><td>控制器输出</td><td>全局</td><td>全局低有效的复位信号</td><td></td></tr></tbody></table><h4 id="信号拓扑">7.1.2. 信号拓扑</h4><p>HDA控制器支持两个SDO用于出站数据流，最多支持15个SDI用于入站数据流。RST#、BCLK、SYNC、SDO0和SDO1由控制器驱动到编解码器。每个编解码器驱动自己的点对点SDI信号到控制器。</p><p>图6显示了HDA控制器和编解码器之间的可能连接方式：</p><ul><li>• Codec 0是基本连接。有一个单一的SDO和一个单一的SDI用于正常传输。</li><li>• Codec 1有两个SDO，用于加倍的出站速率，一个单一的SDI用于正常的入站速率。</li><li>• Codec 3支持一个单一的SDO，用于正常的出站速率，以及两个SDI，用于加倍的入站速率。</li><li>• Codec N有两个SDO和多个SDI。</li></ul><p>多个SDO和多个SDI用于扩展控制器和编解码器之间的传输速率。第7.2节《帧构成》详细描述了单个和多个SDO/SDI的出站和入站数据流构成。</p><p>图6中显示的连接方式可以在HDA系统中同时实现。ALC885被设计为接收单一SDO流。</p><h3 id="帧构成">7.2. 帧构成</h3><h4 id="出站帧---单一sdo">7.2.1. 出站帧 - 单一SDO</h4><p>一个出站帧由一个32位的命令流和多个数据流组成。数据流中有一个或多个采样块。如果HDA控制器向编解码器传送48kHz的采样率，则一个流中只有一个采样块。而多个采样块意味着采样率是48kHz的倍数。这意味着在同一个流中应该有两个块来携带96kHz的采样（见图7）。 对于出站帧，流标签不在SDO中，而是在SYNC信号中。在流标签的末尾开始新的数据流。流标签包括一个4位的前导码和4位的流ID（见图8）。 为了保持绑定到同一数据流的转换器的节奏，这些转换器的采样必须放置在同一个块中。</p><h4 id="出站帧---多个sdo">7.2.2. 出站帧 - 多个SDO</h4><p>HDA控制器允许使用两个SDO信号来进行出站数据的传输，从而在更短的时间内完成传输以获得更大的带宽。如果软件确定目标编解码器支持多个SDO功能，它会在控制器的输出流控制寄存器中启用"Stripe Control"位，以启动在多个SDO上传输特定的流（如图9中的流"A"）。在这种情况下，数据流的最高有效位（MSB）总是携带在SDO0上，第二位携带在SDO1上，依此类推。 SDO1用于传输条带化的流。编解码器不支持多个SDO连接到SDO0。 为确保所有编解码器都可以确定其对应的数据流，命令流不进行分割。它总是在SDO0上传输，并且在SDO1上进行复制。</p><h4 id="入站帧---单个sdi">7.2.3. 入站帧 - 单个SDI</h4><p>在HDA音频协议中，入站帧使用单个SDI（Serial Data Input）信号传输。入站帧由两个部分组成：响应流（response stream）和多个数据流。SDI信号由编解码器在每个BCLK（Bit Clock）上升沿处进行驱动。BCLK是HDA控制器提供的24.0MHz的比特时钟信号。</p><p>入站帧中的数据流标签（stream tag）不通过SYNC信号传输，而是包含在SDI信号中。一个完整的SDI数据流包括一个4位的流标签、一个6位的数据长度字段以及n位的采样块（sample blocks）。数据长度字段指示了数据流中的采样块长度，采样块可以是1个或多个采样点的组合。</p><p>需要注意的是，入站帧中的数据流标签和数据长度字段是按照特定的格式组织的，HDA控制器在每个BCLK上升沿处对这些字段进行采样，以正确解析接收到的数据。</p><h4 id="入站帧---多个sdi">7.2.4. 入站帧 - 多个SDI</h4><p>HDA音频协议允许编解码器通过多个SDI信号向控制器传输数据，以实现更高的带宽。如果一个入站数据流超过了单个SDI的数据传输限制，编解码器可以将数据分成独立的多个SDI信号，每个信号在同一个帧时间内使用不同的流编号。这类似于将多个编解码器连接到控制器上。控制器通过多个DMA描述符将分开的数据流采样到独立的内存中，然后由软件将分开的数据重新组合成有意义的数据流。这样就可以通过多个SDI信号同时传输更大量的数据。</p><p>通过使用多个SDI信号，编解码器可以将一个大的数据流拆分成多个较小的数据流，从而充分利用系统带宽，提高音频数据传输的效率和速度。这在高质量音频传输和处理方面非常有用，特别是对于需要处理大量音频数据的应用场景。</p><h4 id="可变采样率">7.2.5. 可变采样率</h4><p>HDA链接设计用于48kHz的采样率。可变采样率以48kHz的倍数或子倍数的形式进行传递。每个帧中的两个采样块导致96kHz的传送速率，而每两个帧中的一个采样块导致24kHz的传送速率。HDA规范规定，出站流的采样率由控制器同步，而不是由编解码器同步。每个流都有自己的采样率，独立于任何其他流。</p><p>HDA控制器支持48kHz和44.1kHz的基本采样率。表7显示了基于这两个基本采样率的倍数或子倍数的推荐采样率。</p><p>48kHz的子倍数采样率（1/n）包含n帧，其中不含任何采样块。48kHz的倍数采样率（n）在一个帧中包含n个采样块。表8显示了基于48kHz的可变采样率的传送节奏。</p><p>HDA链接被定义为以固定的48kHz帧率运行。要以（子）多个44.1kHz的采样率传送样本，必须维护44.1kHz和48kHz之间的适当比例，以避免频率漂移。44.1kHz和48kHz之间的适当比例是147/160，即每160帧传输147个采样块。采样节奏“12-11-11-12-11-11-12-11-11-12-11-11-11-（重复）”在每160帧中交错插入13个不含采样块的帧。这为44.1kHz的传送速率提供了低的长期频率漂移。44.1kHz的子倍数采样率也遵循此节奏，并在每个帧中交错插入n个空帧。44.1kHz的倍数采样率使用此节奏，在非空帧中包含n个采样块，并在非空帧之间交错插入一个空帧（见表9）。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724175142.png" alt="" /><figcaption>Table 7. Defined Sample Rate and Transmission Rate</figcaption></figure><ul><li>(子)多个 48kHz基准 44.1kHz基准</li><li>1/6 8kHz（每6帧1个采样块）</li><li>1/4 12kHz（每4帧1个采样块） 11.025kHz（每4帧1个采样块）</li><li>1/3 16kHz（每3帧1个采样块）</li><li>1/2 22.05kHz（每2帧1个采样块）</li><li>2/3 32kHz（每3帧2个采样块）</li><li>1 48kHz（每帧1个采样块） 44.1kHz（每帧1个采样块）</li><li>2 96kHz（每帧2个采样块） 88.2kHz（每帧2个采样块）</li><li>4 192kHz（每帧4个采样块） 176.4kHz（每帧4个采样块）</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724175518.png" alt="" /><figcaption>Table 8. 48kHz Variable Rate of Delivery Timing</figcaption></figure><ul><li>速率 传递时序 描述</li><li>8kHz YNNNNN (重复) 每6帧传输1个采样块</li><li>12kHz YNNN (重复) 每4帧传输1个采样块</li><li>16kHz YNN (重复) 每3帧传输1个采样块</li><li>32kHz Y2NN (重复) 每6帧传输1个采样块</li><li>48kHz Y (重复) 每帧传输1个采样块</li><li>96kHz Y2 (重复) 每帧传输2个采样块</li><li>192kHz Y4 (重复) 每帧传输4个采样块</li></ul><p>note:</p><ul><li>N：帧中没有采样块</li><li>Y：帧中有一个采样块</li><li>Yx：帧中有X个采样块</li></ul><p>这些符号代表了传输时每帧中采样块的情况。例如，YNNNNN表示每6帧中有一个采样块。</p><h3 id="复位和初始化">7.3. 复位和初始化</h3><p>在HDA链路中，有两种类型的复位：</p><ul><li>链路复位：通过RST#信号的触发，所有编解码器都返回到其上电状态。</li><li>编解码器复位：由软件发出指令，将特定的编解码器重置回其默认状态。</li></ul><p>在以下三种事件之后，需要进行初始化序列：</p><ol type="1"><li>链路复位</li><li>编解码器复位</li><li>编解码器更改其电源状态（例如，热插拔编解码器到HDA系统）。 在上述事件发生后，需要进行初始化以确保系统的正确运行。</li></ol><h4 id="链路复位">7.3.1. 链路复位</h4><p>链路复位可能由以下3个事件引起：</p><ol type="1"><li>HDA控制器以任何原因（上电或PCI复位）断言RST#信号。</li><li>软件通过HDA控制器的全局控制寄存器（GCR）中的'CRST'位发起链路复位。</li><li>软件启动电源管理序列。 图13显示了“链路复位”的时序，包括“进入”序列（1-5）和“退出”序列（6-9）。</li></ol><p>在链路复位期间，HDA控制器和编解码器将返回到其上电状态，确保系统处于可靠的初始状态。</p><p>进入“链路复位”状态：</p><ol type="1"><li><p>软件将一个0写入HDA控制器的全局控制寄存器的“CRST”位，以启动链路复位。</p></li><li><p>当控制器完成当前帧时，它不会在帧结束时发出正常的8位帧SYNC信号。</p></li><li><p>控制器将SYNC和所有SDO信号拉低。编解码器也将SDI信号拉低。</p></li><li><p>控制器将RST#信号拉低，并进入“链路复位”状态。</p></li><li><p>所有由控制器和编解码器驱动的链路信号应该通过内部上拉低电阻器处于三态状态。</p></li></ol><p>退出“链路复位”状态：</p><ol start="6" type="1"><li><p>如果由于任何原因重新启动BCLK（例如编解码器唤醒事件、电源管理等）。</p></li><li><p>软件负责在至少经过100微秒的BCLK运行时间后将RST#解除断开（这100微秒提供了编解码器PLL稳定的时间）。</p></li><li><p>在RST#解除断开后至少经过4个BCLK周期，控制器开始发出正常的帧SYNC信号。</p></li><li><p>当编解码器将其SDI驱动为请求初始化序列时（当SDI在帧SYNC的最后一位驱动为高电平时，表示编解码器请求初始化序列）。</p></li></ol><h4 id="编解码器复位">7.3.2. 编解码器复位</h4><p>“编解码器复位”是通过编解码器的RESET命令动词发起的。它导致目标编解码器被重置为默认状态。在目标编解码器完成复位操作后，将请求执行初始化序列。</p><p>编解码器初始化序列”是在以下步骤中进行的：</p><ul><li>1 编解码器在SYNC的最后一位上将SDI置高，以请求从控制器获得编解码器地址（CAD）。</li><li>2 编解码器将在此时段内停止驱动SDI，即开始执行回转过程。</li><li>3 4 5 6 控制器驱动SDI为编解码器分配一个CAD。</li><li>7 控制器在分配了CAD后释放SDI。</li><li>8 进入正常操作状态。</li></ul><h3 id="verb和响应格式">7.4. Verb和响应格式</h3><p>Verb ID是用于指示操作类型的标识符。它用于描述在音频系统中执行的不同操作。不同的Verb ID对应不同的功能或命令，例如读取或写入寄存器、请求设备初始化等。</p><p>在表10中，位[27:20]表示Verb ID。由于这是一个4位字段，因此可以有16种不同的Verb ID，从0000（0）到1111（15）。每个Verb ID对应着不同的音频操作。例如，Verb ID为0000（0）可能代表一个读取操作，Verb ID为0001（1）可能代表一个写入操作，而Verb ID为1111（15）可能代表设备初始化请求。</p><p>通过正确的Verb ID，控制器和设备之间可以进行正确的通信，并执行所需的操作。</p><h4 id="命令verb格式">7.4.1. 命令Verb格式</h4><p>有两种类型的Verb；一种是带有4位标识符（4位Verb），并带有16位数据，另一种是带有12位标识符（12位Verb），并带有8位数据。表10显示了从控制器发送到编解码器的命令流的4位Verb结构。表11是获取和控制编解码器参数的12位Verb结构。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724181614.png" alt="" /><figcaption>Table 10. 40-Bit Commands in 4-Bit Verb Format Table 11. 40-Bit Commands in 12-Bit Verb Format</figcaption></figure><h5 id="verbs-supported-by-the-alc885-ysupported">7.4.1.1 Verbs Supported by the ALC885 (Y=Supported)</h5><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724183427.png" alt="" /><figcaption>Table 12. Verbs Supported by the ALC885 (Y=Supported)</figcaption></figure><p>在表12中列出了ALC885音频编解码器支持的不同Verb（操作）及其是否被支持的信息。以下是各个Verb的解释：</p><p>这些是ALC885音频编解码器支持的Verb类型：</p><ul><li>Get parameter: 获取参数，用于请求获取特定参数的值。</li><li>Connection Select: 连接选择，用于选择特定的连接。</li><li>Get Connection List Entry: 获取连接列表项，用于请求获取连接列表中的特定项。</li><li>Processing State: 处理状态，用于表示处理状态。</li><li>Coefficient Index: 系数索引，用于表示系数的索引值。</li><li>Processing Coefficient: 处理系数，用于表示处理的系数值。</li><li>Amplifier Gain/Mute: 放大器增益/静音，用于表示放大器的增益或静音状态。</li><li>Stream Format: 流格式，用于表示数据流的格式。</li><li>Digital Converter 1: 数字转换器 1，用于表示数字转换器的相关参数。</li><li>Digital Converter 2: 数字转换器 2，用于表示数字转换器的相关参数。</li><li>Power State: 电源状态，用于表示组件的电源状态。</li><li>Channel / Stream ID: 通道/流ID，用于表示通道或数据流的ID。</li><li>SDI Select: SDI选择，用于选择特定的SDI信号。</li><li>Pin Widget Control: 引脚组件控制，用于控制引脚组件的相关功能。</li><li>Unsolicited Enable: 未请求启用，用于启用未请求的事件通知。</li><li>Pin Sense: 引脚感知，用于表示引脚的感知状态。</li><li>EAPD / BTL Enable: EAPD/BTL启用，用于启用EAPD或BTL功能。</li><li>All GPIO Control: 所有GPIO控制，用于控制所有GPIO的状态。</li><li>Beep Generator Control: 蜂鸣器生成器控制，用于控制蜂鸣器生成器的状态。</li><li>Volume Knob Control: 音量旋钮控制，用于控制音量旋钮的状态。</li><li>Subsystem ID, Byte 0: 子系统ID，字节0，用于表示子系统的ID信息。</li><li>Subsystem ID, Byte 1: 子系统ID，字节1，用于表示子系统的ID信息。</li><li>Subsystem ID, Byte 2: 子系统ID，字节2，用于表示子系统的ID信息。</li><li>Subsystem ID, Byte 3: 子系统ID，字节3，用于表示子系统的ID信息。</li><li>Config Default, Byte 0: 默认配置，字节0，用于表示默认配置的信息。</li><li>Config Default, Byte 1: 默认配置，字节1，用于表示默认配置的信息。</li><li>Config Default, Byte 2: 默认配置，字节2，用于表示默认配置的信息。</li><li>Config Default, Byte 3: 默认配置，字节3，用于表示默认配置的信息。</li><li>RESET: 重置，用于重置特定组件或整个系统。</li></ul><p>这些是ALC885音频编解码器支持的部分Widget类型：</p><ul><li>Get Verb: 获取Verb，用于请求获取特定Verb的值。</li><li>Set Verb: 设置Verb，用于设置特定Verb的值。</li><li>Root Node: 根节点，代表音频链路的根节点。</li><li>Audio Function Group: 音频功能组，用于表示音频功能组件。</li><li>Modem Function Group: 调制解调器功能组，用于表示调制解调器功能组件。</li><li>HDMI Function Group: HDMI功能组，用于表示HDMI功能组件。</li><li>Vendor Define Group: 厂商定义组，用于表示厂商定义的功能组件。</li><li>Audio Out Converter: 音频输出转换器，用于表示音频输出转换器组件。</li><li>Audio In Converter: 音频输入转换器，用于表示音频输入转换器组件。</li><li>Pin Widget: 引脚组件，用于表示引脚组件。</li><li>Sum Widget: 汇总组件，用于表示汇总组件。</li><li>Selector Widget: 选择器组件，用于表示选择器组件。</li><li>Power Widget: 电源组件，用于表示电源组件。</li><li>Volume Knob: 音量旋钮，用于表示音量旋钮组件。</li><li>Beep Generator: 蜂鸣器生成器，用于表示蜂鸣器生成器组件。</li><li>Vendor Defined Widget: 厂商定义的组件，用于表示厂商定义的组件。</li></ul><p>表中的Y表示支持该Verb，而“-”表示不支持。控制器通过使用这些Verb来与ALC885音频编解码器进行通信，并对其进行配置和控制。</p><h5 id="parameters-in-the-alc885-ysupported">7.4.1.2 Parameters in the ALC885 (Y=Supported)</h5><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724185556.png" alt="" /><figcaption>Table 13. Parameters in the ALC885 (Y=Supported)</figcaption></figure><p>这些是ALC885音频编解码器支持的参数：</p><ul><li>Vendor ID - 厂商ID：标识音频编解码器的制造商，通常是一个唯一的代码。它可以用于识别设备的制造商。</li><li>Revision ID - 修订ID：标识音频编解码器的硬件或固件版本，用于区分不同版本的设备。</li><li>Subordinate Node Count - 下级节点计数：指示一个功能组拥有的下级节点（例如子功能组、子设备等）的数量。</li><li>Function Group Type - 功能组类型：表示功能组的类型，用于区分不同类型的功能组。</li><li>Audio Function Group Capabilities - 音频功能组能力：描述音频功能组支持的功能和特性。</li><li>Audio Widget Capabilities - 音频组件能力：描述音频组件（如输入转换器、输出转换器等）支持的功能和特性。</li><li>Sample Size, Rate - 采样大小、速率：指示音频组件支持的采样位数和采样率。</li><li>Stream Formats - 流格式：指示音频组件支持的数据流格式，包括编码方式和通道数等。</li><li>Pin Capabilities - 引脚能力：描述音频编解码器的引脚组件（输入和输出）的功能和特性。</li><li>Input Amp Capabilities - 输入放大器能力：描述音频输入转换器的放大器功能和特性。</li><li>Output Amp Capabilities - 输出放大器能力：描述音频输出转换器的放大器功能和特性。</li><li>Connection List Length - 连接列表长度：指示音频组件支持的连接列表长度，用于描述与其他组件的连接关系。</li><li>Supported Power States - 支持的电源状态：描述音频组件支持的不同电源状态，例如开机、待机、关机等。</li><li>Processing Capabilities - 处理能力：描述音频组件支持的音频处理功能和特性。</li><li>GPI/O Count - 通用输入/输出（GPI/O）计数：指示音频编解码器支持的通用输入/输出端口数量。</li><li>Volume Knob Capabilities - 音量旋钮能力：描述音量旋钮组件的功能和特性，用于调节音频输出的音量大小。</li></ul><p>这些是ALC885音频编解码器支持的Widget类型：</p><ul><li>Parameter ID - 参数ID：标识音频编解码器内部的各种参数，用于获取或设置特定的配置项。</li><li>Root Node - 根节点：音频编解码器的根节点，用于标识功能组的顶级节点。</li><li>Audio Function Group - 音频功能组：表示音频功能的一个组，包含多个音频组件。</li><li>Modem Function Group - 调制解调器功能组：表示调制解调器功能的一个组，包含多个调制解调器组件。</li><li>HDMI Function Group - HDMI功能组：表示HDMI功能的一个组，包含多个HDMI组件。</li><li>Vendor Define Group - 厂商定义组：由制造商定义的特定功能组，用于实现自定义功能。</li><li>Audio Out Converter - 音频输出转换器：用于将音频数据转换为模拟输出信号的组件。</li><li>Audio In Converter - 音频输入转换器：用于将模拟音频信号转换为数字音频数据的组件。</li><li>Pin Widget - 引脚组件：音频编解码器的引脚组件，用于连接不同音频组件。</li><li>Sum Widget - 汇总组件：将多个输入音频流混合为单个输出音频流的组件。</li><li>Selector Widget - 选择组件：用于在多个输入音频流中选择一个作为输出音频流的组件。</li><li>Power Widget1 - 电源组件1：控制音频组件的电源状态的组件。</li><li>Volume Knob - 音量旋钮：用于调节音频输出的音量大小的组件。</li><li>Beep Generator - 蜂鸣器发生器：产生蜂鸣音的组件。</li><li>Vendor Defined Widget - 厂商定义组件：由制造商定义的特定组件，用于实现自定义功能。</li></ul><h4 id="回应格式">7.4.2. 回应格式</h4><p>从编解码器到控制器，有两种类型的回应。被请求回应是编解码器对当前命令动词的回应。编解码器将在下一帧中发送被请求回应数据，而不考虑Set（写入）或Get（读取）命令。32位回应由软件解释，对于控制器而言是不透明的。</p><p>主动回应是由编解码器独立于软件请求发送的。插孔检测或GPI状态信息可以主动传递给控制器，并由软件进行解释。Bit [31:28]中的“Tag”用于标识主动回应事件。该标记在HDA规范中未定义。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724192519.png" alt="" /><figcaption>Table 14. Solicited Response Format</figcaption></figure><p>注意：在链路协议中，回应流是36位宽。回应被放置在较低的32位字段中。第35位是一个“有效”位，用于指示回应已经“就绪”。第34位被设置为表示已发送未被请求的回应。</p><h3 id="电源管理">7.5. 电源管理</h3><p>ALC885在低功耗模式下不支持唤醒事件。所有组件的电源管理状态变化都由软件控制。表16显示了系统电源状态的定义。 在ALC885中，所有组件，包括输出/输入转换器，都支持电源控制。软件可以根据系统配置设置各种电源状态。 表17显示了支持电源管理的节点。为了简化电源控制，软件可以通过音频功能（NID=01h）来配置整个编解码器的电源状态。输出转换器（DACs）和输入转换器（ADCs）没有独立的电源控制，因此无法提供精细的电源控制。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724192755.png" alt="" /><figcaption>Table 16. System Power State Definitions</figcaption></figure><p>表16. 系统电源状态定义</p><table><thead><tr class="header"><th>电源状态</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>D0</td><td>所有电源开启。各个DAC和ADC可以根据需要开启或关闭电源。</td></tr><tr class="even"><td>D1</td><td>所有放大器和转换器（DAC和ADC）被关闭电源。状态保持，模拟参考电压保持开启。</td></tr><tr class="odd"><td>D2</td><td>所有放大器和转换器（DAC和ADC）被关闭电源。状态保持，但模拟参考电压关闭（D1状态加上关闭模拟参考电压）。</td></tr><tr class="even"><td>D3 (Hot)</td><td>电源仍供应。编解码器停止内部时钟。状态保持。</td></tr><tr class="odd"><td>D3 (Cold)</td><td>所有电源被切断。状态丢失。</td></tr></tbody></table><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724193216.png" alt="" /><figcaption>Table 17. Power Controls in NID 01h</figcaption></figure><p>表17. NID 01h中的电源控制</p><table><thead><tr class="header"><th>节点</th><th>描述</th><th>D0</th><th>D1</th><th>D2</th><th>D3 (Link Reset)</th></tr></thead><tbody><tr class="odd"><td>LINK Response</td><td>连接响应</td><td>正常</td><td>正常</td><td>正常</td><td>关闭电源 (PD)</td></tr><tr class="even"><td>FRONT DAC (NID 02h)</td><td>前声道DAC (NID 02h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="odd"><td>SURR DAC (NID 03h)</td><td>环绕声DAC (NID 03h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="even"><td>CEN/LFE DAC (NID 04h)</td><td>中置/低频效果DAC (NID 04h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="odd"><td>SIDESURR DAC (NID 05h)</td><td>边置环绕声DAC (NID 05h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="even"><td>FOUT DAC (NID 25h)</td><td>输出DAC (NID 25h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="odd"><td>MIC ADC (NID 07h)</td><td>麦克风ADC (NID 07h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="even"><td>LINE ADC (NID 08h)</td><td>线路ADC (NID 08h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="odd"><td>MIX ADC (NID 09h)</td><td>混音ADC (NID 09h)</td><td>正常</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td><td>关闭电源 (PD)</td></tr><tr class="even"><td>All Headphone Drivers</td><td>所有耳机驱动器</td><td>正常</td><td>正常</td><td>关闭电源 (PD)</td><td>正常</td></tr><tr class="odd"><td>All Mixers</td><td>所有混音器</td><td>正常</td><td>正常</td><td>关闭电源 (PD)</td><td>正常</td></tr><tr class="even"><td>Audio Function (NID=01h)</td><td>音频功能 (NID=01h)</td><td>正常</td><td>正常</td><td>关闭电源 (PD)</td><td>正常</td></tr><tr class="odd"><td>All Reference</td><td>所有参考电源</td><td>正常</td><td>正常</td><td>关闭电源 (PD)</td><td>正常</td></tr></tbody></table><p>注：</p><ul><li>D0：所有电源开启，正常工作状态。</li><li>D1：关闭所有放大器和转换器（DAC和ADC），维持状态，模拟参考电压保持开启。</li><li>D2：关闭所有放大器和转换器（DAC和ADC），维持状态，但模拟参考电压关闭。</li><li>D3 (Link Reset)：关闭所有电源，状态丢失。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724193343.png" alt="" /><figcaption>Table 18. Powered Down Conditions</figcaption></figure><p>表18. 关闭电源的条件</p><table><thead><tr class="header"><th>条件</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>LINK Response电源关闭</td><td>内部时钟停止。SDATA-IN和S/PDIF-OUT通过内部拉低47K电阻浮置。S/PDIF-IN也被浮置。仍支持“Link Reset Entry”和“Link Reset Exit”序列的检测。如果提供DVDD，则所有状态将保持。</td></tr><tr class="even"><td>FRONT DAC电源关闭</td><td>模拟块和数字滤波器被关闭电源。</td></tr><tr class="odd"><td>SURR DAC电源关闭</td><td>模拟块和数字滤波器被关闭电源。</td></tr><tr class="even"><td>CEN/LFE DAC电源关闭</td><td>模拟块和数字滤波器被关闭电源。</td></tr><tr class="odd"><td>SIDESURR DAC电源关闭</td><td>模拟块和数字滤波器被关闭电源。</td></tr><tr class="even"><td>FOUT DAC电源关闭</td><td>模拟块和数字滤波器被关闭电源。</td></tr><tr class="odd"><td>LINE ADC电源关闭</td><td>模拟块和数字滤波器被关闭电源。SDATA-IN上的数据静默。</td></tr><tr class="even"><td>MIX ADC电源关闭</td><td>模拟块和数字滤波器被关闭电源。SDATA-IN上的数据静默。</td></tr><tr class="odd"><td>MIC ADC电源关闭</td><td>模拟块和数字滤波器被关闭电源。SDATA-IN上的数据静默。</td></tr><tr class="even"><td>耳机放大器电源关闭</td><td>所有耳机放大器被关闭电源。</td></tr><tr class="odd"><td>混音器电源关闭</td><td>所有内部混音器部件被关闭电源。各个引脚复合体的DC参考和VREFOUTx仍然保持。</td></tr><tr class="even"><td>参考电源关闭</td><td>所有内部参考、DC参考和各个引脚复合体上的VREFOUTx被关闭电源。</td></tr></tbody></table><h2 id="支持的verbs和parameters">8. 支持的Verbs和Parameters</h2><p>本节描述了ALC885中各种部件支持的Verbs和Parameters。如果所寻址的部件不支持某个Verb，则它将回复32位的“0”。</p><h3 id="verb---获取参数-verb-idf00h">8.1. Verb - 获取参数 (Verb ID=F00h)</h3><p>'获取参数' Verb 用于获取HDA编解码器的系统信息和功能能力。所有参数都是只读的。每个部件都定义了总共15个ID参数。一些参数仅在特定部件中支持。有关支持的参数的详细信息，请参阅第7.4.1节“命令Verb格式”，第21页。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230724193914.png" alt="" /><figcaption>Table 19. Verb – Get Parameters (Verb ID=F00h)</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hda_codec</title>
    <link href="/linux/kernel/drivers/sound/hda_codec/"/>
    <url>/linux/kernel/drivers/sound/hda_codec/</url>
    
    <content type="html"><![CDATA[<p>mv /usr/bin/pulseaudio /usr/bin/pulseaudio_bak mv /sbin/alsactl /sbin/alsactl_bak</p><p>ps aux | grep -i alsactl ps aux | grep -i pulseaudio</p><p>killall alsactl pulseaudio</p><p>cd /sys/class/sound/hwC0D0</p><p>echo 1 &gt; reconfig</p><p>snd_hda_gen_parse_auto_config+0x1 [kernel] snd_hda_parse_generic_codec+0xa3 [kernel] hda_codec_driver_probe+0x74 [kernel] really_probe+0x24b [kernel] driver_probe_device+0xb3 [kernel] bus_for_each_drv+0x76 [kernel] __device_attach+0xe5 [kernel] snd_hda_codec_configure+0xe6 [kernel] azx_codec_configure+0x2f [kernel] azx_probe_continue+0x9d0 [kernel] process_one_work+0x1a7 [kernel] worker_thread+0x30 [kernel] kthread+0x112 [kernel] ret_from_fork+0x35 [kernel]</p><p>snd_pcm_new+0x1 [kernel] snd_hda_attach_pcm_stream+0x8e [kernel] snd_hda_codec_build_pcms+0x102 [kernel] hda_codec_driver_probe+0x82 [kernel] really_probe+0x24b [kernel] driver_probe_device+0xb3 [kernel] bus_for_each_drv+0x76 [kernel] __device_attach+0xe5 [kernel] snd_hda_codec_configure+0xe6 [kernel] azx_codec_configure+0x2f [kernel] azx_probe_continue+0x9d0 [kernel] process_one_work+0x1a7 [kernel] worker_thread+0x30 [kernel] kthread+0x112 [kernel] ret_from_fork+0x35 [kernel]</p><p>./sound/pci/hda/hda_sysfs.c:436:int snd_hda_get_bool_hint(struct hda_codec <em>codec, const char </em>key) ./sound/pci/hda/hda_sysfs.c:420:const char <em>snd_hda_get_hint(struct hda_codec </em>codec, const char <em>key) ./sound/pci/hda/hda_sysfs.c:281:static struct hda_hint </em>get_hint(struct hda_codec <em>codec, const char </em>key)</p><p>./sound/pci/hda/hda_auto_parser.c:176:int snd_hda_parse_pin_defcfg(struct hda_codec <em>codec, struct auto_pin_cfg </em>cfg, const hda_nid_t <em>ignore_nids, unsigned int cond_flags) ./sound/pci/hda/hda_codec.c:unsigned int snd_hda_codec_get_pincfg(struct hda_codec </em>codec, hda_nid_t nid)</p><p>sound/pci/hda/hda_codec.c:560:init_pins</p><p>./sound/pci/hda/hda_codec.c:445:static int read_pin_defaults(struct hda_codec *codec)</p><p>混音器 pcm 转换器 codec 端 card</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hdmi-audio</title>
    <link href="/linux/kernel/drivers/sound/hdmi-audio/"/>
    <url>/linux/kernel/drivers/sound/hdmi-audio/</url>
    
    <content type="html"><![CDATA[<h1 id="hdmi-audio">hdmi-audio</h1><p>217721 HDMI连接带有Audio 显示器，S3/S5/reboot唤醒听不到唤醒音</p><h2 id="排查思路">排查思路</h2><ul><li><p>S3: 暂停到内存，唤醒播放提示音前pulseaudio存在</p></li><li><p>S4: 暂停到硬盘，唤醒播放提示音前pulseaudio存在</p></li><li><p>S5: 关机，播放提示音前pulseaudio存在</p></li><li><p>reboot: 重新启动，启动时播放提示音前pulseaudio不存在</p></li></ul><p>查看deepin-login-sound.service依赖:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl list-dependencies deepin-login-sound.service<br>deepin-login-sound.service<br>● ├─system.slice<br>● ├─sound.target<br>● │ ├─alsa-restore.service<br>○ │ └─alsa-state.service<br></code></pre></td></tr></table></figure><p>查看sound.target依赖:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl list-dependencies sound.target<br>sound.target<br>● ├─alsa-restore.service<br>○ └─alsa-state.service<br></code></pre></td></tr></table></figure><p>查看deepin-login-sound.service文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">cat</span> deepin-login-sound.service<br><span class="hljs-comment"># /lib/systemd/system/deepin-login-sound.service</span><br>[Unit]<br>Description=Deepin login sound<br>Requires=sound.target<br>After=dbus.service lightdm.service<br><br>[Service]<br>Type=oneshot<br>ExecStart=/usr/lib/deepin-api/deepin-boot-sound.sh<br>RemainAfterExit=<span class="hljs-built_in">yes</span><br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>查看 /usr/lib/deepin-api/deepin-boot-sound.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /usr/lib/deepin-api/deepin-boot-sound.sh<br><span class="hljs-comment">#!/bin/sh</span><br><br>/usr/bin/dbus-send --system --print-reply --dest=com.deepin.api.SoundThemePlayer /com/deepin/api/SoundThemePlayer com.deepin.api.SoundThemePlayer.PlaySoundDesktopLogin&amp;<br></code></pre></td></tr></table></figure><h2 id="问题">问题</h2><p>deepin-boot-sound.sh提示音的播放逻辑没问题，前后依赖关系没问题。</p><p>com.deepin.api.SoundThemePlayer这个走pulseaudio接口 or alsa接口？</p><p>应该走alsa接口，pulseauido在用户登录后才启动。</p><p>问题应该出在alsa-restore.service这个服务没有等到hdmi audio恢复到可用状态后再执行，还是cat /proc/asound/card<em>/eld#</em> 的问题</p><h2 id="解决方案">解决方案</h2><h3 id="etcudevrules.d69-hdmi-audio-check.rules">/etc/udev/rules.d/69-hdmi-audio-check.rules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">tee</span> /etc/udev/rules.d/69-hdmi-audio-check.rules &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"># Run the HDMI audio check script before the alsa-restore.service</span><br><span class="hljs-string">ACTION==&quot;add&quot;, SUBSYSTEM==&quot;sound&quot;, TAG+=&quot;systemd&quot;, ENV&#123;SYSTEMD_WANTS&#125;=&quot;check-hdmi-card.service&quot;, ENV&#123;SYSTEMD_WANT_BEFORE&#125;=&quot;alsa-restore.service&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo udevadm control --reload-rules<br></code></pre></td></tr></table></figure><h3 id="etcsystemdsystemcheck-hdmi-card.service">/etc/systemd/system/check-hdmi-card.service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">tee</span> /etc/systemd/system/check-hdmi-card.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Check HDMI Audio Availability</span><br><span class="hljs-string">After=sysinit.target</span><br><span class="hljs-string">Before=alsa-restore.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Type=oneshot</span><br><span class="hljs-string">ExecStart=/usr/bin/bash -c &#x27;/usr/lib/deepin-api/check-hdmi-card.sh&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="usrlibdeepin-apicheck-hdmi-card.sh">/usr/lib/deepin-api/check-hdmi-card.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">tee</span> /usr/lib/deepin-api/check-hdmi-card.sh &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Check HDMI audio devices</span><br><span class="hljs-string">hdmi_found=false</span><br><span class="hljs-string"></span><br><span class="hljs-string">for eld_file in /proc/asound/card*/eld#*; do</span><br><span class="hljs-string">    if [ -e &quot;$eld_file&quot; ]; then</span><br><span class="hljs-string">        echo &quot;HDMI audio device information is available in $eld_file:&quot;</span><br><span class="hljs-string">        cat &quot;$eld_file&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # Check the monitor_present and eld_valid flags</span><br><span class="hljs-string">        monitor_present=$(grep &quot;monitor_present&quot; &quot;$eld_file&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="hljs-string">        eld_valid=$(grep &quot;eld_valid&quot; &quot;$eld_file&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        if [ &quot;$monitor_present&quot; = &quot;1&quot; ] &amp;&amp; [ &quot;$eld_valid&quot; = &quot;1&quot; ]; then</span><br><span class="hljs-string">            hdmi_found=true</span><br><span class="hljs-string">            # Perform additional actions as needed here</span><br><span class="hljs-string">        fi</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">        echo &quot;No HDMI audio device found in $eld_file.&quot;</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">done</span><br><span class="hljs-string"></span><br><span class="hljs-string"># Output the result</span><br><span class="hljs-string">if [ &quot;$hdmi_found&quot; = true ]; then</span><br><span class="hljs-string">    echo &quot;HDMI audio device is ready and connected to an HDMI monitor.&quot;</span><br><span class="hljs-string">else</span><br><span class="hljs-string">    echo &quot;No HDMI audio device found or not connected to an HDMI monitor.&quot;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> +x /usr/lib/deepin-api/check-hdmi-card.sh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl <span class="hljs-built_in">enable</span> check-hdmi-card.service<br></code></pre></td></tr></table></figure><h3 id="优缺点">优缺点</h3><p>优点：</p><ul><li>耦合性大幅降低</li><li>播放时不必等待</li></ul><p>缺点：</p><ul><li>更改配置文件较多</li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sound-algorithm</title>
    <link href="/linux/kernel/drivers/sound/sound-algorithm/"/>
    <url>/linux/kernel/drivers/sound/sound-algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="sound-algorithm">sound-algorithm</h1><p>源码基于<code>/home/wujing/code/linux-6.1.27/sound</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep algorithm linux/sound -inr --color --include=*.&#123;h,c&#125;<br><br>./soc/intel/atom/sst-atom-controls.c:292: * @ids: list of algorithms<br>./soc/intel/atom/sst-atom-controls.c:390: * sst_send_gain_cmd - send the gain algorithm IPC to the FW<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">390</span>: * sst_send_gain_cmd - send the gain algorithm IPC to the FW<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * sst_send_gain_cmd - send the gain algorithm IPC to the FW</span><br><span class="hljs-comment"> * @drv: sst_data</span><br><span class="hljs-comment"> * @gv:the stored value of gain (also contains rampduration)</span><br><span class="hljs-comment"> * @task_id: task index</span><br><span class="hljs-comment"> * @loc_id: location/position index</span><br><span class="hljs-comment"> * @module_id: module index</span><br><span class="hljs-comment"> * @mute: flag that indicates whether this was called from the</span><br><span class="hljs-comment"> *  digital_mute callback or directly. If called from the</span><br><span class="hljs-comment"> *  digital_mute callback, module will be muted/unmuted based on this</span><br><span class="hljs-comment"> *  flag. The flag is always 0 if called directly.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Called with sst_data.lock held</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The user-set gain value is sent only if the user-controllable &#x27;mute&#x27; control</span><br><span class="hljs-comment"> * is OFF (indicated by gv-&gt;mute). Otherwise, the mute value (MIN value) is</span><br><span class="hljs-comment"> * sent.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sst_send_gain_cmd</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sst_data *drv, <span class="hljs-keyword">struct</span> sst_gain_value *gv,</span><br><span class="hljs-params">      u16 task_id, u16 loc_id, u16 module_id, <span class="hljs-type">int</span> mute)</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">292</span>: * @ids: <span class="hljs-built_in">list</span> of algorithms<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * sst_find_and_send_pipe_algo - send all the algo parameters for a pipe    // 4.19内核代码中没有</span><br><span class="hljs-comment"> * @drv: sst_data</span><br><span class="hljs-comment"> * @pipe: string identifier</span><br><span class="hljs-comment"> * @ids: list of algorithms</span><br><span class="hljs-comment"> * The algos which are in each pipeline are sent to the firmware one by one</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Called with lock held</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sst_find_and_send_pipe_algo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sst_data *drv,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *pipe, <span class="hljs-keyword">struct</span> sst_ids *ids)</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">snd_soc_dapm_widget</span> <span class="hljs-title">sst_dapm_widgets</span>[] =</span> &#123;<br>SST_AIF_IN(<span class="hljs-string">&quot;modem_in&quot;</span>, sst_set_be_modules),<br>SST_AIF_IN(<span class="hljs-string">&quot;codec_in0&quot;</span>, sst_set_be_modules),<br>SST_AIF_IN(<span class="hljs-string">&quot;codec_in1&quot;</span>, sst_set_be_modules),<br>SST_AIF_OUT(<span class="hljs-string">&quot;modem_out&quot;</span>, sst_set_be_modules),<br>SST_AIF_OUT(<span class="hljs-string">&quot;codec_out0&quot;</span>, sst_set_be_modules),<br>SST_AIF_OUT(<span class="hljs-string">&quot;codec_out1&quot;</span>, sst_set_be_modules),<br><br><span class="hljs-comment">/* Media Paths */</span><br><span class="hljs-comment">/* MediaX IN paths are set via ALLOC, so no SET_MEDIA_PATH command */</span><br>SST_PATH_INPUT(<span class="hljs-string">&quot;media0_in&quot;</span>, SST_TASK_MMX, SST_SWM_IN_MEDIA0, sst_generic_modules_event),<br>SST_PATH_INPUT(<span class="hljs-string">&quot;media1_in&quot;</span>, SST_TASK_MMX, SST_SWM_IN_MEDIA1, <span class="hljs-literal">NULL</span>),<br>SST_PATH_INPUT(<span class="hljs-string">&quot;media2_in&quot;</span>, SST_TASK_MMX, SST_SWM_IN_MEDIA2, sst_set_media_path),<br>SST_PATH_INPUT(<span class="hljs-string">&quot;media3_in&quot;</span>, SST_TASK_MMX, SST_SWM_IN_MEDIA3, <span class="hljs-literal">NULL</span>),<br>SST_PATH_OUTPUT(<span class="hljs-string">&quot;media0_out&quot;</span>, SST_TASK_MMX, SST_SWM_OUT_MEDIA0, sst_set_media_path),<br>SST_PATH_OUTPUT(<span class="hljs-string">&quot;media1_out&quot;</span>, SST_TASK_MMX, SST_SWM_OUT_MEDIA1, sst_set_media_path),<br><br><span class="hljs-comment">/* SBA PCM Paths */</span><br>SST_PATH_INPUT(<span class="hljs-string">&quot;pcm0_in&quot;</span>, SST_TASK_SBA, SST_SWM_IN_PCM0, sst_set_media_path),<br>SST_PATH_INPUT(<span class="hljs-string">&quot;pcm1_in&quot;</span>, SST_TASK_SBA, SST_SWM_IN_PCM1, sst_set_media_path),<br>SST_PATH_OUTPUT(<span class="hljs-string">&quot;pcm0_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_PCM0, sst_set_media_path),<br>SST_PATH_OUTPUT(<span class="hljs-string">&quot;pcm1_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_PCM1, sst_set_media_path),<br>SST_PATH_OUTPUT(<span class="hljs-string">&quot;pcm2_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_PCM2, sst_set_media_path),<br><br><span class="hljs-comment">/* SBA Loops */</span><br>SST_PATH_INPUT(<span class="hljs-string">&quot;sprot_loop_in&quot;</span>, SST_TASK_SBA, SST_SWM_IN_SPROT_LOOP, <span class="hljs-literal">NULL</span>),<br>SST_PATH_INPUT(<span class="hljs-string">&quot;media_loop1_in&quot;</span>, SST_TASK_SBA, SST_SWM_IN_MEDIA_LOOP1, <span class="hljs-literal">NULL</span>),<br>SST_PATH_INPUT(<span class="hljs-string">&quot;media_loop2_in&quot;</span>, SST_TASK_SBA, SST_SWM_IN_MEDIA_LOOP2, <span class="hljs-literal">NULL</span>),<br>SST_PATH_MEDIA_LOOP_OUTPUT(<span class="hljs-string">&quot;sprot_loop_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_SPROT_LOOP, SST_FMT_STEREO, sst_set_media_loop),<br>SST_PATH_MEDIA_LOOP_OUTPUT(<span class="hljs-string">&quot;media_loop1_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_MEDIA_LOOP1, SST_FMT_STEREO, sst_set_media_loop),<br>SST_PATH_MEDIA_LOOP_OUTPUT(<span class="hljs-string">&quot;media_loop2_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_MEDIA_LOOP2, SST_FMT_STEREO, sst_set_media_loop),<br><br><span class="hljs-comment">/* Media Mixers */</span><br>SST_SWM_MIXER(<span class="hljs-string">&quot;media0_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_MMX, SST_SWM_OUT_MEDIA0,<br>      sst_mix_media0_controls, sst_swm_mixer_event),<br>SST_SWM_MIXER(<span class="hljs-string">&quot;media1_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_MMX, SST_SWM_OUT_MEDIA1,<br>      sst_mix_media1_controls, sst_swm_mixer_event),<br><br><span class="hljs-comment">/* SBA PCM mixers */</span><br>SST_SWM_MIXER(<span class="hljs-string">&quot;pcm0_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_PCM0,<br>      sst_mix_pcm0_controls, sst_swm_mixer_event),<br>SST_SWM_MIXER(<span class="hljs-string">&quot;pcm1_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_PCM1,<br>      sst_mix_pcm1_controls, sst_swm_mixer_event),<br>SST_SWM_MIXER(<span class="hljs-string">&quot;pcm2_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_PCM2,<br>      sst_mix_pcm2_controls, sst_swm_mixer_event),<br><br><span class="hljs-comment">/* SBA Loop mixers */</span><br>SST_SWM_MIXER(<span class="hljs-string">&quot;sprot_loop_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_SPROT_LOOP,<br>      sst_mix_sprot_l0_controls, sst_swm_mixer_event),<br>SST_SWM_MIXER(<span class="hljs-string">&quot;media_loop1_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_MEDIA_LOOP1,<br>      sst_mix_media_l1_controls, sst_swm_mixer_event),<br>SST_SWM_MIXER(<span class="hljs-string">&quot;media_loop2_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_MEDIA_LOOP2,<br>      sst_mix_media_l2_controls, sst_swm_mixer_event),<br><br><span class="hljs-comment">/* SBA Backend mixers */</span><br>SST_SWM_MIXER(<span class="hljs-string">&quot;codec_out0 mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_CODEC0,<br>      sst_mix_codec0_controls, sst_swm_mixer_event),<br>SST_SWM_MIXER(<span class="hljs-string">&quot;codec_out1 mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_CODEC1,<br>      sst_mix_codec1_controls, sst_swm_mixer_event),<br>SST_SWM_MIXER(<span class="hljs-string">&quot;modem_out mix 0&quot;</span>, SND_SOC_NOPM, SST_TASK_SBA, SST_SWM_OUT_MODEM,<br>      sst_mix_modem_controls, sst_swm_mixer_event),<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sst_set_media_path</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> snd_soc_dapm_widget *w,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> snd_kcontrol *k, <span class="hljs-type">int</span> event)</span><br>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_cmd_set_media_path</span> <span class="hljs-title">cmd</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">snd_soc_component</span> *<span class="hljs-title">c</span> =</span> snd_soc_dapm_to_component(w-&gt;dapm);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_data</span> *<span class="hljs-title">drv</span> =</span> snd_soc_component_get_drvdata(c);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_ids</span> *<span class="hljs-title">ids</span> =</span> w-&gt;priv;<br><br>dev_dbg(c-&gt;dev, <span class="hljs-string">&quot;widget=%s\n&quot;</span>, w-&gt;name);<br>dev_dbg(c-&gt;dev, <span class="hljs-string">&quot;task=%u, location=%#x\n&quot;</span>,<br>ids-&gt;task_id, ids-&gt;location_id);<br><br><span class="hljs-keyword">if</span> (SND_SOC_DAPM_EVENT_ON(event))<br>cmd.switch_state = SST_PATH_ON;<br><span class="hljs-keyword">else</span><br>cmd.switch_state = SST_PATH_OFF;<br><br>SST_FILL_DESTINATION(<span class="hljs-number">2</span>, cmd.header.dst,<br>     ids-&gt;location_id, SST_DEFAULT_MODULE_ID);<br><br><span class="hljs-comment">/* MMX_SET_MEDIA_PATH == SBA_SET_MEDIA_PATH */</span><br>cmd.header.command_id = MMX_SET_MEDIA_PATH;<br>cmd.header.length = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sst_cmd_set_media_path)<br>- <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sst_dsp_header);<br><br>ret = sst_fill_and_send_cmd(drv, SST_IPC_IA_CMD, SST_FLAG_BLOCKED,<br>      ids-&gt;task_id, <span class="hljs-number">0</span>, &amp;cmd,<br>      <span class="hljs-keyword">sizeof</span>(cmd.header) + cmd.header.length);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br><br><span class="hljs-keyword">if</span> (SND_SOC_DAPM_EVENT_ON(event))<br>ret = sst_send_pipe_module_params(w, k);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">grep sst_set_media_path . -inr --color --include=*.&#123;h,c&#125;<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">997</span>:<span class="hljs-type">static</span> <span class="hljs-type">int</span> sst_set_media_path(<span class="hljs-keyword">struct</span> snd_soc_dapm_widget *w,<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1084</span>:      SST_PATH_INPUT(<span class="hljs-string">&quot;media2_in&quot;</span>, SST_TASK_MMX, SST_SWM_IN_MEDIA2, sst_set_media_path),<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1086</span>:      SST_PATH_OUTPUT(<span class="hljs-string">&quot;media0_out&quot;</span>, SST_TASK_MMX, SST_SWM_OUT_MEDIA0, sst_set_media_path),<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1087</span>:      SST_PATH_OUTPUT(<span class="hljs-string">&quot;media1_out&quot;</span>, SST_TASK_MMX, SST_SWM_OUT_MEDIA1, sst_set_media_path),<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1090</span>:      SST_PATH_INPUT(<span class="hljs-string">&quot;pcm0_in&quot;</span>, SST_TASK_SBA, SST_SWM_IN_PCM0, sst_set_media_path),<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1091</span>:      SST_PATH_INPUT(<span class="hljs-string">&quot;pcm1_in&quot;</span>, SST_TASK_SBA, SST_SWM_IN_PCM1, sst_set_media_path),<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1092</span>:      SST_PATH_OUTPUT(<span class="hljs-string">&quot;pcm0_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_PCM0, sst_set_media_path),<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1093</span>:      SST_PATH_OUTPUT(<span class="hljs-string">&quot;pcm1_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_PCM1, sst_set_media_path),<br>./soc/intel/atom/sst-atom-controls.c:<span class="hljs-number">1094</span>:      SST_PATH_OUTPUT(<span class="hljs-string">&quot;pcm2_out&quot;</span>, SST_TASK_SBA, SST_SWM_OUT_PCM2, sst_set_media_path),<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_ids</span> &#123;</span><br>    u16 location_id;                      <span class="hljs-comment">// 音频处理的位置标识</span><br>    u16 module_id;                        <span class="hljs-comment">// 音频处理模块的标识</span><br>    u8  task_id;                          <span class="hljs-comment">// 音频处理任务的标识</span><br>    u8  format;                           <span class="hljs-comment">// 音频数据的格式</span><br>    u8  reg;                              <span class="hljs-comment">// 与音频处理相关的寄存器</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *parent_wname;             <span class="hljs-comment">// 父级的控制名称</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">snd_soc_dapm_widget</span> *<span class="hljs-title">parent_w</span>;</span> <span class="hljs-comment">// 父级控件</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">algo_list</span>;</span>           <span class="hljs-comment">// 与音频算法相关的链表</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">gain_list</span>;</span>           <span class="hljs-comment">// 与音频增益相关的链表</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_pcm_format</span> *<span class="hljs-title">pcm_fmt</span>;</span> <span class="hljs-comment">// 音频PCM格式的配置信息</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c">grep algo_list . -inr --color --include=*.&#123;h,c&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * sst_fill_module_list - 填充模块（module）列表</span><br><span class="hljs-comment"> * @kctl: kcontrol 指针</span><br><span class="hljs-comment"> * @w: dapm widget 指针</span><br><span class="hljs-comment"> * @type: 控件类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 填充 kcontrol 私有数据中的 widget 指针，并在 widget 私有数据中填充 kcontrol 指针。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * widget 指针用于在控件处于启动状态时在 .put() 处理程序中发送算法/增益。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * kcontrol 指针用于在控件启动/关闭事件处理程序中发送算法/增益。</span><br><span class="hljs-comment"> * 每个 widget（pipe）在 algo_list 中存储了多个算法。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @return: 成功返回 0，失败返回负数错误码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> sst_fill_module_list(<span class="hljs-keyword">struct</span> snd_kcontrol *kctl,<br> <span class="hljs-keyword">struct</span> snd_soc_dapm_widget *w, <span class="hljs-type">int</span> type)<br>&#123;<br><span class="hljs-keyword">struct</span> sst_module *module; <span class="hljs-comment">// 模块结构体指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">snd_soc_component</span> *<span class="hljs-title">c</span> =</span> snd_soc_dapm_to_component(w-&gt;dapm); <span class="hljs-comment">// 获取与 dapm widget 相关联的音频组件</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_ids</span> *<span class="hljs-title">ids</span> =</span> w-&gt;priv; <span class="hljs-comment">// 获取 widget 的私有数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 分配并初始化一个模块结构体</span><br>module = devm_kzalloc(c-&gt;dev, <span class="hljs-keyword">sizeof</span>(*module), GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!module)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br><span class="hljs-keyword">if</span> (type == SST_MODULE_GAIN) &#123; <span class="hljs-comment">// 如果控件类型是增益</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_gain_mixer_control</span> *<span class="hljs-title">mc</span> =</span> (<span class="hljs-type">void</span> *)kctl-&gt;private_value;<br><br>mc-&gt;w = w; <span class="hljs-comment">// 将 widget 指针存储在增益控件的私有数据中</span><br>module-&gt;kctl = kctl; <span class="hljs-comment">// 将 kcontrol 指针存储在模块结构体中</span><br>list_add_tail(&amp;module-&gt;node, &amp;ids-&gt;gain_list); <span class="hljs-comment">// 将模块添加到增益列表中</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == SST_MODULE_ALGO) &#123; <span class="hljs-comment">// 如果控件类型是算法</span><br><span class="hljs-keyword">struct</span> sst_algo_control *bc = (<span class="hljs-type">void</span> *)kctl-&gt;private_value;<br><br>bc-&gt;w = w; <span class="hljs-comment">// 将 widget 指针存储在算法控件的私有数据中</span><br>module-&gt;kctl = kctl; <span class="hljs-comment">// 将 kcontrol 指针存储在模块结构体中</span><br>list_add_tail(&amp;module-&gt;node, &amp;ids-&gt;algo_list); <span class="hljs-comment">// 将模块添加到算法列表中</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>dev_err(c-&gt;dev, <span class="hljs-string">&quot;invoked for unknown type %d module %s&quot;</span>,<br>type, kctl-&gt;id.name);<br>ret = -EINVAL;<br>&#125;<br><br><span class="hljs-keyword">return</span> ret; <span class="hljs-comment">// 返回操作结果</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c">grep gain_list . -inr --color --include=*.&#123;h,c&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * sst_fill_module_list - 填充模块（module）列表</span><br><span class="hljs-comment"> * @kctl: kcontrol 指针</span><br><span class="hljs-comment"> * @w: dapm widget 指针</span><br><span class="hljs-comment"> * @type: 控件类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 填充 kcontrol 私有数据中的 widget 指针，并在 widget 私有数据中填充 kcontrol 指针。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 当 widget 处于启动状态时，widget 指针用于在 .put() 处理程序中发送算法/增益。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 当控件的启动/关闭事件发生时，kcontrol 指针用于在事件处理程序中发送算法/增益。</span><br><span class="hljs-comment"> * 每个控件（pipe）都有多个算法存储在 algo_list 中。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @return: 成功返回 0，失败返回负数错误码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> sst_fill_module_list(<span class="hljs-keyword">struct</span> snd_kcontrol *kctl,<br> <span class="hljs-keyword">struct</span> snd_soc_dapm_widget *w, <span class="hljs-type">int</span> type)<br>&#123;<br><span class="hljs-keyword">struct</span> sst_module *module; <span class="hljs-comment">// 模块结构体指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">snd_soc_component</span> *<span class="hljs-title">c</span> =</span> snd_soc_dapm_to_component(w-&gt;dapm); <span class="hljs-comment">// 获取与 dapm widget 相关联的音频组件</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_ids</span> *<span class="hljs-title">ids</span> =</span> w-&gt;priv; <span class="hljs-comment">// 获取 widget 的私有数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 分配并初始化一个模块结构体</span><br>module = devm_kzalloc(c-&gt;dev, <span class="hljs-keyword">sizeof</span>(*module), GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!module)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br><span class="hljs-keyword">if</span> (type == SST_MODULE_GAIN) &#123; <span class="hljs-comment">// 如果控件类型是增益</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sst_gain_mixer_control</span> *<span class="hljs-title">mc</span> =</span> (<span class="hljs-type">void</span> *)kctl-&gt;private_value;<br><br>mc-&gt;w = w; <span class="hljs-comment">// 将 widget 指针存储在增益控件的私有数据中</span><br>module-&gt;kctl = kctl; <span class="hljs-comment">// 将 kcontrol 指针存储在模块结构体中</span><br>list_add_tail(&amp;module-&gt;node, &amp;ids-&gt;gain_list); <span class="hljs-comment">// 将模块添加到增益列表中</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == SST_MODULE_ALGO) &#123; <span class="hljs-comment">// 如果控件类型是算法</span><br><span class="hljs-keyword">struct</span> sst_algo_control *bc = (<span class="hljs-type">void</span> *)kctl-&gt;private_value;<br><br>bc-&gt;w = w; <span class="hljs-comment">// 将 widget 指针存储在算法控件的私有数据中</span><br>module-&gt;kctl = kctl; <span class="hljs-comment">// 将 kcontrol 指针存储在模块结构体中</span><br>list_add_tail(&amp;module-&gt;node, &amp;ids-&gt;algo_list); <span class="hljs-comment">// 将模块添加到算法列表中</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>dev_err(c-&gt;dev, <span class="hljs-string">&quot;invoked for unknown type %d module %s&quot;</span>,<br>type, kctl-&gt;id.name);<br>ret = -EINVAL;<br>&#125;<br><br><span class="hljs-keyword">return</span> ret; <span class="hljs-comment">// 返回操作结果</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://www.kernel.org/doc/html/latest/sound/soc/dapm.html">Dynamic Audio Power Management for Portable Devices</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sound</title>
    <link href="/linux/kernel/drivers/sound/sound/"/>
    <url>/linux/kernel/drivers/sound/sound/</url>
    
    <content type="html"><![CDATA[<h1 id="sound">sound</h1><ul><li><a href="https://mp.weixin.qq.com/s/HzJyf9QLZYjRsacf_veK4g">菜鸟也能懂的 - 音视频基础知识。</a></li><li><a href="https://mp.weixin.qq.com/s/_EY5Y9kopd8XvtKPMltQhw">音频基础知识</a></li><li><a href="https://mp.weixin.qq.com/s/yQQ5q8vvi7ltVxVQrfcl0Q">深度好文 | Android高性能音频解析</a></li><li><a href="https://mp.weixin.qq.com/s/dF8m0jna-HE9LjCQ8d6H1g"><font color=Red>Linux内核音频驱动</font></a></li></ul><h2 id="耳机">耳机</h2><ul><li><a href="https://www.jianshu.com/p/9355acdfafb2">耳机插头3.5 三段与四段 的区别</a></li><li><a href="https://blog.csdn.net/chenhuanqiangnihao/article/details/129006293"><font color=Red>3.5mm 音频接口类型说明（3极和4极）耳机接口</font></a></li><li><a href="https://blog.csdn.net/zz_nj/article/details/123095546">三段，四段耳机与识别</a></li><li><a href="https://winddoing.github.io/post/86a98cff.html"><font color=Red>音频 codec—— 耳机电路</font></a></li></ul><h3 id="pop音">pop音</h3><ul><li><a href="https://blog.csdn.net/weixin_43772512/article/details/126790368">关于手机常见音频POP音产生的原因以及解决思路(一)——耳机插入与拔出</a></li></ul><h2 id="alsa">alsa</h2><ul><li><a href="http://www.sabi.co.uk/Notes/linuxSoundALSA.html"><font color=Red>Linux ALSA sound notes</font></a></li><li><a href="https://mp.weixin.qq.com/s/1TJQc3Ktdw_Qz576iLjB1Q">ALSA（高级Linux声音架构）浅析</a></li><li><a href="https://blog.csdn.net/longwang155069/article/details/53260731">Linux音频驱动-ALSA概述</a></li><li><a href="https://blog.csdn.net/lile777/article/details/62428473">ALSA配置文件(alsa.conf, asoundrc, asound.conf)及其自动加载 And HDMI Adiuo</a></li><li><a href="https://blog.csdn.net/l316194152/article/details/116854430">kernel 4.19音频框架超详细分析(ALSA数据流程、控制流程、驱动层)</a></li></ul><h3 id="hda">hda</h3><ul><li><a href="https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn613979(v=vs.85)?redirectedfrom=MSDN"><font color=Red>Pin configuration guidelines for High Definition Audio devices</font></a></li><li><a href="https://www.intel.com/content/dam/www/public/us/en/documents/product-specifications/high-definition-audio-specification.pdf"><font color=Red>High Definition Audio Specification Revision 1.0a</font></a></li><li><a href="https://www.kernel.org/doc/html/latest/sound/hd-audio/notes.html">More Notes on HD-Audio Driver</a></li></ul><h4 id="hda-verb">hda-verb</h4><ul><li><a href="https://www.jianshu.com/p/d4e92693b17e">hda-verb参数详表</a></li></ul><h4 id="codec">codec</h4><ul><li><a href="https://blog.csdn.net/qq_38350702/article/details/111995259">ALSA-hda开发笔记</a></li><li><a href="https://blog.csdn.net/tombaby_come/article/details/129521118"><font color=Red>Linux音频问题——codec寄存器配置</font></a></li><li><a href="https://blog.csdn.net/qq_21186033/article/details/117667075"><font color=Red>HDA codec相关(2) - verbtable相关</font></a></li></ul><h5 id="codecgraph">codecgraph</h5><ul><li><p><a href="https://github.com/cmatsuoka/codecgraph">https://github.com/cmatsuoka/codecgraph</a></p></li><li><p><a href="https://manpages.debian.org/unstable/codecgraph/codecgraph.1.en.html">https://manpages.debian.org/unstable/codecgraph/codecgraph.1.en.html</a></p><p>安装 codecgraph:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install codecgraph<br></code></pre></td></tr></table></figure></p><p>生成codec#0.svg:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">codecgraph<br></code></pre></td></tr></table></figure></p><p>codec#0.svg解读：</p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">节点形状和颜色：<br><br>放大器：三角形<br>音频输入：红色椭圆形<br>音频输出：蓝色椭圆形<br>音频选择器：平行四边形<br>音频混合器：六边形<br>引脚复杂结构：矩形<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="realtek">realtek</h2><ul><li><a href="https://github.com/realwujing/realwujing.github.io/blob/main/linux/kernel/sound/ALC885_1-1.pdf"><font color=Red>ALC885_1-1.pdf</font></a></li><li><a href="http://realtek.info/pdf/ALC885_1-1.pdf">http://realtek.info/pdf/ALC885_1-1.pdf</a></li></ul><h3 id="声卡-vendor-id">声卡 vendor id</h3><p>查看 Linux 系统中声卡的 vendor ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/asound/card*/codec<span class="hljs-comment">#* | grep &quot;Vendor Id&quot; -B3</span><br></code></pre></td></tr></table></figure><h3 id="gainvolume">gain、volume</h3><ul><li><a href="https://www.bilibili.com/read/cv3616606">两个单词 | 彻底搞懂增益Gain和音量Volume的区别？！</a></li><li><a href="https://webaudioapi.com/book/Web_Audio_API_Boris_Smus_html/ch03.html">Volume and Loudness</a></li></ul><h4 id="增益音量都是调整波形的振幅吗">增益、音量都是调整波形的振幅吗？</h4><p>是的，增益和音量调整都涉及到调整声音波形的振幅，但它们在不同的背景下使用，可能有些微的区别：</p><ol type="1"><li><p><strong>增益（Gain）：</strong> 增益通常用于放大信号的振幅，使声音变得更响亮或更明显。在音频处理中，增益常用于放大弱音频信号，以提升其音量，同时可能也会增加噪音的幅度。增益可以应用于整个信号，或者在频域上进行分段增益调整。</p></li><li><p><strong>音量（Volume）：</strong> 音量是指听到的声音的相对强度级别。在实际应用中，音量调整通常涉及到调整整个声音信号的振幅，以控制声音的响度。音量调整可以根据用户的偏好来控制声音的大小，通常通过音频播放设备的硬件或软件控制进行调整。</p></li></ol><p>总的来说，增益和音量都可以影响声音波形的振幅，但它们的使用背景和调整方式可能会有一些不同。增益主要用于信号处理和音频增强，而音量主要用于用户控制和调整听到的声音的强度。</p><h3 id="音调pitch和分贝db的区别">音调（Pitch）和分贝（dB）的区别？</h3><p>音调（Pitch）和分贝（dB）是声音属性的两个不同方面，它们分别描述了声音的频率和声音的强度。</p><p>音调（Pitch）： 音调是描述声音频率的属性，通常以赫兹（Hz）为单位。不同频率的声音听起来会有不同的音高，音调较高的声音听起来更尖锐，音调较低的声音听起来更低沉。音调与声音的频率直接相关，较高的频率对应较高的音调，较低的频率对应较低的音调。</p><p>分贝（Decibel，dB）： 分贝是一种用于描述声音强度或信号强度的单位。声音的强度是声音能量的度量，通常以分贝为单位来表示。分贝是一个对数单位，用于表示相对于参考值的比率。在声学中，通常使用分贝来描述声音的相对强度。例如，分贝可以用来衡量声音的音量大小。</p><p>总之，音调和分贝是声音属性的两个不同方面。音调描述声音的频率特性，而分贝描述声音的强度特性。它们在声学中具有不同的作用和意义。</p><h4 id="音调pitch和分贝db在波形上的区别">音调（Pitch）和分贝（dB）在波形上的区别？</h4><p>在声音的波形上，音调和分贝可以通过不同的特征来展现出来：</p><ol type="1"><li><p><strong>音调（Pitch）：</strong> 在波形上，音调主要体现在周期性振动的频率上。高音调的声音波形会有更快的周期性振动，而低音调的声音波形则会有较慢的周期性振动。例如，高音调的声音类似于快速连续的波峰和波谷，而低音调的声音则类似于较为缓慢的波动。</p></li><li><p><strong>分贝（Decibel，dB）：</strong> 在波形上，分贝主要体现声音的振幅或幅度。较高分贝的声音波形会有更大的振幅，而较低分贝的声音波形则会有较小的振幅。分贝的增加意味着声音的强度增加，波形的振幅变大。</p></li></ol><p>需要注意的是，音调和分贝是两个不同的声音属性，它们在波形上展现的特征不同，因为它们分别描述了声音的频率和强度。在波形上观察时，音调和分贝可以提供关于声音特性的不同视觉表现。</p><h4 id="上面的频率是采样率吗">上面的频率是采样率吗？</h4><p>抱歉，我之前的回答中可能有些混淆。上面提到的“频率”一词并不特指采样率，而是指声音信号的频率，即声音的音调。</p><p>采样率是指在数字音频处理中，将连续的声音信号转换为离散的数字信号时，每秒钟采集的样本数。采样率决定了数字音频的精度和最高频率。声音信号的频率是指声音的音调，比如高音和低音。调整采样率会影响声音的音调，但通常不是变换男声为女声的主要方式。</p><p>变换男声为女声或进行其他声音效果处理时，通常涉及到声音信号的处理，如频谱分析、谐波调制、声音合成等，以调整声音的音调、谐波比例和频谱特性。声音信号的处理可以通过数字信号处理（DSP）算法来实现，从而改变声音的特性，实现从男声到女声的变换效果。</p><h5 id="频率是波形的横轴吗">频率是波形的横轴吗</h5><p>是的，频率通常表示波形在横轴上的一个维度。在声音信号中，横轴代表时间，纵轴代表信号的幅度。频率表示了波形的周期性，即波形振动的快慢，也对应于声音的音调。不同频率的波形对应不同的音调，频率越高，音调越高。在频域分析中，波形在频率轴上的变化情况可以反映出声音的频谱特性。</p><h2 id="pulseaudio">pulseaudio</h2><ul><li><a href="https://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/">https://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/</a></li><li><a href="https://gavv.net/articles/pulseaudio-under-the-hood/">https://gavv.net/articles/pulseaudio-under-the-hood/</a></li><li><a href="https://www.freedesktop.org/wiki/Software/PulseAudio/Backends/ALSA/Profiles/"><font color=Red>https://www.freedesktop.org/wiki/Software/PulseAudio/Backends/ALSA/Profiles/</font></a></li><li><a href="https://blog.csdn.net/qq_42138566/article/details/108626378">linux音频声卡 pulseaudio服务</a></li><li><a href="https://magodo.github.io/PulseAudio/">PulseAudio</a></li><li><a href="https://wiki.archlinuxcn.org/wiki/PulseAudio">https://wiki.archlinuxcn.org/wiki/PulseAudio</a></li><li><a href="https://blog.csdn.net/qq_35156410/article/details/107401642">Linux使用PulseAudio设置音频card的默认profile</a></li><li><a href="https://blog.mxslly.com/archives/174.html">Linux音频系统研究(ALSA Udev PulseAudio)</a></li><li><a href="https://jamielinux.com/blog/tell-pulseaudio-to-ignore-a-usb-device-using-udev/">Tell PulseAudio to ignore a USB device using udev</a></li><li><a href="https://wiki.archlinux.org/title/PulseAudio/Examples">https://wiki.archlinux.org/title/PulseAudio/Examples</a></li><li><a href="https://wiki.archlinux.org/title/PulseAudio/Troubleshooting">https://wiki.archlinux.org/title/PulseAudio/Troubleshooting</a></li><li><a href="https://wiki.debian.org/PulseAudio">https://wiki.debian.org/PulseAudio</a></li><li><a href="https://www.codenong.com/cs105336370/">Pulseaudio调试技巧</a></li><li><a href="https://fedoraproject.org/wiki/How_to_debug_PulseAudio_problems">How to debug PulseAudio problems</a></li><li><a href="https://blog.csdn.net/cgipro/article/details/6089349">pulseaudio调试信息输出控制机制</a></li><li><code>set args --log-level=4 --log-meta=1 --log-time=1  --log-backtrace=FRAMES</code></li></ul><h2 id="audacity">audacity</h2><ul><li><a href="https://www.audacityteam.org/">https://www.audacityteam.org/</a></li><li><a href="https://support.audacityteam.org/">https://support.audacityteam.org/</a></li></ul><h2 id="qemu">qemu</h2><ul><li><a href="https://blog.csdn.net/tq08g2z/article/details/78908757">QEMU 中音频模拟如何工作</a></li><li><a href="https://blog.csdn.net/qq_16054639/article/details/116745416">qemu声卡模拟原理-声音播放(pa+ac97)</a></li></ul><h2 id="降噪算法">降噪算法</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/430811547"><font color=Red>音频信号处理算法介绍</font></a></li><li><a href="https://blog.csdn.net/kaixinshier/article/details/72477679">语音降噪/语音增强的几种算法</a></li><li><a href="https://www.zhihu.com/question/602700859">有没有开源的音频AI降噪库？</a></li><li><a href="https://www.cnblogs.com/cpuimage/p/10800768.html">一种简单高效的音频降噪算法示例(附完整C代码)</a></li><li><a href="https://github.com/realwujing/rnnoise"><font color=Red>https://github.com/realwujing/rnnoise</font></a></li><li><a href="https://www.toutiao.com/article/7189091215299019320"><font color=Red>语音降噪是如何扼住噪声的咽喉的</font></a></li><li><a href="https://github.com/werman/noise-suppression-for-voice"><font color=Red>https://github.com/werman/noise-suppression-for-voice</font></a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://www.jianshu.com/p/29a74f0664f1">黑苹果定制声卡驱动（ALC892为例)</a></li><li><a href="https://www.phytium.com.cn/homepage/download/">飞腾 X100</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pmdk_dp</title>
    <link href="/linux/kernel/drivers/sound/phytium/pmdk_dp/"/>
    <url>/linux/kernel/drivers/sound/phytium/pmdk_dp/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">dmesg [   <span class="hljs-number">63.395481</span>] pmdk_dp PHYT8006:<span class="hljs-number">00</span>: ASoC: CODEC DAI i2s-hifi not registered<br>sound/soc/soc-core.c:<span class="hljs-number">884</span>:dev_err(card-&gt;dev, <span class="hljs-string">&quot;ASoC: CODEC DAI %s not registered\n&quot;</span>,<br>sound/soc/soc-core.c:<span class="hljs-number">839</span>:soc_bind_dai_link:<span class="hljs-number">882</span> <span class="hljs-comment">// 查找并设置 CODEC DAI 组件出错，在 ALSA SoC（Sound on Chip）架构中，DAI是“Digital Audio Interface”的缩写，表示数字音频接口</span><br>sound/soc/soc-core.c:<span class="hljs-number">839</span>:soc_bind_dai_link:<span class="hljs-number">884</span><br>sound/soc/soc-core.c:<span class="hljs-number">1995</span>:snd_soc_instantiate_card:<span class="hljs-number">1969</span><br>sound/soc/soc-core.c:<span class="hljs-number">2703</span>:snd_soc_register_card:<span class="hljs-number">2738</span><br>sound/soc/soc-devres.c:<span class="hljs-number">63</span>:devm_snd_soc_register_card:<span class="hljs-number">72</span><br>sound/soc/phytium/pmdk_dp.c:<span class="hljs-number">166</span>:pmdk_sound_probe:<span class="hljs-number">206</span><br>sound/soc/phytium/pmdk_dp.c:<span class="hljs-number">233</span>:module_platform_driver:<span class="hljs-number">222</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>phytium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mapping_paths_probe</title>
    <link href="/linux/kernel/drivers/sound/pulseaudio/mapping_paths_probe/"/>
    <url>/linux/kernel/drivers/sound/pulseaudio/mapping_paths_probe/</url>
    
    <content type="html"><![CDATA[<h1 id="mapping_paths_probe">mapping_paths_probe</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mapping_paths_probe</span><span class="hljs-params">(pa_alsa_mapping *m, pa_alsa_profile *profile,</span><br><span class="hljs-params">                                <span class="hljs-type">pa_alsa_direction_t</span> direction, pa_hashmap *used_paths)</span> &#123;<br>    pa_alsa_path *p;<br>    <span class="hljs-type">void</span> *state;<br>    <span class="hljs-type">snd_pcm_t</span> *pcm_handle;<br>    pa_alsa_path_set *ps;<br>    <span class="hljs-type">snd_mixer_t</span> *mixer_handle;<br><br>    <span class="hljs-comment">// 根据方向和映射创建相应的路径集合</span><br>    <span class="hljs-keyword">if</span> (direction == PA_ALSA_DIRECTION_OUTPUT) &#123;<br>        <span class="hljs-keyword">if</span> (m-&gt;output_path_set)<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果路径集合已经存在，则直接返回，避免重复探测</span><br>        m-&gt;output_path_set = ps = pa_alsa_path_set_new(m, direction, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 创建新的输出路径集合</span><br>        pcm_handle = m-&gt;output_pcm; <span class="hljs-comment">// 获取输出 PCM 句柄</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (m-&gt;input_path_set)<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果路径集合已经存在，则直接返回，避免重复探测</span><br>        m-&gt;input_path_set = ps = pa_alsa_path_set_new(m, direction, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 创建新的输入路径集合</span><br>        pcm_handle = m-&gt;input_pcm; <span class="hljs-comment">// 获取输入 PCM 句柄</span><br>    &#125;<br><br>    <span class="hljs-comment">// 如果路径集合为空，则直接返回</span><br>    <span class="hljs-keyword">if</span> (!ps)<br>        <span class="hljs-keyword">return</span>;<br><br>    pa_assert(pcm_handle);<br><br>    <span class="hljs-comment">// 打开 PCM 句柄关联的混音器</span><br>    mixer_handle = pa_alsa_open_mixer_for_pcm(pcm_handle, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (!mixer_handle) &#123;<br>        <span class="hljs-comment">// 无法打开混音器，移除路径集合中的所有路径</span><br>        pa_hashmap_remove_all(ps-&gt;paths);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历路径集合中的每个路径，进行路径属性的探测和设置</span><br>    PA_HASHMAP_FOREACH(p, ps-&gt;paths, state) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;autodetect_eld_device)<br>            p-&gt;eld_device = m-&gt;hw_device_index;<br><br>        <span class="hljs-comment">// 探测和设置路径属性，如果失败，则从路径集合中移除路径</span><br>        <span class="hljs-keyword">if</span> (pa_alsa_path_probe(p, m, mixer_handle, m-&gt;profile_set-&gt;ignore_dB) &lt; <span class="hljs-number">0</span>)<br>            pa_hashmap_remove(ps-&gt;paths, p);<br>    &#125;<br><br>    <span class="hljs-comment">// 对路径集合进行整理和优化</span><br>    path_set_condense(ps, mixer_handle);<br>    path_set_make_path_descriptions_unique(ps);<br><br>    <span class="hljs-comment">// 如果混音器句柄存在，则关闭混音器</span><br>    <span class="hljs-keyword">if</span> (mixer_handle)<br>        snd_mixer_close(mixer_handle);<br><br>    <span class="hljs-comment">// 将经过探测和设置属性的路径放入用于后续使用的哈希映射中</span><br>    PA_HASHMAP_FOREACH(p, ps-&gt;paths, state)<br>        pa_hashmap_put(used_paths, p, p);<br><br>    <span class="hljs-comment">// 输出调试信息，显示整理后的可用混音路径</span><br>    pa_log_debug(<span class="hljs-string">&quot;Available mixer paths (after tidying):&quot;</span>);<br>    pa_alsa_path_set_dump(ps);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>pulseaudio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pa_alsa_path_probe</title>
    <link href="/linux/kernel/drivers/sound/pulseaudio/pa_alsa_path_probe/"/>
    <url>/linux/kernel/drivers/sound/pulseaudio/pa_alsa_path_probe/</url>
    
    <content type="html"><![CDATA[<h1 id="pa_alsa_path_probe">pa_alsa_path_probe</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pa_alsa_path_probe</span><span class="hljs-params">(pa_alsa_path *p, pa_alsa_mapping *mapping, <span class="hljs-type">snd_mixer_t</span> *m, <span class="hljs-type">bool</span> ignore_dB)</span> &#123;<br>    pa_alsa_element *e;<br>    pa_alsa_jack *j;<br>    <span class="hljs-type">double</span> min_dB[PA_CHANNEL_POSITION_MAX], max_dB[PA_CHANNEL_POSITION_MAX];<br>    <span class="hljs-type">pa_channel_position_t</span> t;<br>    <span class="hljs-type">pa_channel_position_mask_t</span> path_volume_channels = <span class="hljs-number">0</span>;<br><br>    pa_assert(p);<br>    pa_assert(m);<br><br>    <span class="hljs-comment">// 如果路径已经被探测过，返回其是否受支持的状态</span><br>    <span class="hljs-keyword">if</span> (p-&gt;probed)<br>        <span class="hljs-keyword">return</span> p-&gt;supported ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>;<br>    p-&gt;probed = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 初始化 min_dB 和 max_dB 数组</span><br>    pa_zero(min_dB);<br>    pa_zero(max_dB);<br><br>    <span class="hljs-comment">// 输出调试信息，表示正在探测此路径</span><br>    pa_log_debug(<span class="hljs-string">&quot;Probing path &#x27;%s&#x27;&quot;</span>, p-&gt;name);<br><br>    <span class="hljs-comment">// 遍历路径中的所有插孔，进行探测</span><br>    PA_LLIST_FOREACH(j, p-&gt;jacks) &#123;<br>        <span class="hljs-comment">// 调用 jack_probe 函数对插孔进行探测</span><br>        <span class="hljs-keyword">if</span> (jack_probe(j, mapping, m) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 插孔探测失败，标记路径不受支持，并返回错误</span><br>            p-&gt;supported = <span class="hljs-literal">false</span>;<br>            pa_log_debug(<span class="hljs-string">&quot;Probe of jack &#x27;%s&#x27; failed.&quot;</span>, j-&gt;alsa_name);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 输出调试信息，表示插孔探测成功</span><br>        pa_log_debug(<span class="hljs-string">&quot;Probe of jack &#x27;%s&#x27; succeeded (%s)&quot;</span>, j-&gt;alsa_name, j-&gt;has_control ? <span class="hljs-string">&quot;found!&quot;</span> : <span class="hljs-string">&quot;not found&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历路径中的所有元素，进行探测</span><br>    PA_LLIST_FOREACH(e, p-&gt;elements) &#123;<br>        <span class="hljs-comment">// 调用 element_probe 函数对元素进行探测</span><br>        <span class="hljs-keyword">if</span> (element_probe(e, m) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 元素探测失败，标记路径不受支持，并返回错误</span><br>            p-&gt;supported = <span class="hljs-literal">false</span>;<br>            pa_log_debug(<span class="hljs-string">&quot;Probe of element &#x27;%s&#x27; failed.&quot;</span>, e-&gt;alsa_name);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 输出调试信息，表示元素探测成功，并显示其音量、开关和枚举使用情况</span><br>        pa_log_debug(<span class="hljs-string">&quot;Probe of element &#x27;%s&#x27; succeeded (volume=%d, switch=%d, enumeration=%d).&quot;</span>, e-&gt;alsa_name, e-&gt;volume_use, e-&gt;switch_use, e-&gt;enumeration_use);<br><br>        <span class="hljs-comment">// 如果忽略 dB 信息，将 has_dB 设置为 false</span><br>        <span class="hljs-keyword">if</span> (ignore_dB)<br>            e-&gt;has_dB = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (e-&gt;volume_use == PA_ALSA_VOLUME_MERGE) &#123;<br>            <span class="hljs-comment">// 处理合并音量的情况</span><br><br>            <span class="hljs-comment">// 如果路径中尚无音量信息，初始化 min_volume 和 max_volume</span><br>            <span class="hljs-keyword">if</span> (!p-&gt;has_volume) &#123;<br>                p-&gt;min_volume = e-&gt;min_volume;<br>                p-&gt;max_volume = e-&gt;max_volume;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (e-&gt;has_dB) &#123;<br>                <span class="hljs-comment">// 如果元素有 dB 信息，处理 dB 音量</span><br><br>                <span class="hljs-comment">// 如果路径中尚无音量信息，初始化 min_dB 和 max_dB，并记录音量通道位置</span><br>                <span class="hljs-keyword">if</span> (!p-&gt;has_volume) &#123;<br>                    <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt; PA_CHANNEL_POSITION_MAX; t++)<br>                        <span class="hljs-keyword">if</span> (PA_CHANNEL_POSITION_MASK(t) &amp; e-&gt;merged_mask) &#123;<br>                            min_dB[t] = e-&gt;min_dB;<br>                            max_dB[t] = e-&gt;max_dB;<br>                            path_volume_channels |= PA_CHANNEL_POSITION_MASK(t);<br>                        &#125;<br><br>                    p-&gt;has_dB = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 如果路径中已经存在音量信息，更新 min_dB 和 max_dB，以及音量通道位置</span><br>                    <span class="hljs-keyword">if</span> (p-&gt;has_dB) &#123;<br>                        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt; PA_CHANNEL_POSITION_MAX; t++)<br>                            <span class="hljs-keyword">if</span> (PA_CHANNEL_POSITION_MASK(t) &amp; e-&gt;merged_mask) &#123;<br>                                min_dB[t] += e-&gt;min_dB;<br>                                max_dB[t] += e-&gt;max_dB;<br>                                path_volume_channels |= PA_CHANNEL_POSITION_MASK(t);<br>                            &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">/* 哎呀，我们前面有另一个元素无法使用 dB 音量，所以我们需要 &quot;中和&quot; 这个滑块 */</span><br>                        e-&gt;volume_use = PA_ALSA_VOLUME_ZERO;<br>                        pa_log_info(<span class="hljs-string">&quot;Zeroing volume of &#x27;%s&#x27; on path &#x27;%s&#x27;&quot;</span>, e-&gt;alsa_name, p-&gt;name);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p-&gt;has_volume) &#123;<br>                <span class="hljs-comment">/* 我们无法使用这个音量，所以我们将其忽略 */</span><br>                e-&gt;volume_use = PA_ALSA_VOLUME_IGNORE;<br>                pa_log_info(<span class="hljs-string">&quot;Ignoring volume of &#x27;%s&#x27; on path &#x27;%s&#x27; (missing dB info)&quot;</span>, e-&gt;alsa_name, p-&gt;name);<br>            &#125;<br>            p-&gt;has_volume = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (e-&gt;switch_use == PA_ALSA_SWITCH_MUTE)<br>            p-&gt;has_mute = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果路径需要任何元素，但没有预置的元素，则标记路径不受支持</span><br>    <span class="hljs-keyword">if</span> (p-&gt;has_req_any &amp;&amp; !p-&gt;req_any_present) &#123;<br>        p-&gt;supported = <span class="hljs-literal">false</span>;<br>        pa_log_debug(<span class="hljs-string">&quot;Skipping path &#x27;%s&#x27;, none of required-any elements preset.&quot;</span>, p-&gt;name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 丢弃不受支持的元素</span><br>    path_drop_unsupported(p);<br>    <span class="hljs-comment">// 确保路径选项唯一</span><br>    path_make_options_unique(p);<br>    <span class="hljs-comment">// 为路径创建设置项</span><br><br>    <span class="hljs-comment">// 标记路径受支持</span><br>    p-&gt;supported = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 初始化路径的最小和最大 dB 值</span><br>    p-&gt;min_dB = INFINITY;<br>    p-&gt;max_dB = -INFINITY;<br><br>    <span class="hljs-comment">// 计算路径的最小和最大 dB 值</span><br>    <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt; PA_CHANNEL_POSITION_MAX; t++) &#123;<br>        <span class="hljs-keyword">if</span> (path_volume_channels &amp; PA_CHANNEL_POSITION_MASK(t)) &#123;<br>            <span class="hljs-keyword">if</span> (p-&gt;min_dB &gt; min_dB[t])<br>                p-&gt;min_dB = min_dB[t];<br><br>            <span class="hljs-keyword">if</span> (p-&gt;max_dB &lt; max_dB[t])<br>                p-&gt;max_dB = max_dB[t];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>pulseaudio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pa_alsa_profile_set_new</title>
    <link href="/linux/kernel/drivers/sound/pulseaudio/pa_alsa_profile_set_new/"/>
    <url>/linux/kernel/drivers/sound/pulseaudio/pa_alsa_profile_set_new/</url>
    
    <content type="html"><![CDATA[<h1 id="pa_alsa_profile_set_new">pa_alsa_profile_set_new</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c">pa_alsa_profile_set* <span class="hljs-title function_">pa_alsa_profile_set_new</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fname, <span class="hljs-type">const</span> pa_channel_map *bonus)</span> &#123;<br>    pa_alsa_profile_set *ps; <span class="hljs-comment">// 创建一个 pa_alsa_profile_set 结构体指针，用于存储配置文件中的配置信息</span><br>    pa_alsa_profile *p; <span class="hljs-comment">// 创建一个 pa_alsa_profile 结构体指针，用于遍历配置文件中的各个音频配置</span><br>    pa_alsa_mapping *m; <span class="hljs-comment">// 创建一个 pa_alsa_mapping 结构体指针，用于遍历配置文件中的各个音频映射</span><br>    pa_alsa_decibel_fix *db_fix; <span class="hljs-comment">// 创建一个 pa_alsa_decibel_fix 结构体指针，用于遍历配置文件中的各个分贝修正</span><br>    <span class="hljs-type">char</span> *fn; <span class="hljs-comment">// 创建一个字符指针，用于存储配置文件的完整路径</span><br>    <span class="hljs-type">int</span> r; <span class="hljs-comment">// 用于存储函数返回值</span><br>    <span class="hljs-type">void</span> *state; <span class="hljs-comment">// 用于辅助遍历哈希表的状态指针</span><br><br>    <span class="hljs-comment">// 配置项数组，用于解析配置文件中的各个配置项</span><br>    <span class="hljs-type">static</span> pa_config_item items[] = &#123;<br>        <span class="hljs-comment">/* [General] */</span><br>        &#123; <span class="hljs-string">&quot;auto-profiles&quot;</span>,          pa_config_parse_bool,         <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;General&quot;</span> &#125;,<br><br>        <span class="hljs-comment">/* [Mapping ...] */</span><br>        &#123; <span class="hljs-string">&quot;device-strings&quot;</span>,         mapping_parse_device_strings, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;channel-map&quot;</span>,            mapping_parse_channel_map,    <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;paths-input&quot;</span>,            mapping_parse_paths,          <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;paths-output&quot;</span>,           mapping_parse_paths,          <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;element-input&quot;</span>,          mapping_parse_element,        <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;element-output&quot;</span>,         mapping_parse_element,        <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;direction&quot;</span>,              mapping_parse_direction,      <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;exact-channels&quot;</span>,         mapping_parse_exact_channels, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br><br>        <span class="hljs-comment">/* Shared by [Mapping ...] and [Profile ...] */</span><br>        &#123; <span class="hljs-string">&quot;description&quot;</span>,            mapping_parse_description,    <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;priority&quot;</span>,               mapping_parse_priority,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;fallback&quot;</span>,               mapping_parse_fallback,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br><br>        <span class="hljs-comment">/* [Profile ...] */</span><br>        &#123; <span class="hljs-string">&quot;input-mappings&quot;</span>,         profile_parse_mappings,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;output-mappings&quot;</span>,        profile_parse_mappings,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;skip-probe&quot;</span>,             profile_parse_skip_probe,     <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br><br>        <span class="hljs-comment">/* [DecibelFix ...] */</span><br>        &#123; <span class="hljs-string">&quot;db-values&quot;</span>,              decibel_fix_parse_db_values,  <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 创建一个新的 pa_alsa_profile_set 结构体，将其中的各个哈希表进行初始化</span><br>    ps = pa_xnew0(pa_alsa_profile_set, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 初始化音频映射、音频配置、分贝修正、路径的哈希表</span><br>    ps-&gt;mappings = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) mapping_free);<br>    ps-&gt;profiles = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) profile_free);<br>    ps-&gt;decibel_fixes = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) decibel_fix_free);<br>    ps-&gt;input_paths = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) pa_alsa_path_free);<br>    ps-&gt;output_paths = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) pa_alsa_path_free);<br><br>    <span class="hljs-comment">// 初始化自定义路径的哈希表和文件夹</span><br>    ps-&gt;cust_paths = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, (<span class="hljs-type">pa_free_cb_t</span>) pa_xfree, (<span class="hljs-type">pa_free_cb_t</span>) pa_xfree);<br>    ps-&gt;cust_folder = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 配置项数组中的第一个配置项与 ps 结构体中的 auto_profiles 字段关联</span><br>    items[<span class="hljs-number">0</span>].data = &amp;ps-&gt;auto_profiles;<br><br>    <span class="hljs-comment">// 如果没有提供配置文件名，则使用默认的配置文件名</span><br>    <span class="hljs-keyword">if</span> (!fname)<br>        fname = <span class="hljs-string">&quot;default.conf&quot;</span>;<br><br>    <span class="hljs-comment">// 构建配置文件的完整路径</span><br>    fn = pa_maybe_prefix_path(fname,<br>                              pa_run_from_build_tree() ? PA_SRCDIR <span class="hljs-string">&quot;/modules/alsa/mixer/profile-sets/&quot;</span> :<br>                              PA_ALSA_PROFILE_SETS_DIR);<br><br>    <span class="hljs-comment">// 解析配置文件并填充配置信息到 ps 结构体</span><br>    r = pa_config_parse(fn, <span class="hljs-literal">NULL</span>, items, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">false</span>, ps);<br>    pa_xfree(fn);<br><br>    <span class="hljs-comment">// 如果解析失败，则进行清理并返回 NULL</span><br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-comment">// 遍历音频映射并进行验证</span><br>    PA_HASHMAP_FOREACH(m, ps-&gt;mappings, state)<br>        <span class="hljs-keyword">if</span> (mapping_verify(m, bonus) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-comment">// 如果 auto_profiles 为真，则添加自动配置的音频配置</span><br>    <span class="hljs-keyword">if</span> (ps-&gt;auto_profiles)<br>        profile_set_add_auto(ps);<br><br>    <span class="hljs-comment">// 遍历音频配置并进行验证</span><br>    PA_HASHMAP_FOREACH(p, ps-&gt;profiles, state)<br>        <span class="hljs-keyword">if</span> (profile_verify(p) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-comment">// 遍历分贝修正并进行验证</span><br>    PA_HASHMAP_FOREACH(db_fix, ps-&gt;decibel_fixes, state)<br>        <span class="hljs-keyword">if</span> (decibel_fix_verify(db_fix) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-keyword">return</span> ps;<br><br>fail:<br>    <span class="hljs-comment">// 如果解析或验证过程出现错误，则释放资源并返回 NULL</span><br>    pa_alsa_profile_set_free(ps);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>pulseaudio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pa_alsa_profile_set_probe</title>
    <link href="/linux/kernel/drivers/sound/pulseaudio/pa_alsa_profile_set_probe/"/>
    <url>/linux/kernel/drivers/sound/pulseaudio/pa_alsa_profile_set_probe/</url>
    
    <content type="html"><![CDATA[<h1 id="pa_alsa_profile_set_probe">pa_alsa_profile_set_probe</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pa_alsa_profile_set_probe</span><span class="hljs-params">(</span><br><span class="hljs-params">        pa_alsa_profile_set *ps,               <span class="hljs-comment">// ALSA 音频配置集合</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *dev_id,                    <span class="hljs-comment">// 设备标识符</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> pa_sample_spec *ss,               <span class="hljs-comment">// 采样规格</span></span><br><span class="hljs-params">        <span class="hljs-type">unsigned</span> default_n_fragments,           <span class="hljs-comment">// 默认分片数</span></span><br><span class="hljs-params">        <span class="hljs-type">unsigned</span> default_fragment_size_msec)</span> &#123;  <span class="hljs-comment">// 默认分片大小（毫秒）</span><br><br>    <span class="hljs-type">bool</span> found_output = <span class="hljs-literal">false</span>, found_input = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 是否找到输出和输入配置</span><br><br>    pa_alsa_profile *p, *last = <span class="hljs-literal">NULL</span>;      <span class="hljs-comment">// 当前配置和上一个配置</span><br>    pa_alsa_profile **pp, **probe_order;   <span class="hljs-comment">// 配置探测顺序数组</span><br>    pa_alsa_mapping *m;                     <span class="hljs-comment">// ALSA 映射</span><br>    pa_hashmap *broken_inputs, *broken_outputs, *used_paths;  <span class="hljs-comment">// 存储损坏输入、损坏输出和已使用路径的哈希映射</span><br>    pa_alsa_mapping *selected_fallback_input = <span class="hljs-literal">NULL</span>, *selected_fallback_output = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 选定的回退输入和输出映射</span><br><br>    pa_assert(ps);           <span class="hljs-comment">// 断言配置集合存在</span><br>    pa_assert(dev_id);       <span class="hljs-comment">// 断言设备标识符存在</span><br>    pa_assert(ss);           <span class="hljs-comment">// 断言采样规格存在</span><br><br>    <span class="hljs-comment">// 创建哈希映射来存储损坏的输入、输出和已使用的路径</span><br>    broken_inputs = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br>    broken_outputs = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br>    used_paths = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br><br>    <span class="hljs-comment">// 创建用于指示探测顺序的 probe_order 数组</span><br>    pp = probe_order = pa_xnew0(pa_alsa_profile *, pa_hashmap_size(ps-&gt;profiles) + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 将配置按一定的优先级顺序添加到探测顺序中</span><br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// 遍历探测顺序中的配置</span><br>    <span class="hljs-keyword">for</span> (pp = probe_order; *pp; pp++) &#123;<br>        <span class="hljs-type">uint32_t</span> idx;<br>        p = *pp;<br><br>        <span class="hljs-comment">// 跳过已经找到的回退配置，但仍然探测已选的回退配置</span><br>        <span class="hljs-keyword">if</span> (found_input &amp;&amp; p-&gt;fallback_input)<br>            <span class="hljs-keyword">if</span> (selected_fallback_input == <span class="hljs-literal">NULL</span> || pa_idxset_get_by_index(p-&gt;input_mappings, <span class="hljs-number">0</span>) != selected_fallback_input)<br>                <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (found_output &amp;&amp; p-&gt;fallback_output)<br>            <span class="hljs-keyword">if</span> (selected_fallback_output == <span class="hljs-literal">NULL</span> || pa_idxset_get_by_index(p-&gt;output_mappings, <span class="hljs-number">0</span>) != selected_fallback_output)<br>                <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-comment">// 跳过已经标记为支持的配置</span><br>        <span class="hljs-keyword">if</span> (!p-&gt;supported) &#123;<br>            <span class="hljs-comment">// 最终化配置探测</span><br>            profile_finalize_probing(last, p);<br>            p-&gt;supported = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 检查输出映射是否能够打开</span><br>            <span class="hljs-keyword">if</span> (p-&gt;output_mappings) &#123;<br>                PA_IDXSET_FOREACH(m, p-&gt;output_mappings, idx) &#123;<br>                    <span class="hljs-keyword">if</span> (pa_hashmap_get(broken_outputs, m) == m) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        pa_log_debug(<span class="hljs-string">&quot;Skipping profile %s - will not be able to open output:%s&quot;</span>, p-&gt;name, m-&gt;name);<br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 检查输入映射是否能够打开</span><br>            <span class="hljs-keyword">if</span> (p-&gt;input_mappings &amp;&amp; p-&gt;supported) &#123;<br>                PA_IDXSET_FOREACH(m, p-&gt;input_mappings, idx) &#123;<br>                    <span class="hljs-keyword">if</span> (pa_hashmap_get(broken_inputs, m) == m) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        pa_log_debug(<span class="hljs-string">&quot;Skipping profile %s - will not be able to open input:%s&quot;</span>, p-&gt;name, m-&gt;name);<br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (p-&gt;supported)<br>                pa_log_debug(<span class="hljs-string">&quot;Looking at profile %s&quot;</span>, p-&gt;name);<br><br>            <span class="hljs-comment">// 检查是否可以打开所有新的映射</span><br>            <span class="hljs-keyword">if</span> (p-&gt;output_mappings &amp;&amp; p-&gt;supported)<br>                PA_IDXSET_FOREACH(m, p-&gt;output_mappings, idx) &#123;<br>                    <span class="hljs-comment">// 检查是否已经打开</span><br>                    <span class="hljs-keyword">if</span> (m-&gt;output_pcm)<br>                        <span class="hljs-keyword">continue</span>;<br><br>                    <span class="hljs-comment">// 尝试打开 PCM 设备</span><br>                    pa_log_debug(<span class="hljs-string">&quot;Checking for playback on %s (%s)&quot;</span>, m-&gt;description, m-&gt;name);<br>                    <span class="hljs-keyword">if</span> (!(m-&gt;output_pcm = mapping_open_pcm(m, ss, dev_id, m-&gt;exact_channels,<br>                                                           SND_PCM_STREAM_PLAYBACK,<br>                                                           default_n_fragments,<br>                                                           default_fragment_size_msec))) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">if</span> (pa_idxset_size(p-&gt;output_mappings) == <span class="hljs-number">1</span> &amp;&amp;<br>                            ((!p-&gt;input_mappings) || pa_idxset_size(p-&gt;input_mappings) == <span class="hljs-number">0</span>)) &#123;<br>                            pa_log_debug(<span class="hljs-string">&quot;Caching failure to open output:%s&quot;</span>, m-&gt;name);<br>                            pa_hashmap_put(broken_outputs, m, m);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (m-&gt;hw_device_index &lt; <span class="hljs-number">0</span>)<br>                        mapping_query_hw_device(m, m-&gt;output_pcm);<br>                &#125;<br><br>            <span class="hljs-comment">// 检查输入映射是否能够打开</span><br>            <span class="hljs-keyword">if</span> (p-&gt;input_mappings &amp;&amp; p-&gt;supported)<br>                PA_IDXSET_FOREACH(m, p-&gt;input_mappings, idx) &#123;<br>                    <span class="hljs-comment">// 检查是否已经打开</span><br>                    <span class="hljs-keyword">if</span> (m-&gt;input_pcm)<br>                        <span class="hljs-keyword">continue</span>;<br><br>                    <span class="hljs-comment">// 尝试打开 PCM 设备</span><br>                    pa_log_debug(<span class="hljs-string">&quot;Checking for recording on %s (%s)&quot;</span>, m-&gt;description, m-&gt;name);<br>                    <span class="hljs-keyword">if</span> (!(m-&gt;input_pcm = mapping_open_pcm(m, ss, dev_id, m-&gt;exact_channels,<br>                                                          SND_PCM_STREAM_CAPTURE,<br>                                                          default_n_fragments,<br>                                                          default_fragment_size_msec))) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">if</span> (pa_idxset_size(p-&gt;input_mappings) == <span class="hljs-number">1</span> &amp;&amp;<br>                            ((!p-&gt;output_mappings) || pa_idxset_size(p-&gt;output_mappings) == <span class="hljs-number">0</span>)) &#123;<br>                            pa_log_debug(<span class="hljs-string">&quot;Caching failure to open input:%s&quot;</span>, m-&gt;name);<br>                            pa_hashmap_put(broken_inputs, m, m);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (m-&gt;hw_device_index &lt; <span class="hljs-number">0</span>)<br>                        mapping_query_hw_device(m, m-&gt;input_pcm);<br>                &#125;<br><br>            last = p;<br><br>            <span class="hljs-keyword">if</span> (!p-&gt;supported)<br>                <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        pa_log_debug(<span class="hljs-string">&quot;Profile %s supported.&quot;</span>, p-&gt;name);<br><br>        <span class="hljs-comment">// 标记已找到输出和输入配置</span><br>        <span class="hljs-keyword">if</span> (p-&gt;output_mappings)<br>            PA_IDXSET_FOREACH(m, p-&gt;output_mappings, idx)<br>                <span class="hljs-keyword">if</span> (m-&gt;output_pcm) &#123;<br>                    found_output = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span> (p-&gt;fallback_output &amp;&amp; selected_fallback_output == <span class="hljs-literal">NULL</span>) &#123;<br>                        selected_fallback_output = m;<br>                    &#125;<br>                    mapping_paths_probe(m, p, PA_ALSA_DIRECTION_OUTPUT, used_paths);<br>                &#125;<br><br>        <span class="hljs-keyword">if</span> (p-&gt;input_mappings)<br>            PA_IDXSET_FOREACH(m, p-&gt;input_mappings, idx)<br>                <span class="hljs-keyword">if</span> (m-&gt;input_pcm) &#123;<br>                    found_input = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span> (p-&gt;fallback_input &amp;&amp; selected_fallback_input == <span class="hljs-literal">NULL</span>) &#123;<br>                        selected_fallback_input = m;<br>                    &#125;<br>                    mapping_paths_probe(m, p, PA_ALSA_DIRECTION_INPUT, used_paths);<br>                &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 最终化配置探测，清理资源</span><br>    profile_finalize_probing(last, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 丢弃不支持的配置</span><br>    pa_alsa_profile_set_drop_unsupported(ps);<br><br>    <span class="hljs-comment">// 丢弃未使用的路径</span><br>    paths_drop_unused(ps-&gt;input_paths, used_paths);<br>    paths_drop_unused(ps-&gt;output_paths, used_paths);<br><br>    <span class="hljs-comment">// 释放资源</span><br>    pa_hashmap_free(broken_inputs);<br>    pa_hashmap_free(broken_outputs);<br>    pa_hashmap_free(used_paths);<br>    pa_xfree(probe_order);<br><br>    ps-&gt;probed = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标记为已完成探测</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>pulseaudio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>profile_finalize_probing</title>
    <link href="/linux/kernel/drivers/sound/pulseaudio/profile_finalize_probing/"/>
    <url>/linux/kernel/drivers/sound/pulseaudio/profile_finalize_probing/</url>
    
    <content type="html"><![CDATA[<h1 id="profile_finalize_probing">profile_finalize_probing</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">profile_finalize_probing</span><span class="hljs-params">(pa_alsa_profile *to_be_finalized, pa_alsa_profile *next)</span> &#123;<br>    pa_alsa_mapping *m;<br>    <span class="hljs-type">uint32_t</span> idx;<br><br>    <span class="hljs-comment">// 如果没有需要完成探测的配置文件，则直接返回</span><br>    <span class="hljs-keyword">if</span> (!to_be_finalized)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 对于输出映射，执行以下操作</span><br>    <span class="hljs-keyword">if</span> (to_be_finalized-&gt;output_mappings)<br>        PA_IDXSET_FOREACH(m, to_be_finalized-&gt;output_mappings, idx) &#123;<br><br>            <span class="hljs-comment">// 如果没有输出 PCM 流，则跳过</span><br>            <span class="hljs-keyword">if</span> (!m-&gt;output_pcm)<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">// 如果当前配置文件是受支持的，则增加映射的支持计数</span><br>            <span class="hljs-keyword">if</span> (to_be_finalized-&gt;supported)<br>                m-&gt;supported++;<br><br>            <span class="hljs-comment">// 如果下一个配置文件也包含此映射，则不关闭 PCM 句柄，因为会立即重新打开</span><br>            <span class="hljs-keyword">if</span> (next &amp;&amp; next-&gt;output_mappings &amp;&amp; pa_idxset_get_by_data(next-&gt;output_mappings, m, <span class="hljs-literal">NULL</span>))<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">// 关闭输出 PCM 句柄</span><br>            snd_pcm_close(m-&gt;output_pcm);<br>            m-&gt;output_pcm = <span class="hljs-literal">NULL</span>;<br>        &#125;<br><br>    <span class="hljs-comment">// 对于输入映射，执行以下操作</span><br>    <span class="hljs-keyword">if</span> (to_be_finalized-&gt;input_mappings)<br>        PA_IDXSET_FOREACH(m, to_be_finalized-&gt;input_mappings, idx) &#123;<br><br>            <span class="hljs-comment">// 如果没有输入 PCM 流，则跳过</span><br>            <span class="hljs-keyword">if</span> (!m-&gt;input_pcm)<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">// 如果当前配置文件是受支持的，则增加映射的支持计数</span><br>            <span class="hljs-keyword">if</span> (to_be_finalized-&gt;supported)<br>                m-&gt;supported++;<br><br>            <span class="hljs-comment">// 如果下一个配置文件也包含此映射，则不关闭 PCM 句柄，因为会立即重新打开</span><br>            <span class="hljs-keyword">if</span> (next &amp;&amp; next-&gt;input_mappings &amp;&amp; pa_idxset_get_by_data(next-&gt;input_mappings, m, <span class="hljs-literal">NULL</span>))<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">// 关闭输入 PCM 句柄</span><br>            snd_pcm_close(m-&gt;input_pcm);<br>            m-&gt;input_pcm = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>pulseaudio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pulseaudio</title>
    <link href="/linux/kernel/drivers/sound/pulseaudio/pulseaudio/"/>
    <url>/linux/kernel/drivers/sound/pulseaudio/pulseaudio/</url>
    
    <content type="html"><![CDATA[<h1 id="pulseaudio-中常见的函数和模块">PulseAudio 中常见的函数和模块</h1><p>PulseAudio 是一个复杂的音频系统，包含多个模块和函数来处理不同的音频操作。具体的代码和函数取决于你想要实现的功能。以下是一些 PulseAudio 中常见的函数和模块，以及它们的大致作用：</p><p>模块加载和管理：</p><ul><li>module.c：这个文件包含了用于加载、卸载和管理 PulseAudio 模块的核心函数。</li></ul><p>音频流管理：</p><ul><li>sink.c：这个文件包含了管理音频输出设备（sink）的函数，比如音量控制、静音、设备的连接和断开等。</li><li>source.c：类似于 sink.c，但用于管理音频输入设备（source）。</li></ul><p>音频流处理：</p><ul><li>mix.c：处理音频流的混音和平衡操作。</li><li>resampler.c：执行音频重采样，将不同采样率的音频流转换为一致的采样率。</li></ul><p>音频设备的属性和信息：</p><ul><li>proplist.c：管理音频设备的属性列表，包括设备的元数据和信息。</li></ul><p>音频服务器核心：</p><ul><li>core.c：PulseAudio 音频服务器的核心代码，包括事件循环、线程管理等。</li></ul><p>这只是 PulseAudio 源代码中的一小部分。要实际了解 PulseAudio 的源代码，你需要访问 PulseAudio 项目的代码仓库，该仓库通常托管在像 GitHub 这样的代码托管平台上。你可以通过检查源代码仓库中的不同模块和文件来了解 PulseAudio 的内部实现。</p><p>请注意，PulseAudio 是一个庞大的项目，涵盖了很多领域，因此代码分布广泛。如果你有特定的需求，比如想要了解某个特定功能的实现，我建议你在 PulseAudio 的官方文档、源代码仓库或相关的技术文章中寻找更具体的信息。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>pulseaudio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于主线linux4</title>
    <link href="/linux/kernel/drivers/sound/phytium/patch/%E5%9F%BA%E4%BA%8E%E4%B8%BB%E7%BA%BFlinux4.19%E5%90%88%E5%85%A5%E9%A3%9E%E8%85%BE%E8%A1%A5%E4%B8%81/"/>
    <url>/linux/kernel/drivers/sound/phytium/patch/%E5%9F%BA%E4%BA%8E%E4%B8%BB%E7%BA%BFlinux4.19%E5%90%88%E5%85%A5%E9%A3%9E%E8%85%BE%E8%A1%A5%E4%B8%81/</url>
    
    <content type="html"><![CDATA[<h1 id="基于主线linux4.19合入飞腾补丁">基于主线linux4.19合入飞腾补丁</h1><p>飞腾Linux内核补丁基于主线 tag v4.19:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/torvalds/linux.git<br>git check -b v4.19 v4.19<br></code></pre></td></tr></table></figure><p>检查patch:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git apply --<span class="hljs-built_in">stat</span> ../飞腾Linux内核补丁4.19.11发行/patch-phytium-4.19.11<br></code></pre></td></tr></table></figure><p>检查patch能否应用成功:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git apply --check ../飞腾Linux内核补丁4.19.11发行/patch-phytium-4.19.11<br></code></pre></td></tr></table></figure><p>打补丁,由于此补丁没有commit信息,故git am命令无法使用,建议使用git apply或patch命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git apply ../飞腾Linux内核补丁4.19.11发行/patch-phytium-4.19.11<br><br>patch -p1 &lt; ../飞腾Linux内核补丁4.19.11发行/patch-phytium-4.19.11<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>phytium</category>
      
      <category>patch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pulseaudio调试</title>
    <link href="/linux/kernel/drivers/sound/pulseaudio/pulseaudio%E8%B0%83%E8%AF%95/"/>
    <url>/linux/kernel/drivers/sound/pulseaudio/pulseaudio%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="pulseaudio调试">pulseaudio调试</h1><h2 id="源码下载">源码下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/realwujing/pulseaudio-12.2.58.git<br></code></pre></td></tr></table></figure><h2 id="安装依赖">安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt build-dep .<br>sudo apt install dh-make<br></code></pre></td></tr></table></figure><h2 id="编译调试包">编译调试包</h2><h3 id="关闭编译优化">关闭编译优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> pulseaudio-12.2.58<br>vim debian/rules<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">DEB_CFLAGS_MAINT_APPEND = -fstack-protector-strong -D_FORTITY_SOURCE=1 \<br>-z noexecstack -pie -fPIC -z lazy -g -O0<br></code></pre></td></tr></table></figure><h3 id="编译">编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><br><span class="hljs-built_in">set</span> -x<br><br>dh_clean    <span class="hljs-comment"># 调用makefile中的clean命令</span><br><span class="hljs-built_in">rm</span> ../*.deb ../*.buildinfo ../*.changes ../*.dsc ../*.xz -rf    <span class="hljs-comment"># 删除 dpkg-source -b . dh_make --createorig -sy 命令生成的源码压缩包</span><br>dh_make --createorig -sy    <span class="hljs-comment"># 生成debian目录</span><br>dpkg-source -b .    <span class="hljs-comment"># 生成构建源代码包</span><br>dpkg-buildpackage -uc -us -j16   <span class="hljs-comment"># 编译制作deb包</span><br></code></pre></td></tr></table></figure><h3 id="安装调试包">安装调试包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install --reinstall ../*.deb<br></code></pre></td></tr></table></figure><h2 id="开始调试">开始调试</h2><p>停止已有的pulseaudio进程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl --user stop pulseaudio.socket<br>systemctl --user stop pulseaudio<br></code></pre></td></tr></table></figure><p>查看pulseaudio参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pulseaudio --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">--log-level[=LEVEL]               Increase or set verbosity level<br>--log-meta[=BOOL]                 Include code location in log messages<br>--log-time[=BOOL]                 Include timestamps in log messages<br>--log-backtrace=FRAMES            Include a backtrace in log messages<br></code></pre></td></tr></table></figure><p>gdb pusleaudio:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb /usr/bin/pusleaudio<br><span class="hljs-built_in">set</span> args --log-level=4 --log-meta=1 --log-time=1 --log-backtrace=FRAMES<br></code></pre></td></tr></table></figure><p>也可以不关闭已有pulseaudio进程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep pulseaudio<br>gdb -p 12567<br>file /usr/bin/pulseaudio<br></code></pre></td></tr></table></figure><h2 id="main">main</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  main (argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>) at daemon/main.c:<span class="hljs-number">371</span><br></code></pre></td></tr></table></figure><h2 id="pa_daemon_conf_load">pa_daemon_conf_load</h2><p>/etc/pulse/daemon.conf加载流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  pa_daemon_conf_load (c=<span class="hljs-number">0xaaaaaaad5500</span>, filename=<span class="hljs-number">0x0</span>) at daemon/daemon-conf.c:<span class="hljs-number">603</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000aaaaaaab7204</span> in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:483<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pa_daemon_conf_load</span><span class="hljs-params">(pa_daemon_conf *c, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span> &#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">-1</span>;<br>    FILE *f = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">channel_conf_info</span> <span class="hljs-title">ci</span>;</span><br>    pa_config_item table[] = &#123;<br>        <span class="hljs-comment">// 配置项名称，解析函数，存储值的指针，额外数据指针</span><br>        &#123; <span class="hljs-string">&quot;daemonize&quot;</span>,                  pa_config_parse_bool,     &amp;c-&gt;daemonize, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 后台运行</span><br>        &#123; <span class="hljs-string">&quot;fail&quot;</span>,                       pa_config_parse_bool,     &amp;c-&gt;fail, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 启动失败</span><br>        &#123; <span class="hljs-string">&quot;high-priority&quot;</span>,              pa_config_parse_bool,     &amp;c-&gt;high_priority, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 高优先级</span><br>        <span class="hljs-comment">// ... 其他配置项 ...</span><br>        &#123; <span class="hljs-literal">NULL</span>,                         <span class="hljs-literal">NULL</span>,                     <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 配置项数组结束标记</span><br>    &#125;;<br><br>    pa_xfree(c-&gt;config_file);<br>    c-&gt;config_file = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 打开配置文件，根据提供的文件名或使用默认的文件名</span><br>    f = filename ?<br>        pa_fopen_cloexec(c-&gt;config_file = pa_xstrdup(filename), <span class="hljs-string">&quot;r&quot;</span>) :<br>        pa_open_config_file(DEFAULT_CONFIG_FILE, DEFAULT_CONFIG_FILE_USER, ENV_CONFIG_FILE, &amp;c-&gt;config_file);<br><br>    <span class="hljs-keyword">if</span> (!f &amp;&amp; errno != ENOENT) &#123;<br>        pa_log_warn(_(<span class="hljs-string">&quot;Failed to open configuration file: %s&quot;</span>), pa_cstrerror(errno));<br>        <span class="hljs-keyword">goto</span> finish;<br>    &#125;<br><br>    ci.default_channel_map_set = ci.default_sample_spec_set = <span class="hljs-literal">false</span>;<br>    ci.conf = c;<br><br>    <span class="hljs-comment">// 解析配置文件并应用配置项</span><br>    r = f ? pa_config_parse(c-&gt;config_file, f, table, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">NULL</span>) : <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 确保通道映射和采样规格匹配</span><br><br>        <span class="hljs-keyword">if</span> (ci.default_sample_spec_set &amp;&amp;<br>            ci.default_channel_map_set &amp;&amp;<br>            c-&gt;default_channel_map.channels != c-&gt;default_sample_spec.channels) &#123;<br>            pa_log_error(_(<span class="hljs-string">&quot;The specified default channel map has a different number of channels than the specified default number of channels.&quot;</span>));<br>            r = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">goto</span> finish;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ci.default_sample_spec_set)<br>            pa_channel_map_init_extend(&amp;c-&gt;default_channel_map, c-&gt;default_sample_spec.channels, PA_CHANNEL_MAP_DEFAULT);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ci.default_channel_map_set)<br>            c-&gt;default_sample_spec.channels = c-&gt;default_channel_map.channels;<br>    &#125;<br><br>finish:<br>    <span class="hljs-keyword">if</span> (f)<br>        fclose(f);<br><br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pa_open_config_file">pa_open_config_file</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  pa_open_config_file (global=<span class="hljs-number">0xaaaaaaabd520</span> <span class="hljs-string">&quot;/etc/pulse/daemon.conf&quot;</span>, local=<span class="hljs-number">0xaaaaaaabd510</span> <span class="hljs-string">&quot;/daemon.conf&quot;</span>, env=<span class="hljs-number">0xaaaaaaabd500</span> <span class="hljs-string">&quot;PULSE_CONFIG&quot;</span>, result=<span class="hljs-number">0xaaaaaaad5560</span>)<br>    at pulsecore/core-util.c:<span class="hljs-number">2021</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000aaaaaaab43d4</span> in <span class="hljs-title function_">pa_daemon_conf_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaad5500</span>, filename=<span class="hljs-number">0x0</span>)</span> at daemon/daemon-conf.c:710<br>#2  0x0000aaaaaaab7204 in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:483<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 尝试打开配置文件。如果指定了 &quot;env&quot;，则打开指定环境变量的值。</span><br><span class="hljs-comment"> * 否则在家目录中查找文件 &quot;local&quot;，或者在全局文件系统中查找文件 &quot;global&quot;。</span><br><span class="hljs-comment"> * 如果 &quot;result&quot; 非空，则将指向新分配的包含所使用配置文件路径的缓冲区的指针存储在那里。 */</span><br>FILE *<span class="hljs-title function_">pa_open_config_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *global, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *local, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *env, <span class="hljs-type">char</span> **result)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fn;<br>    FILE *f;<br><br>    <span class="hljs-comment">// 如果指定了 &quot;env&quot; 并且获取到了对应环境变量的值，则尝试打开该文件</span><br>    <span class="hljs-keyword">if</span> (env &amp;&amp; (fn = getenv(env))) &#123;<br>        <span class="hljs-keyword">if</span> ((f = pa_fopen_cloexec(fn, <span class="hljs-string">&quot;r&quot;</span>))) &#123;<br>            <span class="hljs-keyword">if</span> (result)<br>                *result = pa_xstrdup(fn);<br><br>            <span class="hljs-keyword">return</span> f;<br>        &#125;<br><br>        pa_log_warn(<span class="hljs-string">&quot;Failed to open configuration file &#x27;%s&#x27;: %s&quot;</span>, fn, pa_cstrerror(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 尝试在本地目录打开文件</span><br>    <span class="hljs-keyword">if</span> (local) &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *e;<br>        <span class="hljs-type">char</span> *lfn;<br>        <span class="hljs-type">char</span> *h;<br><br>        <span class="hljs-comment">// 如果设置了 &quot;PULSE_CONFIG_PATH&quot; 环境变量，则使用该路径</span><br>        <span class="hljs-keyword">if</span> ((e = getenv(<span class="hljs-string">&quot;PULSE_CONFIG_PATH&quot;</span>))) &#123;<br>            fn = lfn = pa_sprintf_malloc(<span class="hljs-string">&quot;%s&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;%s&quot;</span>, e, local);<br>            f = pa_fopen_cloexec(fn, <span class="hljs-string">&quot;r&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((h = pa_get_home_dir_malloc())) &#123;<br>            <span class="hljs-comment">// 尝试在家目录下的 .pulse 或 .config/pulse 目录打开文件</span><br>            fn = lfn = pa_sprintf_malloc(<span class="hljs-string">&quot;%s&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;.pulse&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;%s&quot;</span>, h, local);<br>            f = pa_fopen_cloexec(fn, <span class="hljs-string">&quot;r&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!f) &#123;<br>                <span class="hljs-built_in">free</span>(lfn);<br>                fn = lfn = pa_sprintf_malloc(<span class="hljs-string">&quot;%s&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;.config/pulse&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;%s&quot;</span>, h, local);<br>                f = pa_fopen_cloexec(fn, <span class="hljs-string">&quot;r&quot;</span>);<br>            &#125;<br>            pa_xfree(h);<br>        &#125; <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-comment">// 如果成功打开文件，则存储文件路径并返回文件指针</span><br>        <span class="hljs-keyword">if</span> (f) &#123;<br>            <span class="hljs-keyword">if</span> (result)<br>                *result = pa_xstrdup(fn);<br><br>            pa_xfree(lfn);<br>            <span class="hljs-keyword">return</span> f;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果出错但错误码不是 ENOENT，则输出警告</span><br>        <span class="hljs-keyword">if</span> (errno != ENOENT) &#123;<br>            pa_log_warn(<span class="hljs-string">&quot;Failed to open configuration file &#x27;%s&#x27;: %s&quot;</span>, fn, pa_cstrerror(errno));<br>            pa_xfree(lfn);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br><br>        pa_xfree(lfn);<br>    &#125;<br><br>    <span class="hljs-comment">// 尝试在全局目录打开文件</span><br>    <span class="hljs-keyword">if</span> (global) &#123;<br>        <span class="hljs-type">char</span> *gfn;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OS_IS_WIN32</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(global, PA_DEFAULT_CONFIG_DIR, <span class="hljs-built_in">strlen</span>(PA_DEFAULT_CONFIG_DIR)) == <span class="hljs-number">0</span>)<br>            gfn = pa_sprintf_malloc(<span class="hljs-string">&quot;%s&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;etc&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;pulse%s&quot;</span>,<br>                                    pa_win32_get_toplevel(<span class="hljs-literal">NULL</span>),<br>                                    global + <span class="hljs-built_in">strlen</span>(PA_DEFAULT_CONFIG_DIR));<br>        <span class="hljs-keyword">else</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        gfn = pa_xstrdup(global);<br><br>        <span class="hljs-comment">// 如果成功打开文件，则存储文件路径并返回文件指针</span><br>        <span class="hljs-keyword">if</span> ((f = pa_fopen_cloexec(gfn, <span class="hljs-string">&quot;r&quot;</span>))) &#123;<br>            <span class="hljs-keyword">if</span> (result)<br>                *result = gfn;<br>            <span class="hljs-keyword">else</span><br>                pa_xfree(gfn);<br><br>            <span class="hljs-keyword">return</span> f;<br>        &#125;<br>        pa_xfree(gfn);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果无法打开文件，则设置错误码为 ENOENT 并返回 NULL</span><br>    errno = ENOENT;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pa_config_parse">pa_config_parse</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  pa_config_parse (filename=<span class="hljs-number">0xaaaaaaad5b20</span> <span class="hljs-string">&quot;/etc/pulse/daemon.conf&quot;</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, t=<span class="hljs-number">0xffffffffd188</span>, proplist=<span class="hljs-number">0x0</span>, use_dot_d=<span class="hljs-literal">true</span>, userdata=<span class="hljs-number">0x0</span>) at pulsecore/conf-parser.c:<span class="hljs-number">168</span>          <br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000aaaaaaab4484</span> in <span class="hljs-title function_">pa_daemon_conf_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaad5500</span>, filename=<span class="hljs-number">0x0</span>)</span> at daemon/daemon-conf.c:720                                                                                     <br>#2  0x0000aaaaaaab7204 in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:483<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 通过文件并逐行解析文件 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pa_config_parse</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, FILE *f, <span class="hljs-type">const</span> pa_config_item *t, pa_proplist *proplist, <span class="hljs-type">bool</span> use_dot_d,</span><br><span class="hljs-params">                    <span class="hljs-type">void</span> *userdata)</span> &#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">bool</span> do_close = !f;<br>    pa_config_parser_state state;<br><br>    <span class="hljs-comment">// 断言参数不为空</span><br>    pa_assert(filename);<br>    pa_assert(t);<br><br>    <span class="hljs-comment">// 初始化状态结构</span><br>    pa_zero(state);<br><br>    <span class="hljs-comment">// 如果未指定文件句柄，则尝试打开文件</span><br>    <span class="hljs-keyword">if</span> (!f &amp;&amp; !(f = pa_fopen_cloexec(filename, <span class="hljs-string">&quot;r&quot;</span>))) &#123;<br>        <span class="hljs-comment">// 如果错误码为 ENOENT，则记录调试信息并返回 0</span><br>        <span class="hljs-keyword">if</span> (errno == ENOENT) &#123;<br>            pa_log_debug(<span class="hljs-string">&quot;Failed to open configuration file &#x27;%s&#x27;: %s&quot;</span>, filename, pa_cstrerror(errno));<br>            r = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">goto</span> finish;<br>        &#125;<br><br>        <span class="hljs-comment">// 否则记录警告信息并返回</span><br>        pa_log_warn(<span class="hljs-string">&quot;Failed to open configuration file &#x27;%s&#x27;: %s&quot;</span>, filename, pa_cstrerror(errno));<br>        <span class="hljs-keyword">goto</span> finish;<br>    &#125;<br>    pa_log_debug(<span class="hljs-string">&quot;Parsing configuration file &#x27;%s&#x27;&quot;</span>, filename);<br><br>    <span class="hljs-comment">// 初始化状态结构</span><br>    state.filename = filename;<br>    state.item_table = t;<br>    state.userdata = userdata;<br><br>    <span class="hljs-comment">// 如果传入的 proplist 非空，则创建一个新的 proplist</span><br>    <span class="hljs-keyword">if</span> (proplist)<br>        state.proplist = pa_proplist_new();<br><br>    <span class="hljs-comment">// 逐行解析文件内容</span><br>    <span class="hljs-keyword">while</span> (!feof(f)) &#123;<br>        <span class="hljs-keyword">if</span> (!fgets(state.buf, <span class="hljs-keyword">sizeof</span>(state.buf), f)) &#123;<br>            <span class="hljs-comment">// 如果遇到文件结束，中断循环</span><br>            <span class="hljs-keyword">if</span> (feof(f))<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 否则记录警告信息并返回</span><br>            pa_log_warn(<span class="hljs-string">&quot;Failed to read configuration file &#x27;%s&#x27;: %s&quot;</span>, filename, pa_cstrerror(errno));<br>            <span class="hljs-keyword">goto</span> finish;<br>        &#125;<br><br>        state.lineno++;<br><br>        <span class="hljs-comment">// 解析当前行</span><br>        <span class="hljs-keyword">if</span> (parse_line(&amp;state) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> finish;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果传入的 proplist 非空，则更新主 proplist</span><br>    <span class="hljs-keyword">if</span> (proplist)<br>        pa_proplist_update(proplist, PA_UPDATE_REPLACE, state.proplist);<br><br>    r = <span class="hljs-number">0</span>;<br><br>finish:<br>    <span class="hljs-comment">// 释放临时 proplist</span><br>    <span class="hljs-keyword">if</span> (state.proplist)<br>        pa_proplist_free(state.proplist);<br><br>    <span class="hljs-comment">// 释放动态分配的资源</span><br>    pa_xfree(state.section);<br><br>    <span class="hljs-comment">// 如果需要关闭文件，则关闭之</span><br>    <span class="hljs-keyword">if</span> (do_close &amp;&amp; f)<br>        fclose(f);<br><br>    <span class="hljs-comment">// 如果使用了 dot_d，则在指定目录中继续解析</span><br>    <span class="hljs-keyword">if</span> (use_dot_d) &#123;<br>        <span class="hljs-comment">// 在 Windows 平台下，通过 FindFirstFile() 和 FindNextFile() 遍历目录</span><br>        <span class="hljs-comment">// 在其他平台下，通过 scandir() 遍历目录</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> OS_IS_WIN32</span><br>        <span class="hljs-comment">// Windows 平台下的处理</span><br>        <span class="hljs-comment">// ...</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        <span class="hljs-comment">// 其他平台下的处理</span><br>        <span class="hljs-comment">// ...</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="parse_line">parse_line</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  parse_line (state=<span class="hljs-number">0xffffffffc0d8</span>) at pulsecore/conf-parser.c:<span class="hljs-number">86</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff7dad198</span> in <span class="hljs-title function_">pa_config_parse</span> <span class="hljs-params">(filename=<span class="hljs-number">0xaaaaaaad5b20</span> <span class="hljs-string">&quot;/etc/pulse/daemon.conf&quot;</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, t=<span class="hljs-number">0xffffffffd188</span>, proplist=<span class="hljs-number">0x0</span>, use_dot_d=<span class="hljs-literal">true</span>, userdata=<span class="hljs-number">0x0</span>)</span><br>    at pulsecore/conf-parser.c:208<br>#2  0x0000aaaaaaab4484 in <span class="hljs-title function_">pa_daemon_conf_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaad5500</span>, filename=<span class="hljs-number">0x0</span>)</span> at daemon/daemon-conf.c:720<br>#3  0x0000aaaaaaab7204 in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:483<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 解析变量赋值行 */</span><br><span class="hljs-comment">// static int parse_line(pa_config_parser_state *state) &#123;</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">parse_line</span><span class="hljs-params">(pa_config_parser_state *state)</span> &#123;<br>    <span class="hljs-type">char</span> *c;<br><br>    <span class="hljs-comment">// 跳过前导空格，获取 lvalue</span><br>    state-&gt;lvalue = state-&gt;buf + <span class="hljs-built_in">strspn</span>(state-&gt;buf, WHITESPACE);<br>    pa_log(<span class="hljs-string">&quot;state-&gt;lvalue:%s&quot;</span>, state-&gt;lvalue);<br><br>    <span class="hljs-comment">// 查找并截断注释部分</span><br>    <span class="hljs-keyword">if</span> ((c = <span class="hljs-built_in">strpbrk</span>(state-&gt;lvalue, COMMENTS)))<br>        *c = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 如果 lvalue 为空，则返回</span><br>    <span class="hljs-keyword">if</span> (!*state-&gt;lvalue)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 处理 .include 指令</span><br>    <span class="hljs-keyword">if</span> (pa_startswith(state-&gt;lvalue, <span class="hljs-string">&quot;.include &quot;</span>)) &#123;<br>        <span class="hljs-type">char</span> *path = <span class="hljs-literal">NULL</span>, *fn;<br>        <span class="hljs-type">int</span> r;<br><br>        <span class="hljs-comment">// 提取文件名并检查是否为绝对路径</span><br>        fn = pa_strip(state-&gt;lvalue + <span class="hljs-number">9</span>);<br>        <span class="hljs-keyword">if</span> (!pa_is_path_absolute(fn)) &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *k;<br>            <span class="hljs-keyword">if</span> ((k = <span class="hljs-built_in">strrchr</span>(state-&gt;filename, <span class="hljs-string">&#x27;/&#x27;</span>))) &#123;<br>                <span class="hljs-comment">// 构建文件的绝对路径</span><br>                <span class="hljs-type">char</span> *dir = pa_xstrndup(state-&gt;filename, k - state-&gt;filename);<br>                fn = path = pa_sprintf_malloc(<span class="hljs-string">&quot;%s&quot;</span> PA_PATH_SEP <span class="hljs-string">&quot;%s&quot;</span>, dir, fn);<br>                pa_xfree(dir);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 解析所指定的文件</span><br>        r = pa_config_parse(fn, <span class="hljs-literal">NULL</span>, state-&gt;item_table, state-&gt;proplist, <span class="hljs-literal">false</span>, state-&gt;userdata);<br>        pa_xfree(path);<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理节标题</span><br>    <span class="hljs-keyword">if</span> (*state-&gt;lvalue == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>        <span class="hljs-type">size_t</span> k;<br><br>        k = <span class="hljs-built_in">strlen</span>(state-&gt;lvalue);<br>        pa_assert(k &gt; <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 检查节标题格式</span><br>        <span class="hljs-keyword">if</span> (state-&gt;lvalue[k<span class="hljs-number">-1</span>] != <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>            pa_log(<span class="hljs-string">&quot;[%s:%u] Invalid section header.&quot;</span>, state-&gt;filename, state-&gt;lineno);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 释放之前的节标题，设置新的节标题</span><br>        pa_xfree(state-&gt;section);<br>        state-&gt;section = pa_xstrndup(state-&gt;lvalue + <span class="hljs-number">1</span>, k<span class="hljs-number">-2</span>);<br>        pa_log_debug(<span class="hljs-string">&quot;state-&gt;section:%s&quot;</span>, state-&gt;section);<br><br>        <span class="hljs-comment">// 检查是否进入 Properties 节</span><br>        <span class="hljs-keyword">if</span> (pa_streq(state-&gt;section, <span class="hljs-string">&quot;Properties&quot;</span>)) &#123;<br>            pa_log_debug(<span class="hljs-string">&quot;state-&gt;section:%s&quot;</span>, state-&gt;section);<br>            <span class="hljs-keyword">if</span> (!state-&gt;proplist) &#123;<br>                pa_log(<span class="hljs-string">&quot;[%s:%u] \&quot;Properties\&quot; section is not allowed in this file.&quot;</span>, state-&gt;filename, state-&gt;lineno);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br><br>            state-&gt;in_proplist = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span><br>            state-&gt;in_proplist = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理赋值操作</span><br>    <span class="hljs-keyword">if</span> (!(state-&gt;rvalue = <span class="hljs-built_in">strchr</span>(state-&gt;lvalue, <span class="hljs-string">&#x27;=&#x27;</span>))) &#123;<br>        pa_log(<span class="hljs-string">&quot;[%s:%u] Missing &#x27;=&#x27;.&quot;</span>, state-&gt;filename, state-&gt;lineno);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 截断 lvalue，并获取 rvalue</span><br>    *state-&gt;rvalue = <span class="hljs-number">0</span>;<br>    state-&gt;rvalue++;<br><br>    state-&gt;lvalue = pa_strip(state-&gt;lvalue);<br>    state-&gt;rvalue = pa_strip(state-&gt;rvalue);<br><br>    <span class="hljs-comment">// 根据是否在属性列表中，执行不同的赋值操作</span><br>    <span class="hljs-keyword">if</span> (state-&gt;in_proplist)<br>        <span class="hljs-keyword">return</span> proplist_assignment(state);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> normal_assignment(state);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="proplist_assignment">proplist_assignment</h5><p>parse_line中有个关键函数proplist_assignment：</p><p>src/pulsecore/conf-parser.c:68</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 解析属性列表项。 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">proplist_assignment</span><span class="hljs-params">(pa_config_parser_state *state)</span> &#123;<br>    <span class="hljs-comment">// 断言检查输入参数</span><br>    pa_assert(state);<br>    pa_assert(state-&gt;proplist);<br><br>    <span class="hljs-comment">// 使用属性列表设置键值对</span><br>    <span class="hljs-keyword">if</span> (pa_proplist_sets(state-&gt;proplist, state-&gt;lvalue, state-&gt;rvalue) &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log(<span class="hljs-string">&quot;[%s:%u] Failed to parse a proplist entry: %s = %s&quot;</span>, state-&gt;filename, state-&gt;lineno, state-&gt;lvalue, state-&gt;rvalue);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="normal_assignment">normal_assignment</h5><p>parse_line中有个关键函数normal_assignment：</p><p>src/pulsecore/conf-parser.c：42</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 运行用户提供的解析器来处理赋值操作 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">normal_assignment</span><span class="hljs-params">(pa_config_parser_state *state)</span> &#123;<br>    <span class="hljs-type">const</span> pa_config_item *item;<br><br>    pa_assert(state);<br><br>    <span class="hljs-comment">// 遍历配置项表格，查找匹配的项</span><br>    <span class="hljs-keyword">for</span> (item = state-&gt;item_table; item-&gt;parse; item++) &#123;<br><br>        <span class="hljs-comment">// 如果lvalue不为空且不匹配当前行的lvalue，则继续下一个循环</span><br>        <span class="hljs-keyword">if</span> (item-&gt;lvalue &amp;&amp; !pa_streq(state-&gt;lvalue, item-&gt;lvalue))<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-comment">// 如果项需要指定section，但当前没有section，则继续下一个循环</span><br>        <span class="hljs-keyword">if</span> (item-&gt;section &amp;&amp; !state-&gt;section)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-comment">// 如果项需要指定section且当前section不匹配项的section，则继续下一个循环</span><br>        <span class="hljs-keyword">if</span> (item-&gt;section &amp;&amp; !pa_streq(state-&gt;section, item-&gt;section))<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-comment">// 设置解析器的数据指针为当前项的数据</span><br>        state-&gt;data = item-&gt;data;<br><br>        <span class="hljs-comment">// 调用项的解析函数处理当前行</span><br>        <span class="hljs-keyword">return</span> item-&gt;parse(state);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果没有匹配的项，则输出错误日志</span><br>    pa_log(<span class="hljs-string">&quot;[%s:%u] Unknown lvalue &#x27;%s&#x27; in section &#x27;%s&#x27;.&quot;</span>, state-&gt;filename, state-&gt;lineno, state-&gt;lvalue, pa_strna(state-&gt;section));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>item-&gt;parse</code>是个回调函数，它的参数是一个 <code>pa_config_parser_state</code> 类型的指针，该指针指向一个 <code>pa_config_item</code> 类型的结构体。</p><p>src/daemon/daemon-conf.c：603</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c">pa_config_item table[] = &#123;<br>    <span class="hljs-comment">// 配置项名称，解析函数，存储值的指针，额外数据指针</span><br>    &#123; <span class="hljs-string">&quot;daemonize&quot;</span>,                  pa_config_parse_bool,     &amp;c-&gt;daemonize, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;fail&quot;</span>,                       pa_config_parse_bool,     &amp;c-&gt;fail, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;high-priority&quot;</span>,              pa_config_parse_bool,     &amp;c-&gt;high_priority, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;realtime-scheduling&quot;</span>,        pa_config_parse_bool,     &amp;c-&gt;realtime_scheduling, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;disallow-module-loading&quot;</span>,    pa_config_parse_bool,     &amp;c-&gt;disallow_module_loading, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;allow-module-loading&quot;</span>,       pa_config_parse_not_bool, &amp;c-&gt;disallow_module_loading, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;disallow-exit&quot;</span>,              pa_config_parse_bool,     &amp;c-&gt;disallow_exit, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;allow-exit&quot;</span>,                 pa_config_parse_not_bool, &amp;c-&gt;disallow_exit, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;use-pid-file&quot;</span>,               pa_config_parse_bool,     &amp;c-&gt;use_pid_file, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;system-instance&quot;</span>,            pa_config_parse_bool,     &amp;c-&gt;system_instance, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> HAVE_DBUS</span><br>    &#123; <span class="hljs-string">&quot;local-server-type&quot;</span>,          parse_server_type,        c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析本地服务器类型</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#123; <span class="hljs-string">&quot;no-cpu-limit&quot;</span>,               pa_config_parse_bool,     &amp;c-&gt;no_cpu_limit, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;cpu-limit&quot;</span>,                  pa_config_parse_not_bool, &amp;c-&gt;no_cpu_limit, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;disable-shm&quot;</span>,                pa_config_parse_bool,     &amp;c-&gt;disable_shm, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;enable-shm&quot;</span>,                 pa_config_parse_not_bool, &amp;c-&gt;disable_shm, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;enable-memfd&quot;</span>,               pa_config_parse_not_bool, &amp;c-&gt;disable_memfd, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;flat-volumes&quot;</span>,               pa_config_parse_bool,     &amp;c-&gt;flat_volumes, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;lock-memory&quot;</span>,                pa_config_parse_bool,     &amp;c-&gt;lock_memory, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;enable-deferred-volume&quot;</span>,     pa_config_parse_bool,     &amp;c-&gt;deferred_volume, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;exit-idle-time&quot;</span>,             pa_config_parse_int,      &amp;c-&gt;exit_idle_time, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;scache-idle-time&quot;</span>,           pa_config_parse_int,      &amp;c-&gt;scache_idle_time, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;realtime-priority&quot;</span>,          parse_rtprio,             c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析实时优先级</span><br>    &#123; <span class="hljs-string">&quot;dl-search-path&quot;</span>,             pa_config_parse_string,   &amp;c-&gt;dl_search_path, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;default-script-file&quot;</span>,        pa_config_parse_string,   &amp;c-&gt;default_script_file, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;log-target&quot;</span>,                 parse_log_target,         c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析日志目标</span><br>    &#123; <span class="hljs-string">&quot;log-level&quot;</span>,                  parse_log_level,          c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析日志级别</span><br>    &#123; <span class="hljs-string">&quot;verbose&quot;</span>,                    parse_log_level,          c, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;resample-method&quot;</span>,            parse_resample_method,    c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析重采样方法</span><br>    &#123; <span class="hljs-string">&quot;default-sample-format&quot;</span>,      parse_sample_format,      c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析默认采样格式</span><br>    &#123; <span class="hljs-string">&quot;default-sample-rate&quot;</span>,        parse_sample_rate,        c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析默认采样率</span><br>    &#123; <span class="hljs-string">&quot;alternate-sample-rate&quot;</span>,      parse_alternate_sample_rate, c, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;default-sample-channels&quot;</span>,    parse_sample_channels,    &amp;ci,  <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析默认采样通道数</span><br>    &#123; <span class="hljs-string">&quot;default-channel-map&quot;</span>,        parse_channel_map,        &amp;ci,  <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析默认通道映射</span><br>    &#123; <span class="hljs-string">&quot;default-fragments&quot;</span>,          parse_fragments,          c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析默认碎片数</span><br>    &#123; <span class="hljs-string">&quot;default-fragment-size-msec&quot;</span>, parse_fragment_size_msec, c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析默认碎片大小（毫秒）</span><br>    &#123; <span class="hljs-string">&quot;deferred-volume-safety-margin-usec&quot;</span>,<br>                                    pa_config_parse_unsigned, &amp;c-&gt;deferred_volume_safety_margin_usec, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析延迟音量安全边界（微秒）</span><br>    &#123; <span class="hljs-string">&quot;deferred-volume-extra-delay-usec&quot;</span>,<br>                                    pa_config_parse_int,      &amp;c-&gt;deferred_volume_extra_delay_usec, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析延迟音量额外延迟（微秒）</span><br>    &#123; <span class="hljs-string">&quot;nice-level&quot;</span>,                 parse_nice_level,         c, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 解析进程优先级</span><br>    &#123; <span class="hljs-string">&quot;avoid-resampling&quot;</span>,           pa_config_parse_bool,     &amp;c-&gt;avoid_resampling, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;disable-remixing&quot;</span>,           pa_config_parse_bool,     &amp;c-&gt;disable_remixing, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;enable-remixing&quot;</span>,            pa_config_parse_not_bool, &amp;c-&gt;disable_remixing, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;remixing-use-all-sink-channels&quot;</span>,<br>                                    pa_config_parse_bool,     &amp;c-&gt;remixing_use_all_sink_channels, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;disable-lfe-remixing&quot;</span>,       pa_config_parse_bool,     &amp;c-&gt;disable_lfe_remixing, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;enable-lfe-remixing&quot;</span>,        pa_config_parse_not_bool, &amp;c-&gt;disable_lfe_remixing, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;lfe-crossover-freq&quot;</span>,         pa_config_parse_unsigned, &amp;c-&gt;lfe_crossover_freq, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;load-default-script-file&quot;</span>,   pa_config_parse_bool,     &amp;c-&gt;load_default_script_file, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;shm-size-bytes&quot;</span>,             pa_config_parse_size,     &amp;c-&gt;shm_size, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;log-meta&quot;</span>,                   pa_config_parse_bool,     &amp;c-&gt;log_meta, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;log-time&quot;</span>,                   pa_config_parse_bool,     &amp;c-&gt;log_time, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;log-backtrace&quot;</span>,              pa_config_parse_unsigned, &amp;c-&gt;log_backtrace, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> HAVE_SYS_RESOURCE_H</span><br>    &#123; <span class="hljs-string">&quot;rlimit-fsize&quot;</span>,               parse_rlimit,             &amp;c-&gt;rlimit_fsize, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;rlimit-data&quot;</span>,                parse_rlimit,             &amp;c-&gt;rlimit_data, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;rlimit-stack&quot;</span>,               parse_rlimit,             &amp;c-&gt;rlimit_stack, <span class="hljs-literal">NULL</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;rlimit-core&quot;</span>,                parse_rlimit,             &amp;c-&gt;rlimit_core, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_RSS</span><br>    &#123; <span class="hljs-string">&quot;rlimit-rss&quot;</span>,                 parse_rlimit,             &amp;c-&gt;rlimit_rss, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_NOFILE</span><br>    &#123; <span class="hljs-string">&quot;rlimit-nofile&quot;</span>,              parse_rlimit,             &amp;c-&gt;rlimit_nofile, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_AS</span><br>    &#123; <span class="hljs-string">&quot;rlimit-as&quot;</span>,                  parse_rlimit,             &amp;c-&gt;rlimit_as, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_NPROC</span><br>    &#123; <span class="hljs-string">&quot;rlimit-nproc&quot;</span>,               parse_rlimit,             &amp;c-&gt;rlimit_nproc, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_MEMLOCK</span><br>    &#123; <span class="hljs-string">&quot;rlimit-memlock&quot;</span>,             parse_rlimit,             &amp;c-&gt;rlimit_memlock, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_LOCKS</span><br>    &#123; <span class="hljs-string">&quot;rlimit-locks&quot;</span>,               parse_rlimit,             &amp;c-&gt;rlimit_locks, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_SIGPENDING</span><br>    &#123; <span class="hljs-string">&quot;rlimit-sigpending&quot;</span>,          parse_rlimit,             &amp;c-&gt;rlimit_sigpending, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_MSGQUEUE</span><br>    &#123; <span class="hljs-string">&quot;rlimit-msgqueue&quot;</span>,            parse_rlimit,             &amp;c-&gt;rlimit_msgqueue, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_NICE</span><br>    &#123; <span class="hljs-string">&quot;rlimit-nice&quot;</span>,                parse_rlimit,             &amp;c-&gt;rlimit_nice, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_RTPRIO</span><br>    &#123; <span class="hljs-string">&quot;rlimit-rtprio&quot;</span>,              parse_rlimit,             &amp;c-&gt;rlimit_rtprio, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RLIMIT_RTTIME</span><br>    &#123; <span class="hljs-string">&quot;rlimit-rttime&quot;</span>,              parse_rlimit,             &amp;c-&gt;rlimit_rttime, <span class="hljs-literal">NULL</span> &#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#123; <span class="hljs-literal">NULL</span>,                         <span class="hljs-literal">NULL</span>,                     <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;, <span class="hljs-comment">// 配置项数组结束标记</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="pa_get_hw_info">pa_get_hw_info</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb)<br>489         <span class="hljs-keyword">if</span> (pa_get_hw_info(hw_info_path, card_name)) &#123;<br>(gdb) s<br>pa_get_hw_info (path=0xaaaaaaabeac8 <span class="hljs-string">&quot;/usr/share/uos-hw-config/hw_dmi_version&quot;</span>, card=0xffffffffdb28 <span class="hljs-string">&quot;&quot;</span>) at daemon/daemon-conf.c:540                                                             <br>540     bool pa_get_hw_info(const char *path, char *card) &#123;<br>(gdb) b 540<br>Breakpoint 30 at 0xaaaaaaab3674: file daemon/daemon-conf.c, line 540.<br>(gdb) bt<br><span class="hljs-comment">#0  pa_get_hw_info (path=0xaaaaaaabeac8 &quot;/usr/share/uos-hw-config/hw_dmi_version&quot;, card=0xffffffffdb28 &quot;&quot;) at daemon/daemon-conf.c:540                                                         </span><br><span class="hljs-comment">#1  0x0000aaaaaaab723c in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:489                                                                                                                            &quot;uos-PC&quot; 12:37 17-8月-23</span><br>(gdb) n<br>545         const char *state = NULL;<br>(gdb)<br>547         matched = <span class="hljs-literal">false</span>;<br>(gdb)<br>548         <span class="hljs-keyword">if</span> ((s = pa_read_line_from_file(path)) != NULL) &#123;<br>(gdb)<br>569         <span class="hljs-built_in">return</span> matched;<br>(gdb)<br>570     &#125;<br>(gdb) p matched<br><span class="hljs-variable">$10</span> = <span class="hljs-literal">false</span><br>(gdb) fin<br>Run till <span class="hljs-built_in">exit</span> from <span class="hljs-comment">#0  pa_get_hw_info (path=0xaaaaaaabeac8 &quot;/usr/share/uos-hw-config/hw_dmi_version&quot;, card=0xffffffffdb28 &quot;&quot;) at daemon/daemon-conf.c:570                                      </span><br>0x0000aaaaaaab723c <span class="hljs-keyword">in</span> main (argc=4, argv=0xffffffffdd98) at daemon/main.c:489<br>489         <span class="hljs-keyword">if</span> (pa_get_hw_info(hw_info_path, card_name)) &#123;<br>Value returned is <span class="hljs-variable">$11</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>uos arm上没有<code>/usr/share/uos-hw-config/hw_dmi_version</code>文件，此函数返回false，故下方代码不执行：</p><p>src/daemon/main.c：489</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (pa_get_hw_info(hw_info_path, card_name)) &#123;<br>        pa_get_vendor_name(card_name, vendor_name);<br>        huawei_identification = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (pa_platform_load(conf, vendor_name, card_name) &lt; <span class="hljs-number">0</span>)<br>            pa_log(_(<span class="hljs-string">&quot;Failed to load platform file.&quot;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取硬件信息，根据给定的路径和卡片名进行匹配</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">pa_get_hw_info</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *card)</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">bool</span> matched;<br>    <span class="hljs-type">char</span> *s;<br>    <span class="hljs-type">char</span> *r;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *state = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 初始化匹配状态为未匹配</span><br>    matched = <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-comment">// 从文件中读取一行信息</span><br>    <span class="hljs-keyword">if</span> ((s = pa_read_line_from_file(path)) != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 逐个处理空格分隔的信息</span><br>        <span class="hljs-keyword">while</span> ((r = pa_split_spaces(s, &amp;state))) &#123;<br>            pa_log_debug(<span class="hljs-string">&quot;hw info r: %s&quot;</span>, r);<br><br>            <span class="hljs-comment">// 遍历硬件ID表格，查找匹配的板号</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; id_table[i].id != <span class="hljs-number">-1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(id_table[i].board, r) == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 复制对应的卡片名到给定的缓冲区中</span><br>                    <span class="hljs-built_in">strncpy</span>(card, id_table[i].card, <span class="hljs-keyword">sizeof</span>(card));<br>                    <span class="hljs-comment">// 设置匹配状态为已匹配</span><br>                    matched = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 释放分隔后的字符串</span><br>            pa_xfree(r);<br><br>            <span class="hljs-comment">// 如果匹配成功，则结束循环</span><br>            <span class="hljs-keyword">if</span> (matched)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 释放读取的行字符串</span><br>        pa_xfree(s);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回匹配状态</span><br>    <span class="hljs-keyword">return</span> matched;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pa_daemon_conf_env">pa_daemon_conf_env</h2><p>从环境变量中获取配置信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) n<br><span class="hljs-number">496</span>         <span class="hljs-keyword">if</span> (pa_daemon_conf_env(conf) &lt; <span class="hljs-number">0</span>)<br>(gdb) s<br><span class="hljs-title function_">pa_daemon_conf_env</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaad5500</span>)</span> at daemon/daemon-conf.c:747<br>747         <span class="hljs-title function_">pa_assert</span><span class="hljs-params">(c)</span>;<br>(gdb) bt<br>#<span class="hljs-number">0</span>  pa_daemon_conf_env (c=<span class="hljs-number">0xaaaaaaad5500</span>) at daemon/daemon-conf.c:<span class="hljs-number">747</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000aaaaaaab72b8</span> in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:496<br><span class="hljs-params">(gdb)</span> fin<br>Run till <span class="hljs-built_in">exit</span> from #0  <span class="hljs-title function_">pa_daemon_conf_env</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaad5500</span>)</span> at daemon/daemon-conf.c:758<br><span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:496<br>496         <span class="hljs-title function_">if</span> <span class="hljs-params">(pa_daemon_conf_env(conf) &lt; <span class="hljs-number">0</span>)</span><br>Value returned is $15 = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 从环境变量中获取配置信息并更新到pa_daemon_conf结构</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pa_daemon_conf_env</span><span class="hljs-params">(pa_daemon_conf *c)</span> &#123;<br>    <span class="hljs-type">char</span> *e;<br>    pa_assert(c);<br><br>    <span class="hljs-comment">// 从环境变量中获取DL搜索路径并更新到结构中</span><br>    <span class="hljs-keyword">if</span> ((e = getenv(ENV_DL_SEARCH_PATH))) &#123;<br>        pa_xfree(c-&gt;dl_search_path);<br>        c-&gt;dl_search_path = pa_xstrdup(e);<br>    &#125;<br><br>    <span class="hljs-comment">// 从环境变量中获取默认脚本文件路径并更新到结构中</span><br>    <span class="hljs-keyword">if</span> ((e = getenv(ENV_SCRIPT_FILE))) &#123;<br>        pa_xfree(c-&gt;default_script_file);<br>        c-&gt;default_script_file = pa_xstrdup(e);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回0表示成功</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pa_cmdline_parse">pa_cmdline_parse</h2><p>解析命令行参数并更新pa_daemon_conf结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) n<br><span class="hljs-number">499</span>         <span class="hljs-keyword">if</span> (pa_cmdline_parse(conf, argc, argv, &amp;d) &lt; <span class="hljs-number">0</span>) &#123;<br>(gdb) s<br><span class="hljs-title function_">pa_cmdline_parse</span> <span class="hljs-params">(conf=<span class="hljs-number">0xaaaaaaad5500</span>, argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>, d=<span class="hljs-number">0xffffffffda24</span>)</span> at daemon/cmdline.c:172                                                                                  <br>warning: Source file is more recent than executable.<br>172         pa_strbuf *buf = <span class="hljs-literal">NULL</span>;<br>(gdb) fin<br>Run till <span class="hljs-built_in">exit</span> from #<span class="hljs-number">0</span>  pa_cmdline_parse (conf=<span class="hljs-number">0xaaaaaaad5500</span>, argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>, d=<span class="hljs-number">0xffffffffda24</span>) at daemon/cmdline.c:<span class="hljs-number">172</span><br>main (argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>) at daemon/main.c:<span class="hljs-number">499</span><br><span class="hljs-number">499</span>         <span class="hljs-keyword">if</span> (pa_cmdline_parse(conf, argc, argv, &amp;d) &lt; <span class="hljs-number">0</span>) &#123;<br>Value returned is $<span class="hljs-number">16</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 解析命令行参数并更新pa_daemon_conf结构</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pa_cmdline_parse</span><span class="hljs-params">(pa_daemon_conf *conf, <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">int</span> *d)</span> &#123;<br>    pa_strbuf *buf = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">int</span> b;<br><br>    pa_assert(conf);<br>    pa_assert(argc &gt; <span class="hljs-number">0</span>);<br>    pa_assert(argv);<br><br>    buf = pa_strbuf_new();<br><br>    <span class="hljs-keyword">if</span> (conf-&gt;script_commands)<br>        pa_strbuf_puts(buf, conf-&gt;script_commands);<br><br>    <span class="hljs-keyword">while</span> ((c = getopt_long(argc, argv, <span class="hljs-string">&quot;L:F:ChDnp:kv&quot;</span>, long_options, <span class="hljs-literal">NULL</span>)) != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (c) &#123;<br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_HELP:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                conf-&gt;cmd = PA_CMD_HELP;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_VERSION:<br>                conf-&gt;cmd = PA_CMD_VERSION;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_DUMP_CONF:<br>                conf-&gt;cmd = PA_CMD_DUMP_CONF;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_DUMP_MODULES:<br>                conf-&gt;cmd = PA_CMD_DUMP_MODULES;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_DUMP_RESAMPLE_METHODS:<br>                conf-&gt;cmd = PA_CMD_DUMP_RESAMPLE_METHODS;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_CLEANUP_SHM:<br>                conf-&gt;cmd = PA_CMD_CLEANUP_SHM;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;k&#x27;</span>:<br>            <span class="hljs-keyword">case</span> ARG_KILL:<br>                conf-&gt;cmd = PA_CMD_KILL;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_START:<br>                conf-&gt;cmd = PA_CMD_START;<br>                conf-&gt;daemonize = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_CHECK:<br>                conf-&gt;cmd = PA_CMD_CHECK;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_LOAD:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:<br>                pa_strbuf_printf(buf, <span class="hljs-string">&quot;load-module %s\n&quot;</span>, optarg);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置命令</span><br>            <span class="hljs-keyword">case</span> ARG_FILE:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;F&#x27;</span>: &#123;<br>                <span class="hljs-type">char</span> *p;<br>                pa_strbuf_printf(buf, <span class="hljs-string">&quot;.include %s\n&quot;</span>, p = pa_make_path_absolute(optarg));<br>                pa_xfree(p);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>                pa_strbuf_puts(buf, <span class="hljs-string">&quot;load-module module-cli exit_on_eof=1\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_DAEMONIZE:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--daemonize expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;daemonize = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_FAIL:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--fail expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;fail = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>            <span class="hljs-keyword">case</span> ARG_LOG_LEVEL:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> (optarg) &#123;<br>                    <span class="hljs-keyword">if</span> (pa_daemon_conf_set_log_level(conf, optarg) &lt; <span class="hljs-number">0</span>) &#123;<br>                        pa_log(_(<span class="hljs-string">&quot;--log-level expects log level argument (either numeric in range 0..4 or one of debug, info, notice, warn, error).&quot;</span>));<br>                        <span class="hljs-keyword">goto</span> fail;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (conf-&gt;log_level &lt; PA_LOG_LEVEL_MAX<span class="hljs-number">-1</span>)<br>                        conf-&gt;log_level++;<br>                &#125;<br><br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_HIGH_PRIORITY:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--high-priority expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;high_priority = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_REALTIME:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--realtime expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;realtime_scheduling = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_DISALLOW_MODULE_LOADING:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--disallow-module-loading expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;disallow_module_loading = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_DISALLOW_EXIT:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--disallow-exit expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;disallow_exit = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_USE_PID_FILE:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--use-pid-file expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;use_pid_file = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>:<br>            <span class="hljs-keyword">case</span> ARG_DL_SEARCH_PATH:<br>                pa_xfree(conf-&gt;dl_search_path);<br>                conf-&gt;dl_search_path = pa_xstrdup(optarg);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:<br>                conf-&gt;load_default_script_file = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_LOG_TARGET:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> (pa_daemon_conf_set_log_target(conf, optarg) &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> HAVE_SYSTEMD_JOURNAL</span><br>                    pa_log(_(<span class="hljs-string">&quot;Invalid log target: use either &#x27;syslog&#x27;, &#x27;journal&#x27;,&#x27;stderr&#x27; or &#x27;auto&#x27; or a valid file name &#x27;file:&lt;path&gt;&#x27;, &#x27;newfile:&lt;path&gt;&#x27;.&quot;</span>));<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>                    pa_log(_(<span class="hljs-string">&quot;Invalid log target: use either &#x27;syslog&#x27;, &#x27;stderr&#x27; or &#x27;auto&#x27; or a valid file name &#x27;file:&lt;path&gt;&#x27;, &#x27;newfile:&lt;path&gt;&#x27;.&quot;</span>));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_LOG_TIME:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--log-time expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;log_time = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_LOG_META:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--log-meta expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;log_meta = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_LOG_BACKTRACE:<br>                conf-&gt;log_backtrace = (<span class="hljs-type">unsigned</span>) atoi(optarg);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_EXIT_IDLE_TIME:<br>                conf-&gt;exit_idle_time = atoi(optarg);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_SCACHE_IDLE_TIME:<br>                conf-&gt;scache_idle_time = atoi(optarg);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_RESAMPLE_METHOD:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> (pa_daemon_conf_set_resample_method(conf, optarg) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;Invalid resample method &#x27;%s&#x27;.&quot;</span>), optarg);<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_SYSTEM:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--system expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;system_instance = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_NO_CPU_LIMIT:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--no-cpu-limit expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;no_cpu_limit = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_DISABLE_SHM:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--disable-shm expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;disable_shm = !!b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>            <span class="hljs-keyword">case</span> ARG_ENABLE_MEMFD:<br>                <span class="hljs-comment">// 解析命令行参数并更新对应的配置属性</span><br>                <span class="hljs-keyword">if</span> ((b = optarg ? pa_parse_boolean(optarg) : <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log(_(<span class="hljs-string">&quot;--enable-memfd expects boolean argument&quot;</span>));<br>                    <span class="hljs-keyword">goto</span> fail;<br>                &#125;<br>                conf-&gt;disable_memfd = !b;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">// 默认情况：无效的参数，返回失败</span><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br>    &#125;<br><br>    pa_xfree(conf-&gt;script_commands);<br>    conf-&gt;script_commands = pa_strbuf_to_string_free(buf);<br><br>    *d = optind;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>fail:<br>    <span class="hljs-keyword">if</span> (buf)<br>        pa_strbuf_free(buf);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pa_ltdl_init">pa_ltdl_init</h2><p>初始化libtool库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  pa_ltdl_init () at daemon/ltdl-bind-now.c:<span class="hljs-number">118</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000aaaaaaab74fc</span> in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:545<br><span class="hljs-params">(gdb)</span> fin<br>Run till <span class="hljs-built_in">exit</span> from #0  <span class="hljs-title function_">pa_ltdl_init</span> <span class="hljs-params">()</span> at daemon/ltdl-bind-now.c:118<br><span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:546<br>546         ltdl_init = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 初始化libtool库，并在需要的情况下添加BIND_NOW加载器</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">pa_ltdl_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PA_BIND_NOW</span><br>    <span class="hljs-comment">// BIND_NOW宏已定义时，声明dlopen_loader指针</span><br>    <span class="hljs-type">const</span> lt_dlvtable *dlopen_loader;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">// 初始化libtool库，确保动态加载器已被初始化</span><br>    pa_assert_se(lt_dlinit() == <span class="hljs-number">0</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PA_BIND_NOW</span><br>    <span class="hljs-comment">// 如果BIND_NOW宏已定义，进行以下操作</span><br>    <span class="hljs-comment">/* Already initialised */</span><br>    <span class="hljs-keyword">if</span> (bindnow_loader)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 在已加载的加载器列表中查找lt_dlopen加载器</span><br>    <span class="hljs-keyword">if</span> (!(dlopen_loader = lt_dlloader_find((<span class="hljs-type">char</span>*) <span class="hljs-string">&quot;lt_dlopen&quot;</span>))) &#123;<br>        pa_log_warn(_(<span class="hljs-string">&quot;Failed to find original lt_dlopen loader.&quot;</span>));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 分配内存来保存新的加载器信息</span><br>    <span class="hljs-keyword">if</span> (!(bindnow_loader = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(lt_dlvtable)))) &#123;<br>        pa_log_error(_(<span class="hljs-string">&quot;Failed to allocate new dl loader.&quot;</span>));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 复制原始加载器的信息到新的加载器中</span><br>    <span class="hljs-built_in">memcpy</span>(bindnow_loader, dlopen_loader, <span class="hljs-keyword">sizeof</span>(*bindnow_loader));<br>    bindnow_loader-&gt;name = <span class="hljs-string">&quot;bind-now-loader&quot;</span>;<br>    bindnow_loader-&gt;module_open = bind_now_open;<br>    bindnow_loader-&gt;module_close = bind_now_close;<br>    bindnow_loader-&gt;find_sym = bind_now_find_sym;<br>    bindnow_loader-&gt;priority = LT_DLLOADER_PREPEND;<br><br>    <span class="hljs-comment">// 将新的BIND_NOW加载器添加为默认的模块加载器</span><br>    <span class="hljs-keyword">if</span> (lt_dlloader_add(bindnow_loader) != <span class="hljs-number">0</span>) &#123;<br>        pa_log_warn(_(<span class="hljs-string">&quot;Failed to add bind-now-loader.&quot;</span>));<br>        <span class="hljs-built_in">free</span>(bindnow_loader);<br>        bindnow_loader = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pa_mainloop_new">pa_mainloop_new</h2><p>事件循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) <br><span class="hljs-number">1033</span>        pa_assert_se(mainloop = pa_mainloop_new());<br>(gdb) s<br><span class="hljs-title function_">pa_mainloop_new</span> <span class="hljs-params">()</span> at pulse/mainloop.c:453<br>warning: Source file is more recent than executable.<br>453         <span class="hljs-title function_">pa_init_i18n</span><span class="hljs-params">()</span>;<br>(gdb) fin<br>Run till <span class="hljs-built_in">exit</span> from #<span class="hljs-number">0</span>  pa_mainloop_new () at pulse/mainloop.c:<span class="hljs-number">453</span><br><span class="hljs-number">0x0000aaaaaaab8a84</span> in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1033<br>1033        <span class="hljs-title function_">pa_assert_se</span><span class="hljs-params">(mainloop = pa_mainloop_new())</span>;<br>Value returned is $<span class="hljs-number">28</span> = (pa_mainloop *) <span class="hljs-number">0xaaaaaaadad60</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 创建一个新的主事件循环。*/</span><br>pa_mainloop *<span class="hljs-title function_">pa_mainloop_new</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    pa_mainloop *m;  <span class="hljs-comment">// 主事件循环结构体指针</span><br><br>    pa_init_i18n();  <span class="hljs-comment">// 初始化国际化支持</span><br><br>    <span class="hljs-comment">// 分配内存并将其初始化为零</span><br>    m = pa_xnew0(pa_mainloop, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 创建唤醒管道，用于事件循环的通信</span><br>    <span class="hljs-keyword">if</span> (pa_pipe_cloexec(m-&gt;wakeup_pipe) &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log_error(<span class="hljs-string">&quot;ERROR: cannot create wakeup pipe&quot;</span>);<br>        pa_xfree(m);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 将唤醒管道的读写端设置为非阻塞模式</span><br>    pa_make_fd_nonblock(m-&gt;wakeup_pipe[<span class="hljs-number">0</span>]);<br>    pa_make_fd_nonblock(m-&gt;wakeup_pipe[<span class="hljs-number">1</span>]);<br><br>    m-&gt;rebuild_pollfds = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 标记需要重建 pollfds</span><br><br>    <span class="hljs-comment">// 初始化事件循环 API 和用户数据</span><br>    m-&gt;api = vtable;<br>    m-&gt;api.userdata = m;<br><br>    m-&gt;state = STATE_PASSIVE;  <span class="hljs-comment">// 设置状态为被动</span><br><br>    m-&gt;poll_func_ret = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化 poll_func_ret</span><br><br>    <span class="hljs-keyword">return</span> m;  <span class="hljs-comment">// 返回创建的主事件循环</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pa_core默认参数设置">pa_core默认参数设置</h2><p>src/daemon/main.c：1042</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">c-&gt;default_sample_spec = conf-&gt;default_sample_spec;  <span class="hljs-comment">// 设置默认采样规格</span><br>c-&gt;alternate_sample_rate = conf-&gt;alternate_sample_rate;  <span class="hljs-comment">// 设置备用采样率</span><br>c-&gt;default_channel_map = conf-&gt;default_channel_map;  <span class="hljs-comment">// 设置默认通道映射</span><br>c-&gt;default_n_fragments = conf-&gt;default_n_fragments;  <span class="hljs-comment">// 设置默认片段数量</span><br>c-&gt;default_fragment_size_msec = conf-&gt;default_fragment_size_msec;  <span class="hljs-comment">// 设置默认片段大小（毫秒）</span><br>c-&gt;deferred_volume_safety_margin_usec = conf-&gt;deferred_volume_safety_margin_usec;  <span class="hljs-comment">// 设置延迟音量安全裕度（微秒）</span><br>c-&gt;deferred_volume_extra_delay_usec = conf-&gt;deferred_volume_extra_delay_usec;  <span class="hljs-comment">// 设置延迟音量额外延迟（微秒）</span><br>c-&gt;lfe_crossover_freq = conf-&gt;lfe_crossover_freq;  <span class="hljs-comment">// 设置低音炮分频频率</span><br>c-&gt;exit_idle_time = conf-&gt;exit_idle_time;  <span class="hljs-comment">// 设置退出空闲时间</span><br>c-&gt;scache_idle_time = conf-&gt;scache_idle_time;  <span class="hljs-comment">// 设置样本缓存空闲时间</span><br>c-&gt;resample_method = conf-&gt;resample_method;  <span class="hljs-comment">// 设置重采样方法</span><br>c-&gt;realtime_priority = conf-&gt;realtime_priority;  <span class="hljs-comment">// 设置实时优先级</span><br>c-&gt;realtime_scheduling = conf-&gt;realtime_scheduling;  <span class="hljs-comment">// 设置实时调度</span><br>c-&gt;avoid_resampling = conf-&gt;avoid_resampling;  <span class="hljs-comment">// 设置避免重采样</span><br>c-&gt;disable_remixing = conf-&gt;disable_remixing;  <span class="hljs-comment">// 设置禁用混音</span><br>c-&gt;remixing_use_all_sink_channels = conf-&gt;remixing_use_all_sink_channels;  <span class="hljs-comment">// 设置混音使用所有目标通道</span><br>c-&gt;disable_lfe_remixing = conf-&gt;disable_lfe_remixing;  <span class="hljs-comment">// 设置禁用低音炮混音</span><br>c-&gt;deferred_volume = conf-&gt;deferred_volume;  <span class="hljs-comment">// 设置延迟音量</span><br>c-&gt;running_as_daemon = conf-&gt;daemonize;  <span class="hljs-comment">// 设置作为守护进程运行</span><br>c-&gt;disallow_exit = conf-&gt;disallow_exit;  <span class="hljs-comment">// 设置禁止退出</span><br>c-&gt;flat_volumes = conf-&gt;flat_volumes;  <span class="hljs-comment">// 设置平坦音量</span><br>c-&gt;huawei_identity = huawei_identification;  <span class="hljs-comment">// 设置华为身份标识</span><br></code></pre></td></tr></table></figure><h2 id="pa_cpu_init">pa_cpu_init</h2><p>cpu特性设置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) n<br><span class="hljs-number">1083</span>        pa_cpu_init(&amp;c-&gt;cpu_info);<br>(gdb) bt<br>#<span class="hljs-number">0</span>  main (argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>) at daemon/main.c:<span class="hljs-number">1083</span><br>(gdb) s<br><span class="hljs-title function_">pa_cpu_init</span> <span class="hljs-params">(cpu_info=<span class="hljs-number">0xaaaaaaae30e0</span>)</span> at pulsecore/cpu.c:25<br>warning: Source file is more recent than executable.<br>25          cpu_info-&gt;cpu_type = PA_CPU_UNDEFINED;<br>(gdb) fin<br>Run till <span class="hljs-built_in">exit</span> from #<span class="hljs-number">0</span>  pa_cpu_init (cpu_info=<span class="hljs-number">0xaaaaaaae30e0</span>) at pulsecore/cpu.c:<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pa_cpu_init</span><span class="hljs-params">(pa_cpu_info *cpu_info)</span> &#123;<br>    cpu_info-&gt;cpu_type = PA_CPU_UNDEFINED;  <span class="hljs-comment">// 初始化 CPU 类型为未定义</span><br>    <span class="hljs-comment">/* don&#x27;t force generic code, used for testing only */</span><br>    cpu_info-&gt;force_generic_code = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 不强制使用通用代码，仅用于测试</span><br><br>    <span class="hljs-comment">// 如果没有设置环境变量 &quot;PULSE_NO_SIMD&quot;</span><br>    <span class="hljs-keyword">if</span> (!getenv(<span class="hljs-string">&quot;PULSE_NO_SIMD&quot;</span>)) &#123;<br>        <span class="hljs-comment">// 尝试初始化 x86 架构的 CPU 特性</span><br>        <span class="hljs-keyword">if</span> (pa_cpu_init_x86(&amp;cpu_info-&gt;flags.x86))<br>            cpu_info-&gt;cpu_type = PA_CPU_X86;  <span class="hljs-comment">// 设置 CPU 类型为 X86</span><br>        <span class="hljs-comment">// 如果 x86 初始化失败，尝试初始化 ARM 架构的 CPU 特性</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pa_cpu_init_arm(&amp;cpu_info-&gt;flags.arm))<br>            cpu_info-&gt;cpu_type = PA_CPU_ARM;  <span class="hljs-comment">// 设置 CPU 类型为 ARM</span><br>        <span class="hljs-comment">// 初始化 ORC (Optimized Inner Loops Runtime Compiler) 特性</span><br>        pa_cpu_init_orc(*cpu_info);<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化 CPU 重映射函数</span><br>    pa_remap_func_init(cpu_info);<br>    <span class="hljs-comment">// 初始化混音函数</span><br>    pa_mix_func_init(cpu_info);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pa_daemon_conf_open_default_script_file">pa_daemon_conf_open_default_script_file</h2><p>default.pa加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) bt<br><span class="hljs-comment">#0  pa_daemon_conf_open_default_script_file (c=0xaaaaaaad5500) at daemon/daemon-conf.c:782</span><br><span class="hljs-comment">#1  0x0000aaaaaaab9080 in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1111</span><br>(gdb) s<br>pa_open_config_file (global=0xaaaaaaabd620 <span class="hljs-string">&quot;/etc/pulse/default.pa&quot;</span>, <span class="hljs-built_in">local</span>=0xaaaaaaabd610 <span class="hljs-string">&quot;/default.pa&quot;</span>, <span class="hljs-built_in">env</span>=0xaaaaaaabd5e8 <span class="hljs-string">&quot;PULSE_SCRIPT&quot;</span>, result=0xaaaaaaad5548) at pulsecore/core-util.c:2021<br>warning: Source file is more recent than executable.<br>2021        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">env</span> &amp;&amp; (fn = getenv(<span class="hljs-built_in">env</span>))) &#123;<br>(gdb) fin<br>Run till <span class="hljs-built_in">exit</span> from <span class="hljs-comment">#0  pa_open_config_file (global=0xaaaaaaabd620 &quot;/etc/pulse/default.pa&quot;, local=0xaaaaaaabd610 &quot;/default.pa&quot;, env=0xaaaaaaabd5e8 &quot;PULSE_SCRIPT&quot;, result=0xaaaaaaad5548)</span><br>    at pulsecore/core-util.c:2021<br>0x0000aaaaaaab4884 <span class="hljs-keyword">in</span> pa_daemon_conf_open_default_script_file (c=0xaaaaaaad5500) at daemon/daemon-conf.c:782<br>782                 f = pa_open_config_file(DEFAULT_SCRIPT_FILE, DEFAULT_SCRIPT_FILE_USER, ENV_SCRIPT_FILE, &amp;c-&gt;default_script_file);<br>Value returned is <span class="hljs-variable">$36</span> = (FILE *) 0xaaaaaaad58f0<br>(gdb) fin<br>Run till <span class="hljs-built_in">exit</span> from <span class="hljs-comment">#0  0x0000aaaaaaab4884 in pa_daemon_conf_open_default_script_file (c=0xaaaaaaad5500) at daemon/daemon-conf.c:782</span><br>0x0000aaaaaaab9080 <span class="hljs-keyword">in</span> main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1111<br>1111                <span class="hljs-keyword">if</span> ((f = pa_daemon_conf_open_default_script_file(conf))) &#123;<br>Value returned is <span class="hljs-variable">$37</span> = (FILE *) 0xaaaaaaad58f0<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">pa_daemon_conf_open_default_script_file</span><span class="hljs-params">(pa_daemon_conf *c)</span> &#123;<br>    FILE *f;<br>    pa_assert(c);  <span class="hljs-comment">// 断言传入的配置参数 c 不为空</span><br><br>    <span class="hljs-comment">// 如果没有设置默认脚本文件</span><br>    <span class="hljs-keyword">if</span> (!c-&gt;default_script_file) &#123;<br>        <span class="hljs-comment">// 如果是系统实例，尝试打开默认的系统脚本文件</span><br>        <span class="hljs-keyword">if</span> (c-&gt;system_instance)<br>            f = pa_open_config_file(DEFAULT_SYSTEM_SCRIPT_FILE, <span class="hljs-literal">NULL</span>, ENV_SCRIPT_FILE, &amp;c-&gt;default_script_file);<br>        <span class="hljs-comment">// 如果不是系统实例，尝试打开默认的用户脚本文件</span><br>        <span class="hljs-keyword">else</span><br>            f = pa_open_config_file(DEFAULT_SCRIPT_FILE, DEFAULT_SCRIPT_FILE_USER, ENV_SCRIPT_FILE, &amp;c-&gt;default_script_file);<br>    &#125; <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 如果设置了默认脚本文件，直接打开该文件</span><br>        f = pa_fopen_cloexec(c-&gt;default_script_file, <span class="hljs-string">&quot;r&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> f;  <span class="hljs-comment">// 返回打开的文件指针</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pa_cli_command_execute_line_stateful">pa_cli_command_execute_line_stateful</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><span class="hljs-params">(pa_core *c, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail, <span class="hljs-type">int</span> *ifstate)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cs;<br><br>    pa_assert(c);    <span class="hljs-comment">// 断言传入的核心参数 c 不为空</span><br>    pa_assert(s);    <span class="hljs-comment">// 断言传入的命令字符串 s 不为空</span><br>    pa_assert(buf);  <span class="hljs-comment">// 断言传入的字符串缓冲 buf 不为空</span><br><br>    cs = s + <span class="hljs-built_in">strspn</span>(s, whitespace);  <span class="hljs-comment">// 跳过字符串开头的空格字符</span><br><br>    <span class="hljs-keyword">if</span> (*cs == <span class="hljs-string">&#x27;#&#x27;</span> || !*cs)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果行是注释或者空行，直接返回</span><br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*cs == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 处理以点号开头的元命令</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cs, META_ELSE)) &#123;<br>            <span class="hljs-comment">// 处理 &quot;.else&quot; 元命令</span><br>            <span class="hljs-keyword">if</span> (!ifstate || *ifstate == IFSTATE_NONE) &#123;<br>                pa_strbuf_printf(buf, <span class="hljs-string">&quot;Meta command %s is not valid in this context\n&quot;</span>, cs);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*ifstate == IFSTATE_TRUE)<br>                *ifstate = IFSTATE_FALSE;<br>            <span class="hljs-keyword">else</span><br>                *ifstate = IFSTATE_TRUE;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cs, META_ENDIF)) &#123;<br>            <span class="hljs-comment">// 处理 &quot;.endif&quot; 元命令</span><br>            <span class="hljs-keyword">if</span> (!ifstate || *ifstate == IFSTATE_NONE) &#123;<br>                pa_strbuf_printf(buf, <span class="hljs-string">&quot;Meta command %s is not valid in this context\n&quot;</span>, cs);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125; <span class="hljs-keyword">else</span><br>                *ifstate = IFSTATE_NONE;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 处理其他元命令</span><br>        <span class="hljs-keyword">if</span> (ifstate &amp;&amp; *ifstate == IFSTATE_FALSE)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// 处理其他元命令逻辑</span><br>        <span class="hljs-comment">// ...</span><br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 处理普通命令</span><br>        <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> command *command;<br>        <span class="hljs-type">int</span> unknown = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">size_t</span> l;<br><br>        <span class="hljs-keyword">if</span> (ifstate &amp;&amp; *ifstate == IFSTATE_FALSE)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        l = <span class="hljs-built_in">strcspn</span>(cs, whitespace);<br><br>        <span class="hljs-keyword">for</span> (command = commands; command-&gt;name; command++) &#123;<br>            <span class="hljs-comment">// 检查命令是否匹配已知命令列表</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(command-&gt;name) == l &amp;&amp; !<span class="hljs-built_in">strncmp</span>(cs, command-&gt;name, l)) &#123;<br>                <span class="hljs-type">int</span> ret;<br>                pa_tokenizer *t = pa_tokenizer_new(cs, command-&gt;args);<br>                pa_assert(t);<br>                <span class="hljs-comment">// 调用命令处理函数进行处理</span><br>                ret = command-&gt;proc(c, t, buf, fail);<br>                pa_tokenizer_free(t);<br>                unknown = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span> &amp;&amp; *fail)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果命令未知</span><br>        <span class="hljs-keyword">if</span> (unknown) &#123;<br>            pa_strbuf_printf(buf, <span class="hljs-string">&quot;Unknown command: %s\n&quot;</span>, cs);<br>            <span class="hljs-keyword">if</span> (*fail)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 返回处理结果</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="pa_cli_command">pa_cli_command</h4><p><code>command-&gt;proc</code>是一个函数指针：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) p <span class="hljs-built_in">command</span>-&gt;proc<br><span class="hljs-variable">$38</span> = (int (*)(pa_core *, pa_tokenizer *, pa_strbuf *, _Bool *)) 0xfffff7e4ffb0 &lt;pa_cli_command_load&gt;                                                                                          <br>(gdb) s<br>pa_cli_command_load (c=0xaaaaaaae2ec0, t=0xaaaaaaaddf90, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:422                                                               <br>422     static int pa_cli_command_load(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, bool *fail) &#123;                                                                                              <br>(gdb) bt<br><span class="hljs-comment">#0  pa_cli_command_load (c=0xaaaaaaae2ec0, t=0xaaaaaaaddf90, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:422</span><br><span class="hljs-comment">#1  0x0000fffff7e5774c in pa_cli_command_execute_line_stateful (c=0xaaaaaaae2ec0, s=0xffffffffd1c8 &quot;load-module module-device-restore&quot;, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505, </span><br>    ifstate=0xffffffffd1c0) at pulsecore/cli-command.c:2136<br><span class="hljs-comment">#2  0x0000fffff7e57a00 in pa_cli_command_execute_file_stream (c=0xaaaaaaae2ec0, f=0xaaaaaaad58f0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:2176</span><br><span class="hljs-comment">#3  0x0000aaaaaaab90ac in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1112</span><br></code></pre></td></tr></table></figure><h5 id="command">command</h5><p>src/pulsecore/cli-command.c:62</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">command</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">int</span> (*proc) (pa_core *c, pa_tokenizer*t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *help;<br>    <span class="hljs-type">unsigned</span> args;<br>&#125;;<br></code></pre></td></tr></table></figure><p>回调函数总览:</p><p>src/pulsecore/cli-command.c:82</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Prototypes for all available commands */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_exit</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_help</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_modules</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_clients</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_cards</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sinks</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sources</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sink_inputs</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_source_outputs</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_stat</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_info</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_load</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_unload</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_describe</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sink_volume</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sink_input_volume</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_source_output_volume</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_source_volume</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sink_mute</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_source_mute</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sink_input_mute</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_source_output_mute</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sink_default</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_source_default</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_kill_client</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_kill_sink_input</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_kill_source_output</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_scache_play</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_scache_remove</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_scache_list</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_scache_load</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_scache_load_dir</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_play_file</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_dump</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_list_shared_props</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_move_sink_input</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_move_source_output</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_vacuum</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_suspend_sink</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_suspend_source</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_suspend</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_log_target</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_log_level</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_log_meta</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_log_time</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_log_backtrace</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_update_sink_proplist</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_update_source_proplist</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_update_sink_input_proplist</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_update_source_output_proplist</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_card_profile</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_sink_port</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_source_port</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_port_offset</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pa_cli_command_dump_volumes</span><span class="hljs-params">(pa_core *c, pa_tokenizer *t, pa_strbuf *buf, <span class="hljs-type">bool</span> *fail)</span>;<br></code></pre></td></tr></table></figure><p>到此，pusleaudio整体框架基本介绍差不多了，下文会基于<code>command-&gt;proc</code>介绍<code>/usr/share/pulseaudio/alsa-mixer/profile-sets/</code>、<code>/usr/share/pulseaudio/alsa-mixer/paths/</code>部分。</p><h2 id="usrsharepulseaudioalsa-mixerprofile-sets">/usr/share/pulseaudio/alsa-mixer/profile-sets/</h2><h3 id="pa_alsa_profile_set_new">pa_alsa_profile_set_new</h3><p>解析profile-set</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  pa_config_parse (filename=<span class="hljs-number">0xaaaaaab154c0</span> <span class="hljs-string">&quot;/usr/share/pulseaudio/alsa-mixer/profile-sets/default.conf&quot;</span>, f=<span class="hljs-number">0x0</span>, t=<span class="hljs-number">0xfffff2519640</span> &lt;items&gt;, proplist=<span class="hljs-number">0x0</span>, use_dot_d=<span class="hljs-literal">false</span>, <br>    userdata=<span class="hljs-number">0xaaaaaab28120</span>) at pulsecore/conf-parser.c:<span class="hljs-number">168</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff24dcb04</span> in <span class="hljs-title function_">pa_alsa_profile_set_new</span> <span class="hljs-params">(fname=<span class="hljs-number">0xfffff24fa608</span> <span class="hljs-string">&quot;default.conf&quot;</span>, bonus=<span class="hljs-number">0xaaaaaaae2f68</span>)</span> at modules/alsa/alsa-mixer.c:4577<br>#2  0x0000fffff268bc14 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:849<br>#3  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#4  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333<br>#5  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422<br>#6  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464<br>#7  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#8  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789<br>#9  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#10 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#11 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#12 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#13 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c">pa_alsa_profile_set* <span class="hljs-title function_">pa_alsa_profile_set_new</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fname, <span class="hljs-type">const</span> pa_channel_map *bonus)</span> &#123;<br>    pa_alsa_profile_set *ps; <span class="hljs-comment">// 创建一个 pa_alsa_profile_set 结构体指针，用于存储配置文件中的配置信息</span><br>    pa_alsa_profile *p; <span class="hljs-comment">// 创建一个 pa_alsa_profile 结构体指针，用于遍历配置文件中的各个音频配置</span><br>    pa_alsa_mapping *m; <span class="hljs-comment">// 创建一个 pa_alsa_mapping 结构体指针，用于遍历配置文件中的各个音频映射</span><br>    pa_alsa_decibel_fix *db_fix; <span class="hljs-comment">// 创建一个 pa_alsa_decibel_fix 结构体指针，用于遍历配置文件中的各个分贝修正</span><br>    <span class="hljs-type">char</span> *fn; <span class="hljs-comment">// 创建一个字符指针，用于存储配置文件的完整路径</span><br>    <span class="hljs-type">int</span> r; <span class="hljs-comment">// 用于存储函数返回值</span><br>    <span class="hljs-type">void</span> *state; <span class="hljs-comment">// 用于辅助遍历哈希表的状态指针</span><br><br>    <span class="hljs-comment">// 配置项数组，用于解析配置文件中的各个配置项</span><br>    <span class="hljs-type">static</span> pa_config_item items[] = &#123;<br>        <span class="hljs-comment">/* [General] */</span><br>        &#123; <span class="hljs-string">&quot;auto-profiles&quot;</span>,          pa_config_parse_bool,         <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;General&quot;</span> &#125;,<br><br>        <span class="hljs-comment">/* [Mapping ...] */</span><br>        &#123; <span class="hljs-string">&quot;device-strings&quot;</span>,         mapping_parse_device_strings, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;channel-map&quot;</span>,            mapping_parse_channel_map,    <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;paths-input&quot;</span>,            mapping_parse_paths,          <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;paths-output&quot;</span>,           mapping_parse_paths,          <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;element-input&quot;</span>,          mapping_parse_element,        <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;element-output&quot;</span>,         mapping_parse_element,        <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;direction&quot;</span>,              mapping_parse_direction,      <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;exact-channels&quot;</span>,         mapping_parse_exact_channels, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br><br>        <span class="hljs-comment">/* Shared by [Mapping ...] and [Profile ...] */</span><br>        &#123; <span class="hljs-string">&quot;description&quot;</span>,            mapping_parse_description,    <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;priority&quot;</span>,               mapping_parse_priority,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;fallback&quot;</span>,               mapping_parse_fallback,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br><br>        <span class="hljs-comment">/* [Profile ...] */</span><br>        &#123; <span class="hljs-string">&quot;input-mappings&quot;</span>,         profile_parse_mappings,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;output-mappings&quot;</span>,        profile_parse_mappings,       <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;skip-probe&quot;</span>,             profile_parse_skip_probe,     <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br><br>        <span class="hljs-comment">/* [DecibelFix ...] */</span><br>        &#123; <span class="hljs-string">&quot;db-values&quot;</span>,              decibel_fix_parse_db_values,  <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;,<br>        &#123; <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 创建一个新的 pa_alsa_profile_set 结构体，将其中的各个哈希表进行初始化</span><br>    ps = pa_xnew0(pa_alsa_profile_set, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 初始化音频映射、音频配置、分贝修正、路径的哈希表</span><br>    ps-&gt;mappings = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) mapping_free);<br>    ps-&gt;profiles = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) profile_free);<br>    ps-&gt;decibel_fixes = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) decibel_fix_free);<br>    ps-&gt;input_paths = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) pa_alsa_path_free);<br>    ps-&gt;output_paths = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">pa_free_cb_t</span>) pa_alsa_path_free);<br><br>    <span class="hljs-comment">// 初始化自定义路径的哈希表和文件夹</span><br>    ps-&gt;cust_paths = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, (<span class="hljs-type">pa_free_cb_t</span>) pa_xfree, (<span class="hljs-type">pa_free_cb_t</span>) pa_xfree);<br>    ps-&gt;cust_folder = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 配置项数组中的第一个配置项与 ps 结构体中的 auto_profiles 字段关联</span><br>    items[<span class="hljs-number">0</span>].data = &amp;ps-&gt;auto_profiles;<br><br>    <span class="hljs-comment">// 如果没有提供配置文件名，则使用默认的配置文件名</span><br>    <span class="hljs-keyword">if</span> (!fname)<br>        fname = <span class="hljs-string">&quot;default.conf&quot;</span>;<br><br>    <span class="hljs-comment">// 构建配置文件的完整路径</span><br>    fn = pa_maybe_prefix_path(fname,<br>                              pa_run_from_build_tree() ? PA_SRCDIR <span class="hljs-string">&quot;/modules/alsa/mixer/profile-sets/&quot;</span> :<br>                              PA_ALSA_PROFILE_SETS_DIR);<br><br>    <span class="hljs-comment">// 解析配置文件并填充配置信息到 ps 结构体</span><br>    r = pa_config_parse(fn, <span class="hljs-literal">NULL</span>, items, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">false</span>, ps);<br>    pa_xfree(fn);<br><br>    <span class="hljs-comment">// 如果解析失败，则进行清理并返回 NULL</span><br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-comment">// 遍历音频映射并进行验证</span><br>    PA_HASHMAP_FOREACH(m, ps-&gt;mappings, state)<br>        <span class="hljs-keyword">if</span> (mapping_verify(m, bonus) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-comment">// 如果 auto_profiles 为真，则添加自动配置的音频配置</span><br>    <span class="hljs-keyword">if</span> (ps-&gt;auto_profiles)<br>        profile_set_add_auto(ps);<br><br>    <span class="hljs-comment">// 遍历音频配置并进行验证</span><br>    PA_HASHMAP_FOREACH(p, ps-&gt;profiles, state)<br>        <span class="hljs-keyword">if</span> (profile_verify(p) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-comment">// 遍历分贝修正并进行验证</span><br>    PA_HASHMAP_FOREACH(db_fix, ps-&gt;decibel_fixes, state)<br>        <span class="hljs-keyword">if</span> (decibel_fix_verify(db_fix) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-keyword">return</span> ps;<br><br>fail:<br>    <span class="hljs-comment">// 如果解析或验证过程出现错误，则释放资源并返回 NULL</span><br>    pa_alsa_profile_set_free(ps);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="pa_config_parse-1">pa_config_parse</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">src/modules/alsa/alsa-mixer.c:<span class="hljs-number">4577</span><br>src/pulsecore/conf-parser.c:<span class="hljs-number">167</span><br></code></pre></td></tr></table></figure><p>参见上方。</p><h5 id="parse_line-1">parse_line</h5><p>参见上方。</p><h6 id="proplist_assignment-1">proplist_assignment</h6><p>参见上方。</p><h6 id="normal_assignment-1">normal_assignment</h6><p>参见上方。</p><h4 id="profile_set_add_auto">profile_set_add_auto</h4><p>自动将适合的音频配置添加到给定的 <code>pa_alsa_profile_set</code> 中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  profile_set_add_auto (ps=<span class="hljs-number">0xaaaaaab28120</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">4306</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff24dcb8c</span> in <span class="hljs-title function_">pa_alsa_profile_set_new</span> <span class="hljs-params">(fname=<span class="hljs-number">0xfffff24fa608</span> <span class="hljs-string">&quot;default.conf&quot;</span>, bonus=<span class="hljs-number">0xaaaaaaae2f68</span>)</span> at modules/alsa/alsa-mixer.c:4588                                   <br>#2  0x0000fffff268bc14 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:849                                                                 <br>#3  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>,                                                        </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#4  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333                                                                  <br>#5  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422                                                                 <br>#6  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464                                                               <br>#7  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481                <br>#8  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789                                                                  <br>#9  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187              <br>#10 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437                        <br>#11 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>,     </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#12 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176        <br>#13 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动将适合的音频配置添加到给定的 `pa_alsa_profile_set` 中。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param ps 要操作的 pa_alsa_profile_set 结构。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">profile_set_add_auto</span><span class="hljs-params">(pa_alsa_profile_set *ps)</span> &#123;<br>    pa_alsa_mapping *m, *n;<br>    <span class="hljs-type">void</span> *m_state, *n_state;<br><br>    pa_assert(ps);<br><br>    <span class="hljs-comment">/* 在这里的顺序很重要：</span><br><span class="hljs-comment">       1) 在尝试其组合之前，先尝试单独的输入和输出，因为如果半双工测试失败，我们不必尝试全双工。</span><br><span class="hljs-comment">       2) 尝试在与该输出组合的输入组合之前，因为在测试之间不会关闭 output_pcm。</span><br><span class="hljs-comment">    */</span><br>    PA_HASHMAP_FOREACH(n, ps-&gt;mappings, n_state)<br>        profile_set_add_auto_pair(ps, <span class="hljs-literal">NULL</span>, n);<br><br>    PA_HASHMAP_FOREACH(m, ps-&gt;mappings, m_state) &#123;<br>        profile_set_add_auto_pair(ps, m, <span class="hljs-literal">NULL</span>);<br><br>        PA_HASHMAP_FOREACH(n, ps-&gt;mappings, n_state)<br>            profile_set_add_auto_pair(ps, m, n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="profile_set_add_auto_pair">profile_set_add_auto_pair</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  profile_set_add_auto_pair (ps=<span class="hljs-number">0xaaaaaab28120</span>, m=<span class="hljs-number">0xaaaaaab28970</span>, n=<span class="hljs-number">0xaaaaaab28970</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">4262</span>                                                           <br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff24dbc5c</span> in <span class="hljs-title function_">profile_set_add_auto</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28120</span>)</span> at modules/alsa/alsa-mixer.c:4326                                                                              <br>#2  0x0000fffff24dcb8c in <span class="hljs-title function_">pa_alsa_profile_set_new</span> <span class="hljs-params">(fname=<span class="hljs-number">0xfffff24fa608</span> <span class="hljs-string">&quot;default.conf&quot;</span>, bonus=<span class="hljs-number">0xaaaaaaae2f68</span>)</span> at modules/alsa/alsa-mixer.c:4588                                   <br>#3  0x0000fffff268bc14 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:849                                                                 <br>#4  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>,                                                        </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#5  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333                                                                  <br>#6  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422                                                                 <br>#7  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464                                                               <br>#8  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481                <br>#9  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789                                                                  <br>#10 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187              <br>#11 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437                        <br>#12 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>,     </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#13 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176        <br>#14 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">profile_set_add_auto_pair</span><span class="hljs-params">(</span><br><span class="hljs-params">        pa_alsa_profile_set *ps,</span><br><span class="hljs-params">        pa_alsa_mapping *m, <span class="hljs-comment">/* output */</span></span><br><span class="hljs-params">        pa_alsa_mapping *n  <span class="hljs-comment">/* input */</span>)</span> &#123;<br><br>    <span class="hljs-type">char</span> *name;<br>    pa_alsa_profile *p;<br><br>    pa_assert(ps);<br>    pa_assert(m || n);<br><br>    <span class="hljs-comment">// 如果映射为输入，不添加配对</span><br>    <span class="hljs-keyword">if</span> (m &amp;&amp; m-&gt;direction == PA_ALSA_DIRECTION_INPUT)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 如果映射为输出，不添加配对</span><br>    <span class="hljs-keyword">if</span> (n &amp;&amp; n-&gt;direction == PA_ALSA_DIRECTION_OUTPUT)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 根据映射创建唯一配对名称</span><br>    <span class="hljs-keyword">if</span> (m &amp;&amp; n)<br>        name = pa_sprintf_malloc(<span class="hljs-string">&quot;output:%s+input:%s&quot;</span>, m-&gt;name, n-&gt;name);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m)<br>        name = pa_sprintf_malloc(<span class="hljs-string">&quot;output:%s&quot;</span>, m-&gt;name);<br>    <span class="hljs-keyword">else</span><br>        name = pa_sprintf_malloc(<span class="hljs-string">&quot;input:%s&quot;</span>, n-&gt;name);<br><br>    <span class="hljs-comment">// 如果已经存在同名的配置，不添加配对</span><br>    <span class="hljs-keyword">if</span> (pa_hashmap_get(ps-&gt;profiles, name)) &#123;<br>        pa_xfree(name);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建新的alsa配置文件配置</span><br>    p = pa_xnew0(pa_alsa_profile, <span class="hljs-number">1</span>);<br>    p-&gt;profile_set = ps;<br>    p-&gt;name = name;<br><br>    <span class="hljs-comment">// 处理输出映射</span><br>    <span class="hljs-keyword">if</span> (m) &#123;<br>        p-&gt;output_name = pa_xstrdup(m-&gt;name);<br>        p-&gt;output_mappings = pa_idxset_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br>        pa_idxset_put(p-&gt;output_mappings, m, <span class="hljs-literal">NULL</span>);<br>        p-&gt;priority += m-&gt;priority * <span class="hljs-number">100</span>;<br>        p-&gt;fallback_output = m-&gt;fallback;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理输入映射</span><br>    <span class="hljs-keyword">if</span> (n) &#123;<br>        p-&gt;input_name = pa_xstrdup(n-&gt;name);<br>        p-&gt;input_mappings = pa_idxset_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br>        pa_idxset_put(p-&gt;input_mappings, n, <span class="hljs-literal">NULL</span>);<br>        p-&gt;priority += n-&gt;priority;<br>        p-&gt;fallback_input = n-&gt;fallback;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加新配置到哈希表</span><br>    pa_hashmap_put(ps-&gt;profiles, p-&gt;name, p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pa_alsa_profile_set_cust_paths">pa_alsa_profile_set_cust_paths</h3><p>将自定义path添加到profile_set哈希映射中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">Breakpoint <span class="hljs-number">33</span>, pa_alsa_profile_set_cust_paths (ps=<span class="hljs-number">0xaaaaaab28270</span>, cust_folder=<span class="hljs-number">0xaaaaaac6a780</span> <span class="hljs-string">&quot;cust/P710&quot;</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">4747</span>                                       <br>warning: Source file is more recent than executable.<br><span class="hljs-number">4747</span>        pa_assert(ps);<br>(gdb) s<br><span class="hljs-number">4748</span>        pa_assert(cust_folder);<br>(gdb) bt<br>#<span class="hljs-number">0</span>  pa_alsa_profile_set_cust_paths (ps=<span class="hljs-number">0xaaaaaab28270</span>, cust_folder=<span class="hljs-number">0xaaaaaac6a780</span> <span class="hljs-string">&quot;cust/P710&quot;</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">4748</span>                                                  <br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff268bcd0</span> in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:868                                                                 <br>#2  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>,                                                        </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#3  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333                                                                  <br>#4  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422                                                                 <br>#5  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464                                                               <br>#6  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481                <br>#7  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789                                                                  <br>#8  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187              <br>#9  0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437                        <br>#10 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>,     </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#11 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176        <br>#12 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br><span class="hljs-params">(gdb)</span> fin<br>Run till <span class="hljs-built_in">exit</span> from #0  <span class="hljs-title function_">pa_alsa_profile_set_cust_paths</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28270</span>, cust_folder=<span class="hljs-number">0xaaaaaac6a780</span> <span class="hljs-string">&quot;cust/P710&quot;</span>)</span> at modules/alsa/alsa-mixer.c:4748                               <br><span class="hljs-params">(  <span class="hljs-number">13.293</span>|  <span class="hljs-number">11.844</span>)</span> D: [pulseaudio][modules/alsa/alsa-mixer.c:4751 <span class="hljs-title function_">pa_alsa_profile_set_cust_paths</span><span class="hljs-params">()</span>] Analyzing directory: &#x27;/usr/share/pulseaudio/alsa-mixer/paths&#x27;                <br><span class="hljs-params">(  <span class="hljs-number">13.293</span>|   <span class="hljs-number">0.000</span>)</span> D: [pulseaudio][modules/alsa/alsa-mixer.c:4755 <span class="hljs-title function_">pa_alsa_profile_set_cust_paths</span><span class="hljs-params">()</span>] open directory: &#x27;/usr/share/pulseaudio/alsa-mixer/paths/cust/P710&#x27;           <br><span class="hljs-params">(  <span class="hljs-number">13.293</span>|   <span class="hljs-number">0.000</span>)</span> W: [pulseaudio][modules/alsa/alsa-mixer.c:4758 <span class="hljs-title function_">pa_alsa_profile_set_cust_paths</span><span class="hljs-params">()</span>] Failed to open /usr/share/pulseaudio/alsa-mixer/paths/cust/P710 <br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pa_alsa_profile_set_cust_paths</span><span class="hljs-params">(pa_alsa_profile_set *ps, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cust_folder)</span> &#123;<br><br>    DIR *dir;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">ent</span>;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *paths_dir;<br>    <span class="hljs-type">char</span> *fn;<br>    <span class="hljs-type">char</span> *key;<br>    <span class="hljs-type">char</span> *value;<br><br>    pa_assert(ps);<br>    pa_assert(cust_folder);<br><br>    <span class="hljs-comment">// 获取默认路径目录</span><br>    paths_dir = get_default_paths_dir();<br>    pa_log_debug(<span class="hljs-string">&quot;Analyzing directory: &#x27;%s&#x27;&quot;</span>, paths_dir);<br><br>    <span class="hljs-comment">// 构建路径名称</span><br>    fn = pa_maybe_prefix_path(cust_folder, paths_dir);<br><br>    pa_log_debug(<span class="hljs-string">&quot;open directory: &#x27;%s&#x27;&quot;</span>, fn);<br><br>    <span class="hljs-comment">// 打开目录并遍历文件</span><br>    <span class="hljs-keyword">if</span> (!(dir = opendir(fn))) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;Failed to open %s&quot;</span>, fn);<br>        pa_xfree(fn);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> ((ent = readdir(dir)) != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 忽略 . 和 .. 目录</span><br>        <span class="hljs-keyword">if</span> (pa_streq(ent-&gt;d_name, <span class="hljs-string">&quot;.&quot;</span>) || pa_streq(ent-&gt;d_name, <span class="hljs-string">&quot;..&quot;</span>))<br>            <span class="hljs-keyword">continue</span>;<br>        pa_log_debug(<span class="hljs-string">&quot;Analyzing file: &#x27;%s&#x27;&quot;</span>, ent-&gt;d_name);<br><br>        <span class="hljs-comment">// 使用文件名作为键，构建完整路径作为值</span><br>        key = pa_xstrndup(ent-&gt;d_name, <span class="hljs-built_in">strlen</span>(ent-&gt;d_name));<br>        value = pa_maybe_prefix_path(key, cust_folder);<br><br>        <span class="hljs-comment">// 将路径添加到自定义路径的哈希映射中</span><br>        pa_hashmap_put(ps-&gt;cust_paths, key, value);<br>        pa_log_debug(<span class="hljs-string">&quot;ps-&gt;cust_paths file: &#x27;%s&#x27;, &#x27;%s&#x27;&quot;</span>, key, value);<br><br>    &#125;<br>    closedir(dir);<br><br>    pa_xfree(fn);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pa_alsa_profile_set_probe">pa_alsa_profile_set_probe</h3><p>探测pcm是否可用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">#<span class="hljs-number">0</span>  pa_alsa_profile_set_probe (ps=<span class="hljs-number">0xaaaaaab28120</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)<br>    at modules/alsa/alsa-mixer.c:<span class="hljs-number">4787</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff268bd10</span> in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#2  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#3  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333<br>#4  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422<br>#5  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464<br>#6  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#7  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789<br>#8  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#9  0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#10 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#11 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#12 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pa_alsa_profile_set_probe</span><span class="hljs-params">(</span><br><span class="hljs-params">        pa_alsa_profile_set *ps,               <span class="hljs-comment">// ALSA 音频配置集合</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *dev_id,                    <span class="hljs-comment">// 设备标识符</span></span><br><span class="hljs-params">        <span class="hljs-type">const</span> pa_sample_spec *ss,               <span class="hljs-comment">// 采样规格</span></span><br><span class="hljs-params">        <span class="hljs-type">unsigned</span> default_n_fragments,           <span class="hljs-comment">// 默认分片数</span></span><br><span class="hljs-params">        <span class="hljs-type">unsigned</span> default_fragment_size_msec)</span> &#123;  <span class="hljs-comment">// 默认分片大小（毫秒）</span><br><br>    <span class="hljs-type">bool</span> found_output = <span class="hljs-literal">false</span>, found_input = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 是否找到输出和输入配置</span><br><br>    pa_alsa_profile *p, *last = <span class="hljs-literal">NULL</span>;      <span class="hljs-comment">// 当前配置和上一个配置</span><br>    pa_alsa_profile **pp, **probe_order;   <span class="hljs-comment">// 配置探测顺序数组</span><br>    pa_alsa_mapping *m;                     <span class="hljs-comment">// ALSA 映射</span><br>    pa_hashmap *broken_inputs, *broken_outputs, *used_paths;  <span class="hljs-comment">// 存储损坏输入、损坏输出和已使用路径的哈希映射</span><br>    pa_alsa_mapping *selected_fallback_input = <span class="hljs-literal">NULL</span>, *selected_fallback_output = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 选定的回退输入和输出映射</span><br><br>    pa_assert(ps);           <span class="hljs-comment">// 断言配置集合存在</span><br>    pa_assert(dev_id);       <span class="hljs-comment">// 断言设备标识符存在</span><br>    pa_assert(ss);           <span class="hljs-comment">// 断言采样规格存在</span><br><br>    <span class="hljs-comment">// 创建哈希映射来存储损坏的输入、输出和已使用的路径</span><br>    broken_inputs = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br>    broken_outputs = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br>    used_paths = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br><br>    <span class="hljs-comment">// 创建用于指示探测顺序的 probe_order 数组</span><br>    pp = probe_order = pa_xnew0(pa_alsa_profile *, pa_hashmap_size(ps-&gt;profiles) + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 将配置按一定的优先级顺序添加到探测顺序中</span><br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    pp += add_profiles_to_probe(pp, ps-&gt;profiles, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// 遍历探测顺序中的配置</span><br>    <span class="hljs-keyword">for</span> (pp = probe_order; *pp; pp++) &#123;<br>        <span class="hljs-type">uint32_t</span> idx;<br>        p = *pp;<br><br>        <span class="hljs-comment">// 跳过已经找到的回退配置，但仍然探测已选的回退配置</span><br>        <span class="hljs-keyword">if</span> (found_input &amp;&amp; p-&gt;fallback_input)<br>            <span class="hljs-keyword">if</span> (selected_fallback_input == <span class="hljs-literal">NULL</span> || pa_idxset_get_by_index(p-&gt;input_mappings, <span class="hljs-number">0</span>) != selected_fallback_input)<br>                <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (found_output &amp;&amp; p-&gt;fallback_output)<br>            <span class="hljs-keyword">if</span> (selected_fallback_output == <span class="hljs-literal">NULL</span> || pa_idxset_get_by_index(p-&gt;output_mappings, <span class="hljs-number">0</span>) != selected_fallback_output)<br>                <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-comment">// 跳过已经标记为支持的配置</span><br>        <span class="hljs-keyword">if</span> (!p-&gt;supported) &#123;<br>            <span class="hljs-comment">// 最终化配置探测</span><br>            profile_finalize_probing(last, p);<br>            p-&gt;supported = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 检查输出映射是否能够打开</span><br>            <span class="hljs-keyword">if</span> (p-&gt;output_mappings) &#123;<br>                PA_IDXSET_FOREACH(m, p-&gt;output_mappings, idx) &#123;<br>                    <span class="hljs-keyword">if</span> (pa_hashmap_get(broken_outputs, m) == m) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        pa_log_debug(<span class="hljs-string">&quot;Skipping profile %s - will not be able to open output:%s&quot;</span>, p-&gt;name, m-&gt;name);<br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 检查输入映射是否能够打开</span><br>            <span class="hljs-keyword">if</span> (p-&gt;input_mappings &amp;&amp; p-&gt;supported) &#123;<br>                PA_IDXSET_FOREACH(m, p-&gt;input_mappings, idx) &#123;<br>                    <span class="hljs-keyword">if</span> (pa_hashmap_get(broken_inputs, m) == m) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        pa_log_debug(<span class="hljs-string">&quot;Skipping profile %s - will not be able to open input:%s&quot;</span>, p-&gt;name, m-&gt;name);<br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (p-&gt;supported)<br>                pa_log_debug(<span class="hljs-string">&quot;Looking at profile %s&quot;</span>, p-&gt;name);<br><br>            <span class="hljs-comment">// 检查是否可以打开所有新的映射</span><br>            <span class="hljs-keyword">if</span> (p-&gt;output_mappings &amp;&amp; p-&gt;supported)<br>                PA_IDXSET_FOREACH(m, p-&gt;output_mappings, idx) &#123;<br>                    <span class="hljs-comment">// 检查是否已经打开</span><br>                    <span class="hljs-keyword">if</span> (m-&gt;output_pcm)<br>                        <span class="hljs-keyword">continue</span>;<br><br>                    <span class="hljs-comment">// 尝试打开 PCM 设备</span><br>                    pa_log_debug(<span class="hljs-string">&quot;Checking for playback on %s (%s)&quot;</span>, m-&gt;description, m-&gt;name);<br>                    <span class="hljs-keyword">if</span> (!(m-&gt;output_pcm = mapping_open_pcm(m, ss, dev_id, m-&gt;exact_channels,<br>                                                           SND_PCM_STREAM_PLAYBACK,<br>                                                           default_n_fragments,<br>                                                           default_fragment_size_msec))) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">if</span> (pa_idxset_size(p-&gt;output_mappings) == <span class="hljs-number">1</span> &amp;&amp;<br>                            ((!p-&gt;input_mappings) || pa_idxset_size(p-&gt;input_mappings) == <span class="hljs-number">0</span>)) &#123;<br>                            pa_log_debug(<span class="hljs-string">&quot;Caching failure to open output:%s&quot;</span>, m-&gt;name);<br>                            pa_hashmap_put(broken_outputs, m, m);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (m-&gt;hw_device_index &lt; <span class="hljs-number">0</span>)<br>                        mapping_query_hw_device(m, m-&gt;output_pcm);<br>                &#125;<br><br>            <span class="hljs-comment">// 检查输入映射是否能够打开</span><br>            <span class="hljs-keyword">if</span> (p-&gt;input_mappings &amp;&amp; p-&gt;supported)<br>                PA_IDXSET_FOREACH(m, p-&gt;input_mappings, idx) &#123;<br>                    <span class="hljs-comment">// 检查是否已经打开</span><br>                    <span class="hljs-keyword">if</span> (m-&gt;input_pcm)<br>                        <span class="hljs-keyword">continue</span>;<br><br>                    <span class="hljs-comment">// 尝试打开 PCM 设备</span><br>                    pa_log_debug(<span class="hljs-string">&quot;Checking for recording on %s (%s)&quot;</span>, m-&gt;description, m-&gt;name);<br>                    <span class="hljs-keyword">if</span> (!(m-&gt;input_pcm = mapping_open_pcm(m, ss, dev_id, m-&gt;exact_channels,<br>                                                          SND_PCM_STREAM_CAPTURE,<br>                                                          default_n_fragments,<br>                                                          default_fragment_size_msec))) &#123;<br>                        <span class="hljs-comment">// 标记为不支持的配置</span><br>                        p-&gt;supported = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">if</span> (pa_idxset_size(p-&gt;input_mappings) == <span class="hljs-number">1</span> &amp;&amp;<br>                            ((!p-&gt;output_mappings) || pa_idxset_size(p-&gt;output_mappings) == <span class="hljs-number">0</span>)) &#123;<br>                            pa_log_debug(<span class="hljs-string">&quot;Caching failure to open input:%s&quot;</span>, m-&gt;name);<br>                            pa_hashmap_put(broken_inputs, m, m);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (m-&gt;hw_device_index &lt; <span class="hljs-number">0</span>)<br>                        mapping_query_hw_device(m, m-&gt;input_pcm);<br>                &#125;<br><br>            last = p;<br><br>            <span class="hljs-keyword">if</span> (!p-&gt;supported)<br>                <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        pa_log_debug(<span class="hljs-string">&quot;Profile %s supported.&quot;</span>, p-&gt;name);<br><br>        <span class="hljs-comment">// 标记已找到输出和输入配置</span><br>        <span class="hljs-keyword">if</span> (p-&gt;output_mappings)<br>            PA_IDXSET_FOREACH(m, p-&gt;output_mappings, idx)<br>                <span class="hljs-keyword">if</span> (m-&gt;output_pcm) &#123;<br>                    found_output = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span> (p-&gt;fallback_output &amp;&amp; selected_fallback_output == <span class="hljs-literal">NULL</span>) &#123;<br>                        selected_fallback_output = m;<br>                    &#125;<br>                    mapping_paths_probe(m, p, PA_ALSA_DIRECTION_OUTPUT, used_paths);<br>                &#125;<br><br>        <span class="hljs-keyword">if</span> (p-&gt;input_mappings)<br>            PA_IDXSET_FOREACH(m, p-&gt;input_mappings, idx)<br>                <span class="hljs-keyword">if</span> (m-&gt;input_pcm) &#123;<br>                    found_input = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span> (p-&gt;fallback_input &amp;&amp; selected_fallback_input == <span class="hljs-literal">NULL</span>) &#123;<br>                        selected_fallback_input = m;<br>                    &#125;<br>                    mapping_paths_probe(m, p, PA_ALSA_DIRECTION_INPUT, used_paths);<br>                &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 最终化配置探测，清理资源</span><br>    profile_finalize_probing(last, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 丢弃不支持的配置</span><br>    pa_alsa_profile_set_drop_unsupported(ps);<br><br>    <span class="hljs-comment">// 丢弃未使用的路径</span><br>    paths_drop_unused(ps-&gt;input_paths, used_paths);<br>    paths_drop_unused(ps-&gt;output_paths, used_paths);<br><br>    <span class="hljs-comment">// 释放资源</span><br>    pa_hashmap_free(broken_inputs);<br>    pa_hashmap_free(broken_outputs);<br>    pa_hashmap_free(used_paths);<br>    pa_xfree(probe_order);<br><br>    ps-&gt;probed = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标记为已完成探测</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="add_profiles_to_probe">add_profiles_to_probe</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  add_profiles_to_probe (<span class="hljs-built_in">list</span>=<span class="hljs-number">0xaaaaaac6bd50</span>, profiles=<span class="hljs-number">0xaaaaaab292a0</span>, fallback_output=<span class="hljs-literal">false</span>, fallback_input=<span class="hljs-literal">false</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">4705</span>                           <br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff24dd90c</span> in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab280c0</span>, dev_id=<span class="hljs-number">0xaaaaaab123f0</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span>       <br>    at modules/alsa/alsa-mixer.c:4809<br>#2  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f3f0</span>)</span> at modules/alsa/module-alsa-card.c:871                                                                 <br>#3  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>,                                                        </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaade630</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#4  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab036a0</span>, d=<span class="hljs-number">0xaaaaaab07190</span>)</span> at modules/module-udev-detect.c:333                                                                  <br>#5  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab036a0</span>, dev=<span class="hljs-number">0xaaaaaaadda70</span>)</span> at modules/module-udev-detect.c:422                                                                 <br>#6  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab036a0</span>, dev=<span class="hljs-number">0xaaaaaaadda70</span>)</span> at modules/module-udev-detect.c:464                                                               <br>#7  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab036a0</span>, path=<span class="hljs-number">0xaaaaaab18aa0</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481                <br>#8  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00dc0</span>)</span> at modules/module-udev-detect.c:789                                                                  <br>#9  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab01150</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187              <br>#10 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab01170</span>, buf=<span class="hljs-number">0xaaaaaaadbed0</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437                        <br>#11 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadbed0</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>,     </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#12 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadbed0</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176        <br>#13 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add_profiles_to_probe</span><span class="hljs-params">(</span><br><span class="hljs-params">        pa_alsa_profile **<span class="hljs-built_in">list</span>,       <span class="hljs-comment">// 存储配置指针的列表</span></span><br><span class="hljs-params">        pa_hashmap *profiles,          <span class="hljs-comment">// ALSA 音频配置哈希映射</span></span><br><span class="hljs-params">        <span class="hljs-type">bool</span> fallback_output,          <span class="hljs-comment">// 是否是回退输出配置</span></span><br><span class="hljs-params">        <span class="hljs-type">bool</span> fallback_input)</span> &#123;         <span class="hljs-comment">// 是否是回退输入配置</span><br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;                       <span class="hljs-comment">// 配置计数器</span><br>    <span class="hljs-type">void</span> *state;<br>    pa_alsa_profile *p;<br><br>    <span class="hljs-comment">// 遍历配置哈希映射，根据回退设置筛选配置</span><br>    PA_HASHMAP_FOREACH(p, profiles, state)<br>        <span class="hljs-keyword">if</span> (p-&gt;fallback_input == fallback_input &amp;&amp; p-&gt;fallback_output == fallback_output) &#123;<br>            *<span class="hljs-built_in">list</span> = p;                 <span class="hljs-comment">// 将符合条件的配置指针添加到列表中</span><br>            <span class="hljs-built_in">list</span>++;<br>            i++;<br>        &#125;<br>    <span class="hljs-keyword">return</span> i;                         <span class="hljs-comment">// 返回筛选出的配置数量</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapping_open_pcm">mapping_open_pcm</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  mapping_open_pcm (m=<span class="hljs-number">0xaaaaaab28ba0</span>, ss=<span class="hljs-number">0xaaaaaaae30fc</span>, dev_id=<span class="hljs-number">0xaaaaaab12550</span> <span class="hljs-string">&quot;0&quot;</span>, exact_channels=<span class="hljs-literal">true</span>, mode=<span class="hljs-number">1</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)<br>    at modules/alsa/alsa-mixer.c:<span class="hljs-number">4657</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff24ddf28</span> in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28350</span>, dev_id=<span class="hljs-number">0xaaaaaab12550</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae30fc</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span><br>    at modules/alsa/alsa-mixer.c:4891<br>#2  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f550</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#3  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2fd0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd690</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#4  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03800</span>, d=<span class="hljs-number">0xaaaaaab072f0</span>)</span> at modules/module-udev-detect.c:333<br>#5  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03800</span>, dev=<span class="hljs-number">0xaaaaaaaddee0</span>)</span> at modules/module-udev-detect.c:422<br>#6  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03800</span>, dev=<span class="hljs-number">0xaaaaaaaddee0</span>)</span> at modules/module-udev-detect.c:464<br>#7  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03800</span>, path=<span class="hljs-number">0xaaaaaab18c00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#8  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00f20</span>)</span> at modules/module-udev-detect.c:789<br>#9  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2fd0</span>, name=<span class="hljs-number">0xaaaaaab012b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#10 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2fd0</span>, t=<span class="hljs-number">0xaaaaaab012d0</span>, buf=<span class="hljs-number">0xaaaaaaadb270</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#11 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2fd0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadb270</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#12 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2fd0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadb270</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#13 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">snd_pcm_t</span>* <span class="hljs-title function_">mapping_open_pcm</span><span class="hljs-params">(pa_alsa_mapping *m,</span><br><span class="hljs-params">                                   <span class="hljs-type">const</span> pa_sample_spec *ss,</span><br><span class="hljs-params">                                   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *dev_id,</span><br><span class="hljs-params">                                   <span class="hljs-type">bool</span> exact_channels,</span><br><span class="hljs-params">                                   <span class="hljs-type">int</span> mode,</span><br><span class="hljs-params">                                   <span class="hljs-type">unsigned</span> default_n_fragments,</span><br><span class="hljs-params">                                   <span class="hljs-type">unsigned</span> default_fragment_size_msec)</span> &#123;<br><br>    <span class="hljs-type">snd_pcm_t</span>* handle;<br>    pa_sample_spec try_ss = *ss;<br>    pa_channel_map try_map = m-&gt;channel_map;<br>    <span class="hljs-type">snd_pcm_uframes_t</span> try_period_size, try_buffer_size;<br><br>    <span class="hljs-comment">// 尝试使用匹配通道数的采样规格</span><br>    try_ss.channels = try_map.channels;<br><br>    <span class="hljs-comment">// 计算尝试的周期大小和缓冲区大小</span><br>    try_period_size =<br>        pa_usec_to_bytes(default_fragment_size_msec * PA_USEC_PER_MSEC, &amp;try_ss) /<br>        pa_frame_size(&amp;try_ss);<br>    try_buffer_size = default_n_fragments * try_period_size;<br><br>    <span class="hljs-comment">// 使用模板尝试打开 ALSA 设备</span><br>    handle = pa_alsa_open_by_template(<br>                              m-&gt;device_strings, dev_id, <span class="hljs-literal">NULL</span>, &amp;try_ss,<br>                              &amp;try_map, mode, &amp;try_period_size,<br>                              &amp;try_buffer_size, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, exact_channels);<br><br>    <span class="hljs-comment">// 如果成功打开设备并且通道数有变化，则更新通道映射</span><br>    <span class="hljs-keyword">if</span> (handle &amp;&amp; !exact_channels &amp;&amp; m-&gt;channel_map.channels != try_map.channels) &#123;<br>        <span class="hljs-type">char</span> buf[PA_CHANNEL_MAP_SNPRINT_MAX];<br>        pa_log_debug(<span class="hljs-string">&quot;Channel map for mapping &#x27;%s&#x27; permanently changed to &#x27;%s&#x27;&quot;</span>, m-&gt;name,<br>                     pa_channel_map_snprint(buf, <span class="hljs-keyword">sizeof</span>(buf), &amp;try_map));<br>        m-&gt;channel_map = try_map;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> handle;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="pa_alsa_open_by_template">pa_alsa_open_by_template</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  pa_alsa_open_by_template (template=<span class="hljs-number">0xaaaaaab154c0</span>, dev_id=<span class="hljs-number">0xaaaaaab125e0</span> <span class="hljs-string">&quot;0&quot;</span>, dev=<span class="hljs-number">0x0</span>, ss=<span class="hljs-number">0xffffffffc940</span>, <span class="hljs-built_in">map</span>=<span class="hljs-number">0xffffffffc950</span>, mode=<span class="hljs-number">1</span>, period_size=<span class="hljs-number">0xffffffffc928</span>, <br>    buffer_size=<span class="hljs-number">0xffffffffc930</span>, tsched_size=<span class="hljs-number">0</span>, use_mmap=<span class="hljs-number">0x0</span>, use_tsched=<span class="hljs-number">0x0</span>, require_exact_channel_number=<span class="hljs-literal">true</span>) at modules/alsa/alsa-util.c:<span class="hljs-number">791</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff24dcfd0</span> in <span class="hljs-title function_">mapping_open_pcm</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab28b00</span>, ss=<span class="hljs-number">0xaaaaaaae30fc</span>, dev_id=<span class="hljs-number">0xaaaaaab125e0</span> <span class="hljs-string">&quot;0&quot;</span>, exact_channels=<span class="hljs-literal">true</span>, mode=<span class="hljs-number">1</span>, default_n_fragments=<span class="hljs-number">4</span>, </span><br><span class="hljs-params">    default_fragment_size_msec=<span class="hljs-number">25</span>)</span> at modules/alsa/alsa-mixer.c:4671<br>#2  0x0000fffff24ddf28 in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab282b0</span>, dev_id=<span class="hljs-number">0xaaaaaab125e0</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae30fc</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span><br>    at modules/alsa/alsa-mixer.c:4891<br>#3  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f5e0</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#4  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2fd0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd9b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#5  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03890</span>, d=<span class="hljs-number">0xaaaaaab07380</span>)</span> at modules/module-udev-detect.c:333<br>#6  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03890</span>, dev=<span class="hljs-number">0xaaaaaaaddcd0</span>)</span> at modules/module-udev-detect.c:422<br>#7  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03890</span>, dev=<span class="hljs-number">0xaaaaaaaddcd0</span>)</span> at modules/module-udev-detect.c:464<br>#8  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03890</span>, path=<span class="hljs-number">0xaaaaaab18c90</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#9  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00fb0</span>)</span> at modules/module-udev-detect.c:789<br>#10 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2fd0</span>, name=<span class="hljs-number">0xaaaaaab01340</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#11 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2fd0</span>, t=<span class="hljs-number">0xaaaaaab01360</span>, buf=<span class="hljs-number">0xaaaaaaad7e70</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#12 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2fd0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaad7e70</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#13 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2fd0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaad7e70</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#14 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">snd_pcm_t</span> *<span class="hljs-title function_">pa_alsa_open_by_template</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-type">char</span> **template,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *dev_id,</span><br><span class="hljs-params">        <span class="hljs-type">char</span> **dev,</span><br><span class="hljs-params">        pa_sample_spec *ss,</span><br><span class="hljs-params">        pa_channel_map* <span class="hljs-built_in">map</span>,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> mode,</span><br><span class="hljs-params">        <span class="hljs-type">snd_pcm_uframes_t</span> *period_size,</span><br><span class="hljs-params">        <span class="hljs-type">snd_pcm_uframes_t</span> *buffer_size,</span><br><span class="hljs-params">        <span class="hljs-type">snd_pcm_uframes_t</span> tsched_size,</span><br><span class="hljs-params">        <span class="hljs-type">bool</span> *use_mmap,</span><br><span class="hljs-params">        <span class="hljs-type">bool</span> *use_tsched,</span><br><span class="hljs-params">        <span class="hljs-type">bool</span> require_exact_channel_number)</span> &#123;<br><br>    <span class="hljs-type">snd_pcm_t</span> *pcm_handle;<br>    <span class="hljs-type">char</span> **i;<br><br>    <span class="hljs-comment">// 遍历模板列表尝试打开 ALSA 设备</span><br>    <span class="hljs-keyword">for</span> (i = template; *i; i++) &#123;<br>        <span class="hljs-type">char</span> *d;<br><br>        <span class="hljs-comment">// 替换模板中的占位符，最终d指向了某个pcm设备，如hw0</span><br>        d = pa_replace(*i, <span class="hljs-string">&quot;%f&quot;</span>, dev_id);<br><br>        <span class="hljs-comment">// 通过设备字符串打开 ALSA 设备</span><br>        pcm_handle = pa_alsa_open_by_device_string(<br>                d,<br>                dev,<br>                ss,<br>                <span class="hljs-built_in">map</span>,<br>                mode,<br>                period_size,<br>                buffer_size,<br>                tsched_size,<br>                use_mmap,<br>                use_tsched,<br>                require_exact_channel_number);<br><br>        pa_xfree(d);<br><br>        <span class="hljs-comment">// 如果成功打开设备，则返回 PCM 句柄</span><br>        <span class="hljs-keyword">if</span> (pcm_handle)<br>            <span class="hljs-keyword">return</span> pcm_handle;<br>    &#125;<br><br>    <span class="hljs-comment">// 未能成功打开设备，返回 NULL</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="pa_alsa_open_by_device_string">pa_alsa_open_by_device_string</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  pa_alsa_open_by_device_string (device=<span class="hljs-number">0xaaaaaac6a790</span> <span class="hljs-string">&quot;hw:0&quot;</span>, dev=<span class="hljs-number">0x0</span>, ss=<span class="hljs-number">0xffffffffc940</span>, <span class="hljs-built_in">map</span>=<span class="hljs-number">0xffffffffc950</span>, mode=<span class="hljs-number">1</span>, period_size=<span class="hljs-number">0xffffffffc928</span>, buffer_size=<span class="hljs-number">0xffffffffc930</span>,  <br>    tsched_size=<span class="hljs-number">0</span>, use_mmap=<span class="hljs-number">0x0</span>, use_tsched=<span class="hljs-number">0x0</span>, require_exact_channel_number=<span class="hljs-literal">true</span>) at modules/alsa/alsa-util.c:<span class="hljs-number">686</span>                                                               <br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000fffff24bf87c</span> in <span class="hljs-title function_">pa_alsa_open_by_template</span> <span class="hljs-params">(template=<span class="hljs-number">0xaaaaaab15330</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, dev=<span class="hljs-number">0x0</span>, ss=<span class="hljs-number">0xffffffffc940</span>, <span class="hljs-built_in">map</span>=<span class="hljs-number">0xffffffffc950</span>, mode=<span class="hljs-number">1</span>,                   </span><br><span class="hljs-params">    period_size=<span class="hljs-number">0xffffffffc928</span>, buffer_size=<span class="hljs-number">0xffffffffc930</span>, tsched_size=<span class="hljs-number">0</span>, use_mmap=<span class="hljs-number">0x0</span>, use_tsched=<span class="hljs-number">0x0</span>, require_exact_channel_number=<span class="hljs-literal">true</span>)</span> at modules/alsa/alsa-util.c:796       <br>#2  0x0000fffff24dcfd0 in <span class="hljs-title function_">mapping_open_pcm</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab28970</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, exact_channels=<span class="hljs-literal">true</span>, mode=<span class="hljs-number">1</span>, default_n_fragments=<span class="hljs-number">4</span>,                   </span><br><span class="hljs-params">    default_fragment_size_msec=<span class="hljs-number">25</span>)</span> at modules/alsa/alsa-mixer.c:4671<br>#3  0x0000fffff24ddf28 in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28120</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span>       <br>    at modules/alsa/alsa-mixer.c:4891<br>#4  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871                                                                 <br>#5  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>,                                                        </span><br><span class="hljs-params">    argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#6  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333                                                                  <br>#7  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422                                                                 <br>#8  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464                                                               <br>#9  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481                <br>#10 0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789                                                                  <br>#11 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187              <br>#12 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437                        <br>#13 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>,     </span><br><span class="hljs-params">    ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#14 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176        <br>#15 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">snd_pcm_t</span> *<span class="hljs-title function_">pa_alsa_open_by_device_string</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *device,</span><br><span class="hljs-params">        <span class="hljs-type">char</span> **dev,</span><br><span class="hljs-params">        pa_sample_spec *ss,</span><br><span class="hljs-params">        pa_channel_map* <span class="hljs-built_in">map</span>,</span><br><span class="hljs-params">        <span class="hljs-type">int</span> mode,</span><br><span class="hljs-params">        <span class="hljs-type">snd_pcm_uframes_t</span> *period_size,</span><br><span class="hljs-params">        <span class="hljs-type">snd_pcm_uframes_t</span> *buffer_size,</span><br><span class="hljs-params">        <span class="hljs-type">snd_pcm_uframes_t</span> tsched_size,</span><br><span class="hljs-params">        <span class="hljs-type">bool</span> *use_mmap,</span><br><span class="hljs-params">        <span class="hljs-type">bool</span> *use_tsched,</span><br><span class="hljs-params">        <span class="hljs-type">bool</span> require_exact_channel_number)</span> &#123;<br><br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">char</span> *d;<br>    <span class="hljs-type">snd_pcm_t</span> *pcm_handle;<br>    <span class="hljs-type">bool</span> reformat = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 断言输入参数不为空</span><br>    pa_assert(device);<br>    pa_assert(ss);<br>    pa_assert(<span class="hljs-built_in">map</span>);<br><br>    d = pa_xstrdup(device);<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        pa_log_debug(<span class="hljs-string">&quot;Trying %s %s SND_PCM_NO_AUTO_FORMAT ...&quot;</span>, d, reformat ? <span class="hljs-string">&quot;without&quot;</span> : <span class="hljs-string">&quot;with&quot;</span>);<br><br>        <span class="hljs-comment">// 尝试打开 ALSA 设备，此函数位于/usr/include/alsa/pcm.h</span><br>        <span class="hljs-keyword">if</span> ((err = snd_pcm_open(&amp;pcm_handle, d, mode,<br>                                SND_PCM_NONBLOCK|<br>                                SND_PCM_NO_AUTO_RESAMPLE|<br>                                SND_PCM_NO_AUTO_CHANNELS|<br>                                (reformat ? <span class="hljs-number">0</span> : SND_PCM_NO_AUTO_FORMAT))) &lt; <span class="hljs-number">0</span>) &#123;<br>            pa_log_info(<span class="hljs-string">&quot;Error opening PCM device %s: %s&quot;</span>, d, pa_alsa_strerror(err));<br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br><br>        pa_log_debug(<span class="hljs-string">&quot;Managed to open %s&quot;</span>, d);<br><br>        <span class="hljs-comment">// 尝试设置硬件参数</span><br>        <span class="hljs-keyword">if</span> ((err = pa_alsa_set_hw_params(<br>                     pcm_handle,<br>                     ss,<br>                     period_size,<br>                     buffer_size,<br>                     tsched_size,<br>                     use_mmap,<br>                     use_tsched,<br>                     require_exact_channel_number)) &lt; <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (!reformat) &#123;<br>                reformat = <span class="hljs-literal">true</span>;<br><br>                snd_pcm_close(pcm_handle);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 尝试通过插件打开设备</span><br>            <span class="hljs-keyword">if</span> (!pa_startswith(d, <span class="hljs-string">&quot;plug:&quot;</span>) &amp;&amp; !pa_startswith(d, <span class="hljs-string">&quot;plughw:&quot;</span>)) &#123;<br>                <span class="hljs-type">char</span> *t;<br><br>                t = pa_sprintf_malloc(<span class="hljs-string">&quot;plug:%s&quot;</span>, d);<br>                pa_xfree(d);<br>                d = t;<br><br>                reformat = <span class="hljs-literal">false</span>;<br><br>                snd_pcm_close(pcm_handle);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            pa_log_info(<span class="hljs-string">&quot;Failed to set hardware parameters on %s: %s&quot;</span>, d, pa_alsa_strerror(err));<br>            snd_pcm_close(pcm_handle);<br><br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br><br>        <span class="hljs-comment">// 检查通道数是否超过最大支持数</span><br>        <span class="hljs-keyword">if</span> (ss-&gt;channels &gt; PA_CHANNELS_MAX) &#123;<br>            pa_log(<span class="hljs-string">&quot;Device %s has %u channels, but PulseAudio supports only %u channels. Unable to use the device.&quot;</span>,<br>                   d, ss-&gt;channels, PA_CHANNELS_MAX);<br>            snd_pcm_close(pcm_handle);<br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br><br>        <span class="hljs-comment">// 根据是否传递了 dev 参数设置设备名</span><br>        <span class="hljs-keyword">if</span> (dev)<br>            *dev = d;<br>        <span class="hljs-keyword">else</span><br>            pa_xfree(d);<br><br>        <span class="hljs-comment">// 如果通道数不匹配，进行通道映射的扩展</span><br>        <span class="hljs-keyword">if</span> (ss-&gt;channels != <span class="hljs-built_in">map</span>-&gt;channels)<br>            pa_channel_map_init_extend(<span class="hljs-built_in">map</span>, ss-&gt;channels, PA_CHANNEL_MAP_ALSA);<br><br>        <span class="hljs-keyword">return</span> pcm_handle;<br>    &#125;<br><br>fail:<br>    pa_xfree(d);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230817170922.png" alt="" /><figcaption>snd_pcm_open</figcaption></figure><h4 id="mapping_query_hw_device">mapping_query_hw_device</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  <span class="hljs-number">0x0000fffff24dd348</span> in <span class="hljs-title function_">mapping_query_hw_device</span> <span class="hljs-params">(mapping=<span class="hljs-number">0xaaaaaab2c360</span>, pcm=<span class="hljs-number">0xaaaaaacb4360</span>)</span> at modules/alsa/alsa-mixer.c:4719<br>#1  0x0000fffff24ddff4 in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28120</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span><br>    at modules/alsa/alsa-mixer.c:4905<br>#2  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#3  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span><br>    <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#4  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333<br>#5  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422<br>#6  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464<br>#7  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#8  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789<br>#9  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#10 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#11 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><br>    <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#12 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#13 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mapping_query_hw_device</span><span class="hljs-params">(pa_alsa_mapping *mapping, <span class="hljs-type">snd_pcm_t</span> *pcm)</span> &#123;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-type">snd_pcm_info_t</span>* pcm_info;<br>    snd_pcm_info_alloca(&amp;pcm_info);<br><br>    <span class="hljs-comment">// 查询 PCM 设备信息</span><br>    r = snd_pcm_info(pcm, pcm_info);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log(<span class="hljs-string">&quot;映射 %s：snd_pcm_info() 失败 %s：&quot;</span>, mapping-&gt;name, pa_alsa_strerror(r));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* <span class="hljs-doctag">XXX:</span> 不清楚 snd_pcm_info_get_device() 在设备不由硬件支持或由多个硬件设备支持的情况下的行为。</span><br><span class="hljs-comment">     * 然而，我们只在 HDMI 设备中使用 hw_device_index，对于这些设备，返回值应始终有效，</span><br><span class="hljs-comment">     * 因此这不应该是一个重大问题。 */</span><br>    <span class="hljs-comment">// 获取硬件设备索引并设置给映射结构</span><br>    mapping-&gt;hw_device_index = snd_pcm_info_get_device(pcm_info);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapping_paths_probe">mapping_paths_probe</h4><p><code>mapping_paths_probe</code>中会处理<code>/usr/share/pulseaudio/alsa-mixer/paths/</code>，见下文。</p><h2 id="usrsharepulseaudioalsa-mixerpaths">/usr/share/pulseaudio/alsa-mixer/paths/</h2><h3 id="mapping_paths_probe-1">mapping_paths_probe</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  <span class="hljs-number">0x0000fffff24db120</span> in <span class="hljs-title function_">mapping_paths_probe</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c360</span>, profile=<span class="hljs-number">0xaaaaaab408a0</span>, direction=PA_ALSA_DIRECTION_INPUT, used_paths=<span class="hljs-number">0xaaaaaac6b970</span>)</span><br>    at modules/alsa/alsa-mixer.c:4116<br>#1  0x0000fffff24de19c in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28120</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span><br>    at modules/alsa/alsa-mixer.c:4933<br>#2  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#3  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span><br>    <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#4  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333<br>#5  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422<br>#6  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464<br>#7  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#8  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789<br>#9  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#10 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#11 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><br>    <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#12 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#13 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 在指定映射中探测路径 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mapping_paths_probe</span><span class="hljs-params">(pa_alsa_mapping *m, pa_alsa_profile *profile,</span><br><span class="hljs-params">                                <span class="hljs-type">pa_alsa_direction_t</span> direction, pa_hashmap *used_paths)</span> &#123;<br><br>    pa_alsa_path *p;<br>    <span class="hljs-type">void</span> *state;<br>    <span class="hljs-type">snd_pcm_t</span> *pcm_handle;<br>    pa_alsa_path_set *ps;<br>    <span class="hljs-type">snd_mixer_t</span> *mixer_handle;<br><br>    <span class="hljs-keyword">if</span> (direction == PA_ALSA_DIRECTION_OUTPUT) &#123;<br>        <span class="hljs-keyword">if</span> (m-&gt;output_path_set)<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">/* 已经进行过探测 */</span><br>        m-&gt;output_path_set = ps = pa_alsa_path_set_new(m, direction, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">/* <span class="hljs-doctag">FIXME:</span> 处理 paths_dir */</span><br>        pcm_handle = m-&gt;output_pcm;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (m-&gt;input_path_set)<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">/* 已经进行过探测 */</span><br>        m-&gt;input_path_set = ps = pa_alsa_path_set_new(m, direction, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">/* <span class="hljs-doctag">FIXME:</span> 处理 paths_dir */</span><br>        pcm_handle = m-&gt;input_pcm;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!ps)<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">/* 没有可用的路径 */</span><br><br>    pa_assert(pcm_handle);<br><br>    mixer_handle = pa_alsa_open_mixer_for_pcm(pcm_handle, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (!mixer_handle) &#123;<br>        <span class="hljs-comment">/* 无法打开混音器，移除所有路径 */</span><br>        pa_hashmap_remove_all(ps-&gt;paths);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 对于每个路径，进行探测并更新 */</span><br>    PA_HASHMAP_FOREACH(p, ps-&gt;paths, state) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;autodetect_eld_device)<br>            p-&gt;eld_device = m-&gt;hw_device_index;<br><br>        <span class="hljs-keyword">if</span> (pa_alsa_path_probe(p, m, mixer_handle, m-&gt;profile_set-&gt;ignore_dB) &lt; <span class="hljs-number">0</span>)<br>            pa_hashmap_remove(ps-&gt;paths, p);<br>    &#125;<br><br>    <span class="hljs-comment">/* 精简路径集合 */</span><br>    path_set_condense(ps, mixer_handle);<br>    path_set_make_path_descriptions_unique(ps);<br><br>    <span class="hljs-keyword">if</span> (mixer_handle)<br>        snd_mixer_close(mixer_handle);<br><br>    <span class="hljs-comment">/* 将已使用的路径添加到哈希表中 */</span><br>    PA_HASHMAP_FOREACH(p, ps-&gt;paths, state)<br>        pa_hashmap_put(used_paths, p, p);<br><br>    pa_log_debug(<span class="hljs-string">&quot;可用的混音器路径（整理后）：&quot;</span>);<br>    pa_alsa_path_set_dump(ps);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="pa_alsa_path_set_new">pa_alsa_path_set_new</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">#<span class="hljs-number">0</span>  <span class="hljs-number">0x0000fffff24d78c4</span> in <span class="hljs-title function_">pa_alsa_path_set_new</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c4b0</span>, direction=PA_ALSA_DIRECTION_INPUT, paths_dir=<span class="hljs-number">0x0</span>)</span> at modules/alsa/alsa-mixer.c:3184<br>#1  0x0000fffff24db1a0 in <span class="hljs-title function_">mapping_paths_probe</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c4b0</span>, profile=<span class="hljs-number">0xaaaaaab409f0</span>, direction=PA_ALSA_DIRECTION_INPUT, used_paths=<span class="hljs-number">0xaaaaaac6bac0</span>)</span><br>    at modules/alsa/alsa-mixer.c:4132<br>#2  0x0000fffff24de19c in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28270</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span><br>    at modules/alsa/alsa-mixer.c:4933<br>#3  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#4  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span><br>    <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#5  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333<br>#6  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422<br>#7  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464<br>#8  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#9  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789<br>#10 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#11 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#12 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><br>    <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#13 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#14 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c">ptype p<br>type = <span class="hljs-keyword">struct</span> pa_alsa_path &#123;<br>    <span class="hljs-type">pa_alsa_direction_t</span> direction;           <span class="hljs-comment">/**&lt; ALSA 路径的方向，输入还是输出 */</span><br>    pa_device_port *port;                   <span class="hljs-comment">/**&lt; 设备端口指针 */</span><br>    <span class="hljs-type">char</span> *name;                              <span class="hljs-comment">/**&lt; 路径的名称 */</span><br>    <span class="hljs-type">char</span> *description_key;                   <span class="hljs-comment">/**&lt; 描述的键 */</span><br>    <span class="hljs-type">char</span> *description;                       <span class="hljs-comment">/**&lt; 描述 */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> priority;                   <span class="hljs-comment">/**&lt; 优先级 */</span><br>    <span class="hljs-type">_Bool</span> autodetect_eld_device;             <span class="hljs-comment">/**&lt; 自动检测 ELD 设备标志 */</span><br>    <span class="hljs-type">int</span> eld_device;                          <span class="hljs-comment">/**&lt; ELD 设备索引 */</span><br>    pa_proplist *proplist;                   <span class="hljs-comment">/**&lt; 属性列表指针 */</span><br>    <span class="hljs-type">_Bool</span> probed : <span class="hljs-number">1</span>;                        <span class="hljs-comment">/**&lt; 是否已经探测 */</span><br>    <span class="hljs-type">_Bool</span> supported : <span class="hljs-number">1</span>;                     <span class="hljs-comment">/**&lt; 是否支持 */</span><br>    <span class="hljs-type">_Bool</span> has_mute : <span class="hljs-number">1</span>;                      <span class="hljs-comment">/**&lt; 是否有静音控制 */</span><br>    <span class="hljs-type">_Bool</span> has_volume : <span class="hljs-number">1</span>;                    <span class="hljs-comment">/**&lt; 是否有音量控制 */</span><br>    <span class="hljs-type">_Bool</span> has_dB : <span class="hljs-number">1</span>;                        <span class="hljs-comment">/**&lt; 是否支持分贝控制 */</span><br>    <span class="hljs-type">_Bool</span> mute_during_activation : <span class="hljs-number">1</span>;        <span class="hljs-comment">/**&lt; 激活时是否静音 */</span><br>    <span class="hljs-type">_Bool</span> has_req_any : <span class="hljs-number">1</span>;                   <span class="hljs-comment">/**&lt; 是否有 required-any 属性 */</span><br>    <span class="hljs-type">_Bool</span> req_any_present : <span class="hljs-number">1</span>;               <span class="hljs-comment">/**&lt; 是否存在 required-any 属性 */</span><br>    <span class="hljs-type">_Bool</span> customized : <span class="hljs-number">1</span>;                    <span class="hljs-comment">/**&lt; 是否自定义 */</span><br>    <span class="hljs-type">long</span> min_volume;                         <span class="hljs-comment">/**&lt; 最小音量值 */</span><br>    <span class="hljs-type">long</span> max_volume;                         <span class="hljs-comment">/**&lt; 最大音量值 */</span><br>    <span class="hljs-type">double</span> min_dB;                           <span class="hljs-comment">/**&lt; 最小分贝值 */</span><br>    <span class="hljs-type">double</span> max_dB;                           <span class="hljs-comment">/**&lt; 最大分贝值 */</span><br>    pa_alsa_element *last_element;           <span class="hljs-comment">/**&lt; 最后一个元素指针 */</span><br>    pa_alsa_option *last_option;             <span class="hljs-comment">/**&lt; 最后一个选项指针 */</span><br>    pa_alsa_setting *last_setting;           <span class="hljs-comment">/**&lt; 最后一个设置指针 */</span><br>    pa_alsa_jack *last_jack;                 <span class="hljs-comment">/**&lt; 最后一个插孔指针 */</span><br>    pa_alsa_element *elements;               <span class="hljs-comment">/**&lt; 元素链表指针 */</span><br>    pa_alsa_setting *settings;               <span class="hljs-comment">/**&lt; 设置链表指针 */</span><br>    pa_alsa_jack *jacks;                     <span class="hljs-comment">/**&lt; 插孔链表指针 */</span><br>&#125; *<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 创建一个新的 ALSA 路径集 */</span><br>pa_alsa_path_set *<span class="hljs-title function_">pa_alsa_path_set_new</span><span class="hljs-params">(pa_alsa_mapping *m, <span class="hljs-type">pa_alsa_direction_t</span> direction, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *paths_dir)</span> &#123;<br>    pa_alsa_path_set *ps;<br>    <span class="hljs-type">char</span> **pn = <span class="hljs-literal">NULL</span>, **en = <span class="hljs-literal">NULL</span>, **ie;<br>    pa_alsa_decibel_fix *db_fix;<br>    <span class="hljs-type">void</span> *state, *state2;<br><br>    pa_assert(m);<br>    pa_assert(m-&gt;profile_set);<br>    pa_assert(m-&gt;profile_set-&gt;decibel_fixes);<br>    pa_assert(direction == PA_ALSA_DIRECTION_OUTPUT || direction == PA_ALSA_DIRECTION_INPUT);<br><br>    <span class="hljs-keyword">if</span> (m-&gt;direction != PA_ALSA_DIRECTION_ANY &amp;&amp; m-&gt;direction != direction)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    ps = pa_xnew0(pa_alsa_path_set, <span class="hljs-number">1</span>);<br>    ps-&gt;direction = direction;<br>    ps-&gt;paths = pa_hashmap_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);<br><br>    <span class="hljs-keyword">if</span> (direction == PA_ALSA_DIRECTION_OUTPUT)<br>        pn = m-&gt;output_path_names;<br>    <span class="hljs-keyword">else</span><br>        pn = m-&gt;input_path_names;<br><br>    <span class="hljs-keyword">if</span> (pn) &#123;<br>        <span class="hljs-type">char</span> **in;<br><br>        <span class="hljs-keyword">for</span> (in = pn; *in; in++) &#123;<br>            pa_alsa_path *p = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-type">bool</span> duplicate = <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">char</span> **kn;<br><br>            <span class="hljs-keyword">for</span> (kn = pn; kn &lt; in; kn++)<br>                <span class="hljs-keyword">if</span> (pa_streq(*kn, *in)) &#123;<br>                    duplicate = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>            <span class="hljs-comment">// 去重，算法时间复杂度为 O(n^2)，存在优化空间</span><br>            <span class="hljs-keyword">if</span> (duplicate)<br>                <span class="hljs-keyword">continue</span>;<br><br>            p = profile_set_get_path(m-&gt;profile_set, *in);<br><br>            <span class="hljs-keyword">if</span> (p &amp;&amp; p-&gt;direction != direction) &#123;<br>                pa_log(<span class="hljs-string">&quot;配置错误：路径 %s 既被用作输入路径又被用作输出路径。&quot;</span>, p-&gt;name);<br>                <span class="hljs-keyword">goto</span> fail;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!p) &#123;<br>                <span class="hljs-type">char</span> *fn = pa_sprintf_malloc(<span class="hljs-string">&quot;%s.conf&quot;</span>, *in);<br>                p = pa_alsa_path_new(m-&gt;profile_set, paths_dir, fn, direction);<br>                pa_xfree(fn);<br>                <span class="hljs-keyword">if</span> (p)<br>                    profile_set_add_path(m-&gt;profile_set, p);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (p)<br>                pa_hashmap_put(ps-&gt;paths, p, p);<br>        &#125;<br><br>        <span class="hljs-keyword">goto</span> finish;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (direction == PA_ALSA_DIRECTION_OUTPUT)<br>        en = m-&gt;output_element;<br>    <span class="hljs-keyword">else</span><br>        en = m-&gt;input_element;<br><br>    <span class="hljs-keyword">if</span> (!en)<br>        <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-keyword">for</span> (ie = en; *ie; ie++) &#123;<br>        <span class="hljs-type">char</span> **je;<br>        pa_alsa_path *p;<br><br>        p = pa_alsa_path_synthesize(*ie, direction);<br><br>        <span class="hljs-comment">/* 标记其他已传递的元素为 required-absent */</span><br>        <span class="hljs-keyword">for</span> (je = en; *je; je++) &#123;<br>            pa_alsa_element *e;<br><br>            <span class="hljs-keyword">if</span> (je == ie)<br>                <span class="hljs-keyword">continue</span>;<br><br>            e = pa_xnew0(pa_alsa_element, <span class="hljs-number">1</span>);<br>            e-&gt;path = p;<br>            e-&gt;alsa_name = pa_xstrdup(*je);<br>            e-&gt;direction = direction;<br>            e-&gt;required_absent = PA_ALSA_REQUIRED_ANY;<br>            e-&gt;volume_limit = <span class="hljs-number">-1</span>;<br><br>            PA_LLIST_INSERT_AFTER(pa_alsa_element, p-&gt;elements, p-&gt;last_element, e);<br>            p-&gt;last_element = e;<br>        &#125;<br><br>        pa_hashmap_put(ps-&gt;paths, *ie, p);<br>    &#125;<br><br>finish:<br>    <span class="hljs-comment">/* 将分贝修复分配给元素 */</span><br>    PA_HASHMAP_FOREACH(db_fix, m-&gt;profile_set-&gt;decibel_fixes, state) &#123;<br>        pa_alsa_path *p;<br><br>        PA_HASHMAP_FOREACH(p, ps-&gt;paths, state2) &#123;<br>            pa_alsa_element *e;<br><br>            PA_LLIST_FOREACH(e, p-&gt;elements) &#123;<br>                <span class="hljs-keyword">if</span> (e-&gt;volume_use != PA_ALSA_VOLUME_IGNORE &amp;&amp; pa_streq(db_fix-&gt;name, e-&gt;alsa_name)) &#123;<br>                    <span class="hljs-comment">/* 包含 dB 修复的配置集可能会在元素之前被释放，所以我们必须复制 dB 修复对象。 */</span><br>                    e-&gt;db_fix = pa_xnewdup(pa_alsa_decibel_fix, db_fix, <span class="hljs-number">1</span>);<br>                    e-&gt;db_fix-&gt;profile_set = <span class="hljs-literal">NULL</span>;<br>                    e-&gt;db_fix-&gt;name = pa_xstrdup(db_fix-&gt;name);<br>                    e-&gt;db_fix-&gt;db_values = pa_xmemdup(db_fix-&gt;db_values, (db_fix-&gt;max_step - db_fix-&gt;min_step + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ps;<br><br>fail:<br>    <span class="hljs-keyword">if</span> (ps)<br>        pa_alsa_path_set_free(ps);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) p *pn@<span class="hljs-number">15</span><br>$<span class="hljs-number">48</span> =   &#123;[<span class="hljs-number">0</span>] = <span class="hljs-number">0xaaaaaab2caf0</span> <span class="hljs-string">&quot;analog-input-front-mic&quot;</span>,<br>  [<span class="hljs-number">1</span>] = <span class="hljs-number">0xaaaaaab2cad0</span> <span class="hljs-string">&quot;analog-input-rear-mic&quot;</span>,<br>  [<span class="hljs-number">2</span>] = <span class="hljs-number">0xaaaaaab2cb10</span> <span class="hljs-string">&quot;analog-input-internal-mic&quot;</span>,<br>  [<span class="hljs-number">3</span>] = <span class="hljs-number">0xaaaaaab2cab0</span> <span class="hljs-string">&quot;analog-input-dock-mic&quot;</span>,<br>  [<span class="hljs-number">4</span>] = <span class="hljs-number">0xaaaaaab2c470</span> <span class="hljs-string">&quot;analog-input&quot;</span>,<br>  [<span class="hljs-number">5</span>] = <span class="hljs-number">0xaaaaaab2cb40</span> <span class="hljs-string">&quot;analog-input-mic&quot;</span>,<br>  [<span class="hljs-number">6</span>] = <span class="hljs-number">0xaaaaaab2cb60</span> <span class="hljs-string">&quot;analog-input-linein&quot;</span>,<br>  [<span class="hljs-number">7</span>] = <span class="hljs-number">0xaaaaaab2cb80</span> <span class="hljs-string">&quot;analog-input-aux&quot;</span>,<br>  [<span class="hljs-number">8</span>] = <span class="hljs-number">0xaaaaaab2cc30</span> <span class="hljs-string">&quot;analog-input-video&quot;</span>,<br>  [<span class="hljs-number">9</span>] = <span class="hljs-number">0xaaaaaab2cc50</span> <span class="hljs-string">&quot;analog-input-tvtuner&quot;</span>,<br>  [<span class="hljs-number">10</span>] = <span class="hljs-number">0xaaaaaab2cc70</span> <span class="hljs-string">&quot;analog-input-fm&quot;</span>,<br>  [<span class="hljs-number">11</span>] = <span class="hljs-number">0xaaaaaab2cc90</span> <span class="hljs-string">&quot;analog-input-mic-line&quot;</span>,<br>  [<span class="hljs-number">12</span>] = <span class="hljs-number">0xaaaaaab2ccb0</span> <span class="hljs-string">&quot;analog-input-headphone-mic&quot;</span>,<br>  [<span class="hljs-number">13</span>] = <span class="hljs-number">0xaaaaaab2cce0</span> <span class="hljs-string">&quot;analog-input-headset-mic&quot;</span>,<br>  [<span class="hljs-number">14</span>] = <span class="hljs-number">0x0</span>&#125;<br>(gdb) p *in@<span class="hljs-number">15</span>                                                                                                                                                                    <br>$<span class="hljs-number">49</span> =   &#123;[<span class="hljs-number">0</span>] = <span class="hljs-number">0xaaaaaab2caf0</span> <span class="hljs-string">&quot;analog-input-front-mic&quot;</span>,<br>  [<span class="hljs-number">1</span>] = <span class="hljs-number">0xaaaaaab2cad0</span> <span class="hljs-string">&quot;analog-input-rear-mic&quot;</span>,<br>  [<span class="hljs-number">2</span>] = <span class="hljs-number">0xaaaaaab2cb10</span> <span class="hljs-string">&quot;analog-input-internal-mic&quot;</span>,<br>  [<span class="hljs-number">3</span>] = <span class="hljs-number">0xaaaaaab2cab0</span> <span class="hljs-string">&quot;analog-input-dock-mic&quot;</span>,<br>  [<span class="hljs-number">4</span>] = <span class="hljs-number">0xaaaaaab2c470</span> <span class="hljs-string">&quot;analog-input&quot;</span>,<br>  [<span class="hljs-number">5</span>] = <span class="hljs-number">0xaaaaaab2cb40</span> <span class="hljs-string">&quot;analog-input-mic&quot;</span>,<br>  [<span class="hljs-number">6</span>] = <span class="hljs-number">0xaaaaaab2cb60</span> <span class="hljs-string">&quot;analog-input-linein&quot;</span>,<br>  [<span class="hljs-number">7</span>] = <span class="hljs-number">0xaaaaaab2cb80</span> <span class="hljs-string">&quot;analog-input-aux&quot;</span>,<br>  [<span class="hljs-number">8</span>] = <span class="hljs-number">0xaaaaaab2cc30</span> <span class="hljs-string">&quot;analog-input-video&quot;</span>,<br>  [<span class="hljs-number">9</span>] = <span class="hljs-number">0xaaaaaab2cc50</span> <span class="hljs-string">&quot;analog-input-tvtuner&quot;</span>,<br>  [<span class="hljs-number">10</span>] = <span class="hljs-number">0xaaaaaab2cc70</span> <span class="hljs-string">&quot;analog-input-fm&quot;</span>,<br>  [<span class="hljs-number">11</span>] = <span class="hljs-number">0xaaaaaab2cc90</span> <span class="hljs-string">&quot;analog-input-mic-line&quot;</span>,<br>  [<span class="hljs-number">12</span>] = <span class="hljs-number">0xaaaaaab2ccb0</span> <span class="hljs-string">&quot;analog-input-headphone-mic&quot;</span>,<br>  [<span class="hljs-number">13</span>] = <span class="hljs-number">0xaaaaaab2cce0</span> <span class="hljs-string">&quot;analog-input-headset-mic&quot;</span>,<br>  [<span class="hljs-number">14</span>] = <span class="hljs-number">0x0</span>&#125;<br>(gdb) p *kn@<span class="hljs-number">15</span>                                                                                                                                                                    <br>$<span class="hljs-number">50</span> =   &#123;[<span class="hljs-number">0</span>] = <span class="hljs-number">0xaaaaaab2caf0</span> <span class="hljs-string">&quot;analog-input-front-mic&quot;</span>,<br>  [<span class="hljs-number">1</span>] = <span class="hljs-number">0xaaaaaab2cad0</span> <span class="hljs-string">&quot;analog-input-rear-mic&quot;</span>,<br>  [<span class="hljs-number">2</span>] = <span class="hljs-number">0xaaaaaab2cb10</span> <span class="hljs-string">&quot;analog-input-internal-mic&quot;</span>,<br>  [<span class="hljs-number">3</span>] = <span class="hljs-number">0xaaaaaab2cab0</span> <span class="hljs-string">&quot;analog-input-dock-mic&quot;</span>,<br>  [<span class="hljs-number">4</span>] = <span class="hljs-number">0xaaaaaab2c470</span> <span class="hljs-string">&quot;analog-input&quot;</span>,<br>  [<span class="hljs-number">5</span>] = <span class="hljs-number">0xaaaaaab2cb40</span> <span class="hljs-string">&quot;analog-input-mic&quot;</span>,<br>  [<span class="hljs-number">6</span>] = <span class="hljs-number">0xaaaaaab2cb60</span> <span class="hljs-string">&quot;analog-input-linein&quot;</span>,<br>  [<span class="hljs-number">7</span>] = <span class="hljs-number">0xaaaaaab2cb80</span> <span class="hljs-string">&quot;analog-input-aux&quot;</span>,<br>  [<span class="hljs-number">8</span>] = <span class="hljs-number">0xaaaaaab2cc30</span> <span class="hljs-string">&quot;analog-input-video&quot;</span>,<br>  [<span class="hljs-number">9</span>] = <span class="hljs-number">0xaaaaaab2cc50</span> <span class="hljs-string">&quot;analog-input-tvtuner&quot;</span>,<br>  [<span class="hljs-number">10</span>] = <span class="hljs-number">0xaaaaaab2cc70</span> <span class="hljs-string">&quot;analog-input-fm&quot;</span>,<br>  [<span class="hljs-number">11</span>] = <span class="hljs-number">0xaaaaaab2cc90</span> <span class="hljs-string">&quot;analog-input-mic-line&quot;</span>,<br>  [<span class="hljs-number">12</span>] = <span class="hljs-number">0xaaaaaab2ccb0</span> <span class="hljs-string">&quot;analog-input-headphone-mic&quot;</span>,<br>  [<span class="hljs-number">13</span>] = <span class="hljs-number">0xaaaaaab2cce0</span> <span class="hljs-string">&quot;analog-input-headset-mic&quot;</span>,<br>  [<span class="hljs-number">14</span>] = <span class="hljs-number">0x0</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="profile_set_get_path">profile_set_get_path</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) bt<br><span class="hljs-comment">#0  0x0000fffff7dbce30 in pa_hashmap_get (h=0xaaaaaab29cd0, key=0xaaaaaab2caf0) at pulsecore/hashmap.c:180                                                                        </span><br><span class="hljs-comment">#1  0x0000fffff24d7654 in profile_set_get_path (ps=0xaaaaaab28270, path_name=0xaaaaaab2caf0 &quot;analog-input-front-mic&quot;) at modules/alsa/alsa-mixer.c:3163                           </span><br><span class="hljs-comment">#2  0x0000fffff24d7bc8 in pa_alsa_path_set_new (m=0xaaaaaab2c4b0, direction=PA_ALSA_DIRECTION_INPUT, paths_dir=0x0) at modules/alsa/alsa-mixer.c:3224                             </span><br><span class="hljs-comment">#3  0x0000fffff24db1a0 in mapping_paths_probe (m=0xaaaaaab2c4b0, profile=0xaaaaaab409f0, direction=PA_ALSA_DIRECTION_INPUT, used_paths=0xaaaaaac6bac0)                            </span><br>    at modules/alsa/alsa-mixer.c:4132<br><span class="hljs-comment">#4  0x0000fffff24de19c in pa_alsa_profile_set_probe (ps=0xaaaaaab28270, dev_id=0xaaaaaab12450 &quot;0&quot;, ss=0xaaaaaaae2fec, default_n_fragments=4, default_fragment_size_msec=25)       </span><br>    at modules/alsa/alsa-mixer.c:4933<br><span class="hljs-comment">#5  0x0000fffff268bd10 in module_alsa_card_LTX_pa__init (m=0xaaaaaab0f450) at modules/alsa/module-alsa-card.c:871                                                                 </span><br><span class="hljs-comment">#6  0x0000fffff7e67104 in pa_module_load</span><br>    (module=0xffffffffcd90, c=0xaaaaaaae2ec0, name=0xfffff26a4d98 <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=0xaaaaaaadd8b0 <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...) at pulsecore/module.c:187        <br><span class="hljs-comment">#7  0x0000fffff26a2d9c in verify_access (u=0xaaaaaab03700, d=0xaaaaaab071f0) at modules/module-udev-detect.c:333                                                                  </span><br><span class="hljs-comment">#8  0x0000fffff26a32fc in card_changed (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:422                                                                 </span><br><span class="hljs-comment">#9  0x0000fffff26a36bc in process_device (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:464                                                               </span><br><span class="hljs-comment">#10 0x0000fffff26a373c in process_path (u=0xaaaaaab03700, path=0xaaaaaab18b00 &quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;) at modules/module-udev-detect.c:481                </span><br><span class="hljs-comment">#11 0x0000fffff26a46ac in module_udev_detect_LTX_pa__init (m=0xaaaaaab00e20) at modules/module-udev-detect.c:789                                                                  </span><br><span class="hljs-comment">#12 0x0000fffff7e67104 in pa_module_load (module=0xffffffffcfe8, c=0xaaaaaaae2ec0, name=0xaaaaaab011b0 &quot;module-udev-detect&quot;, argument=0x0) at pulsecore/module.c:187              </span><br><span class="hljs-comment">#13 0x0000fffff7e50170 in pa_cli_command_load (c=0xaaaaaaae2ec0, t=0xaaaaaab011d0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:437                        </span><br><span class="hljs-comment">#14 0x0000fffff7e5774c in pa_cli_command_execute_line_stateful</span><br>    (c=0xaaaaaaae2ec0, s=0xffffffffd1c8 <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505, ifstate=0xffffffffd1c0) at pulsecore/cli-command.c:2136        <br><span class="hljs-comment">#15 0x0000fffff7e57a00 in pa_cli_command_execute_file_stream (c=0xaaaaaaae2ec0, f=0xaaaaaaad58f0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:2176        </span><br><span class="hljs-comment">#16 0x0000aaaaaaab90ac in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1112</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 从配置文件中获取 ALSA 路径对象 */</span><br><span class="hljs-type">static</span> pa_alsa_path *<span class="hljs-title function_">profile_set_get_path</span><span class="hljs-params">(pa_alsa_profile_set *ps, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path_name)</span> &#123;<br>    pa_alsa_path *path;<br><br>    pa_assert(ps);            <span class="hljs-comment">/**&lt; 断言：确保 pa_alsa_profile_set 对象不为空 */</span><br>    pa_assert(path_name);     <span class="hljs-comment">/**&lt; 断言：确保路径名称不为空 */</span><br><br>    <span class="hljs-comment">/* 从输出路径哈希映射中查找路径对象 */</span><br>    <span class="hljs-keyword">if</span> ((path = pa_hashmap_get(ps-&gt;output_paths, path_name)))<br>        <span class="hljs-keyword">return</span> path;<br><br>    <span class="hljs-comment">/* 从输入路径哈希映射中查找路径对象 */</span><br>    <span class="hljs-keyword">return</span> pa_hashmap_get(ps-&gt;input_paths, path_name);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="pa_alsa_path_new">pa_alsa_path_new</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) bt<br><span class="hljs-comment">#0  0x0000fffff24d5214 in pa_alsa_path_new (ps=0xaaaaaab28270, paths_dir=0x0, fname=0xaaaaaacb0c90 &quot;analog-input-front-mic.conf&quot;, direction=PA_ALSA_DIRECTION_INPUT)</span><br>    at modules/alsa/alsa-mixer.c:2665<br><span class="hljs-comment">#1  0x0000fffff24d7c60 in pa_alsa_path_set_new (m=0xaaaaaab2c4b0, direction=PA_ALSA_DIRECTION_INPUT, paths_dir=0x0) at modules/alsa/alsa-mixer.c:3233</span><br><span class="hljs-comment">#2  0x0000fffff24db1a0 in mapping_paths_probe (m=0xaaaaaab2c4b0, profile=0xaaaaaab409f0, direction=PA_ALSA_DIRECTION_INPUT, used_paths=0xaaaaaac6bac0)</span><br>    at modules/alsa/alsa-mixer.c:4132<br><span class="hljs-comment">#3  0x0000fffff24de19c in pa_alsa_profile_set_probe (ps=0xaaaaaab28270, dev_id=0xaaaaaab12450 &quot;0&quot;, ss=0xaaaaaaae2fec, default_n_fragments=4, default_fragment_size_msec=25)</span><br>    at modules/alsa/alsa-mixer.c:4933<br><span class="hljs-comment">#4  0x0000fffff268bd10 in module_alsa_card_LTX_pa__init (m=0xaaaaaab0f450) at modules/alsa/module-alsa-card.c:871</span><br><span class="hljs-comment">#5  0x0000fffff7e67104 in pa_module_load</span><br>    (module=0xffffffffcd90, c=0xaaaaaaae2ec0, name=0xfffff26a4d98 <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=0xaaaaaaadd8b0 <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...) at pulsecore/module.c:187<br><span class="hljs-comment">#6  0x0000fffff26a2d9c in verify_access (u=0xaaaaaab03700, d=0xaaaaaab071f0) at modules/module-udev-detect.c:333</span><br><span class="hljs-comment">#7  0x0000fffff26a32fc in card_changed (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:422</span><br><span class="hljs-comment">#8  0x0000fffff26a36bc in process_device (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:464</span><br><span class="hljs-comment">#9  0x0000fffff26a373c in process_path (u=0xaaaaaab03700, path=0xaaaaaab18b00 &quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;) at modules/module-udev-detect.c:481</span><br><span class="hljs-comment">#10 0x0000fffff26a46ac in module_udev_detect_LTX_pa__init (m=0xaaaaaab00e20) at modules/module-udev-detect.c:789</span><br><span class="hljs-comment">#11 0x0000fffff7e67104 in pa_module_load (module=0xffffffffcfe8, c=0xaaaaaaae2ec0, name=0xaaaaaab011b0 &quot;module-udev-detect&quot;, argument=0x0) at pulsecore/module.c:187</span><br><span class="hljs-comment">#12 0x0000fffff7e50170 in pa_cli_command_load (c=0xaaaaaaae2ec0, t=0xaaaaaab011d0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:437</span><br><span class="hljs-comment">#13 0x0000fffff7e5774c in pa_cli_command_execute_line_stateful</span><br>    (c=0xaaaaaaae2ec0, s=0xffffffffd1c8 <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505, ifstate=0xffffffffd1c0) at pulsecore/cli-command.c:2136<br><span class="hljs-comment">#14 0x0000fffff7e57a00 in pa_cli_command_execute_file_stream (c=0xaaaaaaae2ec0, f=0xaaaaaaad58f0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:2176</span><br><span class="hljs-comment">#15 0x0000aaaaaaab90ac in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1112</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建新的 ALSA 路径对象。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param ps               pa_alsa_profile_set 对象</span><br><span class="hljs-comment"> * @param paths_dir        路径配置文件所在的目录</span><br><span class="hljs-comment"> * @param fname            路径配置文件的文件名</span><br><span class="hljs-comment"> * @param direction        路径方向（输入或输出）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @return                 新创建的 pa_alsa_path 对象，如果出错则返回 NULL</span><br><span class="hljs-comment"> */</span><br>pa_alsa_path* <span class="hljs-title function_">pa_alsa_path_new</span><span class="hljs-params">(<span class="hljs-type">const</span> pa_alsa_profile_set *ps, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *paths_dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fname, <span class="hljs-type">pa_alsa_direction_t</span> direction)</span> &#123;<br>    pa_alsa_path *p;<br>    <span class="hljs-type">char</span> *fn;<br>    <span class="hljs-type">char</span> *cust_fn = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *n;<br>    <span class="hljs-type">bool</span> mute_during_activation = <span class="hljs-literal">false</span>;<br><br>    pa_config_item items[] = &#123;<br>        <span class="hljs-comment">/* [General] */</span><br>        &#123; <span class="hljs-string">&quot;priority&quot;</span>,            pa_config_parse_unsigned,          <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;General&quot;</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;description-key&quot;</span>,     pa_config_parse_string,            <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;General&quot;</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;description&quot;</span>,         pa_config_parse_string,            <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;General&quot;</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;mute-during-activation&quot;</span>, pa_config_parse_bool,           <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;General&quot;</span> &#125;,<br>        &#123; <span class="hljs-string">&quot;eld-device&quot;</span>,          parse_eld_device,                  <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;General&quot;</span> &#125;,<br>        <span class="hljs-comment">/* ... 其他选项 ... */</span><br>        &#123; <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> &#125;<br>    &#125;;<br><br>    pa_assert(fname);<br><br>    p = pa_xnew0(pa_alsa_path, <span class="hljs-number">1</span>);<br>    n = pa_path_get_filename(fname);<br>    p-&gt;name = pa_xstrndup(n, <span class="hljs-built_in">strcspn</span>(n, <span class="hljs-string">&quot;.&quot;</span>));<br>    p-&gt;proplist = pa_proplist_new();<br>    p-&gt;direction = direction;<br>    p-&gt;eld_device = <span class="hljs-number">-1</span>;<br><br>    items[<span class="hljs-number">0</span>].data = &amp;p-&gt;priority;<br>    items[<span class="hljs-number">1</span>].data = &amp;p-&gt;description_key;<br>    items[<span class="hljs-number">2</span>].data = &amp;p-&gt;description;<br>    items[<span class="hljs-number">3</span>].data = &amp;mute_during_activation;<br><br>    <span class="hljs-keyword">if</span> (!paths_dir)<br>        paths_dir = get_default_paths_dir();<br><br>    <span class="hljs-comment">/* 如果 fname 在自定义文件夹中，则加载自定义文件名 */</span><br>    <span class="hljs-keyword">if</span> (ps &amp;&amp; ps-&gt;cust_folder)<br>        cust_fn = pa_alsa_get_cust_filename(ps-&gt;cust_paths, fname);<br><br>    <span class="hljs-keyword">if</span> (cust_fn) &#123;<br>        fn = pa_maybe_prefix_path(cust_fn, paths_dir);<br>        p-&gt;customized = <span class="hljs-literal">true</span>;<br>        pa_xfree(cust_fn);<br>    &#125; <span class="hljs-keyword">else</span><br>        fn = pa_maybe_prefix_path(fname, paths_dir);<br><br>    pa_log_info(<span class="hljs-string">&quot;Loading path config: %s,%s,%s,%s&quot;</span>, fn, fname, n, p-&gt;name);<br><br>    r = pa_config_parse(fn, <span class="hljs-literal">NULL</span>, items, p-&gt;proplist, <span class="hljs-literal">false</span>, p);<br>    pa_xfree(fn);<br><br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> fail;<br><br>    p-&gt;mute_during_activation = mute_during_activation;<br><br>    <span class="hljs-keyword">if</span> (path_verify(p) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-keyword">return</span> p;<br><br>fail:<br>    pa_alsa_path_free(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数中的主要函数<code>pa_config_parse</code>解读参见上方。</p><p><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230817180909.png" alt="20230817180909" /> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230817181046.png" alt="20230817181046" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x0000fffff24d7c60</span> in <span class="hljs-title function_">pa_alsa_path_set_new</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c4b0</span>, direction=PA_ALSA_DIRECTION_INPUT, paths_dir=<span class="hljs-number">0x0</span>)</span> at modules/alsa/alsa-mixer.c:3233                                 <br>3233                    p = pa_alsa_path_new(m-&gt;profile_set, paths_dir, fn, direction);<br>Value returned is $<span class="hljs-number">57</span> = (pa_alsa_path *) <span class="hljs-number">0xaaaaaacb3a80</span><br>(gdb) p *p                                                                                                                                                                        <br>Cannot access memory at address <span class="hljs-number">0x0</span><br>(gdb) n<br><span class="hljs-number">3234</span>                    pa_xfree(fn);<br>(gdb) p *p<br>$<span class="hljs-number">58</span> = &#123;<br>  direction = PA_ALSA_DIRECTION_INPUT,<br>  port = <span class="hljs-number">0x0</span>,<br>  name = <span class="hljs-number">0xaaaaaacb3c60</span> <span class="hljs-string">&quot;analog-input-front-mic&quot;</span>,<br>  description_key = <span class="hljs-number">0xaaaaaac6ab50</span> <span class="hljs-string">&quot;analog-input-microphone-front&quot;</span>,<br>  description = <span class="hljs-number">0xaaaaaacb4bd0</span> <span class="hljs-string">&quot;前麦克风&quot;</span>,<br>  priority = <span class="hljs-number">85</span>,<br>  autodetect_eld_device = <span class="hljs-literal">false</span>,<br>  eld_device = <span class="hljs-number">-1</span>,<br>  proplist = <span class="hljs-number">0xaaaaaacb46f0</span>,<br>  probed = <span class="hljs-literal">false</span>,<br>  supported = <span class="hljs-literal">false</span>,<br>  has_mute = <span class="hljs-literal">false</span>,<br>  has_volume = <span class="hljs-literal">false</span>,<br>  has_dB = <span class="hljs-literal">false</span>,<br>  mute_during_activation = <span class="hljs-literal">false</span>,<br>  has_req_any = <span class="hljs-literal">true</span>,<br>  req_any_present = <span class="hljs-literal">false</span>,<br>  customized = <span class="hljs-literal">false</span>,<br>  min_volume = <span class="hljs-number">0</span>,<br>  max_volume = <span class="hljs-number">0</span>,<br>  min_dB = <span class="hljs-number">0</span>,<br>--Type &lt;RET&gt; <span class="hljs-keyword">for</span> more, q to quit, c to <span class="hljs-keyword">continue</span> without paging--<br>  max_dB = <span class="hljs-number">0</span>, <br>  last_element = <span class="hljs-number">0xaaaaaacc2bf0</span>, <br>  last_option = <span class="hljs-number">0xaaaaaacc34b0</span>, <br>  last_setting = <span class="hljs-number">0x0</span>, <br>  last_jack = <span class="hljs-number">0xaaaaaacb36f0</span>, <br>  elements = <span class="hljs-number">0xaaaaaacb5f80</span>, <br>  settings = <span class="hljs-number">0x0</span>, <br>  jacks = <span class="hljs-number">0xaaaaaacb3c80</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="profile_set_add_path">profile_set_add_path</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) n<br><span class="hljs-number">3235</span>                    <span class="hljs-keyword">if</span> (p)<br>(gdb)<br><span class="hljs-number">3236</span>                        profile_set_add_path(m-&gt;profile_set, p);<br>(gdb) s<br><span class="hljs-title function_">profile_set_add_path</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28270</span>, path=<span class="hljs-number">0xaaaaaacb3a80</span>)</span> at modules/alsa/alsa-mixer.c:3167                                                                                   <br>3167        <span class="hljs-title function_">pa_assert</span><span class="hljs-params">(ps)</span>;<br>(gdb) bt<br>#<span class="hljs-number">0</span>  <span class="hljs-number">0x0000fffff24d7674</span> in <span class="hljs-title function_">profile_set_add_path</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28270</span>, path=<span class="hljs-number">0xaaaaaacb3a80</span>)</span> at modules/alsa/alsa-mixer.c:3167                                                         <br>#1  0x0000fffff24d7c88 in <span class="hljs-title function_">pa_alsa_path_set_new</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c4b0</span>, direction=PA_ALSA_DIRECTION_INPUT, paths_dir=<span class="hljs-number">0x0</span>)</span> at modules/alsa/alsa-mixer.c:3236                             <br>#2  0x0000fffff24db1a0 in <span class="hljs-title function_">mapping_paths_probe</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c4b0</span>, profile=<span class="hljs-number">0xaaaaaab409f0</span>, direction=PA_ALSA_DIRECTION_INPUT, used_paths=<span class="hljs-number">0xaaaaaac6bac0</span>)</span>                            <br>    at modules/alsa/alsa-mixer.c:4132<br>#3  0x0000fffff24de19c in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28270</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span>       <br>    at modules/alsa/alsa-mixer.c:4933<br>#4  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871                                                                 <br>#5  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span><br>    <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187        <br>#6  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333                                                                  <br>#7  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422                                                                 <br>#8  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464                                                               <br>#9  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481                <br>#10 0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789                                                                  <br>#11 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187              <br>#12 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437                        <br>#13 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><br>    <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136        <br>#14 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176        <br>#15 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向 ALSA 配置文件集合中添加路径对象。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param ps     pa_alsa_profile_set 对象</span><br><span class="hljs-comment"> * @param path   要添加的 pa_alsa_path 对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">profile_set_add_path</span><span class="hljs-params">(pa_alsa_profile_set *ps, pa_alsa_path *path)</span> &#123;<br>    pa_assert(ps);<br>    pa_assert(path);<br><br>    <span class="hljs-keyword">switch</span> (path-&gt;direction) &#123;<br>        <span class="hljs-keyword">case</span> PA_ALSA_DIRECTION_OUTPUT:<br>            pa_assert_se(pa_hashmap_put(ps-&gt;output_paths, path-&gt;name, path) &gt;= <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> PA_ALSA_DIRECTION_INPUT:<br>            pa_assert_se(pa_hashmap_put(ps-&gt;input_paths, path-&gt;name, path) &gt;= <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            pa_assert_not_reached();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="pa_alsa_path_synthesize">pa_alsa_path_synthesize</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">pa_alsa_direction</span> &#123;</span><br>    PA_ALSA_DIRECTION_ANY,    <span class="hljs-comment">/* 任意方向 */</span><br>    PA_ALSA_DIRECTION_OUTPUT, <span class="hljs-comment">/* 输出方向，从设备流向外部 */</span><br>    PA_ALSA_DIRECTION_INPUT   <span class="hljs-comment">/* 输入方向，从外部流向设备 */</span><br>&#125; <span class="hljs-type">pa_alsa_direction_t</span>;        <span class="hljs-comment">/* ALSA方向的枚举类型 */</span><br></code></pre></td></tr></table></figure><p>src/modules/alsa/alsa-mixer.c：3247-3253：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (direction == PA_ALSA_DIRECTION_OUTPUT)<br>        en = m-&gt;output_element;<br>    <span class="hljs-keyword">else</span><br>        en = m-&gt;input_element;<br><br>    <span class="hljs-keyword">if</span> (!en)<br>        <span class="hljs-keyword">goto</span> fail;<br></code></pre></td></tr></table></figure><p>3247-3253行决定<code>pa_alsa_path_synthesize</code>函数是否被调用：</p><p>src/modules/alsa/alsa-mixer.c：3259 src/modules/alsa/alsa-mixer.c：2765</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 合成一个虚拟的 ALSA 路径对象。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param element    要合成的元素名称</span><br><span class="hljs-comment"> * @param direction  路径的方向（输入或输出）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @return 生成的 pa_alsa_path 对象</span><br><span class="hljs-comment"> */</span><br>pa_alsa_path *<span class="hljs-title function_">pa_alsa_path_synthesize</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *element, <span class="hljs-type">pa_alsa_direction_t</span> direction)</span> &#123;<br>    pa_alsa_path *p;<br>    pa_alsa_element *e;<br><br>    pa_assert(element);<br><br>    <span class="hljs-comment">// 创建新的 pa_alsa_path 对象</span><br>    p = pa_xnew0(pa_alsa_path, <span class="hljs-number">1</span>);<br>    p-&gt;name = pa_xstrdup(element);<br>    p-&gt;direction = direction;<br>    p-&gt;proplist = pa_proplist_new();<br><br>    <span class="hljs-comment">// 创建新的 pa_alsa_element 对象，并添加到路径中</span><br>    e = pa_xnew0(pa_alsa_element, <span class="hljs-number">1</span>);<br>    e-&gt;path = p;<br>    e-&gt;alsa_name = pa_xstrdup(element);<br>    e-&gt;direction = direction;<br>    e-&gt;volume_limit = <span class="hljs-number">-1</span>;<br><br>    e-&gt;switch_use = PA_ALSA_SWITCH_MUTE;<br>    e-&gt;volume_use = PA_ALSA_VOLUME_MERGE;<br><br>    PA_LLIST_PREPEND(pa_alsa_element, p-&gt;elements, e);<br>    p-&gt;last_element = e;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="pa_alsa_open_mixer_for_pcm">pa_alsa_open_mixer_for_pcm</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) s<br><span class="hljs-title function_">pa_alsa_open_mixer_for_pcm</span> <span class="hljs-params">(pcm=<span class="hljs-number">0xaaaaaacb4360</span>, ctl_device=<span class="hljs-number">0x0</span>)</span> at modules/alsa/alsa-util.c:1638                                                                                  <br>warning: Source file is more recent than executable.<br>1638    <span class="hljs-type">snd_mixer_t</span> *<span class="hljs-title function_">pa_alsa_open_mixer_for_pcm</span><span class="hljs-params">(<span class="hljs-type">snd_pcm_t</span> *pcm, <span class="hljs-type">char</span> **ctl_device)</span> &#123;<br>(gdb) bt<br>#<span class="hljs-number">0</span>  <span class="hljs-number">0x0000fffff24c2dec</span> in <span class="hljs-title function_">pa_alsa_open_mixer_for_pcm</span> <span class="hljs-params">(pcm=<span class="hljs-number">0xaaaaaacb4360</span>, ctl_device=<span class="hljs-number">0x0</span>)</span> at modules/alsa/alsa-util.c:1638                                                        <br>#1  0x0000fffff24db238 in <span class="hljs-title function_">mapping_paths_probe</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c360</span>, profile=<span class="hljs-number">0xaaaaaab408a0</span>, direction=PA_ALSA_DIRECTION_INPUT, used_paths=<span class="hljs-number">0xaaaaaac6b970</span>)</span>                            <br>    at modules/alsa/alsa-mixer.c:4141<br>#2  0x0000fffff24de19c in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28120</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span>       <br>    at modules/alsa/alsa-mixer.c:4933<br>#3  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871                                                                 <br>#4  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span><br>    <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187        <br>#5  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333                                                                  <br>#6  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422                                                                 <br>#7  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464                                                               <br>#8  0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481                <br>#9  0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789                                                                  <br>#10 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187              <br>#11 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437                        <br>#12 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><br>    <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136        <br>#13 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176        <br>#14 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">snd_mixer_t</span> *<span class="hljs-title function_">pa_alsa_open_mixer_for_pcm</span><span class="hljs-params">(<span class="hljs-type">snd_pcm_t</span> *pcm, <span class="hljs-type">char</span> **ctl_device)</span> &#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">snd_mixer_t</span> *m;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *dev;<br>    <span class="hljs-type">snd_pcm_info_t</span>* info;<br>    snd_pcm_info_alloca(&amp;info);<br><br>    pa_assert(pcm);<br><br>    <span class="hljs-comment">// 尝试通过名称打开混音器</span><br>    <span class="hljs-keyword">if</span> ((err = snd_mixer_open(&amp;m, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log(<span class="hljs-string">&quot;Error opening mixer: %s&quot;</span>, pa_alsa_strerror(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 首先，尝试使用名称</span><br>    <span class="hljs-keyword">if</span> ((dev = snd_pcm_name(pcm)))<br>        <span class="hljs-keyword">if</span> (prepare_mixer(m, dev) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ctl_device)<br>                *ctl_device = pa_xstrdup(dev);<br><br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br><br>    <span class="hljs-comment">// 然后，尝试使用卡索引</span><br>    <span class="hljs-keyword">if</span> (snd_pcm_info(pcm, info) &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> *md;<br>        <span class="hljs-type">int</span> card_idx;<br><br>        <span class="hljs-keyword">if</span> ((card_idx = snd_pcm_info_get_card(info)) &gt;= <span class="hljs-number">0</span>) &#123;<br><br>            md = pa_sprintf_malloc(<span class="hljs-string">&quot;hw:%i&quot;</span>, card_idx);<br><br>            <span class="hljs-keyword">if</span> (!dev || !pa_streq(dev, md))<br>                <span class="hljs-keyword">if</span> (prepare_mixer(m, md) &gt;= <span class="hljs-number">0</span>) &#123;<br><br>                    <span class="hljs-keyword">if</span> (ctl_device)<br>                        *ctl_device = md;<br>                    <span class="hljs-keyword">else</span><br>                        pa_xfree(md);<br><br>                    <span class="hljs-keyword">return</span> m;<br>                &#125;<br><br>            pa_xfree(md);<br>        &#125;<br>    &#125;<br><br>    snd_mixer_close(m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230817184204.png" alt="20230817184204" /> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230817184248.png" alt="20230817184248" /> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230817184347.png" alt="20230817184347" /></p><h6 id="prepare_mixer">prepare_mixer</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">1654            <span class="hljs-keyword">if</span> (prepare_mixer(m, dev) &gt;= 0) &#123;<br>(gdb) s<br>prepare_mixer (mixer=0xaaaaaad5f180, dev=0xaaaaaacb40d0 <span class="hljs-string">&quot;hw:0&quot;</span>) at modules/alsa/alsa-util.c:1569<br>1569    static int prepare_mixer(snd_mixer_t *mixer, const char *dev) &#123;<br>(gdb) info args <br>mixer = 0xaaaaaad5f180<br>dev = 0xaaaaaacb40d0 <span class="hljs-string">&quot;hw:0&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 准备混音器 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">prepare_mixer</span><span class="hljs-params">(<span class="hljs-type">snd_mixer_t</span> *mixer, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *dev)</span> &#123;<br>    <span class="hljs-type">int</span> err;<br>    <span class="hljs-type">snd_mixer_class_t</span> *<span class="hljs-class"><span class="hljs-keyword">class</span>;</span><br><br>    pa_assert(mixer); <span class="hljs-comment">/* 断言 mixer 不为 NULL */</span><br>    pa_assert(dev); <span class="hljs-comment">/* 断言 dev 不为 NULL */</span><br><br>    <span class="hljs-comment">/* 尝试将混音器附加到指定的设备 */</span><br>    <span class="hljs-keyword">if</span> ((err = snd_mixer_attach(mixer, dev)) &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log_info(<span class="hljs-string">&quot;无法附加到混音器 %s: %s&quot;</span>, dev, pa_alsa_strerror(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 分配混音器类并设置相关参数 */</span><br>    <span class="hljs-keyword">if</span> (snd_mixer_class_malloc(&amp;class)) &#123;<br>        pa_log_info(<span class="hljs-string">&quot;为 %s 分配混音器类失败&quot;</span>, dev);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    snd_mixer_class_set_event(class, mixer_class_event);<br>    snd_mixer_class_set_compare(class, mixer_class_compare);<br>    <span class="hljs-keyword">if</span> ((err = snd_mixer_class_register(class, mixer)) &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log_info(<span class="hljs-string">&quot;无法为 %s 注册混音器类: %s&quot;</span>, dev, pa_alsa_strerror(err));<br>        snd_mixer_class_free(class);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">/* 从这里开始，混音器类将由 alsa 在 snd_mixer_close/free 时释放。 */</span><br><br>    <span class="hljs-comment">/* 注册混音器 */</span><br>    <span class="hljs-keyword">if</span> ((err = snd_mixer_selem_register(mixer, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;无法注册混音器: %s&quot;</span>, pa_alsa_strerror(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 加载混音器 */</span><br>    <span class="hljs-keyword">if</span> ((err = snd_mixer_load(mixer)) &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;无法加载混音器: %s&quot;</span>, pa_alsa_strerror(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    pa_log_info(<span class="hljs-string">&quot;成功附加到混音器 &#x27;%s&#x27;&quot;</span>, dev);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="pa_alsa_path_probe">pa_alsa_path_probe</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) bt<br><span class="hljs-comment">#0  0x0000fffff24d6144 in pa_alsa_path_probe (p=0xaaaaaacb3dd0, mapping=0xaaaaaab2c360, m=0xaaaaaad5f180, ignore_dB=false) at modules/alsa/alsa-mixer.c:2922</span><br><span class="hljs-comment">#1  0x0000fffff24db2c0 in mapping_paths_probe (m=0xaaaaaab2c360, profile=0xaaaaaab408a0, direction=PA_ALSA_DIRECTION_INPUT, used_paths=0xaaaaaac6b970)</span><br>    at modules/alsa/alsa-mixer.c:4152<br><span class="hljs-comment">#2  0x0000fffff24de19c in pa_alsa_profile_set_probe (ps=0xaaaaaab28120, dev_id=0xaaaaaab12450 &quot;0&quot;, ss=0xaaaaaaae2fec, default_n_fragments=4, default_fragment_size_msec=25)</span><br>    at modules/alsa/alsa-mixer.c:4933<br><span class="hljs-comment">#3  0x0000fffff268bd10 in module_alsa_card_LTX_pa__init (m=0xaaaaaab0f450) at modules/alsa/module-alsa-card.c:871</span><br><span class="hljs-comment">#4  0x0000fffff7e67104 in pa_module_load</span><br>    (module=0xffffffffcd90, c=0xaaaaaaae2ec0, name=0xfffff26a4d98 <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=0xaaaaaaadd8b0 <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...) at pulsecore/module.c:187<br><span class="hljs-comment">#5  0x0000fffff26a2d9c in verify_access (u=0xaaaaaab03700, d=0xaaaaaab071f0) at modules/module-udev-detect.c:333</span><br><span class="hljs-comment">#6  0x0000fffff26a32fc in card_changed (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:422</span><br><span class="hljs-comment">#7  0x0000fffff26a36bc in process_device (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:464</span><br><span class="hljs-comment">#8  0x0000fffff26a373c in process_path (u=0xaaaaaab03700, path=0xaaaaaab18b00 &quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;) at modules/module-udev-detect.c:481</span><br><span class="hljs-comment">#9  0x0000fffff26a46ac in module_udev_detect_LTX_pa__init (m=0xaaaaaab00e20) at modules/module-udev-detect.c:789</span><br><span class="hljs-comment">#10 0x0000fffff7e67104 in pa_module_load (module=0xffffffffcfe8, c=0xaaaaaaae2ec0, name=0xaaaaaab011b0 &quot;module-udev-detect&quot;, argument=0x0) at pulsecore/module.c:187</span><br><span class="hljs-comment">#11 0x0000fffff7e50170 in pa_cli_command_load (c=0xaaaaaaae2ec0, t=0xaaaaaab011d0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:437</span><br><span class="hljs-comment">#12 0x0000fffff7e5774c in pa_cli_command_execute_line_stateful</span><br>    (c=0xaaaaaaae2ec0, s=0xffffffffd1c8 <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505, ifstate=0xffffffffd1c0) at pulsecore/cli-command.c:2136<br><span class="hljs-comment">#13 0x0000fffff7e57a00 in pa_cli_command_execute_file_stream (c=0xaaaaaaae2ec0, f=0xaaaaaaad58f0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:2176</span><br><span class="hljs-comment">#14 0x0000aaaaaaab90ac in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1112</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pa_alsa_path_probe</span><span class="hljs-params">(pa_alsa_path *p, pa_alsa_mapping *mapping, <span class="hljs-type">snd_mixer_t</span> *m, <span class="hljs-type">bool</span> ignore_dB)</span> &#123;<br>    pa_alsa_element *e;<br>    pa_alsa_jack *j;<br>    <span class="hljs-type">double</span> min_dB[PA_CHANNEL_POSITION_MAX], max_dB[PA_CHANNEL_POSITION_MAX];<br>    <span class="hljs-type">pa_channel_position_t</span> t;<br>    <span class="hljs-type">pa_channel_position_mask_t</span> path_volume_channels = <span class="hljs-number">0</span>;<br><br>    pa_assert(p);<br>    pa_assert(m);<br><br>    <span class="hljs-comment">// 如果路径已经被探测过，返回已知的支持状态</span><br>    <span class="hljs-keyword">if</span> (p-&gt;probed)<br>        <span class="hljs-keyword">return</span> p-&gt;supported ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>;<br>    p-&gt;probed = <span class="hljs-literal">true</span>;<br><br>    pa_zero(min_dB);<br>    pa_zero(max_dB);<br><br>    pa_log_debug(<span class="hljs-string">&quot;Probing path &#x27;%s&#x27;&quot;</span>, p-&gt;name);<br><br>    <span class="hljs-comment">// 为路径中的每个插孔进行探测</span><br>    PA_LLIST_FOREACH(j, p-&gt;jacks) &#123;<br>        <span class="hljs-keyword">if</span> (jack_probe(j, mapping, m) &lt; <span class="hljs-number">0</span>) &#123;<br>            p-&gt;supported = <span class="hljs-literal">false</span>;<br>            pa_log_debug(<span class="hljs-string">&quot;Probe of jack &#x27;%s&#x27; failed.&quot;</span>, j-&gt;alsa_name);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        pa_log_debug(<span class="hljs-string">&quot;Probe of jack &#x27;%s&#x27; succeeded (%s)&quot;</span>, j-&gt;alsa_name, j-&gt;has_control ? <span class="hljs-string">&quot;found!&quot;</span> : <span class="hljs-string">&quot;not found&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 为路径中的每个元素进行探测</span><br>    PA_LLIST_FOREACH(e, p-&gt;elements) &#123;<br>        <span class="hljs-keyword">if</span> (element_probe(e, m) &lt; <span class="hljs-number">0</span>) &#123;<br>            p-&gt;supported = <span class="hljs-literal">false</span>;<br>            pa_log_debug(<span class="hljs-string">&quot;Probe of element &#x27;%s&#x27; failed.&quot;</span>, e-&gt;alsa_name);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        pa_log_debug(<span class="hljs-string">&quot;Probe of element &#x27;%s&#x27; succeeded (volume=%d, switch=%d, enumeration=%d).&quot;</span>, e-&gt;alsa_name, e-&gt;volume_use, e-&gt;switch_use, e-&gt;enumeration_use);<br><br>        <span class="hljs-comment">// 如果忽略 dB，将标志设为 false</span><br>        <span class="hljs-keyword">if</span> (ignore_dB)<br>            e-&gt;has_dB = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 处理合并音量的情况</span><br>        <span class="hljs-keyword">if</span> (e-&gt;volume_use == PA_ALSA_VOLUME_MERGE) &#123;<br>            <span class="hljs-comment">// 如果路径中没有音量元素，设置音量范围</span><br>            <span class="hljs-keyword">if</span> (!p-&gt;has_volume) &#123;<br>                p-&gt;min_volume = e-&gt;min_volume;<br>                p-&gt;max_volume = e-&gt;max_volume;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果元素具有 dB 信息</span><br>            <span class="hljs-keyword">if</span> (e-&gt;has_dB) &#123;<br>                <span class="hljs-keyword">if</span> (!p-&gt;has_volume) &#123;<br>                    <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt; PA_CHANNEL_POSITION_MAX; t++) &#123;<br>                        <span class="hljs-keyword">if</span> (PA_CHANNEL_POSITION_MASK(t) &amp; e-&gt;merged_mask) &#123;<br>                            min_dB[t] = e-&gt;min_dB;<br>                            max_dB[t] = e-&gt;max_dB;<br>                            path_volume_channels |= PA_CHANNEL_POSITION_MASK(t);<br>                        &#125;<br>                    &#125;<br>                    p-&gt;has_dB = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (p-&gt;has_dB) &#123;<br>                        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt; PA_CHANNEL_POSITION_MAX; t++) &#123;<br>                            <span class="hljs-keyword">if</span> (PA_CHANNEL_POSITION_MASK(t) &amp; e-&gt;merged_mask) &#123;<br>                                min_dB[t] += e-&gt;min_dB;<br>                                max_dB[t] += e-&gt;max_dB;<br>                                path_volume_channels |= PA_CHANNEL_POSITION_MASK(t);<br>                            &#125;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 前面有一个不能进行 dB 音量的元素</span><br>                        e-&gt;volume_use = PA_ALSA_VOLUME_ZERO;<br>                        pa_log_info(<span class="hljs-string">&quot;Zeroing volume of &#x27;%s&#x27; on path &#x27;%s&#x27;&quot;</span>, e-&gt;alsa_name, p-&gt;name);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p-&gt;has_volume) &#123;<br>                <span class="hljs-comment">// 无法使用音量，将其标志为忽略</span><br>                e-&gt;volume_use = PA_ALSA_VOLUME_IGNORE;<br>                pa_log_info(<span class="hljs-string">&quot;Ignoring volume of &#x27;%s&#x27; on path &#x27;%s&#x27; (missing dB info)&quot;</span>, e-&gt;alsa_name, p-&gt;name);<br>            &#125;<br>            p-&gt;has_volume = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (e-&gt;switch_use == PA_ALSA_SWITCH_MUTE)<br>            p-&gt;has_mute = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果需要，检查 required-any 元素是否存在</span><br>    <span class="hljs-keyword">if</span> (p-&gt;has_req_any &amp;&amp; !p-&gt;req_any_present) &#123;<br>        p-&gt;supported = <span class="hljs-literal">false</span>;<br>        pa_log_debug(<span class="hljs-string">&quot;Skipping path &#x27;%s&#x27;, none of required-any elements preset.&quot;</span>, p-&gt;name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    path_drop_unsupported(p);<br>    path_make_options_unique(p);<br>    path_create_settings(p);<br><br>    p-&gt;supported = <span class="hljs-literal">true</span>;<br><br>    p-&gt;min_dB = INFINITY;<br>    p-&gt;max_dB = -INFINITY;<br><br>    <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt; PA_CHANNEL_POSITION_MAX; t++) &#123;<br>        <span class="hljs-keyword">if</span> (path_volume_channels &amp; PA_CHANNEL_POSITION_MASK(t)) &#123;<br>            <span class="hljs-keyword">if</span> (p-&gt;min_dB &gt; min_dB[t])<br>                p-&gt;min_dB = min_dB[t];<br><br>            <span class="hljs-keyword">if</span> (p-&gt;max_dB &lt; max_dB[t])<br>                p-&gt;max_dB = max_dB[t];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="jack_probe">jack_probe</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) bt<br><span class="hljs-comment">#0  0x0000fffff24d1b38 in jack_probe (j=0xaaaaaacb4040, mapping=0xaaaaaab2c360, m=0xaaaaaad5f180) at modules/alsa/alsa-mixer.c:1849</span><br><span class="hljs-comment">#1  0x0000fffff24d62e4 in pa_alsa_path_probe (p=0xaaaaaacb3dd0, mapping=0xaaaaaab2c360, m=0xaaaaaad5f180, ignore_dB=false) at modules/alsa/alsa-mixer.c:2942</span><br><span class="hljs-comment">#2  0x0000fffff24db2c0 in mapping_paths_probe (m=0xaaaaaab2c360, profile=0xaaaaaab408a0, direction=PA_ALSA_DIRECTION_INPUT, used_paths=0xaaaaaac6b970)</span><br>    at modules/alsa/alsa-mixer.c:4152<br><span class="hljs-comment">#3  0x0000fffff24de19c in pa_alsa_profile_set_probe (ps=0xaaaaaab28120, dev_id=0xaaaaaab12450 &quot;0&quot;, ss=0xaaaaaaae2fec, default_n_fragments=4, default_fragment_size_msec=25)</span><br>    at modules/alsa/alsa-mixer.c:4933<br><span class="hljs-comment">#4  0x0000fffff268bd10 in module_alsa_card_LTX_pa__init (m=0xaaaaaab0f450) at modules/alsa/module-alsa-card.c:871</span><br><span class="hljs-comment">#5  0x0000fffff7e67104 in pa_module_load</span><br>    (module=0xffffffffcd90, c=0xaaaaaaae2ec0, name=0xfffff26a4d98 <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=0xaaaaaaadd8b0 <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...) at pulsecore/module.c:187<br><span class="hljs-comment">#6  0x0000fffff26a2d9c in verify_access (u=0xaaaaaab03700, d=0xaaaaaab071f0) at modules/module-udev-detect.c:333</span><br><span class="hljs-comment">#7  0x0000fffff26a32fc in card_changed (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:422</span><br><span class="hljs-comment">#8  0x0000fffff26a36bc in process_device (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:464</span><br><span class="hljs-comment">#9  0x0000fffff26a373c in process_path (u=0xaaaaaab03700, path=0xaaaaaab18b00 &quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;) at modules/module-udev-detect.c:481</span><br><span class="hljs-comment">#10 0x0000fffff26a46ac in module_udev_detect_LTX_pa__init (m=0xaaaaaab00e20) at modules/module-udev-detect.c:789</span><br><span class="hljs-comment">#11 0x0000fffff7e67104 in pa_module_load (module=0xffffffffcfe8, c=0xaaaaaaae2ec0, name=0xaaaaaab011b0 &quot;module-udev-detect&quot;, argument=0x0) at pulsecore/module.c:187</span><br><span class="hljs-comment">#12 0x0000fffff7e50170 in pa_cli_command_load (c=0xaaaaaaae2ec0, t=0xaaaaaab011d0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:437</span><br><span class="hljs-comment">#13 0x0000fffff7e5774c in pa_cli_command_execute_line_stateful</span><br>    (c=0xaaaaaaae2ec0, s=0xffffffffd1c8 <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505, ifstate=0xffffffffd1c0) at pulsecore/cli-command.c:2136<br><span class="hljs-comment">#14 0x0000fffff7e57a00 in pa_cli_command_execute_file_stream (c=0xaaaaaaae2ec0, f=0xaaaaaaad58f0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:2176</span><br><span class="hljs-comment">#15 0x0000aaaaaaab90ac in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1112</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 检测是否存在控制选项 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jack_probe</span><span class="hljs-params">(pa_alsa_jack *j, pa_alsa_mapping *mapping, <span class="hljs-type">snd_mixer_t</span> *m)</span> &#123;<br>    <span class="hljs-type">bool</span> has_control;<br><br>    pa_assert(j);<br>    pa_assert(j-&gt;path);<br><br>    <span class="hljs-comment">/* 如果将 pcm 附加到名称中 */</span><br>    <span class="hljs-keyword">if</span> (j-&gt;append_pcm_to_name) &#123;<br>        <span class="hljs-type">char</span> *new_name;<br><br>        <span class="hljs-keyword">if</span> (!mapping) &#123;<br>            <span class="hljs-comment">/* 这也可以作为断言，因为这不应该发生。在撰写本文时，当 module-alsa-sink/source 合成路径时，映射只能为 NULL，而那些合成的路径永远不会有任何插孔，因此不应该调用 jack_probe() 以 NULL 映射。 */</span><br>            pa_log(<span class="hljs-string">&quot;插孔 %s: append_pcm_to_name 已设置，但映射为 NULL。无法使用此插孔。&quot;</span>, j-&gt;name);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        new_name = pa_sprintf_malloc(<span class="hljs-string">&quot;%s,pcm=%i Jack&quot;</span>, j-&gt;name, mapping-&gt;hw_device_index);<br>        pa_xfree(j-&gt;alsa_name);<br>        j-&gt;alsa_name = new_name;<br>        j-&gt;append_pcm_to_name = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 查找是否有控制选项 */</span><br>    has_control = pa_alsa_mixer_find(m, j-&gt;alsa_name, <span class="hljs-number">0</span>) != <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    内部基于ucm设备的控制选项,故此函数啥都没干</span><br><span class="hljs-comment">    **/</span><br>    pa_alsa_jack_set_has_control(j, has_control);<br><br>    <span class="hljs-comment">/* 如果存在控制选项 */</span><br>    <span class="hljs-keyword">if</span> (j-&gt;has_control) &#123;<br>        <span class="hljs-keyword">if</span> (j-&gt;required_absent != PA_ALSA_REQUIRED_IGNORE)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span> (j-&gt;required_any != PA_ALSA_REQUIRED_IGNORE)<br>            j-&gt;path-&gt;req_any_present = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* 如果不存在控制选项 */</span><br>        <span class="hljs-keyword">if</span> (j-&gt;required != PA_ALSA_REQUIRED_IGNORE)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) p *j<br><span class="hljs-variable">$71</span> = &#123;<br>  path = 0xaaaaaacb3dd0, <br>  next = 0xaaaaaacb3a20, <br>  prev = 0x0, <br>  name = 0xaaaaaacb3f20 <span class="hljs-string">&quot;Front Mic&quot;</span>, <br>  alsa_name = 0xaaaaaacb3fd0 <span class="hljs-string">&quot;Front Mic Jack&quot;</span>, <br>  has_control = <span class="hljs-literal">false</span>, <br>  plugged_in = <span class="hljs-literal">false</span>, <br>  melem = 0x0, <br>  state_unplugged = PA_AVAILABLE_NO, <br>  state_plugged = PA_AVAILABLE_YES, <br>  required = PA_ALSA_REQUIRED_IGNORE, <br>  required_any = PA_ALSA_REQUIRED_ANY, <br>  required_absent = PA_ALSA_REQUIRED_IGNORE, <br>  ucm_devices = 0xaaaaaac6e120, <br>  ucm_hw_mute_devices = 0xaaaaaac6c870, <br>  append_pcm_to_name = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) p *j-&gt;path<br>$<span class="hljs-number">72</span> = &#123;<br>  direction = PA_ALSA_DIRECTION_INPUT,<br>  port = <span class="hljs-number">0x0</span>,<br>  name = <span class="hljs-number">0xaaaaaacb3fb0</span> <span class="hljs-string">&quot;analog-input-front-mic&quot;</span>,<br>  description_key = <span class="hljs-number">0xaaaaaac6aa00</span> <span class="hljs-string">&quot;analog-input-microphone-front&quot;</span>,<br>  description = <span class="hljs-number">0xaaaaaacb4f20</span> <span class="hljs-string">&quot;前麦克风&quot;</span>,<br>  priority = <span class="hljs-number">85</span>,<br>  autodetect_eld_device = <span class="hljs-literal">false</span>,<br>  eld_device = <span class="hljs-number">-1</span>,<br>  proplist = <span class="hljs-number">0xaaaaaacb4a40</span>,<br>  probed = <span class="hljs-literal">true</span>,<br>  supported = <span class="hljs-literal">false</span>,<br>  has_mute = <span class="hljs-literal">false</span>,<br>  has_volume = <span class="hljs-literal">false</span>,<br>  has_dB = <span class="hljs-literal">false</span>,<br>  mute_during_activation = <span class="hljs-literal">false</span>,<br>  has_req_any = <span class="hljs-literal">true</span>,<br>  req_any_present = <span class="hljs-literal">false</span>,<br>  customized = <span class="hljs-literal">false</span>,<br>  min_volume = <span class="hljs-number">0</span>,<br>  max_volume = <span class="hljs-number">0</span>,<br>  min_dB = <span class="hljs-number">0</span>,<br>  max_dB = <span class="hljs-number">0</span>,<br>  last_element = <span class="hljs-number">0xaaaaaacc2f40</span>,<br>  last_option = <span class="hljs-number">0xaaaaaacc3800</span>,<br>--Type &lt;RET&gt; <span class="hljs-keyword">for</span> more, q to quit, c to <span class="hljs-keyword">continue</span> without paging--<br></code></pre></td></tr></table></figure><p>在vim命令模式下使用<code>:echo expand('%:p')</code>显示当前文件的绝对路径： <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230817190632.png" alt="20230817190632" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) fin<br>Run till <span class="hljs-built_in">exit</span> from #<span class="hljs-number">0</span>  jack_probe (j=<span class="hljs-number">0xaaaaaacb4040</span>, mapping=<span class="hljs-number">0xaaaaaab2c360</span>, m=<span class="hljs-number">0xaaaaaad5f180</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">1850</span><br>pa_alsa_path_probe (p=<span class="hljs-number">0xaaaaaacb3dd0</span>, mapping=<span class="hljs-number">0xaaaaaab2c360</span>, m=<span class="hljs-number">0xaaaaaad5f180</span>, ignore_dB=<span class="hljs-literal">false</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">2942</span><br><span class="hljs-number">2942</span>            <span class="hljs-keyword">if</span> (jack_probe(j, mapping, m) &lt; <span class="hljs-number">0</span>) &#123;<br>Value returned is $<span class="hljs-number">73</span> = <span class="hljs-number">0</span><br>(gdb) until <span class="hljs-number">2951</span><br>(<span class="hljs-number">2323.588</span>| <span class="hljs-number">696.589</span>) D: [pulseaudio][modules/alsa/alsa-mixer.c:<span class="hljs-number">2947</span> pa_alsa_path_probe()] Probe of jack <span class="hljs-string">&#x27;Front Mic Jack&#x27;</span> succeeded (found!)<br>(<span class="hljs-number">2323.588</span>|   <span class="hljs-number">0.000</span>) D: [pulseaudio][modules/alsa/alsa-mixer.c:<span class="hljs-number">2947</span> pa_alsa_path_probe()] Probe of jack <span class="hljs-string">&#x27;Front Mic - Input Jack&#x27;</span> succeeded (not found)<br>(<span class="hljs-number">2323.588</span>|   <span class="hljs-number">0.000</span>) D: [pulseaudio][modules/alsa/alsa-mixer.c:<span class="hljs-number">2947</span> pa_alsa_path_probe()] Probe of jack <span class="hljs-string">&#x27;Front Mic Phantom Jack&#x27;</span> succeeded (not found)<br>(<span class="hljs-number">2323.588</span>|   <span class="hljs-number">0.000</span>) D: [pulseaudio][modules/alsa/alsa-mixer.c:<span class="hljs-number">2947</span> pa_alsa_path_probe()] Probe of jack <span class="hljs-string">&#x27;Front Line Out Front Jack&#x27;</span> succeeded (not found)<br>pa_alsa_path_probe (p=<span class="hljs-number">0xaaaaaacb3dd0</span>, mapping=<span class="hljs-number">0xaaaaaab2c360</span>, m=<span class="hljs-number">0xaaaaaad5f180</span>, ignore_dB=<span class="hljs-literal">false</span>) at modules/alsa/alsa-mixer.c:<span class="hljs-number">2951</span><br><span class="hljs-number">2951</span>            <span class="hljs-keyword">if</span> (element_probe(e, m) &lt; <span class="hljs-number">0</span>) &#123;<br></code></pre></td></tr></table></figure><h5 id="element_probe">element_probe</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) bt<br><span class="hljs-comment">#0  0x0000fffff24d1654 in element_probe (e=0xaaaaaacb62d0, m=0xaaaaaad5f180) at modules/alsa/alsa-mixer.c:1760</span><br><span class="hljs-comment">#1  0x0000fffff24d63c0 in pa_alsa_path_probe (p=0xaaaaaacb3dd0, mapping=0xaaaaaab2c360, m=0xaaaaaad5f180, ignore_dB=false) at modules/alsa/alsa-mixer.c:2951</span><br><span class="hljs-comment">#2  0x0000fffff24db2c0 in mapping_paths_probe (m=0xaaaaaab2c360, profile=0xaaaaaab408a0, direction=PA_ALSA_DIRECTION_INPUT, used_paths=0xaaaaaac6b970)</span><br>    at modules/alsa/alsa-mixer.c:4152<br><span class="hljs-comment">#3  0x0000fffff24de19c in pa_alsa_profile_set_probe (ps=0xaaaaaab28120, dev_id=0xaaaaaab12450 &quot;0&quot;, ss=0xaaaaaaae2fec, default_n_fragments=4, default_fragment_size_msec=25)</span><br>    at modules/alsa/alsa-mixer.c:4933<br><span class="hljs-comment">#4  0x0000fffff268bd10 in module_alsa_card_LTX_pa__init (m=0xaaaaaab0f450) at modules/alsa/module-alsa-card.c:871</span><br><span class="hljs-comment">#5  0x0000fffff7e67104 in pa_module_load</span><br>    (module=0xffffffffcd90, c=0xaaaaaaae2ec0, name=0xfffff26a4d98 <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=0xaaaaaaadd8b0 <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...) at pulsecore/module.c:187<br><span class="hljs-comment">#6  0x0000fffff26a2d9c in verify_access (u=0xaaaaaab03700, d=0xaaaaaab071f0) at modules/module-udev-detect.c:333</span><br><span class="hljs-comment">#7  0x0000fffff26a32fc in card_changed (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:422</span><br><span class="hljs-comment">#8  0x0000fffff26a36bc in process_device (u=0xaaaaaab03700, dev=0xaaaaaaaddc50) at modules/module-udev-detect.c:464</span><br><span class="hljs-comment">#9  0x0000fffff26a373c in process_path (u=0xaaaaaab03700, path=0xaaaaaab18b00 &quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;) at modules/module-udev-detect.c:481</span><br><span class="hljs-comment">#10 0x0000fffff26a46ac in module_udev_detect_LTX_pa__init (m=0xaaaaaab00e20) at modules/module-udev-detect.c:789</span><br><span class="hljs-comment">#11 0x0000fffff7e67104 in pa_module_load (module=0xffffffffcfe8, c=0xaaaaaaae2ec0, name=0xaaaaaab011b0 &quot;module-udev-detect&quot;, argument=0x0) at pulsecore/module.c:187</span><br><span class="hljs-comment">#12 0x0000fffff7e50170 in pa_cli_command_load (c=0xaaaaaaae2ec0, t=0xaaaaaab011d0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:437</span><br><span class="hljs-comment">#13 0x0000fffff7e5774c in pa_cli_command_execute_line_stateful</span><br>    (c=0xaaaaaaae2ec0, s=0xffffffffd1c8 <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505, ifstate=0xffffffffd1c0) at pulsecore/cli-command.c:2136<br><span class="hljs-comment">#14 0x0000fffff7e57a00 in pa_cli_command_execute_file_stream (c=0xaaaaaaae2ec0, f=0xaaaaaaad58f0, buf=0xaaaaaaadaf60, fail=0xaaaaaaad5505) at pulsecore/cli-command.c:2176</span><br><span class="hljs-comment">#15 0x0000aaaaaaab90ac in main (argc=4, argv=0xffffffffdd98) at daemon/main.c:1112</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 探测音频元素 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">element_probe</span><span class="hljs-params">(pa_alsa_element *e, <span class="hljs-type">snd_mixer_t</span> *m)</span> &#123;<br>    <span class="hljs-type">snd_mixer_selem_id_t</span> *sid;<br>    <span class="hljs-type">snd_mixer_elem_t</span> *me;<br><br>    pa_assert(m);<br>    pa_assert(e);<br>    pa_assert(e-&gt;path);<br><br>    SELEM_INIT(sid, e-&gt;alsa_name);<br><br>    <span class="hljs-comment">// 用于在混音器中查找特定的音频元素，以便进行音量、开关等控制</span><br>    <span class="hljs-keyword">if</span> (!(me = snd_mixer_find_selem(m, sid))) &#123;<br><br>        <span class="hljs-keyword">if</span> (e-&gt;required != PA_ALSA_REQUIRED_IGNORE)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>        e-&gt;switch_use = PA_ALSA_SWITCH_IGNORE;<br>        e-&gt;volume_use = PA_ALSA_VOLUME_IGNORE;<br>        e-&gt;enumeration_use = PA_ALSA_ENUMERATION_IGNORE;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (e-&gt;switch_use != PA_ALSA_SWITCH_IGNORE) &#123;<br>        <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT) &#123;<br><br>            <span class="hljs-comment">// 检查给定的音频元素是否具有可用的播放开关</span><br>            <span class="hljs-keyword">if</span> (!snd_mixer_selem_has_playback_switch(me)) &#123;<br>                <span class="hljs-comment">// snd_mixer_selem_has_capture_switch 检查给定的音频元素是否具有可用的捕获开关（录音开关）</span><br>                <span class="hljs-keyword">if</span> (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_capture_switch(me))<br>                    e-&gt;direction = PA_ALSA_DIRECTION_INPUT;<br>                <span class="hljs-keyword">else</span><br>                    e-&gt;switch_use = PA_ALSA_SWITCH_IGNORE;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-keyword">if</span> (!snd_mixer_selem_has_capture_switch(me)) &#123;<br>                <span class="hljs-keyword">if</span> (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_playback_switch(me))<br>                    e-&gt;direction = PA_ALSA_DIRECTION_OUTPUT;<br>                <span class="hljs-keyword">else</span><br>                    e-&gt;switch_use = PA_ALSA_SWITCH_IGNORE;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (e-&gt;switch_use != PA_ALSA_SWITCH_IGNORE)<br>            e-&gt;direction_try_other = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!element_probe_volume(e, me))<br>        e-&gt;volume_use = PA_ALSA_VOLUME_IGNORE;<br><br>    <span class="hljs-keyword">if</span> (e-&gt;switch_use == PA_ALSA_SWITCH_SELECT) &#123;<br>        pa_alsa_option *o;<br><br>        PA_LLIST_FOREACH(o, e-&gt;options)<br>            o-&gt;alsa_idx = pa_streq(o-&gt;alsa_name, <span class="hljs-string">&quot;on&quot;</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e-&gt;enumeration_use == PA_ALSA_ENUMERATION_SELECT) &#123;<br>        <span class="hljs-type">int</span> n;<br>        pa_alsa_option *o;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        snd_mixer_selem_get_enum_items</span><br><span class="hljs-comment">        函数用于获取音频混音器元素（也称为音量控制器）的枚举选项数量。</span><br><span class="hljs-comment">        在音频控制中，有些元素可能是离散的，即它们只能在一组预定义选项中进行选择，例如音频输入源或音效设置。</span><br><span class="hljs-comment">        这个函数可以用来查询元素的枚举选项数量，以便在对应的设置中做出适当的选择。</span><br><span class="hljs-comment">        **/</span><br>        <span class="hljs-keyword">if</span> ((n = snd_mixer_selem_get_enum_items(me)) &lt; <span class="hljs-number">0</span>) &#123;<br>            pa_log(<span class="hljs-string">&quot;snd_mixer_selem_get_enum_items() 失败：%s&quot;</span>, pa_alsa_strerror(n));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        PA_LLIST_FOREACH(o, e-&gt;options) &#123;<br>            <span class="hljs-type">int</span> i;<br><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-type">char</span> buf[<span class="hljs-number">128</span>];<br><br>                <span class="hljs-comment">// snd_mixer_selem_get_enum_item_name 用于获取混音器元素的不同枚举选项的可读名称，以便在用户界面中显示给用户选择</span><br>                <span class="hljs-keyword">if</span> (snd_mixer_selem_get_enum_item_name(me, i, <span class="hljs-keyword">sizeof</span>(buf), buf) &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br><br>                <span class="hljs-keyword">if</span> (!pa_streq(buf, o-&gt;alsa_name))<br>                    <span class="hljs-keyword">continue</span>;<br><br>                o-&gt;alsa_idx = i;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (check_required(e, me) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">ptype e<br>type = <span class="hljs-keyword">struct</span> pa_alsa_element &#123;<br>    pa_alsa_path *path;                  <span class="hljs-comment">/* 所属的音频路径 */</span><br>    pa_alsa_element *next;               <span class="hljs-comment">/* 下一个音频元素 */</span><br>    pa_alsa_element *prev;               <span class="hljs-comment">/* 上一个音频元素 */</span><br>    <span class="hljs-type">char</span> *alsa_name;                     <span class="hljs-comment">/* ALSA元素名 */</span><br>    <span class="hljs-type">pa_alsa_direction_t</span> direction;       <span class="hljs-comment">/* 方向 */</span><br>    <span class="hljs-type">pa_alsa_switch_use_t</span> switch_use;     <span class="hljs-comment">/* 开关使用方式 */</span><br>    <span class="hljs-type">pa_alsa_volume_use_t</span> volume_use;     <span class="hljs-comment">/* 音量使用方式 */</span><br>    <span class="hljs-type">pa_alsa_enumeration_use_t</span> enumeration_use; <span class="hljs-comment">/* 枚举使用方式 */</span><br>    <span class="hljs-type">pa_alsa_required_t</span> required;         <span class="hljs-comment">/* 必须存在 */</span><br>    <span class="hljs-type">pa_alsa_required_t</span> required_any;     <span class="hljs-comment">/* 任意必须存在 */</span><br>    <span class="hljs-type">pa_alsa_required_t</span> required_absent;  <span class="hljs-comment">/* 必须缺失 */</span><br>    <span class="hljs-type">long</span> constant_volume;                <span class="hljs-comment">/* 固定音量 */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> override_map;           <span class="hljs-comment">/* 覆盖映射 */</span><br>    <span class="hljs-type">_Bool</span> direction_try_other : <span class="hljs-number">1</span>;       <span class="hljs-comment">/* 尝试其他方向 */</span><br>    <span class="hljs-type">_Bool</span> has_dB : <span class="hljs-number">1</span>;                    <span class="hljs-comment">/* 是否有分贝控制 */</span><br>    <span class="hljs-type">long</span> min_volume;                     <span class="hljs-comment">/* 最小音量 */</span><br>    <span class="hljs-type">long</span> max_volume;                     <span class="hljs-comment">/* 最大音量 */</span><br>    <span class="hljs-type">long</span> volume_limit;                   <span class="hljs-comment">/* 音量限制 */</span><br>    <span class="hljs-type">double</span> min_dB;                       <span class="hljs-comment">/* 最小分贝 */</span><br>    <span class="hljs-type">double</span> max_dB;                       <span class="hljs-comment">/* 最大分贝 */</span><br>    <span class="hljs-type">pa_channel_position_mask_t</span> masks[<span class="hljs-number">32</span>][<span class="hljs-number">8</span>]; <span class="hljs-comment">/* 通道掩码 */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n_channels;             <span class="hljs-comment">/* 通道数 */</span><br>    <span class="hljs-type">pa_channel_position_mask_t</span> merged_mask; <span class="hljs-comment">/* 合并后的通道掩码 */</span><br>    pa_alsa_option *options;             <span class="hljs-comment">/* 选项 */</span><br>    pa_alsa_decibel_fix *db_fix;         <span class="hljs-comment">/* 分贝修正 */</span><br>&#125; *<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) p *e<br>$<span class="hljs-number">78</span> = &#123;         <br>  path = <span class="hljs-number">0xaaaaaacb3dd0</span>,                                        <br>  next = <span class="hljs-number">0xaaaaaacb6b70</span>,<br>  prev = <span class="hljs-number">0x0</span>,<br>  alsa_name = <span class="hljs-number">0xaaaaaacb3db0</span> <span class="hljs-string">&quot;Capture&quot;</span>,<br>  direction = PA_ALSA_DIRECTION_INPUT,<br>  switch_use = PA_ALSA_SWITCH_MUTE,<br>  volume_use = PA_ALSA_VOLUME_MERGE,<br>  enumeration_use = PA_ALSA_ENUMERATION_IGNORE,<br>  required = PA_ALSA_REQUIRED_IGNORE,<br>  required_any = PA_ALSA_REQUIRED_IGNORE,<br>  required_absent = PA_ALSA_REQUIRED_IGNORE,<br>  constant_volume = <span class="hljs-number">0</span>,<br>  override_map = <span class="hljs-number">3</span>,<br>  direction_try_other = <span class="hljs-literal">false</span>,<br>  has_dB = <span class="hljs-literal">false</span>,<br>  min_volume = <span class="hljs-number">0</span>,<br>  max_volume = <span class="hljs-number">0</span>,<br>  volume_limit = <span class="hljs-number">-1</span>,<br>  min_dB = <span class="hljs-number">0</span>,<br>  max_dB = <span class="hljs-number">0</span>,<br>  masks =     &#123;[<span class="hljs-number">0</span>] =       &#123;[<span class="hljs-number">0</span>] = <span class="hljs-number">2251799813685247</span>,<br>      [<span class="hljs-number">1</span>] = <span class="hljs-number">316659348800802</span>,<br>      [<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>&#125;,<br>    [<span class="hljs-number">1</span>] =       &#123;[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">1</span>] = <span class="hljs-number">633318697601604</span>,<br>      [<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>&#125;,<br>    [<span class="hljs-number">2</span>] =       &#123;[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>,<br>      [<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>&#125; &lt;repeats <span class="hljs-number">30</span> times&gt;&#125;,<br>  n_channels = <span class="hljs-number">0</span>,<br>  merged_mask = <span class="hljs-number">0</span>,<br>  options = <span class="hljs-number">0x0</span>,<br>  db_fix = <span class="hljs-number">0x0</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) p *m<br>$<span class="hljs-number">79</span> = &#123;<br>  slaves = &#123;<br>    next = <span class="hljs-number">0xaaaaaad5f1f8</span>, <br>    prev = <span class="hljs-number">0xaaaaaad5f1f8</span><br>  &#125;, <br>  classes = &#123;<br>    next = <span class="hljs-number">0xaaaaaad5f520</span>, <br>    prev = <span class="hljs-number">0xaaaaaad5fe20</span><br>  &#125;, <br>  elems = &#123;<br>    next = <span class="hljs-number">0xaaaaaad763e8</span>, <br>    prev = <span class="hljs-number">0xaaaaaad82028</span><br>  &#125;, <br>  pelems = <span class="hljs-number">0xaaaaaacad310</span>, <br>  count = <span class="hljs-number">29</span>, <br>  alloc = <span class="hljs-number">32</span>, <br>  events = <span class="hljs-number">65</span>, <br>  callback = <span class="hljs-number">0x0</span>, <br>  callback_private = <span class="hljs-number">0x0</span>, <br>  compare = <span class="hljs-number">0xfffff2563e10</span> &lt;snd_mixer_compare_default&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="element_probe_volume">element_probe_volume</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) bt<br>#<span class="hljs-number">0</span>  <span class="hljs-number">0x0000fffff24d06bc</span> in <span class="hljs-title function_">element_probe_volume</span> <span class="hljs-params">(e=<span class="hljs-number">0xaaaaaacb62d0</span>, me=<span class="hljs-number">0xaaaaaad7f6b0</span>)</span> at modules/alsa/alsa-mixer.c:1543<br>#1  0x0000fffff24d1944 in <span class="hljs-title function_">element_probe</span> <span class="hljs-params">(e=<span class="hljs-number">0xaaaaaacb62d0</span>, m=<span class="hljs-number">0xaaaaaad5f180</span>)</span> at modules/alsa/alsa-mixer.c:1806<br>#2  0x0000fffff24d63c0 in <span class="hljs-title function_">pa_alsa_path_probe</span> <span class="hljs-params">(p=<span class="hljs-number">0xaaaaaacb3dd0</span>, mapping=<span class="hljs-number">0xaaaaaab2c360</span>, m=<span class="hljs-number">0xaaaaaad5f180</span>, ignore_dB=<span class="hljs-literal">false</span>)</span> at modules/alsa/alsa-mixer.c:2951<br>#3  0x0000fffff24db2c0 in <span class="hljs-title function_">mapping_paths_probe</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c360</span>, profile=<span class="hljs-number">0xaaaaaab408a0</span>, direction=PA_ALSA_DIRECTION_INPUT, used_paths=<span class="hljs-number">0xaaaaaac6b970</span>)</span><br>    at modules/alsa/alsa-mixer.c:4152<br>#4  0x0000fffff24de19c in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28120</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span><br>    at modules/alsa/alsa-mixer.c:4933<br>#5  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#6  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span><br>    <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#7  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333<br>#8  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422<br>#9  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464<br>#10 0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#11 0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789<br>#12 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#13 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#14 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><br>    <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#15 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#16 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">element_probe_volume</span><span class="hljs-params">(pa_alsa_element *e, <span class="hljs-type">snd_mixer_elem_t</span> *me)</span> &#123;<br>    <span class="hljs-comment">// 初始化变量</span><br>    <span class="hljs-type">long</span> min_dB = <span class="hljs-number">0</span>, max_dB = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-type">bool</span> is_mono;<br>    <span class="hljs-type">pa_channel_position_t</span> p;<br><br>    <span class="hljs-comment">// 根据方向检查音量支持情况</span><br>    <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT) &#123;<br>        <span class="hljs-comment">// 检查指定的混音器元素（音频通道或控制）是否支持播放音量控制</span><br>        <span class="hljs-keyword">if</span> (!snd_mixer_selem_has_playback_volume(me)) &#123;<br>            <span class="hljs-keyword">if</span> (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_capture_volume(me))<br>                e-&gt;direction = PA_ALSA_DIRECTION_INPUT;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!snd_mixer_selem_has_capture_volume(me)) &#123;<br>            <span class="hljs-keyword">if</span> (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_playback_volume(me))<br>                e-&gt;direction = PA_ALSA_DIRECTION_OUTPUT;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    e-&gt;direction_try_other = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 获取指定的混音器元素（音频通道或控制）的播放音量范围</span><br>    <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT)<br>        r = snd_mixer_selem_get_playback_volume_range(me, &amp;e-&gt;min_volume, &amp;e-&gt;max_volume);<br>    <span class="hljs-keyword">else</span><br>        r = snd_mixer_selem_get_capture_volume_range(me, &amp;e-&gt;min_volume, &amp;e-&gt;max_volume);<br><br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;Failed to get volume range of %s: %s&quot;</span>, e-&gt;alsa_name, pa_alsa_strerror(r));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查音量范围的合法性</span><br>    <span class="hljs-keyword">if</span> (e-&gt;min_volume &gt;= e-&gt;max_volume) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;Your kernel driver is broken: it reports a volume range from %li to %li which makes no sense.&quot;</span>,<br>                    e-&gt;min_volume, e-&gt;max_volume);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (e-&gt;volume_use == PA_ALSA_VOLUME_CONSTANT &amp;&amp; (e-&gt;min_volume &gt; e-&gt;constant_volume || e-&gt;max_volume &lt; e-&gt;constant_volume)) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;Constant volume %li configured for element %s, but the available range is from %li to %li.&quot;</span>,<br>                    e-&gt;constant_volume, e-&gt;alsa_name, e-&gt;min_volume, e-&gt;max_volume);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查是否需要修正 dB 范围</span><br>    <span class="hljs-keyword">if</span> (e-&gt;db_fix &amp;&amp; ((e-&gt;min_volume &gt; e-&gt;db_fix-&gt;min_step) || (e-&gt;max_volume &lt; e-&gt;db_fix-&gt;max_step))) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;The step range of the decibel fix for element %s (%li-%li) doesn&#x27;t fit to the &quot;</span><br>                    <span class="hljs-string">&quot;real hardware range (%li-%li). Disabling the decibel fix.&quot;</span>, e-&gt;alsa_name,<br>                    e-&gt;db_fix-&gt;min_step, e-&gt;db_fix-&gt;max_step, e-&gt;min_volume, e-&gt;max_volume);<br><br>        decibel_fix_free(e-&gt;db_fix);<br>        e-&gt;db_fix = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 确定是否支持 dB 范围，如果支持则获取 dB 范围</span><br>    <span class="hljs-keyword">if</span> (e-&gt;db_fix) &#123;<br>        e-&gt;has_dB = <span class="hljs-literal">true</span>;<br>        e-&gt;min_volume = e-&gt;db_fix-&gt;min_step;<br>        e-&gt;max_volume = e-&gt;db_fix-&gt;max_step;<br>        min_dB = e-&gt;db_fix-&gt;db_values[<span class="hljs-number">0</span>];<br>        max_dB = e-&gt;db_fix-&gt;db_values[e-&gt;db_fix-&gt;max_step - e-&gt;db_fix-&gt;min_step];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT)<br>        e-&gt;has_dB = snd_mixer_selem_get_playback_dB_range(me, &amp;min_dB, &amp;max_dB) &gt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        e-&gt;has_dB = snd_mixer_selem_get_capture_dB_range(me, &amp;min_dB, &amp;max_dB) &gt;= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 检查核心驱动返回的限制是否与 _get_*_dB_range() 和 _ask_*_vol_dB() 一致</span><br>    <span class="hljs-keyword">if</span> (e-&gt;has_dB &amp;&amp; !e-&gt;db_fix) &#123;<br>        <span class="hljs-type">long</span> min_dB_checked = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> max_dB_checked = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (element_ask_vol_dB(me, e-&gt;direction, e-&gt;min_volume, &amp;min_dB_checked) &lt; <span class="hljs-number">0</span>) &#123;<br>            pa_log_warn(<span class="hljs-string">&quot;Failed to query the dB value for %s at volume level %li&quot;</span>, e-&gt;alsa_name, e-&gt;min_volume);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (element_ask_vol_dB(me, e-&gt;direction, e-&gt;max_volume, &amp;max_dB_checked) &lt; <span class="hljs-number">0</span>) &#123;<br>            pa_log_warn(<span class="hljs-string">&quot;Failed to query the dB value for %s at volume level %li&quot;</span>, e-&gt;alsa_name, e-&gt;max_volume);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (min_dB != min_dB_checked || max_dB != max_dB_checked) &#123;<br>            pa_log_warn(<span class="hljs-string">&quot;Your kernel driver is broken: the reported dB range for %s (from %0.2f dB to %0.2f dB) &quot;</span><br>                        <span class="hljs-string">&quot;doesn&#x27;t match the dB values at minimum and maximum volume levels: %0.2f dB at level %li, &quot;</span><br>                        <span class="hljs-string">&quot;%0.2f dB at level %li.&quot;</span>, e-&gt;alsa_name, min_dB / <span class="hljs-number">100.0</span>, max_dB / <span class="hljs-number">100.0</span>,<br>                        min_dB_checked / <span class="hljs-number">100.0</span>, e-&gt;min_volume, max_dB_checked / <span class="hljs-number">100.0</span>, e-&gt;max_volume);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 确定是否支持 dB 范围，并设置最小和最大 dB 值</span><br>    <span class="hljs-keyword">if</span> (e-&gt;has_dB) &#123;<br>        e-&gt;min_dB = ((<span class="hljs-type">double</span>) min_dB) / <span class="hljs-number">100.0</span>;<br>        e-&gt;max_dB = ((<span class="hljs-type">double</span>) max_dB) / <span class="hljs-number">100.0</span>;<br><br>        <span class="hljs-keyword">if</span> (min_dB &gt;= max_dB) &#123;<br>            pa_assert(!e-&gt;db_fix);<br>            pa_log_warn(<span class="hljs-string">&quot;Your kernel driver is broken: it reports a volume range from %0.2f dB to %0.2f dB which makes no sense.&quot;</span>,<br>                        e-&gt;min_dB, e-&gt;max_dB);<br>            e-&gt;has_dB = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查和设置音量限制</span><br>    <span class="hljs-keyword">if</span> (e-&gt;volume_limit &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e-&gt;volume_limit &lt;= e-&gt;min_volume || e-&gt;volume_limit &gt; e-&gt;max_volume)<br>            pa_log_warn(<span class="hljs-string">&quot;Volume limit for element %s of path %s is invalid: %li isn&#x27;t within the valid range &quot;</span><br>                        <span class="hljs-string">&quot;%li-%li. The volume limit is ignored.&quot;</span>,<br>                        e-&gt;alsa_name, e-&gt;path-&gt;name, e-&gt;volume_limit, e-&gt;min_volume + <span class="hljs-number">1</span>, e-&gt;max_volume);<br>        <span class="hljs-keyword">else</span> &#123;<br>            e-&gt;max_volume = e-&gt;volume_limit;<br><br>            <span class="hljs-keyword">if</span> (e-&gt;has_dB) &#123;<br>                <span class="hljs-keyword">if</span> (e-&gt;db_fix) &#123;<br>                    e-&gt;db_fix-&gt;max_step = e-&gt;max_volume;<br>                    e-&gt;max_dB = ((<span class="hljs-type">double</span>) e-&gt;db_fix-&gt;db_values[e-&gt;db_fix-&gt;max_step - e-&gt;db_fix-&gt;min_step]) / <span class="hljs-number">100.0</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element_ask_vol_dB(me, e-&gt;direction, e-&gt;max_volume, &amp;max_dB) &lt; <span class="hljs-number">0</span>) &#123;<br>                    pa_log_warn(<span class="hljs-string">&quot;Failed to get dB value of %s: %s&quot;</span>, e-&gt;alsa_name, pa_alsa_strerror(r));<br>                    e-&gt;has_dB = <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    e-&gt;max_dB = ((<span class="hljs-type">double</span>) max_dB) / <span class="hljs-number">100.0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查单声道情况</span><br>    <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT)<br>        is_mono = snd_mixer_selem_is_playback_mono(me) &gt; <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        is_mono = snd_mixer_selem_is_capture_mono(me) &gt; <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 处理单声道情况</span><br>    <span class="hljs-keyword">if</span> (is_mono) &#123;<br>        e-&gt;n_channels = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 检查和处理单声道的覆盖映射</span><br>        <span class="hljs-keyword">if</span> ((e-&gt;override_map &amp; (<span class="hljs-number">1</span> &lt;&lt; (e-&gt;n_channels<span class="hljs-number">-1</span>))) &amp;&amp; e-&gt;masks[SND_MIXER_SCHN_MONO][e-&gt;n_channels<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span>) &#123;<br>            pa_log_warn(<span class="hljs-string">&quot;Override map for mono element %s is invalid, ignoring override map&quot;</span>, e-&gt;path-&gt;name);<br>            e-&gt;override_map &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; (e-&gt;n_channels<span class="hljs-number">-1</span>));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!(e-&gt;override_map &amp; (<span class="hljs-number">1</span> &lt;&lt; (e-&gt;n_channels<span class="hljs-number">-1</span>)))) &#123;<br>            <span class="hljs-keyword">for</span> (p = PA_CHANNEL_POSITION_FRONT_LEFT; p &lt; PA_CHANNEL_POSITION_MAX; p++) &#123;<br>                <span class="hljs-keyword">if</span> (alsa_channel_ids[p] == SND_MIXER_SCHN_UNKNOWN)<br>                    <span class="hljs-keyword">continue</span>;<br>                e-&gt;masks[alsa_channel_ids[p]][e-&gt;n_channels<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>            &#125;<br>            e-&gt;masks[SND_MIXER_SCHN_MONO][e-&gt;n_channels<span class="hljs-number">-1</span>] = PA_CHANNEL_POSITION_MASK_ALL;<br>        &#125;<br>        e-&gt;merged_mask = e-&gt;masks[SND_MIXER_SCHN_MONO][e-&gt;n_channels<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理多声道情况</span><br>    e-&gt;n_channels = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (p = PA_CHANNEL_POSITION_FRONT_LEFT; p &lt; PA_CHANNEL_POSITION_MAX; p++) &#123;<br>        <span class="hljs-keyword">if</span> (alsa_channel_ids[p] == SND_MIXER_SCHN_UNKNOWN)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT)<br>            e-&gt;n_channels += snd_mixer_selem_has_playback_channel(me, alsa_channel_ids[p]) &gt; <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            e-&gt;n_channels += snd_mixer_selem_has_capture_channel(me, alsa_channel_ids[p]) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查声道数是否合法</span><br>    <span class="hljs-keyword">if</span> (e-&gt;n_channels &lt;= <span class="hljs-number">0</span>) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;Volume element %s with no channels?&quot;</span>, e-&gt;alsa_name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e-&gt;n_channels &gt; POSITION_MASK_CHANNELS) &#123;<br>        pa_log_warn(<span class="hljs-string">&quot;Volume element %s has %u channels. That&#x27;s too much! I can&#x27;t handle that!&quot;</span>, e-&gt;alsa_name, e-&gt;n_channels);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>retry:<br>    <span class="hljs-comment">// 处理声道覆盖映射</span><br>    <span class="hljs-keyword">if</span> (!(e-&gt;override_map &amp; (<span class="hljs-number">1</span> &lt;&lt; (e-&gt;n_channels<span class="hljs-number">-1</span>)))) &#123;<br>        <span class="hljs-keyword">for</span> (p = PA_CHANNEL_POSITION_FRONT_LEFT; p &lt; PA_CHANNEL_POSITION_MAX; p++) &#123;<br>            <span class="hljs-type">bool</span> has_channel;<br><br>            <span class="hljs-keyword">if</span> (alsa_channel_ids[p] == SND_MIXER_SCHN_UNKNOWN)<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT)<br>                has_channel = snd_mixer_selem_has_playback_channel(me, alsa_channel_ids[p]) &gt; <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                has_channel = snd_mixer_selem_has_capture_channel(me, alsa_channel_ids[p]) &gt; <span class="hljs-number">0</span>;<br><br>            e-&gt;masks[alsa_channel_ids[p]][e-&gt;n_channels<span class="hljs-number">-1</span>] = has_channel ? PA_CHANNEL_POSITION_MASK(p) : <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    e-&gt;merged_mask = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (p = PA_CHANNEL_POSITION_FRONT_LEFT; p &lt; PA_CHANNEL_POSITION_MAX; p++) &#123;<br>        <span class="hljs-keyword">if</span> (alsa_channel_ids[p] == SND_MIXER_SCHN_UNKNOWN)<br>            <span class="hljs-keyword">continue</span>;<br><br>        e-&gt;merged_mask |= e-&gt;masks[alsa_channel_ids[p]][e-&gt;n_channels<span class="hljs-number">-1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 处理无效的声道覆盖映射</span><br>    <span class="hljs-keyword">if</span> (e-&gt;merged_mask == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!(e-&gt;override_map &amp; (<span class="hljs-number">1</span> &lt;&lt; (e-&gt;n_channels<span class="hljs-number">-1</span>)))) &#123;<br>            pa_log_warn(<span class="hljs-string">&quot;Channel map for element %s is invalid&quot;</span>, e-&gt;path-&gt;name);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        pa_log_warn(<span class="hljs-string">&quot;Override map for element %s has empty result, ignoring override map&quot;</span>, e-&gt;path-&gt;name);<br>        e-&gt;override_map &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; (e-&gt;n_channels<span class="hljs-number">-1</span>));<br>        <span class="hljs-keyword">goto</span> retry;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="check_required">check_required</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">#<span class="hljs-number">0</span>  <span class="hljs-number">0x0000fffff24cffa0</span> in <span class="hljs-title function_">check_required</span> <span class="hljs-params">(e=<span class="hljs-number">0xaaaaaacb62d0</span>, me=<span class="hljs-number">0xaaaaaad7f6b0</span>)</span> at modules/alsa/alsa-mixer.c:1458<br>#1  0x0000fffff24d1adc in <span class="hljs-title function_">element_probe</span> <span class="hljs-params">(e=<span class="hljs-number">0xaaaaaacb62d0</span>, m=<span class="hljs-number">0xaaaaaad5f180</span>)</span> at modules/alsa/alsa-mixer.c:1840<br>#2  0x0000fffff24d63c0 in <span class="hljs-title function_">pa_alsa_path_probe</span> <span class="hljs-params">(p=<span class="hljs-number">0xaaaaaacb3dd0</span>, mapping=<span class="hljs-number">0xaaaaaab2c360</span>, m=<span class="hljs-number">0xaaaaaad5f180</span>, ignore_dB=<span class="hljs-literal">false</span>)</span> at modules/alsa/alsa-mixer.c:2951<br>#3  0x0000fffff24db2c0 in <span class="hljs-title function_">mapping_paths_probe</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab2c360</span>, profile=<span class="hljs-number">0xaaaaaab408a0</span>, direction=PA_ALSA_DIRECTION_INPUT, used_paths=<span class="hljs-number">0xaaaaaac6b970</span>)</span><br>    at modules/alsa/alsa-mixer.c:4152<br>#4  0x0000fffff24de19c in <span class="hljs-title function_">pa_alsa_profile_set_probe</span> <span class="hljs-params">(ps=<span class="hljs-number">0xaaaaaab28120</span>, dev_id=<span class="hljs-number">0xaaaaaab12450</span> <span class="hljs-string">&quot;0&quot;</span>, ss=<span class="hljs-number">0xaaaaaaae2fec</span>, default_n_fragments=<span class="hljs-number">4</span>, default_fragment_size_msec=<span class="hljs-number">25</span>)</span><br>    at modules/alsa/alsa-mixer.c:4933<br>#5  0x0000fffff268bd10 in <span class="hljs-title function_">module_alsa_card_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab0f450</span>)</span> at modules/alsa/module-alsa-card.c:871<br>#6  0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span><br>    <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcd90</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xfffff26a4d98</span> <span class="hljs-string">&quot;module-alsa-card&quot;</span>, argument=<span class="hljs-number">0xaaaaaaadd8b0</span> <span class="hljs-string">&quot;device_id=\&quot;0\&quot; name=\&quot;platform-PHYT0006_00\&quot; card_name=\&quot;alsa_card.platform-PHYT0006_00\&quot; namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes use_ucm=yes card_properties=\&quot;&quot;</span>...)</span> at pulsecore/module.c:187<br>#7  0x0000fffff26a2d9c in <span class="hljs-title function_">verify_access</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, d=<span class="hljs-number">0xaaaaaab071f0</span>)</span> at modules/module-udev-detect.c:333<br>#8  0x0000fffff26a32fc in <span class="hljs-title function_">card_changed</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:422<br>#9  0x0000fffff26a36bc in <span class="hljs-title function_">process_device</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, dev=<span class="hljs-number">0xaaaaaaaddc50</span>)</span> at modules/module-udev-detect.c:464<br>#10 0x0000fffff26a373c in <span class="hljs-title function_">process_path</span> <span class="hljs-params">(u=<span class="hljs-number">0xaaaaaab03700</span>, path=<span class="hljs-number">0xaaaaaab18b00</span> <span class="hljs-string">&quot;/sys/devices/platform/PHYT0006:00/sound/card0&quot;</span>)</span> at modules/module-udev-detect.c:481<br>#11 0x0000fffff26a46ac in <span class="hljs-title function_">module_udev_detect_LTX_pa__init</span> <span class="hljs-params">(m=<span class="hljs-number">0xaaaaaab00e20</span>)</span> at modules/module-udev-detect.c:789<br>#12 0x0000fffff7e67104 in <span class="hljs-title function_">pa_module_load</span> <span class="hljs-params">(module=<span class="hljs-number">0xffffffffcfe8</span>, c=<span class="hljs-number">0xaaaaaaae2ec0</span>, name=<span class="hljs-number">0xaaaaaab011b0</span> <span class="hljs-string">&quot;module-udev-detect&quot;</span>, argument=<span class="hljs-number">0x0</span>)</span> at pulsecore/module.c:187<br>#13 0x0000fffff7e50170 in <span class="hljs-title function_">pa_cli_command_load</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, t=<span class="hljs-number">0xaaaaaab011d0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:437<br>#14 0x0000fffff7e5774c in <span class="hljs-title function_">pa_cli_command_execute_line_stateful</span><br>    <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, s=<span class="hljs-number">0xffffffffd1c8</span> <span class="hljs-string">&quot;load-module module-udev-detect&quot;</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>, ifstate=<span class="hljs-number">0xffffffffd1c0</span>)</span> at pulsecore/cli-command.c:2136<br>#15 0x0000fffff7e57a00 in <span class="hljs-title function_">pa_cli_command_execute_file_stream</span> <span class="hljs-params">(c=<span class="hljs-number">0xaaaaaaae2ec0</span>, f=<span class="hljs-number">0xaaaaaaad58f0</span>, buf=<span class="hljs-number">0xaaaaaaadaf60</span>, fail=<span class="hljs-number">0xaaaaaaad5505</span>)</span> at pulsecore/cli-command.c:2176<br>#16 0x0000aaaaaaab90ac in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">4</span>, argv=<span class="hljs-number">0xffffffffdd98</span>)</span> at daemon/main.c:1112<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_required</span><span class="hljs-params">(pa_alsa_element *e, <span class="hljs-type">snd_mixer_elem_t</span> *me)</span> &#123;<br>    <span class="hljs-comment">// 检查参数是否有效</span><br>    pa_assert(e);<br>    pa_assert(me);<br><br>    <span class="hljs-comment">// 根据音频元素的方向和属性，检查是否存在开关</span><br>    <span class="hljs-type">bool</span> has_switch;<br>    <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT) &#123;<br>        has_switch =<br>            snd_mixer_selem_has_playback_switch(me) ||<br>            (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_capture_switch(me));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        has_switch =<br>            snd_mixer_selem_has_capture_switch(me) ||<br>            (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_playback_switch(me));<br>    &#125;<br><br>    <span class="hljs-comment">// 根据音频元素的方向和属性，检查是否存在音量控制</span><br>    <span class="hljs-type">bool</span> has_volume;<br>    <span class="hljs-keyword">if</span> (e-&gt;direction == PA_ALSA_DIRECTION_OUTPUT) &#123;<br>        has_volume =<br>            snd_mixer_selem_has_playback_volume(me) ||<br>            (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_capture_volume(me));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        has_volume =<br>            snd_mixer_selem_has_capture_volume(me) ||<br>            (e-&gt;direction_try_other &amp;&amp; snd_mixer_selem_has_playback_volume(me));<br>    &#125;<br><br>    <span class="hljs-comment">// 检查音频元素是否是枚举类型</span><br>    <span class="hljs-type">bool</span> has_enumeration = snd_mixer_selem_is_enumerated(me);<br><br>    <span class="hljs-comment">// 根据音频元素的各种属性，进行不同的检查</span><br>    <span class="hljs-keyword">if</span> ((e-&gt;required == PA_ALSA_REQUIRED_SWITCH &amp;&amp; !has_switch) ||<br>        (e-&gt;required == PA_ALSA_REQUIRED_VOLUME &amp;&amp; !has_volume) ||<br>        (e-&gt;required == PA_ALSA_REQUIRED_ENUMERATION &amp;&amp; !has_enumeration))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (e-&gt;required == PA_ALSA_REQUIRED_ANY &amp;&amp; !(has_switch || has_volume || has_enumeration))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> ((e-&gt;required_absent == PA_ALSA_REQUIRED_SWITCH &amp;&amp; has_switch) ||<br>        (e-&gt;required_absent == PA_ALSA_REQUIRED_VOLUME &amp;&amp; has_volume) ||<br>        (e-&gt;required_absent == PA_ALSA_REQUIRED_ENUMERATION &amp;&amp; has_enumeration))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (e-&gt;required_absent == PA_ALSA_REQUIRED_ANY &amp;&amp; (has_switch || has_volume || has_enumeration))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// 根据音频元素的属性，更新 path 结构体的 req_any_present 属性</span><br>    <span class="hljs-keyword">if</span> (e-&gt;required_any != PA_ALSA_REQUIRED_IGNORE) &#123;<br>        <span class="hljs-keyword">switch</span> (e-&gt;required_any) &#123;<br>            <span class="hljs-keyword">case</span> PA_ALSA_REQUIRED_VOLUME:<br>                e-&gt;path-&gt;req_any_present |= (e-&gt;volume_use != PA_ALSA_VOLUME_IGNORE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> PA_ALSA_REQUIRED_SWITCH:<br>                e-&gt;path-&gt;req_any_present |= (e-&gt;switch_use != PA_ALSA_SWITCH_IGNORE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> PA_ALSA_REQUIRED_ENUMERATION:<br>                e-&gt;path-&gt;req_any_present |= (e-&gt;enumeration_use != PA_ALSA_ENUMERATION_IGNORE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> PA_ALSA_REQUIRED_ANY:<br>                e-&gt;path-&gt;req_any_present |=<br>                    (e-&gt;volume_use != PA_ALSA_VOLUME_IGNORE) ||<br>                    (e-&gt;switch_use != PA_ALSA_SWITCH_IGNORE) ||<br>                    (e-&gt;enumeration_use != PA_ALSA_ENUMERATION_IGNORE);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                pa_assert_not_reached();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果音频元素的 enumeration_use 属性为 PA_ALSA_ENUMERATION_SELECT</span><br>    <span class="hljs-comment">// 则检查每个选项是否满足要求，并更新 req_any_present 属性</span><br>    <span class="hljs-keyword">if</span> (e-&gt;enumeration_use == PA_ALSA_ENUMERATION_SELECT) &#123;<br>        pa_alsa_option *o;<br>        PA_LLIST_FOREACH(o, e-&gt;options) &#123;<br>            e-&gt;path-&gt;req_any_present |= (o-&gt;required_any != PA_ALSA_REQUIRED_IGNORE) &amp;&amp;<br>                (o-&gt;alsa_idx &gt;= <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (o-&gt;required != PA_ALSA_REQUIRED_IGNORE &amp;&amp; o-&gt;alsa_idx &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span> (o-&gt;required_absent != PA_ALSA_REQUIRED_IGNORE &amp;&amp; o-&gt;alsa_idx &gt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回检查结果，如果满足要求返回 0，否则返回 -1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关键断点">关键断点</h2><p>断点保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">save breakpoints pulseaudio.bk<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs text">break src/modules/alsa/alsa-mixer.c:3184<br>disable $bpnum<br>break src/modules/alsa/module-alsa-card.c:849<br>disable $bpnum<br>break src/modules/alsa/module-alsa-card.c:868<br>disable $bpnum<br>break src/modules/alsa/module-alsa-card.c:871<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4520<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4577<br>disable $bpnum<br>break src/pulsecore/conf-parser.c:167<br>disable $bpnum<br>break src/pulsecore/conf-parser.c:208<br>disable $bpnum<br>break src/pulsecore/conf-parser.c:83<br>disable $bpnum<br>break src/pulsecore/conf-parser.c:157<br>disable $bpnum<br>break src/pulsecore/conf-parser.c:42<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4782<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4890<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4701<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4833<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4867<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4651<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4881<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4719<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4923<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4115<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4127<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4141<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4156<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:3478<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4588<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4605<br>disable $bpnum<br>break main<br>disable $bpnum<br>break /home/uos/code/pulseaudio-12.2.58/src/daemon/daemon-conf.c:710<br>disable $bpnum<br>break /home/uos/code/pulseaudio-12.2.58/src/daemon/daemon-conf.c:540<br>disable $bpnum<br>break src/pulsecore/cli-command.c:2187<br>disable $bpnum<br>break src/pulsecore/cli-command.c:2136<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:4738<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:3184<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:3255<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:3284<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:1872<br>disable $bpnum<br>break /home/uos/code/pulseaudio-12.2.58/src/modules/alsa/alsa-mixer.c:151<br>disable $bpnum<br>break src/modules/alsa/alsa-ucm.c:1816<br>disable $bpnum<br>break src/modules/alsa/alsa-mixer.c:3015<br>disable $bpnum<br></code></pre></td></tr></table></figure><p>使用gdb info breakpoints查看当前断点，可以看到行号、函数名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">i b<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c">Num     Type           Disp Enb Address            What                                                                                                                            <br><span class="hljs-number">1</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff24d78c4</span> in pa_alsa_path_set_new at modules/alsa/alsa-mixer.c:<span class="hljs-number">3184</span>                                                                       <br><span class="hljs-number">2</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff268bbfc</span> in module_alsa_card_LTX_pa__init at modules/alsa/module-alsa-card.c:<span class="hljs-number">849</span>                                                         <br><span class="hljs-number">3</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff268bcb0</span> in module_alsa_card_LTX_pa__init at modules/alsa/module-alsa-card.c:<span class="hljs-number">868</span>                                                         <br><span class="hljs-number">4</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff268bcd0</span> in module_alsa_card_LTX_pa__init at modules/alsa/module-alsa-card.c:<span class="hljs-number">871</span>                                                         <br><span class="hljs-number">5</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff24dc94c</span> in pa_alsa_profile_set_new at modules/alsa/alsa-mixer.c:<span class="hljs-number">4520</span>                                                                   <br><span class="hljs-number">6</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff24dcae4</span> in pa_alsa_profile_set_new at modules/alsa/alsa-mixer.c:<span class="hljs-number">4577</span>                                                                   <br><span class="hljs-number">7</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff7dacf08</span> in pa_config_parse at pulsecore/conf-parser.c:<span class="hljs-number">168</span>                                                                               <br><span class="hljs-number">8</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff7dad190</span> in pa_config_parse at pulsecore/conf-parser.c:<span class="hljs-number">208</span>                                                                              <br><span class="hljs-number">9</span>       breakpoint     keep n   <span class="hljs-number">0x0000fffff7dac9e0</span> in parse_line at pulsecore/conf-parser.c:<span class="hljs-number">86</span>                                                                                    <br><span class="hljs-number">10</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff7dace98</span> in parse_line at pulsecore/conf-parser.c:<span class="hljs-number">157</span>                                                                                   <br><span class="hljs-number">11</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff7dac698</span> in normal_assignment at pulsecore/conf-parser.c:<span class="hljs-number">45</span>                                                                              <br><span class="hljs-number">12</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dd714</span> in pa_alsa_profile_set_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4787</span>                                                                 <br><span class="hljs-number">13</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24ddebc</span> in pa_alsa_profile_set_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4890</span>                                                                 <br><span class="hljs-number">14</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dd250</span> in add_profiles_to_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4705</span>                                                                     <br><span class="hljs-number">15</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24ddad0</span> in pa_alsa_profile_set_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4833</span>                                                                 <br><span class="hljs-number">16</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24ddd40</span> in pa_alsa_profile_set_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4867</span>                                                                 <br><span class="hljs-number">17</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dced8</span> in mapping_open_pcm at modules/alsa/alsa-mixer.c:<span class="hljs-number">4657</span>                                                                          <br><span class="hljs-number">18</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dde28</span> in pa_alsa_profile_set_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4881</span>                                                                 <br><span class="hljs-number">19</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dd348</span> in mapping_query_hw_device at modules/alsa/alsa-mixer.c:<span class="hljs-number">4719</span>                                                                   <br><span class="hljs-number">20</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24de0e8</span> in pa_alsa_profile_set_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4923</span>                                                                 <br><span class="hljs-number">21</span>      breakpoint     keep y   <span class="hljs-number">0x0000fffff24db120</span> in mapping_paths_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4116</span>                                                                       <br><span class="hljs-number">22</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24db150</span> in mapping_paths_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4127</span>                                                                       <br><span class="hljs-number">23</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24db22c</span> in mapping_paths_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4141</span>                                                                       <br><span class="hljs-number">24</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24db2fc</span> in mapping_paths_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4156</span>                                                                       <br><span class="hljs-number">25</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24d8bb8</span> in path_set_condense at modules/alsa/alsa-mixer.c:<span class="hljs-number">3478</span>                                                                         <br><span class="hljs-number">26</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dcb84</span> in pa_alsa_profile_set_new at modules/alsa/alsa-mixer.c:<span class="hljs-number">4588</span>                                                                   <br><span class="hljs-number">27</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dcc9c</span> in profile_finalize_probing at modules/alsa/alsa-mixer.c:<span class="hljs-number">4605</span>                                                                  <br><span class="hljs-number">28</span>      breakpoint     keep n   <span class="hljs-number">0x0000aaaaaaab6fd8</span> in main at daemon/main.c:<span class="hljs-number">371</span>                                  <br><span class="hljs-number">29</span>      breakpoint     keep n   <span class="hljs-number">0x0000aaaaaaab43ac</span> in pa_daemon_conf_load at daemon/daemon-conf.c:<span class="hljs-number">710</span>                                                                             <br><span class="hljs-number">30</span>      breakpoint     keep n   <span class="hljs-number">0x0000aaaaaaab3674</span> in pa_get_hw_info at daemon/daemon-conf.c:<span class="hljs-number">540</span>                                                                                   <br><span class="hljs-number">31</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff7e57a88</span> in pa_cli_command_execute_file at pulsecore/cli-command.c:<span class="hljs-number">2187</span>                                                                 <br><span class="hljs-number">32</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff7e57730</span> in pa_cli_command_execute_line_stateful at pulsecore/cli-command.c:<span class="hljs-number">2136</span>                                                        <br><span class="hljs-number">33</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dd458</span> in pa_alsa_profile_set_cust_paths at modules/alsa/alsa-mixer.c:<span class="hljs-number">4747</span>                                                            <br><span class="hljs-number">34</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24d78c4</span> in pa_alsa_path_set_new at modules/alsa/alsa-mixer.c:<span class="hljs-number">3184</span>                                                                      <br><span class="hljs-number">35</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24d7d04</span> in pa_alsa_path_set_new at modules/alsa/alsa-mixer.c:<span class="hljs-number">3255</span>                                                                      <br><span class="hljs-number">37</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24d7f28</span> in pa_alsa_path_set_new at modules/alsa/alsa-mixer.c:<span class="hljs-number">3284</span>                                                                      <br><span class="hljs-number">38</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24d1cc0</span> in jack_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">1872</span>                                                                                <br><span class="hljs-number">39</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24ca6b8</span> in pa_alsa_jack_set_has_control at modules/alsa/alsa-mixer.c:<span class="hljs-number">151</span>                                                               <br><span class="hljs-number">40</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24c9c70</span> in pa_alsa_ucm_device_update_available at modules/alsa/alsa-ucm.c:<span class="hljs-number">1817</span>                                                         <br><span class="hljs-number">41</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24d67f0</span> in pa_alsa_path_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">3015</span>                                                                        <br><span class="hljs-number">42</span>      breakpoint     keep n   <span class="hljs-number">0x0000aaaaaaab393c</span> in pa_daemon_conf_load at daemon/daemon-conf.c:<span class="hljs-number">603</span>                                                                             <br><span class="hljs-number">44</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff7dac9e0</span> in parse_line at pulsecore/conf-parser.c:<span class="hljs-number">86</span>                                                                                    <br><span class="hljs-number">45</span>      breakpoint     keep n   <span class="hljs-number">0x0000aaaaaaab3674</span> in pa_get_hw_info at daemon/daemon-conf.c:<span class="hljs-number">540</span>                                          <br><span class="hljs-number">46</span>      breakpoint     keep n   <span class="hljs-number">0x0000aaaaaaab5f3c</span> in pa_ltdl_init at daemon/ltdl-bind-now.c:<span class="hljs-number">118</span><br><span class="hljs-number">47</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dbb30</span> in profile_set_add_auto at modules/alsa/alsa-mixer.c:<span class="hljs-number">4306</span><br><span class="hljs-number">49</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dd250</span> in add_profiles_to_probe at modules/alsa/alsa-mixer.c:<span class="hljs-number">4705</span><br><span class="hljs-number">50</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24dced8</span> in mapping_open_pcm at modules/alsa/alsa-mixer.c:<span class="hljs-number">4657</span><br><span class="hljs-number">51</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24bf814</span> in pa_alsa_open_by_template at modules/alsa/alsa-util.c:<span class="hljs-number">791</span><br><span class="hljs-number">52</span>      breakpoint     keep n   <span class="hljs-number">0x0000fffff24bf39c</span> in pa_alsa_open_by_device_string at modules/alsa/alsa-util.c:<span class="hljs-number">686</span><br></code></pre></td></tr></table></figure><p>断点恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> pulseaudio.bk<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>sound</category>
      
      <category>pulseaudio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>udl</title>
    <link href="/linux/kernel/drivers/usb/udl/udl/"/>
    <url>/linux/kernel/drivers/usb/udl/udl/</url>
    
    <content type="html"><![CDATA[<h1 id="udl-mutex_lock-panic">udl mutex_lock panic</h1><p>bug: <a href="https://pms.uniontech.com/bug-view-229783.html" class="uri">https://pms.uniontech.com/bug-view-229783.html</a></p><h2 id="panic-日志">panic 日志</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.589996</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]Unable to handle kernel paging request at virtual address <span class="hljs-number">0000080100000058</span><br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590026</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]Mem <span class="hljs-built_in">abort</span> info:<br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590026</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]  ESR = <span class="hljs-number">0x96000004</span><br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590026</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]  Exception class = DABT (current EL), IL = <span class="hljs-number">32</span> bits<br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590026</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]  SET = <span class="hljs-number">0</span>, FnV = <span class="hljs-number">0</span><br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590057</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]  EA = <span class="hljs-number">0</span>, S1PTW = <span class="hljs-number">0</span><br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590057</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]Data <span class="hljs-built_in">abort</span> info:<br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590057</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]  ISV = <span class="hljs-number">0</span>, ISS = <span class="hljs-number">0x00000004</span><br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590057</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]  CM = <span class="hljs-number">0</span>, WnR = <span class="hljs-number">0</span><br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590087</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>][<span class="hljs-number">0000080100000058</span>] address between user and kernel address ranges<br>&lt;<span class="hljs-number">1</span>&gt;[ <span class="hljs-number">1264.590087</span>s][pid:<span class="hljs-number">18926</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]printk_level_setup: <span class="hljs-number">7</span><br>&lt;<span class="hljs-number">0</span>&gt;[  <span class="hljs-number">123.175201</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]Internal error: Oops: <span class="hljs-number">96000004</span> [#<span class="hljs-number">1</span>] PREEMPT SMP<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175231</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]Modules linked in: vfs_monitor(O) udl wifi_1105 plat_1105 uos_resources(O) uos_bluetooth_connection_control(O) lightorange lightnut lightfig lightcherry filearmor(O) deepin_netmonitor(O)<br>&lt;<span class="hljs-number">0</span>&gt;[  <span class="hljs-number">123.175231</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]Process lshw-bak (pid: <span class="hljs-number">6550</span>, <span class="hljs-built_in">stack</span> limit = <span class="hljs-number">0x0000000094118db9</span>)<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175262</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]CPU: <span class="hljs-number">6</span> PID: <span class="hljs-number">6550</span> Comm: lshw-bak Tainted: G    B      O      <span class="hljs-number">4.19</span><span class="hljs-number">.71</span>-arm64-desktop #<span class="hljs-number">6200.57055</span><span class="hljs-number">.5</span>.test<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175262</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]Hardware name: HUAWEI HUAWEI L410 KLVU-WDU0/SP1KVUM, BIOS <span class="hljs-number">1.00</span><span class="hljs-number">.53</span> <span class="hljs-number">03</span>/<span class="hljs-number">24</span>/<span class="hljs-number">2021</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175262</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]pstate: <span class="hljs-number">40400005</span> (nZcv daif +PAN -UAO)<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175262</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]pc : __mutex_lock.isra<span class="hljs-number">.1</span>+<span class="hljs-number">0x608</span>/<span class="hljs-number">0x700</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175292</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]lr : __mutex_lock.isra<span class="hljs-number">.1</span>+<span class="hljs-number">0x608</span>/<span class="hljs-number">0x700</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175292</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]sp : ffffffc376a57690<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175292</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]x29: ffffffc376a57690 x28: ffffff9027dfeac8 <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175323</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]x27: ffffffc349115630 x26: ffffffc349115528 <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175323</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]x25: ffffffc3023a6010 x24: <span class="hljs-number">0000000000000002</span> <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175323</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]x23: <span class="hljs-number">0000000000000001</span> x22: ffffff902b2cb688 <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175323</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]x21: <span class="hljs-number">0008070000000000</span> x20: <span class="hljs-number">1f</span>fffff86ed4aee0 <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175354</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]x19: ffffffc37eee5110 x18: <span class="hljs-number">0000000000000000</span> <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175354</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]x17: <span class="hljs-number">0000000000000000</span> x16: <span class="hljs-number">0000000000000000</span> <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175354</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]x15: <span class="hljs-number">00000000000007e6</span> x14: <span class="hljs-number">00000000000001f</span>e <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175354</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]x13: <span class="hljs-number">0000000000000039</span> x12: ffffff886ed4ae5c <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175384</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]x11: <span class="hljs-number">1f</span>fffff86ed4ae5b x10: ffffff886ed4ae5b <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175384</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]x9 : <span class="hljs-number">0000000000000000</span> x8 : ffffffc376a572e0 <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175384</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]x7 : <span class="hljs-number">0000000000000000</span> x6 : <span class="hljs-number">0000000041b</span>58ab3 <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175384</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]x5 : ffffff886ed4aee0 x4 : dfffff9000000000 <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175415</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]x3 : ffffff902945cd40 x2 : <span class="hljs-number">0000000000000000</span> <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175415</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]x1 : e76abf5519f47e00 x0 : <span class="hljs-number">0000000000000000</span> <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175415</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175415</span>s]SP: <span class="hljs-number">0xffffffc376a57610</span>:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175415</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]<span class="hljs-number">7610</span>  <span class="hljs-number">00000002</span> <span class="hljs-number">00000000</span> <span class="hljs-number">023</span>a6010 ffffffc3 <span class="hljs-number">49115528</span> ffffffc3 <span class="hljs-number">49115630</span> ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175445</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]<span class="hljs-number">7630</span>  <span class="hljs-number">27</span>dfeac8 ffffff90 <span class="hljs-number">76</span>a57690 ffffffc3 <span class="hljs-number">2945</span>cd40 ffffff90 <span class="hljs-number">76</span>a57690 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175445</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]<span class="hljs-number">7650</span>  <span class="hljs-number">2945</span>cd40 ffffff90 <span class="hljs-number">40400005</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000002</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175476</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]<span class="hljs-number">7670</span>  ffffffff <span class="hljs-number">0000007f</span> <span class="hljs-number">19f</span>47e00 e76abf55 <span class="hljs-number">76</span>a57690 ffffffc3 <span class="hljs-number">2945</span>cd40 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175476</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]<span class="hljs-number">7690</span>  <span class="hljs-number">76</span>a57780 ffffffc3 <span class="hljs-number">2945</span>ce5c ffffff90 <span class="hljs-number">7</span>eee5110 ffffffc3 <span class="hljs-number">79255f</span>d0 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175506</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]<span class="hljs-number">76b</span>0  <span class="hljs-number">49115500</span> ffffffc3 <span class="hljs-number">7</span>eee5100 ffffffc3 <span class="hljs-number">2993</span>cea0 ffffff90 <span class="hljs-number">7</span>eee5110 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175506</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]<span class="hljs-number">76</span>d0  <span class="hljs-number">49115500</span> ffffffc3 <span class="hljs-number">49115528</span> ffffffc3 <span class="hljs-number">00000100</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000e8</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175537</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]<span class="hljs-number">76f</span>0  <span class="hljs-number">41b</span>58ab3 <span class="hljs-number">00000000</span> <span class="hljs-number">2</span>a150ef8 ffffff90 <span class="hljs-number">41b</span>58ab3 <span class="hljs-number">00000000</span> <span class="hljs-number">2</span>a15e5a0 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175537</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175537</span>s]X8: <span class="hljs-number">0xffffffc376a57260</span>:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175537</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]<span class="hljs-number">7260</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">2948</span>afc0 ffffff90 <span class="hljs-number">76</span>a57650 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175567</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]<span class="hljs-number">7280</span>  <span class="hljs-number">49115630</span> ffffffc3 <span class="hljs-number">023</span>a6000 ffffffc3 <span class="hljs-number">76</span>a57330 ffffffc3 <span class="hljs-number">76</span>a57330 <span class="hljs-number">00000006</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175567</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]<span class="hljs-number">72</span>a0  <span class="hljs-number">29488600</span> ffffff90 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">41b</span>58ab3 <span class="hljs-number">00000000</span> <span class="hljs-number">2</span>a150ee8 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175598</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]<span class="hljs-number">72</span>c0  <span class="hljs-number">27</span>a8a488 ffffff90 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">41003858</span> <span class="hljs-number">00000000</span> <span class="hljs-number">2</span>a164498 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175598</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]<span class="hljs-number">72e0</span>  <span class="hljs-number">27</span>c2d0bc ffffff90 <span class="hljs-number">19f</span>47e00 e76abf55 <span class="hljs-number">00294f</span>28 ffffffc3 <span class="hljs-number">00000010</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175628</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]<span class="hljs-number">7300</span>  <span class="hljs-number">023</span>a67c8 ffffffc3 <span class="hljs-number">19f</span>47e00 e76abf55 <span class="hljs-number">76</span>a57330 ffffffc3 <span class="hljs-number">27</span>a944a8 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175628</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]<span class="hljs-number">7320</span>  <span class="hljs-number">2b</span>2eda60 ffffff90 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">76</span>a57390 ffffffc3 <span class="hljs-number">27</span>aa9b40 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175659</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]<span class="hljs-number">7340</span>  <span class="hljs-number">2949b</span>480 ffffff90 <span class="hljs-number">96000004</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000058</span> <span class="hljs-number">00080700</span> <span class="hljs-number">76</span>a57550 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175659</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175659</span>s]X19: <span class="hljs-number">0xffffffc37eee5090</span>:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175659</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]<span class="hljs-number">5090</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175689</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]<span class="hljs-number">50b</span>0  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175689</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]<span class="hljs-number">50</span>d0  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175720</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]<span class="hljs-number">50f</span>0  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> bbe070fa <span class="hljs-number">9f</span>a26359 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175720</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]<span class="hljs-number">5110</span>  <span class="hljs-number">00000007</span> <span class="hljs-number">00080700</span> <span class="hljs-number">00027003</span> ffffffff <span class="hljs-number">00000000</span> ffffffff <span class="hljs-number">05</span>a48f48 <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175750</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]<span class="hljs-number">5130</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">32267500</span> ffffffc3 <span class="hljs-number">7</span>eee5140 ffffffc3 <span class="hljs-number">7</span>eee5140 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175750</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]<span class="hljs-number">5150</span>  <span class="hljs-number">7</span>eee5150 ffffffc3 <span class="hljs-number">7</span>eee5150 ffffffc3 <span class="hljs-number">7</span>eee5160 ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175781</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]<span class="hljs-number">5170</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175781</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175781</span>s]X25: <span class="hljs-number">0xffffffc3023a5f90</span>:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175781</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]<span class="hljs-number">5f</span>90  aedbc4b8 <span class="hljs-number">0000007f</span> aed620f8 <span class="hljs-number">0000007f</span> aee0d180 <span class="hljs-number">0000007f</span> a8c59e70 <span class="hljs-number">0000007f</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175811</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]<span class="hljs-number">5f</span>b0  aedab940 <span class="hljs-number">0000007f</span> <span class="hljs-number">00014</span>c30 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> aed76490 <span class="hljs-number">0000007f</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175811</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]<span class="hljs-number">5f</span>d0  a8c589a0 <span class="hljs-number">0000007f</span> aee108e0 <span class="hljs-number">0000007f</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> afa43780 <span class="hljs-number">0000007f</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175842</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]<span class="hljs-number">5f</span>f0  aee108a0 <span class="hljs-number">0000007f</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000220</span> <span class="hljs-number">00000000</span> ffffffff ffffffff<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175842</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]<span class="hljs-number">6010</span>  <span class="hljs-number">00000003</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">76</span>a50000 ffffffc3 <span class="hljs-number">00000002</span> <span class="hljs-number">00404100</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175872</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]<span class="hljs-number">6030</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">023</span>a6038 ffffffc3 <span class="hljs-number">023</span>a6038 ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175872</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]<span class="hljs-number">6050</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000001</span> <span class="hljs-number">00000006</span> <span class="hljs-number">000000b</span>d <span class="hljs-number">00000000</span> ffff41ac <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175903</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]<span class="hljs-number">6070</span>  <span class="hljs-number">2</span>dc12000 ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000007</span> <span class="hljs-number">00000006</span> <span class="hljs-number">00000001</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175903</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175903</span>s]X26: <span class="hljs-number">0xffffffc3491154a8</span>:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175903</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]<span class="hljs-number">54</span>a8  <span class="hljs-number">491154</span>a0 ffffffc3 <span class="hljs-number">6</span>cddbb70 ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">0000182</span>d <span class="hljs-number">84000104l</span>inux-image<span class="hljs-number">-4.19</span><span class="hljs-number">.71</span>-arm64-desktop-udl-slub-debug-kasan-lockdep-dbg_4<span class="hljs-number">.19</span><span class="hljs-number">.71</span>-arm64-desktop-udl-slub-debug-kasan-lockdep<span class="hljs-number">-6200.57055</span><span class="hljs-number">.6</span>.test_arm64.deb<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175933</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]<span class="hljs-number">54</span>c8  <span class="hljs-number">00000030</span> db400074 <span class="hljs-number">491154</span>d0 ffffffc3 <span class="hljs-number">491154</span>d0 ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175933</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]<span class="hljs-number">54e8</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">491154f</span>0 ffffffc3 <span class="hljs-number">491154f</span>0 ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175964</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]<span class="hljs-number">5508</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">950</span>caa20 ffffffc3 c0f654c8 ffffffc2 <span class="hljs-number">79255f</span>d0 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175964</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]<span class="hljs-number">5528</span>  <span class="hljs-number">2993</span>d320 ffffff90 <span class="hljs-number">00000000</span> dead4ead ffffffff <span class="hljs-number">00000000</span> ffffffff ffffffff<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175994</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]<span class="hljs-number">5548</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00020000</span> <span class="hljs-number">0000001</span>d <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175994</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]<span class="hljs-number">5568</span>  <span class="hljs-number">00000000</span> dead4ead ffffffff <span class="hljs-number">00000000</span> ffffffff ffffffff <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.175994</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]<span class="hljs-number">5588</span>  <span class="hljs-number">49115588</span> ffffffc3 <span class="hljs-number">49115588</span> ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176025</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176025</span>s]X27: <span class="hljs-number">0xffffffc3491155b0</span>:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176025</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]<span class="hljs-number">55b</span>0  ffffffff ffffffff <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176055</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]<span class="hljs-number">55</span>d0  <span class="hljs-number">25315300</span> ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176055</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]<span class="hljs-number">55f</span>0  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">302</span>d8f00 ffffffc2 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176086</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]<span class="hljs-number">5610</span>  <span class="hljs-number">49115610</span> ffffffc3 <span class="hljs-number">49115610</span> ffffffc3 <span class="hljs-number">49115620</span> ffffffc3 <span class="hljs-number">49115620</span> ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176086</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]<span class="hljs-number">5630</span>  <span class="hljs-number">79256178</span> ffffffc3 <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00001996</span> <span class="hljs-number">84000104</span> <span class="hljs-number">00000030</span> db400074<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176086</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]<span class="hljs-number">5650</span>  <span class="hljs-number">49115648</span> ffffffc3 <span class="hljs-number">8</span>d8aec00 ffffffc3 <span class="hljs-number">40000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">40000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176116</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]<span class="hljs-number">5670</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176116</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]<span class="hljs-number">5690</span>  <span class="hljs-number">954e2420</span> ffffffc3 <span class="hljs-number">93f</span>ac578 ffffffc3 e6b2a6a0 ffffffc2 <span class="hljs-number">29530320</span> ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176147</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176147</span>s]X29: <span class="hljs-number">0xffffffc376a57610</span>:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176147</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>]<span class="hljs-number">7610</span>  <span class="hljs-number">00000002</span> <span class="hljs-number">00000000</span> <span class="hljs-number">023</span>a6010 ffffffc3 <span class="hljs-number">49115528</span> ffffffc3 <span class="hljs-number">49115630</span> ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176177</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>]<span class="hljs-number">7630</span>  <span class="hljs-number">27</span>dfeac8 ffffff90 <span class="hljs-number">76</span>a57690 ffffffc3 <span class="hljs-number">2945</span>cd40 ffffff90 <span class="hljs-number">76</span>a57690 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176177</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>]<span class="hljs-number">7650</span>  <span class="hljs-number">2945</span>cd40 ffffff90 <span class="hljs-number">40400005</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000002</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176177</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>]<span class="hljs-number">7670</span>  ffffffff <span class="hljs-number">0000007f</span> <span class="hljs-number">19f</span>47e00 e76abf55 <span class="hljs-number">76</span>a57690 ffffffc3 <span class="hljs-number">2945</span>cd40 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176208</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]<span class="hljs-number">7690</span>  <span class="hljs-number">76</span>a57780 ffffffc3 <span class="hljs-number">2945</span>ce5c ffffff90 <span class="hljs-number">7</span>eee5110 ffffffc3 <span class="hljs-number">79255f</span>d0 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176208</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]<span class="hljs-number">76b</span>0  <span class="hljs-number">49115500</span> ffffffc3 <span class="hljs-number">7</span>eee5100 ffffffc3 <span class="hljs-number">2993</span>cea0 ffffff90 <span class="hljs-number">7</span>eee5110 ffffffc3<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176239</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]<span class="hljs-number">76</span>d0  <span class="hljs-number">49115500</span> ffffffc3 <span class="hljs-number">49115528</span> ffffffc3 <span class="hljs-number">00000100</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000e8</span> <span class="hljs-number">00000000</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176239</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>]<span class="hljs-number">76f</span>0  <span class="hljs-number">41b</span>58ab3 <span class="hljs-number">00000000</span> <span class="hljs-number">2</span>a150ef8 ffffff90 <span class="hljs-number">41b</span>58ab3 <span class="hljs-number">00000000</span> <span class="hljs-number">2</span>a15e5a0 ffffff90<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176269</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>]<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176269</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>]Call trace:<br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176269</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>] __mutex_lock.isra<span class="hljs-number">.1</span>+<span class="hljs-number">0x608</span>/<span class="hljs-number">0x700</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176269</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>] __mutex_lock_slowpath+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176300</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>] mutex_lock+<span class="hljs-number">0x50</span>/<span class="hljs-number">0x58</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176300</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>] fb_open+<span class="hljs-number">0x104</span>/<span class="hljs-number">0x248</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176300</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>] chrdev_open+<span class="hljs-number">0x144</span>/<span class="hljs-number">0x290</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176300</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>] do_dentry_open+<span class="hljs-number">0x1dc</span>/<span class="hljs-number">0x5d8</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176330</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>] vfs_open+<span class="hljs-number">0x58</span>/<span class="hljs-number">0x68</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176330</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">5</span>] path_openat+<span class="hljs-number">0x530</span>/<span class="hljs-number">0x1bc8</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176330</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">6</span>] do_filp_open+<span class="hljs-number">0xf0</span>/<span class="hljs-number">0x180</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176330</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">7</span>] do_sys_open+<span class="hljs-number">0x208</span>/<span class="hljs-number">0x378</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176361</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">8</span>] __arm64_sys_openat+<span class="hljs-number">0x5c</span>/<span class="hljs-number">0x70</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176361</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">9</span>] el0_svc_common+<span class="hljs-number">0xd4</span>/<span class="hljs-number">0x1d8</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176361</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">0</span>] el0_svc_handler+<span class="hljs-number">0x9c</span>/<span class="hljs-number">0xc0</span><br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176361</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">1</span>] el0_svc+<span class="hljs-number">0x8</span>/<span class="hljs-number">0xc</span><br>&lt;<span class="hljs-number">0</span>&gt;[  <span class="hljs-number">123.176391</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">2</span>]Code: <span class="hljs-number">97f</span>ff9dc <span class="hljs-number">17f</span>fffe9 <span class="hljs-number">910162</span>a0 <span class="hljs-number">97</span>a58b81 (b9405ab5) <br>&lt;<span class="hljs-number">4</span>&gt;[  <span class="hljs-number">123.176391</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">3</span>]---[ end trace <span class="hljs-number">3</span>c5fedb524b1a208 ]---<br>&lt;<span class="hljs-number">0</span>&gt;[  <span class="hljs-number">123.176391</span>s][pid:<span class="hljs-number">6550</span>,cpu6,lshw-bak,<span class="hljs-number">4</span>]Kernel panic - not syncing: Fatal exception<br></code></pre></td></tr></table></figure><h3 id="初步定位报错代码">初步定位报错代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">./scripts/faddr2line vmlinux __mutex_lock.isra<span class="hljs-number">.1</span>+<span class="hljs-number">0x608</span>/<span class="hljs-number">0x700</span><br>__mutex_lock.isra<span class="hljs-number">.1</span>+<span class="hljs-number">0x608</span>/<span class="hljs-number">0x700</span>:<br>mutex_can_spin_on_owner 于 kernel/locking/mutex.c:<span class="hljs-number">578</span><br>(已内连入)mutex_optimistic_spin 于 kernel/locking/mutex.c:<span class="hljs-number">622</span><br>(已内连入)__mutex_lock_common 于 kernel/locking/mutex.c:<span class="hljs-number">928</span><br>(已内连入)__mutex_lock 于 kernel/locking/mutex.c:<span class="hljs-number">1072</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">kernel/locking/mutex.c<br> <span class="hljs-number">562</span> <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mutex_can_spin_on_owner</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mutex *lock)</span><br> 563 &#123;<br> <span class="hljs-number">564</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">owner</span>;</span><br> <span class="hljs-number">565</span>         <span class="hljs-type">int</span> retval = <span class="hljs-number">1</span>;<br> <span class="hljs-number">566</span><br> <span class="hljs-number">567</span>         <span class="hljs-keyword">if</span> (need_resched())<br> <span class="hljs-number">568</span>                 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">569</span><br> <span class="hljs-number">570</span>         rcu_read_lock();<br> <span class="hljs-number">571</span>         owner = __mutex_owner(lock);   <span class="hljs-comment">// 代码真正出错在这一行</span><br> <span class="hljs-number">572</span><br> <span class="hljs-number">573</span>         <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 574          * As lock holder preemption issue, we both skip spinning if task is not</span><br><span class="hljs-comment"> 575          * on cpu or its cpu is preempted</span><br><span class="hljs-comment"> 576          */</span><br> <span class="hljs-number">577</span>         <span class="hljs-keyword">if</span> (owner)<br> <span class="hljs-number">578</span>                 retval = owner-&gt;on_cpu &amp;&amp; !vcpu_is_preempted(task_cpu(owner));<br> <span class="hljs-number">579</span>         rcu_read_unlock();<br> <span class="hljs-number">580</span><br> <span class="hljs-number">581</span>         <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 582          * If lock-&gt;owner is not set, the mutex has been released. Return true</span><br><span class="hljs-comment"> 583          * such that we&#x27;ll trylock in the spin path, which is a faster option</span><br><span class="hljs-comment"> 584          * than the blocking slow path.</span><br><span class="hljs-comment"> 585          */</span><br> <span class="hljs-number">586</span>         <span class="hljs-keyword">return</span> retval;<br> <span class="hljs-number">587</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">gdb vmlinux<br>disassemble /m __mutex_lock<br><span class="hljs-number">562</span>     <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mutex_can_spin_on_owner</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mutex *lock)</span><br>563     &#123;<br><span class="hljs-number">564</span>             <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">owner</span>;</span><br><span class="hljs-number">565</span>             <span class="hljs-type">int</span> retval = <span class="hljs-number">1</span>;<br><span class="hljs-number">566</span>                                                                                                                                                                                           <br><span class="hljs-number">567</span>             <span class="hljs-keyword">if</span> (need_resched())<br><span class="hljs-number">568</span>                     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">569</span><br><span class="hljs-number">570</span>             rcu_read_lock();<br><span class="hljs-number">571</span>             owner = __mutex_owner(lock);<br><span class="hljs-number">572</span><br><span class="hljs-number">573</span>             <span class="hljs-comment">/*</span><br><span class="hljs-comment">574              * As lock holder preemption issue, we both skip spinning if task is not</span><br><span class="hljs-comment">575              * on cpu or its cpu is preempted</span><br><span class="hljs-comment">576              */</span><br><span class="hljs-number">577</span>             <span class="hljs-keyword">if</span> (owner)<br>   <span class="hljs-number">0xffffff9009a58680</span> &lt;+<span class="hljs-number">1048</span>&gt;:  ands    x21, x0, #<span class="hljs-number">0xfffffffffffffff8</span><br>   <span class="hljs-number">0xffffff9009a58684</span> &lt;+<span class="hljs-number">1052</span>&gt;:  b.ne    <span class="hljs-number">0xffffff9009a58868</span> &lt;__mutex_lock+<span class="hljs-number">1536</span>&gt;  <span class="hljs-comment">// b.any</span><br><span class="hljs-number">578</span>                     retval = owner-&gt;on_cpu &amp;&amp; !vcpu_is_preempted(task_cpu(owner));<br>   <span class="hljs-number">0xffffff9009a58868</span> &lt;+<span class="hljs-number">1536</span>&gt;:  add     x0, x21, #<span class="hljs-number">0x58</span><br>   <span class="hljs-number">0xffffff9009a5886c</span> &lt;+<span class="hljs-number">1540</span>&gt;:  bl      <span class="hljs-number">0xffffff90083bf828</span> &lt;__asan_load4&gt;<br>   <span class="hljs-number">0xffffff9009a58870</span> &lt;+<span class="hljs-number">1544</span>&gt;:  ldr     w21, [x21, #<span class="hljs-number">88</span>]<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">add x0, x21, #<span class="hljs-number">0x58</span>: 将 x0 寄存器的值设置为 x21 寄存器的值加上 <span class="hljs-number">0x58</span>。这通常是在计算结构体或对象的字段的地址。<br><br>bl <span class="hljs-number">0xffffff90083bf828</span> &lt;__asan_load4&gt;: 这是一个分支跳转指令，调用地址为 <span class="hljs-number">0xffffff90083bf828</span> 处的函数（可能是内存访问相关的函数）。bl 意味着它是一个分支链接指令，会将返回地址保存在链接寄存器中。<br><br>ldr w21, [x21, #<span class="hljs-number">88</span>]: 从地址 x21 + <span class="hljs-number">88</span> 处加载一个<span class="hljs-number">32</span>位的值到 w21 寄存器。这似乎是加载一个结构体或对象的字段，因为它在 add 指令中计算了一个偏移量。<br><br>整个代码段的目的是计算某个结构体（通过 x21 寄存器指向的地址）中的某个字段（通过偏移量 <span class="hljs-number">88</span>）的值，并在此基础上执行一些比较和逻辑操作，将结果存储在 retval 变量中。这可能是在检查某个虚拟处理单元（vCPU）是否正在被调度，具体实现可能涉及到处理调度和预emption的相关逻辑。<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">p ((<span class="hljs-keyword">struct</span> task_struct *)<span class="hljs-number">0</span>)-&gt;on_cpu<br>Cannot access memory at address <span class="hljs-number">0x58</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) p &amp;((<span class="hljs-keyword">struct</span> task_struct *)<span class="hljs-number">0</span>)-&gt;on_cpu<br>$<span class="hljs-number">1</span> = (<span class="hljs-type">int</span> *) <span class="hljs-number">0x58</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c">include/linux/sched.h<br><span class="hljs-number">711</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br> <span class="hljs-number">712</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_THREAD_INFO_IN_TASK</span><br> <span class="hljs-number">713</span>         <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 714          * For reasons of header soup (see current_thread_info()), this</span><br><span class="hljs-comment"> 715          * must be the first element of task_struct.</span><br><span class="hljs-comment"> 716          */</span><br> <span class="hljs-number">717</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_info</span>              <span class="hljs-title">thread_info</span>;</span><br> <span class="hljs-number">718</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <span class="hljs-number">719</span>         <span class="hljs-comment">/* -1 unrunnable, 0 runnable, &gt;0 stopped: */</span><br> <span class="hljs-number">720</span>         <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span>                   state;<br> <span class="hljs-number">721</span><br> <span class="hljs-number">722</span>         <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 723          * This begins the randomizable portion of task_struct. Only</span><br><span class="hljs-comment"> 724          * scheduling-critical items should be added above here.</span><br><span class="hljs-comment"> 725          */</span><br> <span class="hljs-number">726</span>         randomized_struct_fields_start<br> <span class="hljs-number">727</span><br> <span class="hljs-number">728</span>         <span class="hljs-type">void</span>                            *<span class="hljs-built_in">stack</span>;<br> <span class="hljs-number">729</span>         <span class="hljs-type">atomic_t</span>                        usage;<br> <span class="hljs-number">730</span>         <span class="hljs-comment">/* Per task flags (PF_*), defined further below: */</span><br> <span class="hljs-number">731</span>         <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>                    flags;<br> <span class="hljs-number">732</span>         <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>                    ptrace;<br> <span class="hljs-number">733</span><br> <span class="hljs-number">734</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_HUAWEI_SCHED_VIP</span><br> <span class="hljs-number">735</span>         <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> vip_prio;<br> <span class="hljs-number">736</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">hisi_vip_entry</span>;</span><br> <span class="hljs-number">737</span>         u64 hisi_vip_last_queued;<br> <span class="hljs-number">738</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <span class="hljs-number">739</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SMP</span><br> <span class="hljs-number">740</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">llist_node</span>               <span class="hljs-title">wake_entry</span>;</span><br> <span class="hljs-number">741</span>         <span class="hljs-type">int</span>                             on_cpu;<br> <span class="hljs-number">742</span> <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_THREAD_INFO_IN_TASK</span><br> <span class="hljs-number">743</span>         <span class="hljs-comment">/* Current CPU: */</span><br> <span class="hljs-number">744</span>         <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>                    cpu;<br> <span class="hljs-number">745</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <span class="hljs-number">746</span>         <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>                    wakee_flips;<br> <span class="hljs-number">747</span>         <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>                   wakee_flip_decay_ts;<br> <span class="hljs-number">748</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>              *<span class="hljs-title">last_wakee</span>;</span><br> <span class="hljs-number">749</span><br> <span class="hljs-number">750</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>      *<span class="hljs-title">waker</span>;</span><br> <span class="hljs-number">751</span>         <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>            first_awakend;<br> <span class="hljs-number">752</span>         <span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">include/linux/mutex.h<br><span class="hljs-number">73</span> <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *__<span class="hljs-title">mutex_owner</span>(<span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> *<span class="hljs-title">lock</span>)</span><br><span class="hljs-class"> 74 &#123;</span><br> <span class="hljs-number">75</span>         <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> task_struct *)(atomic_long_read(&amp;lock-&gt;owner) &amp; ~<span class="hljs-number">0x07</span>);<br> <span class="hljs-number">76</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">假设 &amp;lock-&gt;owner 是一个 <span class="hljs-number">64</span> 位地址，那么 &amp;lock-&gt;owner 的十六进制表示形式为 <span class="hljs-number">0008070000000000</span>。<br><br>对 &amp;lock-&gt;owner 进行与 ~<span class="hljs-number">0x07</span> 的按位与操作，即 <span class="hljs-number">0008070000000000</span> &amp; ~<span class="hljs-number">0x07</span>，结果为 <span class="hljs-number">0008070000000000</span> &amp; FFFFFFFFFFFFFFF8，最终值仍然是 <span class="hljs-number">0008070000000000</span>。<br><br>所以，&amp;lock-&gt;owner 等于 <span class="hljs-number">0008070000000000</span>。<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) p ((<span class="hljs-keyword">struct</span> mutex *)<span class="hljs-number">0</span>)-&gt;owner<br>Cannot access memory at address <span class="hljs-number">0x0</span><br></code></pre></td></tr></table></figure><p>进一步表明lock地址为0008070000000000。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) p ((<span class="hljs-keyword">struct</span> fb_info *)<span class="hljs-number">0</span>)-&gt;lock<br>Cannot access memory at address <span class="hljs-number">0x10</span><br></code></pre></td></tr></table></figure><p>fb_info指向的虚拟地址为：0x0008070000000000 - 0x10 = 0x000806FFFFFFFFF0，0x000806FFFFFFFFF0位于虚拟地址内核空间与用户空间之间，说明此地址大概率被谁释放了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">cd /home/uos/lshw<span class="hljs-number">-02.18</span><span class="hljs-number">.85</span><span class="hljs-number">.5</span><br>gdb /usr/bin/lshw-bak<br><span class="hljs-built_in">set</span> substitute-path /build/lshw<span class="hljs-number">-02.18</span><span class="hljs-number">.85</span><span class="hljs-number">.5</span>/src /home/uos/lshw<span class="hljs-number">-02.18</span><span class="hljs-number">.85</span><span class="hljs-number">.5</span>/src<br>(gdb) i b<br>Num     Type           Disp Enb Address            What<br><span class="hljs-number">1</span>       breakpoint     keep y   <span class="hljs-number">0x0000000000404580</span> in <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>**)</span> at lshw.cc:80<br>        breakpoint already hit 1 time<br>2       breakpoint     keep y   0x0000000000459ec8 in <span class="hljs-title function_">scan_fb</span><span class="hljs-params">(hwNode&amp;)</span> at fb.cc:230<br>        breakpoint already hit 1 time<br>3       breakpoint     keep y   0x0000000000459f08 in mknod at fb.cc:207<br>        breakpoint already hit 1 time<br></code></pre></td></tr></table></figure><p>当前已用slub_debug、kasan排查内存错误问题，没发现问题。</p><p>华为klua-kernel开启lockdep检测死锁，也没观察到死锁问题。</p><p>接下来进一步分析方向只能转向udl驱动模块代码执行流程。</p><h2 id="section">1060</h2><p>此问题在1060上不存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@uos-PC:/home/uos<span class="hljs-comment"># uname -a</span><br>Linux uos-PC 4.19.71-arm64-desktop-udl-slub-debug-kasan-lockdep <span class="hljs-comment">#1 SMP PREEMPT Fri Nov 24 09:13:36 CST 2023 aarch64 GNU/Linux</span><br>root@uos-PC:/home/uos<span class="hljs-comment"># </span><br>root@uos-PC:/home/uos<span class="hljs-comment"># </span><br>root@uos-PC:/home/uos<span class="hljs-comment"># cat /etc/os-release </span><br>PRETTY_NAME=<span class="hljs-string">&quot;UOS Desktop 20 Pro&quot;</span><br>NAME=<span class="hljs-string">&quot;uos&quot;</span><br>VERSION_ID=<span class="hljs-string">&quot;20&quot;</span><br>VERSION=<span class="hljs-string">&quot;20&quot;</span><br>ID=uos<br>HOME_URL=<span class="hljs-string">&quot;https://www.chinauos.com/&quot;</span><br>BUG_REPORT_URL=<span class="hljs-string">&quot;http://bbs.chinauos.com&quot;</span><br>VERSION_CODENAME=eagle<br>root@uos-PC:/home/uos<span class="hljs-comment"># cat /etc/os-version </span><br>[Version] <br>SystemName=UOS Desktop<br>SystemName[zh_CN]=统信桌面操作系统<br>ProductType=Desktop<br>ProductType[zh_CN]=桌面<br>EditionName=Professional<br>EditionName[zh_CN]=专业版<br>MajorVersion=20<br>MinorVersion=1060<br>OsBuild=11014.102.100<br>root@uos-PC:/home/uos<span class="hljs-comment"># cat /etc/pro</span><br>product-info       profile            profile.d/         protocols          proxychains4.conf  <br>root@uos-PC:/home/uos<span class="hljs-comment"># cat /etc/pro</span><br>product-info       profile            profile.d/         protocols          proxychains4.conf  <br>root@uos-PC:/home/uos<span class="hljs-comment"># cat /etc/product-info </span><br>20231123.build54124<br></code></pre></td></tr></table></figure><h3 id="拔掉udl设备">拔掉udl设备</h3><h4 id="usb_disconnect">usb_disconnect</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [<span class="hljs-number">2023</span>:<span class="hljs-number">11</span>:<span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">03</span>][pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>: USB disconnect, device number <span class="hljs-number">4</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: USB disconnect, device number <span class="hljs-number">5</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>]shy ==&gt; udl_usb_disconnect<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]shy ==&gt; file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_unplug, line: <span class="hljs-number">503</span>, dev-&gt;dev-&gt;init_name: <span class="hljs-number">0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>]CPU: <span class="hljs-number">0</span> PID: <span class="hljs-number">5</span> Comm: kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span> Tainted: G    B             <span class="hljs-number">4.19</span><span class="hljs-number">.71</span>-arm64-desktop-udl-slub-debug-kasan-lockdep #<span class="hljs-number">1</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>]Hardware name: HUAWEI L410 KLVU-WDU0/SP1KVUM, BIOS <span class="hljs-number">1.00</span><span class="hljs-number">.73</span> <span class="hljs-number">07</span>/<span class="hljs-number">15</span>/<span class="hljs-number">2023</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]Workqueue: usb_hub_wq hub_event<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]Call trace:<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x2e0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] show_stack+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] dump_stack+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0x10c</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>] unbind_console+<span class="hljs-number">0x9c</span>/<span class="hljs-number">0x210</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>] unlink_framebuffer+<span class="hljs-number">0x30</span>/<span class="hljs-number">0x40</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>] drm_fb_helper_unlink_fbi+<span class="hljs-number">0x30</span>/<span class="hljs-number">0x40</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>] udl_fbdev_unplug+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x6c</span> [udl]<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] udl_usb_disconnect+<span class="hljs-number">0x44</span>/<span class="hljs-number">0x60</span> [udl]<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] usb_unbind_interface+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0x378</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] device_release_driver_internal+<span class="hljs-number">0x258</span>/<span class="hljs-number">0x338</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] device_release_driver+<span class="hljs-number">0x28</span>/<span class="hljs-number">0x38</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] bus_remove_device+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x248</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] device_del+<span class="hljs-number">0x240</span>/<span class="hljs-number">0x560</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>] usb_disable_device+<span class="hljs-number">0x114</span>/<span class="hljs-number">0x338</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>] usb_disconnect+<span class="hljs-number">0x15c</span>/<span class="hljs-number">0x420</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>] usb_disconnect+<span class="hljs-number">0x124</span>/<span class="hljs-number">0x420</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>] hub_event+<span class="hljs-number">0x9ac</span>/<span class="hljs-number">0x1bd0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] process_one_work+<span class="hljs-number">0x4fc</span>/<span class="hljs-number">0xc80</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] worker_thread+<span class="hljs-number">0x80</span>/<span class="hljs-number">0x700</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] kthread+<span class="hljs-number">0x208</span>/<span class="hljs-number">0x218</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] ret_from_fork+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x1c</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1774</span>, fun: unbind_console, fb-&gt;info: ffffffc1b957a880, &amp;fb_info-&gt;lock:ffffffc1b957a890, &amp;fb_info-&gt;lock.owner :ffffffc1b957a890, i: <span class="hljs-number">1</span>, FB_MAX: <span class="hljs-number">32</span>, registered_fb[i]: ffffffc1b957a880<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1790</span>, fun: unbind_console, fb-&gt;info: ffffffc1b957a880, &amp;fb_info-&gt;lock:ffffffc1b957a890, &amp;fb_info-&gt;lock.owner: ffffffc1b957a890, i: <span class="hljs-number">1</span>, ret: <span class="hljs-number">1</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>][USB3][xhci_notifier_fn]+<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>][USB3][xhci_notifier_fn]-<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>: USB disconnect, device number <span class="hljs-number">6</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span>: USB disconnect, device number <span class="hljs-number">8</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>][USB3][xhci_notifier_fn]+<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>][USB3][xhci_notifier_fn]-<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>][HISI_DRM I]:hisi_dp_connector_detect: [DP] hisi dp connector detect -:<span class="hljs-number">2</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>][USB3][xhci_notifier_fn]+<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>][USB3][xhci_notifier_fn]-<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>: USB disconnect, device number <span class="hljs-number">7</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>][HISI_DRM I]:mipi2edp_backlight_update: +<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>][USB3][xhci_notifier_fn]+<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>][USB3][xhci_notifier_fn]-<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.7</span>: USB disconnect, device number <span class="hljs-number">9</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>][USB3][xhci_notifier_fn]+<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>][USB3][xhci_notifier_fn]-<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>][USB3][xhci_notifier_fn]+<br>[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">16</span>:<span class="hljs-number">29</span>:<span class="hljs-number">24</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>][USB3][xhci_notifier_fn]-<br></code></pre></td></tr></table></figure><h2 id="section-1">1070</h2><p>1070上插拔udl设备内核panic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@uos-PC:/home/uos<span class="hljs-comment"># uname -a</span><br>Linux uos-PC 4.19.71-arm64-desktop-udl-slub-debug-kasan-lockdep <span class="hljs-comment">#1 SMP PREEMPT Fri Nov 24 09:13:36 CST 2023 aarch64 GNU/Linux</span><br>root@uos-PC:/home/uos<span class="hljs-comment"># cat /etc/os-release </span><br>PRETTY_NAME=<span class="hljs-string">&quot;UOS Desktop 20 Pro&quot;</span><br>NAME=<span class="hljs-string">&quot;uos&quot;</span><br>VERSION_ID=<span class="hljs-string">&quot;20&quot;</span><br>VERSION=<span class="hljs-string">&quot;20&quot;</span><br>ID=uos<br>HOME_URL=<span class="hljs-string">&quot;https://www.chinauos.com/&quot;</span><br>BUG_REPORT_URL=<span class="hljs-string">&quot;http://bbs.chinauos.com&quot;</span><br>VERSION_CODENAME=eagle<br>root@uos-PC:/home/uos<span class="hljs-comment"># cat /etc/product-info </span><br>20231118.build54124<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg -C &amp;&amp; (dmesg -w -T | <span class="hljs-built_in">tee</span> udl_1070_5.log)<br></code></pre></td></tr></table></figure><h3 id="插入udl设备">插入udl设备</h3><h4 id="losf查看设备">losf查看设备</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">uos@uos-PC:/sys/class/graphics$ lsof /dev/dri/card0<br>lsof: WARNING: can<span class="hljs-string">&#x27;t stat() vfat file system /boot/efi</span><br><span class="hljs-string">      Output information may be incomplete.</span><br><span class="hljs-string">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="hljs-string">kwin_wayl 3848  uos   19u   CHR  226,0      0t0 2539 /dev/dri/card0</span><br><span class="hljs-string">Xwayland  3987  uos    6u   CHR  226,0      0t0 2539 /dev/dri/card0</span><br><span class="hljs-string">dde-deskt 4055  uos   45u   CHR  226,0      0t0 2539 /dev/dri/card0</span><br><span class="hljs-string">dde-dock  4125  uos   33u   CHR  226,0      0t0 2539 /dev/dri/card0</span><br><span class="hljs-string">dde-lock  4800  uos   31u   CHR  226,0      0t0 2539 /dev/dri/card0</span><br><span class="hljs-string">dde-file- 5442  uos   35u   CHR  226,0      0t0 2539 /dev/dri/card0</span><br><span class="hljs-string"></span><br><span class="hljs-string">uos@uos-PC:/sys/class/graphics$ lsof /dev/dri/card1</span><br><span class="hljs-string">lsof: WARNING: can&#x27;</span>t <span class="hljs-built_in">stat</span>() vfat file system /boot/efi<br>      Output information may be incomplete.<br>COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME<br>kwin_wayl 3848  uos  mem    CHR  226,1          132758 /dev/dri/card1<br>kwin_wayl 3848  uos   99u   CHR  226,1      0t0 132758 /dev/dri/card1<br>Xwayland  3987  uos   52u   CHR  226,1      0t0 132758 /dev/dri/card1<br><br>uos@uos-PC:/sys/class/graphics$ lsof /dev/fb1<br>lsof: WARNING: can<span class="hljs-string">&#x27;t stat() vfat file system /boot/efi</span><br><span class="hljs-string">      Output information may be incomplete.</span><br></code></pre></td></tr></table></figure><h4 id="do_register_framebuffer">do_register_framebuffer</h4><p>插入udl设备时，/dev/fb1注册流程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">44</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: new high-speed USB device number <span class="hljs-number">5</span> using xhci-hcd<br><span class="hljs-number">53</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: New USB device found, idVendor=<span class="hljs-number">17e9</span>, idProduct=<span class="hljs-number">03</span>c1, bcdDevice= <span class="hljs-number">4.41</span><br><span class="hljs-number">54</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: New USB device strings: Mfr=<span class="hljs-number">1</span>, Product=<span class="hljs-number">2</span>, SerialNumber=<span class="hljs-number">3</span><br><span class="hljs-number">55</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: Product: USB LCD<br><span class="hljs-number">56</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: Manufacturer: DisplayLink<br><span class="hljs-number">57</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: SerialNumber: C20220115<br><span class="hljs-number">58</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>][drm] vendor descriptor length:<span class="hljs-number">1b</span> data:<span class="hljs-number">1b</span> <span class="hljs-number">5f</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">19</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span><br><span class="hljs-number">59</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [<span class="hljs-number">2023</span>:<span class="hljs-number">11</span>:<span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">14</span>][pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]CPU: <span class="hljs-number">7</span> PID: <span class="hljs-number">494</span> Comm: kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span> Tainted: G    B             <span class="hljs-number">4.19</span><span class="hljs-number">.71</span>-arm64-desktop-udl-slub-debug-kasan-lockdep #<span class="hljs-number">1</span><br><span class="hljs-number">60</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]Hardware name: HUAWEI HUAWEI L410 KLVU-WDU0/SP1KVUM, BIOS <span class="hljs-number">1.00</span><span class="hljs-number">.53</span> <span class="hljs-number">03</span>/<span class="hljs-number">24</span>/<span class="hljs-number">2021</span><br><span class="hljs-number">61</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]Workqueue: usb_hub_wq hub_event<br><span class="hljs-number">62</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]Call trace:<br><span class="hljs-number">63</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x2e0</span><br><span class="hljs-number">64</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>] show_stack+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br><span class="hljs-number">65</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>] dump_stack+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0x10c</span><br><span class="hljs-number">66</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>] register_framebuffer+<span class="hljs-number">0xac</span>/<span class="hljs-number">0x494</span>      <span class="hljs-comment">// drivers/video/fbdev/core/fbmem.c:1889 1994</span><br><span class="hljs-number">67</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>] __drm_fb_helper_initial_config_and_unlock+<span class="hljs-number">0x3bc</span>/<span class="hljs-number">0x6c0</span>        <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c:2652 2687</span><br><span class="hljs-number">68</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>] drm_fb_helper_initial_config+<span class="hljs-number">0x50</span>/<span class="hljs-number">0x60</span>       <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c:2757 2754</span><br><span class="hljs-number">69</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>] udl_fbdev_init+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0xe8</span> [udl]       <span class="hljs-comment">// drivers/gpu/drm/udl/udl_fb.c:452 478</span><br><span class="hljs-number">70</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] udl_init+<span class="hljs-number">0x500</span>/<span class="hljs-number">0x710</span> [udl]   <span class="hljs-comment">// drivers/gpu/drm/udl/udl_main.c:313 341</span><br><br><br><br><br>udl_driver_create drivers/gpu/drm/udl/udl_drv.c:<span class="hljs-number">83</span> <span class="hljs-number">102</span><br><br><br><br><br><span class="hljs-number">71</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>] udl_usb_probe+<span class="hljs-number">0x94</span>/<span class="hljs-number">0x150</span> [udl]       <span class="hljs-comment">// drivers/gpu/drm/udl/udl_drv.c:113 119-&gt;udl_driver_create</span><br><br><br><br><br><span class="hljs-number">72</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>] usb_probe_interface+<span class="hljs-number">0x178</span>/<span class="hljs-number">0x3e0</span><br><span class="hljs-number">73</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>] really_probe+<span class="hljs-number">0x280</span>/<span class="hljs-number">0x520</span><br><span class="hljs-number">74</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>] driver_probe_device+<span class="hljs-number">0x88</span>/<span class="hljs-number">0x1a8</span><br><span class="hljs-number">75</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>] __device_attach_driver+<span class="hljs-number">0x10c</span>/<span class="hljs-number">0x170</span><br><span class="hljs-number">76</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>] bus_for_each_drv+<span class="hljs-number">0xf8</span>/<span class="hljs-number">0x158</span><br><span class="hljs-number">77</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>] __device_attach+<span class="hljs-number">0x15c</span>/<span class="hljs-number">0x1e8</span><br><span class="hljs-number">78</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>] device_initial_probe+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br><span class="hljs-number">79</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>] bus_probe_device+<span class="hljs-number">0xf0</span>/<span class="hljs-number">0x100</span><br><span class="hljs-number">80</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] device_add+<span class="hljs-number">0x538</span>/<span class="hljs-number">0x958</span><br><span class="hljs-number">81</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>] usb_set_configuration+<span class="hljs-number">0x730</span>/<span class="hljs-number">0xca0</span><br><span class="hljs-number">82</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>] generic_probe+<span class="hljs-number">0x70</span>/<span class="hljs-number">0xa0</span><br><span class="hljs-number">83</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>] usb_probe_device+<span class="hljs-number">0x68</span>/<span class="hljs-number">0xb0</span><br><span class="hljs-number">84</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>] really_probe+<span class="hljs-number">0x280</span>/<span class="hljs-number">0x520</span><br><span class="hljs-number">85</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>] driver_probe_device+<span class="hljs-number">0x88</span>/<span class="hljs-number">0x1a8</span><br><span class="hljs-number">86</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>] __device_attach_driver+<span class="hljs-number">0x10c</span>/<span class="hljs-number">0x170</span><br><span class="hljs-number">87</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>] bus_for_each_drv+<span class="hljs-number">0xf8</span>/<span class="hljs-number">0x158</span><br><span class="hljs-number">88</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>] __device_attach+<span class="hljs-number">0x15c</span>/<span class="hljs-number">0x1e8</span><br><span class="hljs-number">89</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>] device_initial_probe+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br><span class="hljs-number">90</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] bus_probe_device+<span class="hljs-number">0xf0</span>/<span class="hljs-number">0x100</span><br><span class="hljs-number">91</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>] device_add+<span class="hljs-number">0x538</span>/<span class="hljs-number">0x958</span><br><span class="hljs-number">92</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>] usb_new_device+<span class="hljs-number">0x424</span>/<span class="hljs-number">0x998</span><br><span class="hljs-number">93</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>] hub_event+<span class="hljs-number">0xd08</span>/<span class="hljs-number">0x1bd0</span><br><span class="hljs-number">94</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>] process_one_work+<span class="hljs-number">0x4fc</span>/<span class="hljs-number">0xc80</span><br><span class="hljs-number">95</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>] worker_thread+<span class="hljs-number">0x80</span>/<span class="hljs-number">0x700</span><br><span class="hljs-number">96</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>] kthread+<span class="hljs-number">0x208</span>/<span class="hljs-number">0x218</span><br><span class="hljs-number">97</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>] ret_from_fork+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x1c</span><br><span class="hljs-number">98</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1704</span>, fun: do_register_framebuffer, fb-&gt;info: ffffffd0efecda80, &amp;fb_info-&gt;lock:ffffffd0efecda90, &amp;fb_info-&gt;lock.owner:ffffffd0efecda90.<br><span class="hljs-number">99</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]udl <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>:<span class="hljs-number">1.0</span>: fb1: udldrmfb frame buffer device<br><span class="hljs-number">100</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>][drm] Initialized udl <span class="hljs-number">0.0</span><span class="hljs-number">.1</span> <span class="hljs-number">20120220</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>:<span class="hljs-number">1.0</span> on minor <span class="hljs-number">1</span><br><span class="hljs-number">101</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>][drm] Initialized udl on minor <span class="hljs-number">1</span><br><span class="hljs-number">102</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">103</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">104</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>][USB3][xhci_notifier_fn]-<br><span class="hljs-number">112</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>][HISI_DRM I]:hisi_dp_connector_detect: [DP] hisi dp connector detect -:<span class="hljs-number">2</span><br><span class="hljs-number">113</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>: new high-speed USB device number <span class="hljs-number">6</span> using xhci-hcd<br><span class="hljs-number">114</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>: New USB device found, idVendor=<span class="hljs-number">1</span>a40, idProduct=<span class="hljs-number">0101</span>, bcdDevice= <span class="hljs-number">1.11</span><br><span class="hljs-number">115</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>: New USB device strings: Mfr=<span class="hljs-number">0</span>, Product=<span class="hljs-number">1</span>, SerialNumber=<span class="hljs-number">0</span><br><span class="hljs-number">116</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>: Product: USB <span class="hljs-number">2.0</span> Hub<br><span class="hljs-number">125</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>]hub <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>:<span class="hljs-number">1.0</span>: USB hub found<br><span class="hljs-number">126</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]hub <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>:<span class="hljs-number">1.0</span>: <span class="hljs-number">4</span> ports detected<br><span class="hljs-number">127</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">128</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">129</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">32</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>][USB3][xhci_notifier_fn]usb hub don<span class="hljs-number">&#x27;</span>t notify<br><span class="hljs-number">130</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>: new full-speed USB device number <span class="hljs-number">7</span> using xhci-hcd<br><span class="hljs-number">131</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>: New USB device found, idVendor=<span class="hljs-number">05</span>af, idProduct=<span class="hljs-number">0060</span>, bcdDevice= <span class="hljs-number">0.00</span><br><span class="hljs-number">132</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>: New USB device strings: Mfr=<span class="hljs-number">5</span>, Product=<span class="hljs-number">6</span>, SerialNumber=<span class="hljs-number">0</span><br><span class="hljs-number">133</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>: Product: HandWrite Series<br><span class="hljs-number">134</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">7</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>: Manufacturer: Sunrex<br><span class="hljs-number">135</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">8</span>]hid-generic <span class="hljs-number">0003</span>:<span class="hljs-number">05</span>AF:<span class="hljs-number">0060.0003</span>: hidraw2: USB HID v1<span class="hljs-number">.11</span> Device [Sunrex HandWrite Series] on usb-xhci-hcd<span class="hljs-number">.0</span>.<span class="hljs-keyword">auto</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>/input0<br><span class="hljs-number">136</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]input: Sunrex HandWrite Series Mouse as /devices/platform/hisi_usb@f8480000/f8400000.dwc3/xhci-hcd<span class="hljs-number">.0</span>.<span class="hljs-keyword">auto</span>/usb1/<span class="hljs-number">1</span><span class="hljs-number">-1</span>/<span class="hljs-number">1</span><span class="hljs-number">-1.1</span>/<span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>/<span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>:<span class="hljs-number">1.1</span>/<span class="hljs-number">0003</span>:<span class="hljs-number">05</span>AF:<span class="hljs-number">0060.0004</span>/input/input13<br><span class="hljs-number">137</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]hid-generic <span class="hljs-number">0003</span>:<span class="hljs-number">05</span>AF:<span class="hljs-number">0060.0004</span>: input,hidraw3: USB HID v1<span class="hljs-number">.11</span> Mouse [Sunrex HandWrite Series] on usb-xhci-hcd<span class="hljs-number">.0</span>.<span class="hljs-keyword">auto</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>/input1<br><span class="hljs-number">138</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">139</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">140</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>][USB3][xhci_notifier_fn]-<br><span class="hljs-number">147</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.7</span>: new full-speed USB device number <span class="hljs-number">9</span> using xhci-hcd<br><span class="hljs-number">176</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.7</span>: New USB device found, idVendor=<span class="hljs-number">058f</span>, idProduct=<span class="hljs-number">9540</span>, bcdDevice= <span class="hljs-number">1.20</span><br><span class="hljs-number">177</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.7</span>: New USB device strings: Mfr=<span class="hljs-number">1</span>, Product=<span class="hljs-number">2</span>, SerialNumber=<span class="hljs-number">0</span><br><span class="hljs-number">178</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.7</span>: Product: EMV Smartcard Reader<br><span class="hljs-number">179</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.7</span>: Manufacturer: Generic<br><span class="hljs-number">180</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">3</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">181</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">182</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">33</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">494</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">2</span>,<span class="hljs-number">5</span>][USB3][xhci_notifier_fn]-<br></code></pre></td></tr></table></figure><h3 id="拔掉udl设备-1">拔掉udl设备</h3><h4 id="usb_disconnect-1">usb_disconnect</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">27</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [<span class="hljs-number">2023</span>:<span class="hljs-number">11</span>:<span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">13</span>][pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>: new high-speed USB device number <span class="hljs-number">4</span> using xhci-hcd<br><span class="hljs-number">36</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>: New USB device found, idVendor=<span class="hljs-number">1</span>a40, idProduct=<span class="hljs-number">0201</span>, bcdDevice= <span class="hljs-number">1.00</span><br><span class="hljs-number">37</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>: New USB device strings: Mfr=<span class="hljs-number">0</span>, Product=<span class="hljs-number">1</span>, SerialNumber=<span class="hljs-number">0</span><br><span class="hljs-number">38</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>: Product: USB <span class="hljs-number">2.0</span> Hub [MTT]<br><span class="hljs-number">39</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]hub <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>:<span class="hljs-number">1.0</span>: USB hub found<br><span class="hljs-number">40</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]hub <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>:<span class="hljs-number">1.0</span>: <span class="hljs-number">7</span> ports detected<br><span class="hljs-number">41</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">42</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">43</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">31</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>][USB3][xhci_notifier_fn]usb hub don<span class="hljs-number">&#x27;</span>t notify<br><span class="hljs-number">1880</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">55</span> <span class="hljs-number">2023</span>] [<span class="hljs-number">2023</span>:<span class="hljs-number">11</span>:<span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">37</span>][pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span>: USB disconnect, device number <span class="hljs-number">4</span><br><span class="hljs-number">1881</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">55</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.1</span>: USB disconnect, device number <span class="hljs-number">5</span><br><span class="hljs-number">1882</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>]shy ==&gt; udl_usb_disconnect<br><span class="hljs-number">1883</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>]file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_unplug, line: <span class="hljs-number">507</span>, dev-&gt;dev-&gt;init_name: (null)<br><span class="hljs-number">1884</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]CPU: <span class="hljs-number">0</span> PID: <span class="hljs-number">5</span> Comm: kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span> Tainted: G    B             <span class="hljs-number">4.19</span><span class="hljs-number">.71</span>-arm64-desktop-udl-slub-debug-kasan-lockdep #<span class="hljs-number">1</span><br><span class="hljs-number">1885</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>]Hardware name: HUAWEI HUAWEI L410 KLVU-WDU0/SP1KVUM, BIOS <span class="hljs-number">1.00</span><span class="hljs-number">.53</span> <span class="hljs-number">03</span>/<span class="hljs-number">24</span>/<span class="hljs-number">2021</span><br><span class="hljs-number">1886</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>]Workqueue: usb_hub_wq hub_event<br><span class="hljs-number">1887</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]Call trace:<br><span class="hljs-number">1888</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x2e0</span><br><span class="hljs-number">1889</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] show_stack+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br><span class="hljs-number">1890</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] dump_stack+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0x10c</span><br><span class="hljs-number">1891</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] unbind_console+<span class="hljs-number">0x9c</span>/<span class="hljs-number">0x210</span><br><span class="hljs-number">1892</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>] unlink_framebuffer+<span class="hljs-number">0x30</span>/<span class="hljs-number">0x40</span>         <span class="hljs-comment">// drivers/video/fbdev/core/fbmem.c:1853 1857 1861</span><br><span class="hljs-number">1893</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>] drm_fb_helper_unlink_fbi+<span class="hljs-number">0x30</span>/<span class="hljs-number">0x40</span>   <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c:1024 1027</span><br><span class="hljs-number">1894</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>] udl_fbdev_unplug+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x6c</span> [udl]     <span class="hljs-comment">// drivers/gpu/drm/udl/udl_fb.c:506 515</span><br><span class="hljs-number">1895</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>] udl_usb_disconnect+<span class="hljs-number">0x44</span>/<span class="hljs-number">0x60</span> [udl]   <span class="hljs-comment">// drivers/gpu/drm/udl/udl_drv.c:138 144</span><br><span class="hljs-number">1896</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] usb_unbind_interface+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0x378</span><br><span class="hljs-number">1897</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] device_release_driver_internal+<span class="hljs-number">0x258</span>/<span class="hljs-number">0x338</span><br><span class="hljs-number">1898</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] device_release_driver+<span class="hljs-number">0x28</span>/<span class="hljs-number">0x38</span><br><span class="hljs-number">1899</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] bus_remove_device+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x248</span><br><span class="hljs-number">1900</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] device_del+<span class="hljs-number">0x240</span>/<span class="hljs-number">0x560</span><br><span class="hljs-number">1901</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] usb_disable_device+<span class="hljs-number">0x114</span>/<span class="hljs-number">0x338</span><br><span class="hljs-number">1902</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>] usb_disconnect+<span class="hljs-number">0x15c</span>/<span class="hljs-number">0x420</span><br><span class="hljs-number">1903</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>] usb_disconnect+<span class="hljs-number">0x124</span>/<span class="hljs-number">0x420</span><br><span class="hljs-number">1904</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>] hub_event+<span class="hljs-number">0x9ac</span>/<span class="hljs-number">0x1bd0</span><br><span class="hljs-number">1905</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>] process_one_work+<span class="hljs-number">0x4fc</span>/<span class="hljs-number">0xc80</span><br><span class="hljs-number">1906</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] worker_thread+<span class="hljs-number">0x80</span>/<span class="hljs-number">0x700</span><br><span class="hljs-number">1907</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] kthread+<span class="hljs-number">0x208</span>/<span class="hljs-number">0x218</span><br><span class="hljs-number">1908</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] ret_from_fork+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x1c</span><br><br><br><br><span class="hljs-number">1909</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1774</span>, fun: unbind_console, fb-&gt;info: ffffffd0efecda80, &amp;fb_info-&gt;lock:ffffffd0efecda90, &amp;fb_info-&gt;lock.owner :ffffffd0efecda90, i: <span class="hljs-number">1</span>, FB_MAX: <span class="hljs-number">32</span>, registered_fb[i]: ffffffd0efecda80<br><br><span class="hljs-number">1910</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1790</span>, fun: unbind_console, fb-&gt;info: ffffffd0efecda80, &amp;fb_info-&gt;lock:ffffffd0efecda90, &amp;fb_info-&gt;lock.owner: ffffffd0efecda90, i: <span class="hljs-number">1</span>, ret: <span class="hljs-number">1</span><br><br><br>./scripts/faddr2line vmlinux unlink_framebuffer+<span class="hljs-number">0x30</span>/<span class="hljs-number">0x40</span><br>unlink_framebuffer+<span class="hljs-number">0x30</span>/<span class="hljs-number">0x40</span>:<br>unlink_framebuffer 于 drivers/video/fbdev/core/fbmem.c:<span class="hljs-number">1863</span><br><br><span class="hljs-number">1852</span> <span class="hljs-type">int</span> unlink_framebuffer(<span class="hljs-keyword">struct</span> fb_info *fb_info)<br><span class="hljs-number">1853</span> &#123;<br><span class="hljs-number">1854</span>         <span class="hljs-type">int</span> ret;<br><span class="hljs-number">1855</span> <br><span class="hljs-number">1856</span>         ret = __unlink_framebuffer(fb_info);<br><span class="hljs-number">1857</span>         <span class="hljs-keyword">if</span> (ret)<br><span class="hljs-number">1858</span>                 <span class="hljs-keyword">return</span> ret;<br><span class="hljs-number">1859</span> <br><span class="hljs-number">1860</span>         unbind_console(fb_info);<br><span class="hljs-number">1861</span> <br><span class="hljs-number">1862</span>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">1863</span> &#125;<br><span class="hljs-number">1864</span> EXPORT_SYMBOL(unlink_framebuffer);<br><br><br><br><br><span class="hljs-number">1919</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">1920</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">1921</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>][USB3][xhci_notifier_fn]-<br><span class="hljs-number">1922</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span>: USB disconnect, device number <span class="hljs-number">6</span><br><span class="hljs-number">1923</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span>: USB disconnect, device number <span class="hljs-number">8</span><br><span class="hljs-number">1924</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">1925</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">1926</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>][USB3][xhci_notifier_fn]-<br><span class="hljs-number">1927</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">1928</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">1929</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>][USB3][xhci_notifier_fn]-<br><span class="hljs-number">1930</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>: USB disconnect, device number <span class="hljs-number">7</span><br><span class="hljs-number">1938</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>][HISI_DRM I]:hisi_dp_connector_detect: [DP] hisi dp connector detect -:<span class="hljs-number">2</span><br><span class="hljs-number">1939</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">1940</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">1941</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>][USB3][xhci_notifier_fn]-<br><span class="hljs-number">1942</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>]usb <span class="hljs-number">1</span><span class="hljs-number">-1.1</span><span class="hljs-number">.7</span>: USB disconnect, device number <span class="hljs-number">9</span><br><span class="hljs-number">1943</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">1944</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">1945</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>][USB3][xhci_notifier_fn]-<br><span class="hljs-number">1946</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>][usb_hub]: USB_BUS_ADD busnum = <span class="hljs-number">0</span><br><span class="hljs-number">1947</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>][USB3][xhci_notifier_fn]+<br><span class="hljs-number">1948</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">5</span>,cpu0,kworker/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>][USB3][xhci_notifier_fn]-<br></code></pre></td></tr></table></figure><h5 id="unbind_console">unbind_console</h5><p>fb_notifier_call_chain这里return 1, 导致后续流程终止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1767</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">unbind_console</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fb_info *fb_info)</span><br>1768 &#123;<br><span class="hljs-number">1769</span>         dump_stack();<br><span class="hljs-number">1770</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fb_event</span> <span class="hljs-title">event</span>;</span><br><span class="hljs-number">1771</span>         <span class="hljs-type">int</span> ret;<br><span class="hljs-number">1772</span>         <span class="hljs-type">int</span> i = fb_info-&gt;node;<br><span class="hljs-number">1773</span> <br><span class="hljs-number">1774</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner :%px, i: %d, FB_MAX: %d, registered_fb[i]: %px\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__,      fb_info, &amp;fb_info-&gt;lock, &amp;fb_info-&gt;lock.owner, i, FB_MAX, registered_fb[i]);<br><span class="hljs-number">1775</span> <br><span class="hljs-number">1776</span>         <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= FB_MAX || registered_fb[i] != fb_info) &#123;<br><span class="hljs-number">1777</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner :%px, i: %d\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;f     b_info-&gt;lock.owner, i);<br><span class="hljs-number">1778</span>                 <span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-number">1779</span>         &#125;<br><span class="hljs-number">1780</span> <br><span class="hljs-number">1781</span>         console_lock();<br><span class="hljs-number">1782</span>         <span class="hljs-keyword">if</span> (!lock_fb_info(fb_info)) &#123;<br><span class="hljs-number">1783</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner :%px, i: %d\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;f     b_info-&gt;lock.owner, i);<br><span class="hljs-number">1784</span>                 console_unlock();<br><span class="hljs-number">1785</span>                 <span class="hljs-keyword">return</span> -ENODEV;<br><span class="hljs-number">1786</span>         &#125;<br><span class="hljs-number">1787</span> <br><span class="hljs-number">1788</span>         event.info = fb_info;<br><span class="hljs-number">1789</span>         ret = fb_notifier_call_chain(FB_EVENT_FB_UNBIND, &amp;event);  <span class="hljs-comment">// 拔掉udl设备的时候 ret = 1</span><br><span class="hljs-number">1790</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner: %px, i: %d, ret: %d\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;     fb_info-&gt;lock.owner, i, ret);<br><span class="hljs-number">1791</span>         unlock_fb_info(fb_info);<br><span class="hljs-number">1792</span>         console_unlock();<br><span class="hljs-number">1793</span> <br><span class="hljs-number">1794</span>         <span class="hljs-keyword">return</span> ret;<br><span class="hljs-number">1795</span> &#125;<br></code></pre></td></tr></table></figure><h5 id="do_unregister_framebuffer">do_unregister_framebuffer</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1799</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_unregister_framebuffer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fb_info *fb_info)</span><br>1800 &#123;<br><span class="hljs-number">1801</span>         dump_stack();<br><span class="hljs-number">1802</span>         <span class="hljs-comment">// printk(&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner:%px.&quot;, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;fb_info-&gt;lock.owner);</span><br><span class="hljs-number">1803</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner:%px, fb_info-&gt;fbops: %px, fb_info-&gt;fbops-&gt;fb_destroy:%px\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;fb     _info-&gt;lock.owner, fb_info-&gt;fbops, fb_info-&gt;fbops-&gt;fb_destroy);<br><span class="hljs-number">1804</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fb_event</span> <span class="hljs-title">event</span>;</span><br><span class="hljs-number">1805</span>         <span class="hljs-type">int</span> ret;<br><span class="hljs-number">1806</span> <br><span class="hljs-number">1807</span>         ret = unbind_console(fb_info);<br><span class="hljs-number">1808</span> <br><span class="hljs-number">1809</span>         <span class="hljs-keyword">if</span> (ret) &#123;<br><span class="hljs-number">1810</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner:%px, fb_info-&gt;fbops: %px, fb_info-&gt;fbops-&gt;fb_destroy:%px, ret: %d\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;f     b_info-&gt;lock, &amp;fb_info-&gt;lock.owner, fb_info-&gt;fbops, fb_info-&gt;fbops-&gt;fb_destroy, ret);<br><span class="hljs-number">1811</span>                 <span class="hljs-keyword">return</span> -EINVAL;    <span class="hljs-comment">// 这里就结束了</span><br><span class="hljs-number">1812</span>         &#125;<br><span class="hljs-number">1813</span> <br><span class="hljs-number">1814</span>         pm_vt_switch_unregister(fb_info-&gt;dev);<br><span class="hljs-number">1815</span> <br><span class="hljs-number">1816</span>         __unlink_framebuffer(fb_info);<br><span class="hljs-number">1817</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner:%px, fb_info-&gt;fbops: %px, fb_info-&gt;fbops-&gt;fb_destroy:%px\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;fb     _info-&gt;lock.owner, fb_info-&gt;fbops, fb_info-&gt;fbops-&gt;fb_destroy);<br><span class="hljs-number">1818</span>         <span class="hljs-keyword">if</span> (fb_info-&gt;pixmap.addr &amp;&amp;<br><span class="hljs-number">1819</span>             (fb_info-&gt;pixmap.flags &amp; FB_PIXMAP_DEFAULT))<br><span class="hljs-number">1820</span>                 kfree(fb_info-&gt;pixmap.addr);<br><span class="hljs-number">1821</span>         fb_destroy_modelist(&amp;fb_info-&gt;modelist);<br><span class="hljs-number">1822</span>         registered_fb[fb_info-&gt;node] = <span class="hljs-literal">NULL</span>;<br><span class="hljs-number">1823</span>         num_registered_fb--;<br><span class="hljs-number">1824</span>         fb_cleanup_device(fb_info);<br><span class="hljs-number">1825</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner:%px, fb_info-&gt;fbops: %px, fb_info-&gt;fbops-&gt;fb_destroy:%px\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;fb     _info-&gt;lock.owner, fb_info-&gt;fbops, fb_info-&gt;fbops-&gt;fb_destroy);<br><span class="hljs-number">1826</span>         event.info = fb_info;<br><span class="hljs-number">1827</span>         console_lock();<br><span class="hljs-number">1828</span>         fb_notifier_call_chain(FB_EVENT_FB_UNREGISTERED, &amp;event);<br><span class="hljs-number">1829</span>         console_unlock();<br><span class="hljs-number">1830</span> <br><span class="hljs-number">1831</span>         <span class="hljs-comment">/* this may free fb info */</span><br><span class="hljs-number">1832</span>         put_fb_info(fb_info);<br><span class="hljs-number">1833</span>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">1834</span> &#125;<br></code></pre></td></tr></table></figure><h4 id="drm_release">drm_release</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">drm_release <span class="hljs-comment">// drivers/gpu/drm/drm_file.c:466 487</span><br>└──drm_minor_release <span class="hljs-comment">// drivers/gpu/drm/drm_drv.c: 259 261 698 701 660 665</span><br>    └──udl_driver_release <span class="hljs-comment">// drivers/gpu/drm/udl/udl_drv.c:50 52</span><br>        └──udl_fini <span class="hljs-comment">// drivers/gpu/drm/udl/udl_main.c:366 375</span><br>                └──udl_fbdev_cleanup <span class="hljs-comment">// drivers/gpu/drm/udl/udl_fb.c:501</span><br>                        ├────udl_fbdev_destroy <span class="hljs-comment">// drivers/gpu/drm/udl/udl_fb.c:438</span><br>                               ├────drm_fb_helper_unregister_fbi <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c:959</span><br>                               │        └──unregister_framebuffer <span class="hljs-comment">// drivers/video/fbdev/core/fbmem.c:1923</span><br>                               │                ├──do_unregister_framebuffer <span class="hljs-comment">// drivers/video/fbdev/core/fbmem.c: 1803 1807</span><br>                               │                │        └──unbind_console <span class="hljs-comment">// drivers/video/fbdev/core/fbmem.c:1774 1790</span><br>                               │                └──do_unregister_framebuffer <span class="hljs-comment">// drivers/video/fbdev/core/fbmem.c:1810         // 1811 这里就结束了</span><br>                               │<br>                               ├────udl_fbdev_destroy <span class="hljs-comment">// drivers/gpu/drm/udl/udl_fb.c:439</span><br>                               │        └──drm_fb_helper_fini <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c:970</span><br>                               ├────udl_fbdev_destroy <span class="hljs-comment">// drivers/gpu/drm/udl/udl_fb.c:442 444 446</span><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1958</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">1</span>]file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_cleanup, line: <span class="hljs-number">494</span>, dev-&gt;dev-&gt;init_name: (null)<br><span class="hljs-number">1959</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">2</span>]file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_destroy, line: <span class="hljs-number">437</span>, dev-&gt;dev-&gt;init_name: (null), &amp;ufbdev-&gt;helper: ffffffd0fa999280, ufbdev-&gt;ufb.obj: ffffffd0fa1b6c80, &amp;ufbdev-&gt;ufb.base: ffffffd0fa9994a0<br><br><span class="hljs-comment">//  udl_fbdev_cleanup</span><br>        udl_fbdev_destroy<br>                drm_fb_helper_unregister_fbi<br>                        unregister_framebuffer<br>                                do_unregister_framebuffer<br><span class="hljs-number">1960</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">3</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1803</span>, fun: do_unregister_framebuffer, fb-&gt;info: ffffffd0efecda80, &amp;fb_info-&gt;lock:ffffffd0efecda90, &amp;fb_info-&gt;lock.owner:ffffffd0efecda90, fb_info-&gt;fbops: ffffff90025f3160, fb_info-&gt;fbops-&gt;fb_destroy:<span class="hljs-number">0000000000000000</span><br><br><br><span class="hljs-number">1961</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">4</span>]CPU: <span class="hljs-number">6</span> PID: <span class="hljs-number">2867</span> Comm: Xwayland Tainted: G    B             <span class="hljs-number">4.19</span><span class="hljs-number">.71</span>-arm64-desktop-udl-slub-debug-kasan-lockdep #<span class="hljs-number">1</span><br><span class="hljs-number">1962</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">5</span>]Hardware name: HUAWEI HUAWEI L410 KLVU-WDU0/SP1KVUM, BIOS <span class="hljs-number">1.00</span><span class="hljs-number">.53</span> <span class="hljs-number">03</span>/<span class="hljs-number">24</span>/<span class="hljs-number">2021</span><br><br><br><span class="hljs-number">1963</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">6</span>]Call trace:<br><span class="hljs-number">1964</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">7</span>] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x2e0</span><br><span class="hljs-number">1965</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">8</span>] show_stack+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br><span class="hljs-number">1966</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">9</span>] dump_stack+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0x10c</span><br><span class="hljs-number">1967</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">0</span>] unbind_console+<span class="hljs-number">0x9c</span>/<span class="hljs-number">0x210</span><br><span class="hljs-number">1968</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">1</span>] do_unregister_framebuffer+<span class="hljs-number">0xe8</span>/<span class="hljs-number">0x2a4</span><br><span class="hljs-number">1969</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">2</span>] unregister_framebuffer+<span class="hljs-number">0x34</span>/<span class="hljs-number">0x50</span><br><span class="hljs-number">1970</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">3</span>] drm_fb_helper_unregister_fbi+<span class="hljs-number">0x30</span>/<span class="hljs-number">0x40</span><br><span class="hljs-number">1971</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">4</span>] udl_fbdev_cleanup+<span class="hljs-number">0xdc</span>/<span class="hljs-number">0x278</span> [udl]<br><span class="hljs-number">1972</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">5</span>] udl_fini+<span class="hljs-number">0x38</span>/<span class="hljs-number">0x60</span> [udl]<br><span class="hljs-number">1973</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">6</span>] udl_driver_release+<span class="hljs-number">0x20</span>/<span class="hljs-number">0x48</span> [udl]<br><span class="hljs-number">1974</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">7</span>] drm_dev_put.part<span class="hljs-number">.0</span>+<span class="hljs-number">0x58</span>/<span class="hljs-number">0x78</span><br><span class="hljs-number">1975</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">8</span>] drm_minor_release+<span class="hljs-number">0x2c</span>/<span class="hljs-number">0x38</span><br><span class="hljs-number">1976</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">9</span>] drm_release+<span class="hljs-number">0x114</span>/<span class="hljs-number">0x140</span><br><span class="hljs-number">1977</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">0</span>] __fput+<span class="hljs-number">0xf4</span>/<span class="hljs-number">0x2c8</span><br><span class="hljs-number">1978</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">1</span>] ____fput+<span class="hljs-number">0x20</span>/<span class="hljs-number">0x30</span><br><span class="hljs-number">1979</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">2</span>] task_work_run+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0xf0</span><br><span class="hljs-number">1980</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">3</span>] do_notify_resume+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x180</span><br><span class="hljs-number">1981</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">4</span>] work_pending+<span class="hljs-number">0x8</span>/<span class="hljs-number">0x14</span><br><br><br><br><span class="hljs-number">1982</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">5</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1774</span>, fun: unbind_console, fb-&gt;info: ffffffd0efecda80, &amp;fb_info-&gt;lock:ffffffd0efecda90, &amp;fb_info-&gt;lock.owner :ffffffd0efecda90, i: <span class="hljs-number">1</span>, FB_MAX: <span class="hljs-number">32</span>, registered_fb[i]: ffffffd0efecda80<br><span class="hljs-number">1983</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">6</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1790</span>, fun: unbind_console, fb-&gt;info: ffffffd0efecda80, &amp;fb_info-&gt;lock:ffffffd0efecda90, &amp;fb_info-&gt;lock.owner: ffffffd0efecda90, i: <span class="hljs-number">1</span>, ret: <span class="hljs-number">1</span><br><span class="hljs-number">1984</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">7</span>]file: drivers/video/fbdev/core/fbmem.c, line: <span class="hljs-number">1810</span>, fun: do_unregister_framebuffer, fb-&gt;info: ffffffd0efecda80, &amp;fb_info-&gt;lock:ffffffd0efecda90, &amp;fb_info-&gt;lock.owner:ffffffd0efecda90, fb_info-&gt;fbops: ffffff90025f3160, fb_info-&gt;fbops-&gt;fb_destroy:<span class="hljs-number">0000000000000000</span>, ret: <span class="hljs-number">1</span><br><br><br><span class="hljs-number">1985</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">8</span>]file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_destroy, line: <span class="hljs-number">441</span>, dev-&gt;dev-&gt;init_name: (null), &amp;ufbdev-&gt;helper: ffffffd0fa999280, ufbdev-&gt;ufb.obj: ffffffd0fa1b6c80, &amp;ufbdev-&gt;ufb.base: ffffffd0fa9994a0<br><span class="hljs-number">1986</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">9</span>]file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_destroy, line: <span class="hljs-number">443</span>, dev-&gt;dev-&gt;init_name: (null), &amp;ufbdev-&gt;helper: ffffffd0fa999280, ufbdev-&gt;ufb.obj: ffffffd0fa1b6c80, &amp;ufbdev-&gt;ufb.base: ffffffd0fa9994a0<br><span class="hljs-number">1987</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">0</span>]file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_destroy, line: <span class="hljs-number">445</span>, dev-&gt;dev-&gt;init_name: (null), &amp;ufbdev-&gt;helper: ffffffd0fa999280, ufbdev-&gt;ufb.obj: ffffffd0fa1b6c80, &amp;ufbdev-&gt;ufb.base: ffffffd0fa9994a0, &amp;ufbdev-&gt;ufb.obj-&gt;base: ffffffd0fa1b6c80<br><span class="hljs-number">1988</span>:[三 <span class="hljs-number">11</span>月 <span class="hljs-number">29</span> <span class="hljs-number">19</span>:<span class="hljs-number">09</span>:<span class="hljs-number">57</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">2867</span>,cpu6,Xwayland,<span class="hljs-number">1</span>]file: drivers/gpu/drm/udl/udl_fb.c, func: udl_fbdev_destroy, line: <span class="hljs-number">447</span>, dev-&gt;dev-&gt;init_name: (null), &amp;ufbdev-&gt;helper: ffffffd0fa999280, ufbdev-&gt;ufb.obj: ffffffd0fa1b6c80, &amp;ufbdev-&gt;ufb.base: ffffffd0fa9994a0, &amp;ufbdev-&gt;ufb.obj-&gt;base: ffffffd0fa1b6c80<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">./scripts/faddr2line ./drivers/gpu/drm/udl/udl_drv.o udl_driver_release+<span class="hljs-number">0x20</span>/<span class="hljs-number">0x48</span><br>udl_driver_release+<span class="hljs-number">0x20</span>/<span class="hljs-number">0x48</span>:<br>udl_driver_release 于 /data3/home/yuanqiliang/code/klua-kernel/drivers/gpu/drm/udl/udl_drv.c:<span class="hljs-number">53</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">./scripts/faddr2line ./drivers/gpu/drm/udl/udl_main.o udl_fini+<span class="hljs-number">0x38</span>/<span class="hljs-number">0x60</span><br>udl_fini+<span class="hljs-number">0x38</span>/<span class="hljs-number">0x60</span>:<br>udl_fini 于 /data3/home/yuanqiliang/code/klua-kernel/drivers/gpu/drm/udl/udl_main.c:<span class="hljs-number">375</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">./scripts/faddr2line drivers/gpu/drm/udl/udl_fb.o udl_fbdev_cleanup+<span class="hljs-number">0xa8</span>/<span class="hljs-number">0xd8</span><br>skipping udl_fbdev_cleanup address at <span class="hljs-number">0x68c</span> due to size <span class="hljs-title function_">mismatch</span> <span class="hljs-params">(<span class="hljs-number">0xd8</span> != <span class="hljs-number">0x3c</span>)</span><br>no match <span class="hljs-keyword">for</span> udl_fbdev_cleanup+0xa8/0xd8<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">./scripts/faddr2line vmlinux unregister_framebuffer+<span class="hljs-number">0x34</span>/<span class="hljs-number">0x50</span><br>unregister_framebuffer+<span class="hljs-number">0x34</span>/<span class="hljs-number">0x50</span>:<br>unregister_framebuffer 于 drivers/video/fbdev/core/fbmem.c:<span class="hljs-number">1923</span><br></code></pre></td></tr></table></figure><h3 id="踩内存根因定位">踩内存根因定位</h3><h4 id="udl_device">udl_device</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udl_device</span> &#123;</span> <span class="hljs-comment">// drivers/gpu/drm/udl/udl_drv.h:52</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drm_device</span> <span class="hljs-title">drm</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">dev</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">usb_device</span> *<span class="hljs-title">udev</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drm_crtc</span> *<span class="hljs-title">crtc</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">gem_lock</span>;</span><br><br><span class="hljs-type">int</span> sku_pixel_limit;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">urb_list</span> <span class="hljs-title">urbs</span>;</span><br><span class="hljs-type">atomic_t</span> lost_pixels; <span class="hljs-comment">/* 1 = a render op failed. Need screen refresh */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udl_fbdev</span> *<span class="hljs-title">fbdev</span>;</span><br><span class="hljs-type">char</span> mode_buf[<span class="hljs-number">1024</span>];<br><span class="hljs-type">uint32_t</span> mode_buf_len;<br><span class="hljs-type">atomic_t</span> bytes_rendered; <span class="hljs-comment">/* raw pixel-bytes driver asked to render */</span><br><span class="hljs-type">atomic_t</span> bytes_identical; <span class="hljs-comment">/* saved effort with backbuffer comparison */</span><br><span class="hljs-type">atomic_t</span> bytes_sent; <span class="hljs-comment">/* to usb, after compression including overhead */</span><br><span class="hljs-type">atomic_t</span> cpu_kcycles_used; <span class="hljs-comment">/* transpired during pixel processing */</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udl_device</span> *<span class="hljs-title">udl</span></span><br><span class="hljs-class">        -&gt;</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drm_device</span> <span class="hljs-title">drm</span>       // /<span class="hljs-title">dev</span>/<span class="hljs-title">dri</span>/<span class="hljs-title">card1</span></span><br><span class="hljs-class">        // <span class="hljs-title">drivers</span>/<span class="hljs-title">gpu</span>/<span class="hljs-title">drm</span>/<span class="hljs-title">udl</span>/<span class="hljs-title">udl_fb</span>.<span class="hljs-title">c</span>:</span><span class="hljs-number">454</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udl_device</span> *<span class="hljs-title">udl</span> =</span> to_udl(dev); 根据drm_device获取udl设备<br>        -&gt; <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udl_fbdev</span> *<span class="hljs-title">fbdev</span></span><br><span class="hljs-class">                -&gt;</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">drm_fb_helper</span> <span class="hljs-title">helper</span></span><br><span class="hljs-class">                        -&gt;</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fb_info</span> *<span class="hljs-title">fbdev</span> // <span class="hljs-title">dev</span>/<span class="hljs-title">fb1</span></span><br></code></pre></td></tr></table></figure><h4 id="fb_info内存分配">fb_info内存分配</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">916</span> <span class="hljs-keyword">struct</span> fb_info *<span class="hljs-title function_">drm_fb_helper_alloc_fbi</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drm_fb_helper *fb_helper)</span> <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c:923</span><br> 917 &#123;<br> <span class="hljs-number">918</span>         dump_stack();<br> <span class="hljs-number">919</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">dev</span> =</span> fb_helper-&gt;dev-&gt;dev;<br> <span class="hljs-number">920</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fb_info</span> *<span class="hljs-title">info</span>;</span><br> <span class="hljs-number">921</span>         <span class="hljs-type">int</span> ret;<br> <span class="hljs-number">922</span> <br> <span class="hljs-number">923</span>         info = framebuffer_alloc(<span class="hljs-number">0</span>, dev);<br> <span class="hljs-number">924</span>         <span class="hljs-keyword">if</span> (!info)<br> <span class="hljs-number">925</span>                 <span class="hljs-keyword">return</span> ERR_PTR(-ENOMEM);<br> <span class="hljs-number">926</span> <br> <span class="hljs-number">927</span>         ret = fb_alloc_cmap(&amp;info-&gt;cmap, <span class="hljs-number">256</span>, <span class="hljs-number">0</span>);<br> <span class="hljs-number">928</span>         <span class="hljs-keyword">if</span> (ret)<br> <span class="hljs-number">929</span>                 <span class="hljs-keyword">goto</span> err_release;<br> <span class="hljs-number">930</span> <br> <span class="hljs-number">931</span>         info-&gt;apertures = alloc_apertures(<span class="hljs-number">1</span>);<br> <span class="hljs-number">932</span>         <span class="hljs-keyword">if</span> (!info-&gt;apertures) &#123;<br> <span class="hljs-number">933</span>                 ret = -ENOMEM;<br> <span class="hljs-number">934</span>                 <span class="hljs-keyword">goto</span> err_free_cmap;<br> <span class="hljs-number">935</span>         &#125;<br> <span class="hljs-number">936</span> <br> <span class="hljs-number">937</span>         fb_helper-&gt;fbdev = info;<br> <span class="hljs-number">938</span> <br> <span class="hljs-number">939</span>         <span class="hljs-keyword">return</span> info;<br> <span class="hljs-number">940</span> <br> <span class="hljs-number">941</span> err_free_cmap:<br> <span class="hljs-number">942</span>         fb_dealloc_cmap(&amp;info-&gt;cmap);<br> <span class="hljs-number">943</span> err_release:<br> <span class="hljs-number">944</span>         framebuffer_release(info);<br> <span class="hljs-number">945</span>         <span class="hljs-keyword">return</span> ERR_PTR(ret);<br> <span class="hljs-number">946</span> &#125;<br> <span class="hljs-number">947</span> EXPORT_SYMBOL(drm_fb_helper_alloc_fbi);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>]Call trace:<br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x2e0</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] show_stack+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] dump_stack+<span class="hljs-number">0xcc</span>/<span class="hljs-number">0x10c</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] drm_fb_helper_alloc_fbi+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x108</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] udlfb_create+<span class="hljs-number">0x134</span>/<span class="hljs-number">0x358</span> [udl]<br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] __drm_fb_helper_initial_config_and_unlock+<span class="hljs-number">0x354</span>/<span class="hljs-number">0x6c0</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>] drm_fb_helper_initial_config+<span class="hljs-number">0x50</span>/<span class="hljs-number">0x5c</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>] udl_fbdev_init+<span class="hljs-number">0xf8</span>/<span class="hljs-number">0x158</span> [udl]<br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>] udl_init+<span class="hljs-number">0x5f4</span>/<span class="hljs-number">0x750</span> [udl]<br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>] udl_usb_probe+<span class="hljs-number">0x158</span>/<span class="hljs-number">0x1b8</span> [udl]<br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] usb_probe_interface+<span class="hljs-number">0x178</span>/<span class="hljs-number">0x3e0</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] really_probe+<span class="hljs-number">0x280</span>/<span class="hljs-number">0x520</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] driver_probe_device+<span class="hljs-number">0x88</span>/<span class="hljs-number">0x1a8</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] __device_attach_driver+<span class="hljs-number">0x10c</span>/<span class="hljs-number">0x170</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] bus_for_each_drv+<span class="hljs-number">0xf8</span>/<span class="hljs-number">0x158</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] __device_attach+<span class="hljs-number">0x15c</span>/<span class="hljs-number">0x1e8</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>] device_initial_probe+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>] bus_probe_device+<span class="hljs-number">0xf0</span>/<span class="hljs-number">0x100</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>] device_add+<span class="hljs-number">0x538</span>/<span class="hljs-number">0x958</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>] usb_set_configuration+<span class="hljs-number">0x730</span>/<span class="hljs-number">0xca0</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] generic_probe+<span class="hljs-number">0x70</span>/<span class="hljs-number">0xa0</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] usb_probe_device+<span class="hljs-number">0x68</span>/<span class="hljs-number">0xb0</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] really_probe+<span class="hljs-number">0x280</span>/<span class="hljs-number">0x520</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] driver_probe_device+<span class="hljs-number">0x88</span>/<span class="hljs-number">0x1a8</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] __device_attach_driver+<span class="hljs-number">0x10c</span>/<span class="hljs-number">0x170</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] bus_for_each_drv+<span class="hljs-number">0xf8</span>/<span class="hljs-number">0x158</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">5</span>] __device_attach+<span class="hljs-number">0x15c</span>/<span class="hljs-number">0x1e8</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">6</span>] device_initial_probe+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x30</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">7</span>] bus_probe_device+<span class="hljs-number">0xf0</span>/<span class="hljs-number">0x100</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">8</span>] device_add+<span class="hljs-number">0x538</span>/<span class="hljs-number">0x958</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">9</span>] usb_new_device+<span class="hljs-number">0x424</span>/<span class="hljs-number">0x998</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] hub_event+<span class="hljs-number">0xd08</span>/<span class="hljs-number">0x1bd0</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] process_one_work+<span class="hljs-number">0x4fc</span>/<span class="hljs-number">0xc80</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] worker_thread+<span class="hljs-number">0x80</span>/<span class="hljs-number">0x700</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>] kthread+<span class="hljs-number">0x208</span>/<span class="hljs-number">0x218</span><br>[五 <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">41</span>:<span class="hljs-number">21</span> <span class="hljs-number">2023</span>] [pid:<span class="hljs-number">49</span>,cpu7,kworker/<span class="hljs-number">7</span>:<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] ret_from_fork+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x1c</span><br></code></pre></td></tr></table></figure><h4 id="fb_info内存释放">fb_info内存释放</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-number">970</span> <span class="hljs-type">void</span> <span class="hljs-title function_">drm_fb_helper_fini</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drm_fb_helper *fb_helper)</span>   <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c</span><br> 971 &#123;<br> <span class="hljs-number">972</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fb_info</span> *<span class="hljs-title">info</span>;</span><br> <span class="hljs-number">973</span> <br> <span class="hljs-number">974</span>         <span class="hljs-keyword">if</span> (!fb_helper)<br> <span class="hljs-number">975</span>                 <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">976</span> <br> <span class="hljs-number">977</span>         fb_helper-&gt;dev-&gt;fb_helper = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">978</span> <br> <span class="hljs-number">979</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, dev: %px, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;fbdev, drm     _fbdev_emulation);<br> <span class="hljs-number">980</span>         <span class="hljs-keyword">if</span> (!drm_fbdev_emulation) &#123; <span class="hljs-comment">// drm_fbdev_emulation = false 980行才会return，994行才会执行不到</span><br> <span class="hljs-number">981</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, dev: %px, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;fb     dev, drm_fbdev_emulation);<br> <span class="hljs-number">982</span>                 <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">983</span>         &#125;<br> <span class="hljs-number">984</span> <br> <span class="hljs-number">985</span>         cancel_work_sync(&amp;fb_helper-&gt;resume_work);<br> <span class="hljs-number">986</span>         cancel_work_sync(&amp;fb_helper-&gt;dirty_work);<br> <span class="hljs-number">987</span> <br> <span class="hljs-number">988</span>         info = fb_helper-&gt;fbdev;<br> <span class="hljs-number">989</span>         <span class="hljs-keyword">if</span> (info) &#123;<br> <span class="hljs-number">990</span>                 <span class="hljs-keyword">if</span> (info-&gt;cmap.len)<br> <span class="hljs-number">991</span>                         fb_dealloc_cmap(&amp;info-&gt;cmap);   <span class="hljs-comment">// drivers/video/fbdev/core/fbcmap.c:147</span><br> <span class="hljs-number">992</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, dev: %px, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb     _helper-&gt;fbdev, drm_fbdev_emulation, info);<br> <span class="hljs-number">993</span>                 framebuffer_release(info);      <span class="hljs-comment">// drivers/video/fbdev/core/fbsysfs.c:89</span><br> <span class="hljs-number">994</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, dev: %px, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb     _helper-&gt;fbdev, drm_fbdev_emulation, info);<br> <span class="hljs-number">995</span>         &#125;<br> <span class="hljs-number">996</span>         fb_helper-&gt;fbdev = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 这里已经将fb_helper-&gt;fbdev设置为NULL</span><br> <span class="hljs-number">997</span> <br> <span class="hljs-number">998</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, dev: %px, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-     &gt;fbdev, drm_fbdev_emulation, info);<br> <span class="hljs-number">999</span> <br><span class="hljs-number">1000</span>         mutex_lock(&amp;kernel_fb_helper_lock);<br><span class="hljs-number">1001</span>         <span class="hljs-keyword">if</span> (!list_empty(&amp;fb_helper-&gt;kernel_fb_list)) &#123;<br><span class="hljs-number">1002</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, dev: %px, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px, &amp;fb_helper-&gt;kernel_fb_list: %px&quot;</span>, __FILE__, __LI     NE__, __FUNCTION__, fb_helper, fb_helper-&gt;fbdev, drm_fbdev_emulation, info, &amp;fb_helper-&gt;kernel_fb_list);<br><span class="hljs-number">1003</span>                 list_del(&amp;fb_helper-&gt;kernel_fb_list);<br><span class="hljs-number">1004</span>                 <span class="hljs-keyword">if</span> (list_empty(&amp;kernel_fb_helper_list)) &#123;<br><span class="hljs-number">1005</span>                         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, dev: %px, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px, &amp;kernel_fb_helper_list: %px&quot;</span>, __FILE__,      __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;fbdev, drm_fbdev_emulation, info, &amp;kernel_fb_helper_list);<br><span class="hljs-number">1006</span>                         unregister_sysrq_key(<span class="hljs-string">&#x27;v&#x27;</span>, &amp;sysrq_drm_fb_helper_restore_op);<br><span class="hljs-number">1007</span>                 &#125;<br><span class="hljs-number">1008</span>         &#125;<br><span class="hljs-number">1009</span>         mutex_unlock(&amp;kernel_fb_helper_lock);<br><span class="hljs-number">1010</span> <br><span class="hljs-number">1011</span>         mutex_destroy(&amp;fb_helper-&gt;lock);<br><span class="hljs-number">1012</span>         drm_fb_helper_crtc_free(fb_helper);<br><span class="hljs-number">1013</span> <br><span class="hljs-number">1014</span> &#125;<br><span class="hljs-number">1015</span> EXPORT_SYMBOL(drm_fb_helper_fini);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">494</span> <span class="hljs-type">void</span> <span class="hljs-title function_">udl_fbdev_cleanup</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drm_device *dev)</span>      <span class="hljs-comment">// drivers/gpu/drm/udl/udl_fb.c:501</span><br>495 &#123;<br><span class="hljs-number">496</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udl_device</span> *<span class="hljs-title">udl</span> =</span> to_udl(dev);<br><span class="hljs-number">497</span>         printk(<span class="hljs-string">&quot;file: %s, func: %s, line: %d, dev-&gt;dev-&gt;init_name: %s\n&quot;</span>, __FILE__, __func__, __LINE__, dev-&gt;dev-&gt;init_name);<br><span class="hljs-number">498</span>         <span class="hljs-keyword">if</span> (!udl-&gt;fbdev)<br><span class="hljs-number">499</span>                 <span class="hljs-keyword">return</span>;<br><span class="hljs-number">500</span> <br><span class="hljs-number">501</span>         udl_fbdev_destroy(dev, udl-&gt;fbdev);<br><span class="hljs-number">502</span>         kfree(udl-&gt;fbdev);<br><span class="hljs-number">503</span>         udl-&gt;fbdev = <span class="hljs-literal">NULL</span>;<br><span class="hljs-number">504</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">grep <span class="hljs-string">&#x27;kfree(udl);&#x27;</span> . -inr --color --include=*.c <br>./drivers/gpu/drm/udl/udl_drv.c:<span class="hljs-number">95</span>:             kfree(udl);<br>./drivers/gpu/drm/udl/udl_drv.c:<span class="hljs-number">107</span>:            kfree(udl);<br></code></pre></td></tr></table></figure><p>struct udl_device *udl 没有主动释放，存在内存泄漏，在udl驱动模块卸载后内核会自动回收内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">970</span> <span class="hljs-type">void</span> <span class="hljs-title function_">drm_fb_helper_fini</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> drm_fb_helper *fb_helper)</span> <span class="hljs-comment">// drivers/gpu/drm/drm_fb_helper.c:970</span><br> 971 &#123;<br> <span class="hljs-number">972</span>         <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fb_info</span> *<span class="hljs-title">info</span>;</span><br> <span class="hljs-number">973</span> <br> <span class="hljs-number">974</span>         <span class="hljs-keyword">if</span> (!fb_helper)<br> <span class="hljs-number">975</span>                 <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">976</span> <br> <span class="hljs-number">977</span>         fb_helper-&gt;dev-&gt;fb_helper = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">978</span> <br> <span class="hljs-number">979</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;fbdev, drm_fbdev_emu     lation);<br> <span class="hljs-number">980</span>         <span class="hljs-keyword">if</span> (!drm_fbdev_emulation) &#123; <span class="hljs-comment">// drm_fbdev_emulation = false 980行才会return，994行才会执行不到</span><br> <span class="hljs-number">981</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;fbdev, drm_f     bdev_emulation);<br> <span class="hljs-number">982</span>                 <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">983</span>         &#125;<br> <span class="hljs-number">984</span> <br> <span class="hljs-number">985</span>         cancel_work_sync(&amp;fb_helper-&gt;resume_work);<br> <span class="hljs-number">986</span>         cancel_work_sync(&amp;fb_helper-&gt;dirty_work);<br> <span class="hljs-number">987</span> <br> <span class="hljs-number">988</span>         info = fb_helper-&gt;fbdev;<br> <span class="hljs-number">989</span>         <span class="hljs-keyword">if</span> (info) &#123;<br> <span class="hljs-number">990</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;f     bdev, drm_fbdev_emulation, info);<br> <span class="hljs-number">991</span>                 <span class="hljs-keyword">if</span> (info-&gt;cmap.len)<br> <span class="hljs-number">992</span>                         fb_dealloc_cmap(&amp;info-&gt;cmap);   <span class="hljs-comment">// drivers/video/fbdev/core/fbcmap.c:147</span><br> <span class="hljs-number">993</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;f     bdev, drm_fbdev_emulation, info);<br> <span class="hljs-number">994</span>                 framebuffer_release(info);      <span class="hljs-comment">// drivers/video/fbdev/core/fbsysfs.c:89 这里释放内存了，但是drivers/video/fbdev/core/fbmem.c中的registered_fb指针数组还是指向这里，有进程改写这块内存，再次访问就会导致踩内存</span><br> <span class="hljs-number">995</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;f     bdev, drm_fbdev_emulation, info);<br> <span class="hljs-number">996</span>         &#125;<br> <span class="hljs-number">997</span>         fb_helper-&gt;fbdev = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">998</span> <br> <span class="hljs-number">999</span>         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_helper, fb_helper-&gt;fbdev, dr     m_fbdev_emulation, info);<br><span class="hljs-number">1000</span> <br><span class="hljs-number">1001</span>         mutex_lock(&amp;kernel_fb_helper_lock);<br><span class="hljs-number">1002</span>         <span class="hljs-keyword">if</span> (!list_empty(&amp;fb_helper-&gt;kernel_fb_list)) &#123;<br><span class="hljs-number">1003</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px, &amp;fb_helper-&gt;kernel_fb_list: %px&quot;</span>, __FILE__, __LINE__, __FU     NCTION__, fb_helper, fb_helper-&gt;fbdev, drm_fbdev_emulation, info, &amp;fb_helper-&gt;kernel_fb_list);<br><span class="hljs-number">1004</span>                 list_del(&amp;fb_helper-&gt;kernel_fb_list);<br><span class="hljs-number">1005</span>                 <span class="hljs-keyword">if</span> (list_empty(&amp;kernel_fb_helper_list)) &#123;<br><span class="hljs-number">1006</span>                         printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb_helper: %px, fb_helper-&gt;fbdev: %px, drm_fbdev_emulation: %d, info: %px, &amp;kernel_fb_helper_list: %px&quot;</span>, __FILE__, __LINE__,      __FUNCTION__, fb_helper, fb_helper-&gt;fbdev, drm_fbdev_emulation, info, &amp;kernel_fb_helper_list);<br><span class="hljs-number">1007</span>                         unregister_sysrq_key(<span class="hljs-string">&#x27;v&#x27;</span>, &amp;sysrq_drm_fb_helper_restore_op);<br><span class="hljs-number">1008</span>                 &#125;<br><span class="hljs-number">1009</span>         &#125;<br><span class="hljs-number">1010</span>         mutex_unlock(&amp;kernel_fb_helper_lock);<br><span class="hljs-number">1011</span> <br><span class="hljs-number">1012</span>         mutex_destroy(&amp;fb_helper-&gt;lock);<br><span class="hljs-number">1013</span>         drm_fb_helper_crtc_free(fb_helper);<br><span class="hljs-number">1014</span> <br><span class="hljs-number">1015</span> &#125;<br><span class="hljs-number">1016</span> EXPORT_SYMBOL(drm_fb_helper_fini);<br></code></pre></td></tr></table></figure><p>drivers/gpu/drm/drm_fb_helper.c:994行的framebuffer_release(info)释放了内存，但是drivers/video/fbdev/core/fbmem.c中的registered_fb指针数组还是指向这里，有进程改写这块内存，再次访问就会导致踩内存。</p><p>usb_disconnect、drm_release都会执行到unbind_console，但是unbind_console返回值是1，导致在drivers/video/fbdev/core/fbmem.c:1811结束，导致1823行的registered_fb[fb_info-&gt;node] = NULL;无法执行。</p><p>执行lshw命令的时候，会通过registered_fb[i]得到指针*info, mutex_lock(&amp;info-&gt;lock)加锁的时候刚好访问了被改写的内存，导致踩内存，进一步内核 oops panic。</p><h4 id="修复方案">修复方案</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br>origin  ssh://ut004487@gerrit.uniontech.com:29418/klua-kernel (fetch)<br>origin  ssh://ut004487@gerrit.uniontech.com:29418/klua-kernel (push)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch <br>* klua-need-merge<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline <br>81089c9ab (HEAD -&gt; klua-need-merge) usb: udl: fix udl mutex_lock panic<br>3611cebb9 (origin/klua-need-merge) init/version.c: add linux_commitid_banner <span class="hljs-keyword">for</span> init/main.c<br></code></pre></td></tr></table></figure><p>0001-usb-udl-fix-udl-mutex_lock-panic.patch中有本次提交的补丁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">commit <span class="hljs-number">81089</span>c9ab03834e2331711d0abeff4b39d596152 (HEAD -&gt; klua-need-merge)<br>Author: yuanqiliang &lt;yuanqiliang@uniontech.com&gt;<br>Date:   Fri Dec <span class="hljs-number">1</span> <span class="hljs-number">09</span>:<span class="hljs-number">52</span>:<span class="hljs-number">05</span> <span class="hljs-number">2023</span> +<span class="hljs-number">0800</span><br><br>    usb: udl: fix udl mutex_lock panic<br>    <br>    drivers/video/fbdev/core/fbmem.c: <span class="hljs-number">1811</span><br>    <br>    <span class="hljs-number">1807</span>         ret = unbind_console(fb_info);<br>    <span class="hljs-number">1808</span><br>    <span class="hljs-number">1809</span>         <span class="hljs-keyword">if</span> (ret) &#123;<br>    <span class="hljs-number">1810</span>                 printk(<span class="hljs-string">&quot;file: %s, line: %d, fun: %s, fb-&gt;info: %px, &amp;fb_info-&gt;lock:%px, &amp;fb_info-&gt;lock.owner:%px, fb_info-&gt;fbops: %px, fb_info-&gt;fbops-&gt;fb_destroy:%px, ret: %d\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, fb_info, &amp;fb_info-&gt;lock, &amp;fb_info-&gt;lock.owner, fb_info-&gt;fbops, fb_info-&gt;fbops-&gt;fb_destroy, ret);<br>    <span class="hljs-number">1811</span>                 <span class="hljs-comment">// return -EINVAL;</span><br>    <span class="hljs-number">1812</span>         &#125;<br>    <br>    bug: https:<span class="hljs-comment">//pms.uniontech.com/bug-view-229783.html</span><br>    Change-Id: Idde9b9486bb4d559852b5d2ec4fd071bc3bd5534<br>    Signed-off-by: yuanqiliang &lt;yuanqiliang@uniontech.com&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>usb</category>
      
      <category>udl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux-kernel</title>
    <link href="/linux/kernel/linux-kernel/"/>
    <url>/linux/kernel/linux-kernel/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-kernel">linux-kernel</h1><p>理解Linux内核是一项复杂而深刻的任务，因为它涉及到操作系统的核心功能。以下是对你提到的几个关键方面的详细解释：</p><ol type="1"><li><p>进程调度：</p><ul><li>调度器： Linux内核使用调度器来管理系统中运行的进程。CFS（完全公平调度器）是Linux中常用的调度器之一，它旨在实现对处理器的公平分配。</li><li>进程状态： 进程可以处于运行、就绪、阻塞等状态。调度器的任务是按照一定的算法从就绪队列中选择一个进程并将其分配给CPU执行。</li></ul></li><li><p>同步机制：</p><ul><li>原子操作： Linux内核提供原子操作来确保某些操作的不可分割性，以防止多个进程同时执行这些操作。</li><li>信号量和互斥体： 用于控制对共享资源的访问，以避免竞态条件和数据损坏。</li></ul></li><li><p>内存管理：</p><ul><li>虚拟内存： Linux使用虚拟内存来扩展可用的物理内存。这涉及到分页和分段机制，使得每个进程都有自己的虚拟地址空间。</li><li>内存映射和页面置换： Linux内核使用内存映射来管理进程的虚拟地址空间，而页面置换策略确保物理内存的有效使用。</li></ul></li><li><p>中断系统：</p><ul><li>中断处理： 中断是硬件或软件引起的事件，需要立即处理。Linux内核有中断处理程序来响应中断事件。</li><li>中断向量表： 内核维护一个中断向量表，将中断号映射到相应的中断服务例程，以执行特定的处理。</li></ul></li><li><p>Linux操作系统整体框架和原理：</p><ul><li><p>模块化设计： Linux内核采用模块化设计，允许动态加载和卸载内核模块，以减小内核的大小并提高灵活性。</p></li><li><p>文件系统： Linux支持多种文件系统，如EXT4、Btrfs等，提供对磁盘上数据的组织和管理。</p></li><li><p>系统调用： 用户空间程序通过系统调用与内核进行通信，请求执行特权操作。</p></li></ul></li></ol><p>在应用程序开发、驱动开发、网络通信协议开发、性能调优、中间件和虚拟化等领域，对Linux内核的深入理解是至关重要的。</p><ul><li>例如，在驱动开发中，你可能需要理解设备驱动模型、I/O 系统和中断处理；</li><li>在网络通信协议开发中，你需要了解套接字编程和网络协议栈；</li><li>在性能调优中，你需要深入了解系统的性能瓶颈并优化相关参数。对于中间件和虚拟化，你需要了解相关的技术和实现原理。</li></ul><h2 id="进程调度">进程调度</h2><p>Linux操作系统采用多种调度器，其中最常见的包括：</p><ol type="1"><li><p>CFS（完全公平调度器）：</p><ul><li>CFS是Linux内核中默认的调度器，旨在实现对处理器的公平分配。它使用红黑树来维护就绪队列，通过动态地调整进程的虚拟运行时间来分配CPU时间片，以实现公平性。</li></ul></li><li><p>O(1)调度器：</p><ul><li>O(1)调度器是早期版本中使用的调度器，它的目标是以常量时间复杂度执行调度。但随着系统的复杂性增加，它在某些方面的性能表现不如CFS，因此逐渐被淘汰。</li></ul></li><li><p>实时调度器（RT）：</p><ul><li>针对实时任务的需求，Linux内核提供了实时调度器。其中最常用的是SCHED_FIFO和SCHED_RR。SCHED_FIFO是先来先服务调度，而SCHED_RR是时间片轮转调度，允许任务在一个时间片内运行。</li></ul></li><li><p>Deadline调度器：</p><ul><li>Deadline调度器是一种实时调度器，它引入了截止时间的概念，以确保任务在截止时间内完成。这对于一些实时系统和嵌入式系统非常重要。</li></ul></li></ol><p>这些调度器之间的选择通常取决于应用程序的需求和系统的特性。大多数情况下，CFS是默认选择，因为它在大多数工作负载下表现良好，并且更加注重公平性。如果系统有实时任务的需求，可以选择实时调度器或Deadline调度器。</p><h3 id="红黑树">红黑树</h3><p>红黑树是一种自平衡的二叉搜索树，它具有以下特性：</p><ol type="1"><li><p>时间复杂度：</p><ul><li>查找（Search）： O(log n)</li><li>插入（Insert）： O(log n)</li><li>删除（Delete）： O(log n)</li></ul><p>这里的 n 表示红黑树中节点的数量。由于红黑树是自平衡的，其高度受到对数级别的限制，因此这些操作的时间复杂度是对数级别的。</p></li><li><p>空间复杂度：</p><ul><li>空间复杂度主要由节点本身的存储和额外的颜色信息组成。</li><li>每个节点通常需要存储指向左右子节点的指针、键值（或数据）、父节点指针、以及表示节点颜色的额外信息。这些信息的空间复杂度是 O(1)。</li><li>因此，红黑树的总体空间复杂度是 O(n)，其中 n 是树中节点的数量。</li></ul></li></ol><p>需要注意的是，虽然红黑树的常规操作（查找、插入、删除）的平均时间复杂度是 O(log n)，但在最坏情况下的时间复杂度也是 O(log n)。这是由于红黑树的自平衡性质，使得树的高度保持在对数级别。</p><h2 id="内核互斥技术">内核互斥技术</h2><p>在内核中，可能出现多个进程（通过系统调用进入内核模式）访问同一个对象、进程 和硬中断访问同一个对象、进程和软中断访问同一个对象、多个处理器访问同一个对象等 现象，我们需要使用互斥技术，确保在给定的时刻只有一个主体可以进入临界区访问对象。</p><ul><li><p>如果临界区的执行时间比较长或者可能睡眠，可以使用下面这些互斥技术。</p><ul><li>（1）信号量，大多数情况下我们使用互斥信号量。</li><li>（2）读写信号量。</li><li>（3）互斥锁。</li><li>（4）实时互斥锁。</li></ul><p>申请这些锁的时候，如果锁被其他进程占有，进程将会睡眠等待，代价很高。</p></li><li><p>如果临界区的执行时间很短，并且不会睡眠，那么使用上面的锁不太合适，因为进程 切换的代价很高，可以使用下面这些互斥技术。</p><ul><li>（1）原子变量。</li><li>（2）自旋锁。</li><li>（3）读写自旋锁，它是对自旋锁的改进，允许多个读者同时进入临界区。</li><li>（4）顺序锁，它是对读写自旋锁的改进，读者不会阻塞写者。</li></ul><p>申请这些锁的时候，如果锁被其他进程占有，进程自旋等待（也称为忙等待）。</p></li><li><p>进程还可以使用下面的互斥技术。</p><ul><li>（1）禁止内核抢占，防止被当前处理器上的其他进程抢占，实现和当前处理器上的其 他进程互斥。</li><li>（2）禁止软中断，防止被当前处理器上的软中断抢占，实现和当前处理器上的软中断 互斥。</li><li>（3）禁止硬中断，防止被当前处理器上的硬中断抢占，实现和当前处理器上的硬中断 互斥。</li></ul></li><li><p>在多处理器系统中，为了提高程序的性能，需要尽量减少处理器之间的互斥，使处理 器可以最大限度地并行执行。从互斥信号量到读写信号量的改进，从自旋锁到读写自旋锁 的改进，允许读者并行访问临界区，提高了并行性能，但是我们还可以进一步提高并行性 能，使用下面这些避免使用锁的互斥技术。</p><ul><li>（1）每处理器变量。</li><li>（2）每处理器计数器。</li><li>（3）内存屏障。</li><li>（4）读-复制更新（Read-Copy Update，RCU）。</li><li>（5）可睡眠 RCU。</li></ul></li></ul><p>使用锁保护临界区，如果使用不当，可能出现死锁问题。内核里面的锁非常多，定位 很难，为了方便定位死锁问题，内核提供了死锁检测工具 lockdep。</p><h3 id="可睡眠rcu与rcu的区别">可睡眠RCU与RCU的区别？</h3><p>RCU（Read-Copy Update）和可睡眠 RCU 是两种用于实现并发读取和更新的无锁同步机制，但它们在一些方面存在区别。</p><p>RCU（Read-Copy Update）：</p><ol type="1"><li><p>特点：</p><ul><li>RCU 是一种无锁同步机制，主要用于在多处理器系统中实现高效的读取和更新。</li><li>在 RCU 中，读操作是非阻塞的，不会阻塞其他读者，且可以与写者并发进行。</li><li>写操作（更新）可能会有一定的延迟，因为它要等待正在执行的读者完成后，再应用更新。</li></ul></li><li><p>应用场景：</p><ul><li>RCU 适用于读多写少的场景，其中读操作占主导地位。</li></ul></li></ol><p>可睡眠 RCU：</p><ol type="1"><li><p>特点：</p><ul><li>可睡眠 RCU 是对传统 RCU 的扩展，允许在临界区执行可能会导致进程睡眠的操作。</li><li>传统 RCU 不允许在临界区中执行可能导致进程睡眠的操作，因为这可能会破坏 RCU 的原理。可睡眠 RCU 通过使用睡眠锁和条件变量等技术来解决这个问题。</li></ul></li><li><p>适用场景：</p><ul><li>当需要在 RCU 临界区中执行可能导致睡眠的操作时，可睡眠 RCU 是一种更为灵活的选择。</li></ul></li></ol><p>区别总结：</p><ul><li>睡眠操作支持： 主要区别在于可睡眠 RCU 允许在 RCU 临界区执行可能导致睡眠的操作，而传统 RCU 不支持这样的操作。</li><li>复杂性： 由于支持睡眠操作，可睡眠 RCU 的实现可能相对复杂一些。 选择使用哪种形式的 RCU 取决于具体的应用场景。如果在临界区执行的操作不涉及可能导致睡眠的情况，传统 RCU 可能更为简单且高效。但如果需要在临界区执行可能导致睡眠的操作，可睡眠 RCU 提供了相应的支持。</li></ul><h2 id="内存管理">内存管理</h2><p>内存管理子系统的架构如图 3.1 所示，分为用户空间、内核空间和硬件 3 个层面。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20231122154606.png" alt="" /><figcaption>内存管理架构图</figcaption></figure><h3 id="用户空间">1. 用户空间</h3><p>应用程序使用 malloc()申请内存，使用 free()释放内存。</p><p>malloc()和 free()是 glibc 库的内存分配器 ptmalloc 提供的接口，ptmalloc 使用系统调用 brk 或 mmap 向内核以页为单位申请内存，然后划分成小内存块分配给应用程序。</p><p>用户空间的内存分配器，除了 glibc 库的 ptmalloc，还有谷歌公司的 tcmalloc 和 FreeBSD 的 jemalloc。</p><h3 id="内核空间">2. 内核空间</h3><h4 id="内核空间的基本功能">（1）内核空间的基本功能</h4><p>虚拟内存管理负责从进程的虚拟地址空间分配虚拟页，sys_brk 用来扩大或收缩堆， sys_mmap 用来在内存映射区域分配虚拟页，sys_munmap 用来释放虚拟页。</p><p>内核使用延迟分配物理内存的策略，进程第一次访问虚拟页的时候，触发页错误 异常，页错误异常处理程序从页分配器申请物理页，在进程的页表中把虚拟页映射到物 理页。</p><p>页分配器负责分配物理页，当前使用的页分配器是伙伴分配器。</p><p>内核空间提供了把页划分成小内存块分配的块分配器，提供分配内存的接口 kmalloc() 和释放内存的接口 kfree()，支持 3 种块分配器：SLAB 分配器、SLUB 分配器和 SLOB 分配器。</p><p>在内核初始化的过程中，页分配器还没准备好，需要使用临时的引导内存分配器分配 内存。</p><h4 id="内核空间的扩展功能">（2）内核空间的扩展功能</h4><p>不连续页分配器提供了分配内存的接口 vmalloc 和释放内存的接口 vfree，在内存碎片 化的时候，申请连续物理页的成功率很低，可以申请不连续的物理页，映射到连续的虚拟 页，即虚拟地址连续而物理地址不连续。</p><p>每处理器内存分配器用来为每处理器变量分配内存。</p><p>连续内存分配器（Contiguous Memory Allocator，CMA）用来给驱动程序预留一段连续 的内存，当驱动程序不用的时候，可以给进程使用；当驱动程序需要使用的时候，把进程 占用的内存通过回收或迁移的方式让出来，给驱动程序使用。</p><p>内存控制组用来控制进程占用的内存资源。</p><p>当内存碎片化的时候，找不到连续的物理页，内存碎片整理（“memory compaction” 的意译，直译为“内存紧缩”）通过迁移的方式得到连续的物理页。</p><p>在内存不足的时候，页回收负责回收物理页，对于没有后备存储设备支持的匿名页， 把数据换出到交换区，然后释放物理页；对于有后备存储设备支持的文件页，把数据写回 存储设备，然后释放物理页。如果页回收失败，使用最后一招：内存耗尽杀手（OOM killer， Out-of-Memory killer），选择进程杀掉。</p><h3 id="硬件层面">3．硬件层面</h3><p>处理器包含一个称为内存管理单元（Memory Management Unit，MMU）的部件，负责 把虚拟地址转换成物理地址。 内存管理单元包含一个称为页表缓存（Translation Lookaside Buffer，TLB）的部件， 保存最近使用过的页表映射，避免每次把虚拟地址转换成物理地址都需要查询内存中的 页表。 为了解决处理器的执行速度和内存的访问速度不匹配的问题，在处理器和内存之间增 加了缓存。缓存通常分为一级缓存和二级缓存，为了支持并行地取指令和取数据，一级缓 存分为数据缓存和指令缓存。</p><h3 id="块分配器">块分配器</h3><p>块分配器： 内核提供了块分配器，支持三种：SLAB 分配器、SLUB 分配器和 SLOB 分配器。</p><p>SLUB 分配器继承了 SLAB 分配器的核心思想，在某些地方做了改进。</p><ul><li>（1）SLAB 分配器的管理数据结构开销大，早期每个 slab 有一个描述符和跟在后面的 空闲对象数组。SLUB 分配器把 slab 的管理信息保存在 page 结构体中，使用联合体重用 page 结构体的成员，没有使 page 结构体的大小增加。现在 SLAB 分配器反过来向 SLUB 分配器 学习，抛弃了 slab 描述符，把 slab 的管理信息保存在 page 结构体中。</li><li>（2）SLAB 分配器的链表多，分为空闲 slab 链表、部分空闲 slab 链表和满 slab 链表， 管理复杂。SLUB 分配器只保留部分空闲 slab 链表。</li><li>（3）SLAB 分配器对 NUMA 系统的支持复杂，每个内存节点有共享数组缓存和远程节 点数组缓存，对象在这些数组缓存之间转移，实现复杂。SLUB 分配器做了简化。</li><li>（4）SLUB 分配器抛弃了效果不明显的 slab 着色。</li></ul><p>SLOB 分配器最大的特点就是简洁，代码只有 600 多行，特别适合小内存的嵌入式设备。</p><h4 id="slub-分配器内存缓存的数据结构">SLUB 分配器内存缓存的数据结构</h4><h5 id="数据结构">1．数据结构</h5><p>SLUB 分配器内存缓存的数据结构如图 3.37 所示。</p><ul><li><p>（1）每个内存缓存对应一个 kmem_cache 实例。</p><ul><li><p>成员 size 是包括元数据的对象长度，成员 object_size 是对象原始长度。</p></li><li><p>成员 oo 存放最优 slab 的阶数和对象数，低 16 位是对象数，高 16 位是 slab 的阶数， 即 oo 等于（（slab 的阶数 &lt;&lt; 16）| 对象数）。最优 slab 是剩余部分最小的 slab。</p></li><li><p>成员 min 存放最小 slab 的阶数和对象数，格式和 oo 相同。最小 slab 只需要足够存放 一个对象。当设备长时间运行以后，内存碎片化，分配连续物理页很难成功，如果分配最 优 slab 失败，就分配最小 slab。</p></li></ul></li><li><p>（2）每个内存节点对应一个 kmem_cache_node 实例。</p><ul><li>链表 partial 把部分空闲的 slab 链接起来，成员 nr_partial 是部分空闲 slab 的数量。</li></ul></li><li><p>（3）每个 slab 由一个或多个连续的物理页组成，页的阶数是最优 slab 或最小 slab 的阶 数，如果阶数大于 0，组成一个复合页。</p><ul><li><p>slab 被划分为多个对象，如果 slab 长度不是对象长度的整数倍，尾部有剩余部分。尾 部也可能有保留部分，kmem_cache 实例的成员 reserved 存放保留长度。</p></li><li><p>在创建内存缓存的时候，如果指定标志位 SLAB_TYPESAFE_BY_RCU，要求使用 RCU 延迟释放 slab，在调用函数 call_rcu 把释放 slab 的函数加入 RCU 回调函数队列的时候，需 要提供一个 rcu_head 实例，slab 提供的 rcu_head 实例的位置分两种情况。</p><ul><li><p>1）如果 page 结构体的成员 lru 的长度大于或等于 rcu_head 结构体的长度，那么重用 成员 lru。</p></li><li><p>2）如果 page 结构体的成员 lru 的长度小于 rcu_head 结构体的长度，那么必须在 slab 尾部为 rcu_head 结构体保留空间，保留长度是 rcu_head 结构体的长度。</p></li></ul></li><li><p>page 结构体的相关成员如下。</p><ul><li>1）成员 flags 设置标志位 PG_slab，表示页属于 SLUB 分配器。</li><li>2）成员 freelist 指向第一个空闲对象。</li><li>3）成员 inuse 表示已分配对象的数量。</li><li>4）成员 objects 是对象数量。</li><li>5）成员 frozen 表示 slab 是否被冻结在每处理器 slab 缓存中。如果 slab 在每处理器 slab 缓存中，它处于冻结状态；如果 slab 在内存节点的部分空闲 slab 链表中，它处于解冻状态。</li><li>6）成员 lru 作为链表节点加入部分空闲 slab 链表。</li><li>7）成员 slab_cache 指向 kmem_cache 实例。</li></ul></li></ul></li><li><p>（4）kmem_cache 实例的成员 cpu_slab 指向 kmem_cache_cpu 实例，每个处理器对应一 个 kmem_cache_cpu 实例，称为每处理器 slab 缓存。</p><ul><li>SLAB 分配器的每处理器数组缓存以对象为单位，而 SLUB 分配器的每处理器 slab 缓 存以 slab 为单位。<ul><li>成员 freelist 指向当前使用的 slab 的空闲对象链表，成员 page 指向当前使用的 slab 对 应的 page 实例，成员 partial 指向每处理器部分空闲 slab 链表。</li></ul></li></ul></li></ul><p>对象有两种内存布局，区别是空闲指针的位置不同。</p><p>第一种内存布局如图 3.38 所示，空闲指针在红色区域 2 的后面。</p><h2 id="中断">中断</h2><p>这段文字概述了第10章《中断与时钟》的主要内容，主要涵盖了中断和定时器在Linux设备驱动编程中的重要性以及相应的处理流程和机制。以下是对每个小节的简要解释：</p><p>10.1 节 - 中断和定时器的概念及处理流程： 中断和定时器概念： 介绍中断和定时器的基本概念，以及它们在Linux设备驱动中的作用。 处理流程： 概述中断和定时器的处理流程，强调中断服务程序需要尽量短暂，因为它执行在非进程上下文中。</p><p>10.2 节 - Linux中断处理程序的架构和顶半部、底半部之间的关系： 中断处理程序架构： 解释Linux中断处理程序的整体架构，包括中断处理的两个主要部分：顶半部（Top Half）和底半部（Bottom Half）。 顶半部和底半部： 讨论顶半部和底半部之间的关系，强调它们的划分是为了确保中断服务程序的执行时间尽量短。</p><p>10.3 节 - Linux中断编程的方法： 中断编程方法： 探讨Linux中断编程的方法，包括中断的申请和释放、中断的使能和屏蔽，以及介绍中断底半部相关的概念，如tasklet、工作队列、软中断机制和threaded_irq。</p><p>10.4 节 - 多个设备共享同一个中断号时的中断处理过程： 中断处理过程： 解释当多个设备共享同一个中断号时，Linux中的中断处理过程，包括中断的共享机制和相应的处理策略。</p><p>10.5 节和 10.6 节 - 定时器的编程和内核延时的方法： 定时器编程： 介绍Linux设备驱动编程中定时器的编程方法。 内核延时： 探讨在Linux内核中实现延时的方法，强调内核软件定时器最终依赖于时钟中断。</p><p>这些主题涵盖了在Linux设备驱动编程中涉及中断和定时器的核心概念、架构和编程方法。理解这些内容对于设计和实现高效、稳定的设备驱动程序至关重要。</p><h3 id="软中断和tasklet运行于软中断上下文仍然属于原子上下文的一种而工作队列则运行于进程上下-文因此在软中断和tasklet处理函数中不允许睡眠而在工作队列处理函数中允许睡眠">软中断和tasklet运行于软中断上下文，仍然属于原子上下文的一种，而工作队列则运行于进程上下 文。因此，在软中断和tasklet处理函数中不允许睡眠，而在工作队列处理函数中允许睡眠。</h3><p>软中断（Softirq）：</p><p>运行于软中断上下文，也被认为是一种原子上下文。 在软中断中运行的代码应该是非阻塞的，不允许执行可能导致进程切换（调度）的操作，如休眠。 主要用于在内核中处理底半部工作。 Tasklet：</p><p>也运行于软中断上下文，因此同样属于原子上下文。 与软中断类似，tasklet 中的代码应该是非阻塞的。 Tasklet 提供了比软中断更方便的 API，使得处理底半部工作更加简单。 工作队列（Work Queue）：</p><p>运行于进程上下文。 工作队列允许执行可能导致进程切换的操作，如休眠。 由于在进程上下文中执行，工作队列更适合执行那些可能耗时较长的任务。 在Linux内核中，软中断和tasklet通常用于处理一些紧急的、轻量级的任务，以避免在顶半部中执行过多的工作。因为它们运行在软中断上下文，所以它们的执行应该是快速的、不可睡眠的。</p><p>工作队列则更适合那些不太紧急、允许较长执行时间的任务，因为它们可以在进程上下文中执行，允许进行较长时间的处理，甚至是休眠。</p><h3 id="进程上下文线程上下文中断上下文的区别">进程上下文、线程上下文、中断上下文的区别？</h3><p>在操作系统中，"上下文"通常指的是执行环境和状态的集合，不同的上下文代表了不同的执行环境。在 Linux 内核中，常见的上下文包括进程上下文、线程上下文和中断上下文。以下是它们的主要区别：</p><p>进程上下文（Process Context）：</p><p>概念： 进程上下文是指一个运行在内核态的进程的上下文环境。 特点： 在进程上下文中，内核代码执行的是进程的名义上下文，因此可以访问进程的地址空间和所有用户空间数据。 切换代价： 进程上下文切换的代价相对较高，因为需要保存和还原完整的进程状态，包括寄存器、页表等。 线程上下文（Thread Context）：</p><p>概念： 线程上下文是指一个运行在内核态的线程的上下文环境。 特点： 与进程上下文相似，线程上下文也可以访问线程的地址空间和用户空间数据。 切换代价： 线程上下文切换的代价相对于进程上下文来说较小，因为在同一地址空间中运行的线程共享了相同的页表。 中断上下文（Interrupt Context）：</p><p>概念： 中断上下文是指内核在响应硬件中断时执行的上下文环境。 特点： 中断上下文运行在中断服务例程（ISR）中，它必须迅速完成以便尽早恢复硬件中断。 限制： 中断上下文有一些限制，例如不允许休眠、不允许访问用户空间数据，因为这可能导致不可预测的延迟。 总体而言，这三种上下文反映了不同的执行环境和执行要求。在内核中，合理的使用这些上下文是确保系统稳定性和性能的关键。</p><h3 id="网卡驱动net-devicesuckbf这两个数据结构很关键驱动中收包逻辑通过中断这个稍微复杂些">网卡驱动net-device，suckbf这两个数据结构很关键，驱动中收包逻辑通过中断，这个稍微复杂些</h3><p>您提到的 "net-device" 和 "skb"（假设 "suckbf" 是打字错误，应该是 "skb"）是 Linux 网络驱动开发中的两个关键数据结构。</p><p>net_device：</p><p>net_device 是 Linux 网络设备的抽象表示。每个网络设备（例如网卡）都由一个 net_device 结构体表示。 该结构体包含了网络设备的各种信息，如设备名称、MAC 地址、状态等。 驱动程序通过操作 net_device 结构体来控制和管理网络设备。 skb（Socket Buffer）：</p><p>skb 是 Linux 内核中用于表示网络数据包的结构体。它包含了传输层和网络层的数据，以及与数据包相关的元数据。 skb 中包含了指向数据区域的指针，以及与数据包相关的一系列头部信息。 skb 是网络驱动中非常关键的数据结构，用于传递和处理网络数据包。 如果您是在谈论网络驱动的中断处理，那么通常是使用中断机制来接收网络数据包。下面是简要的网络驱动中收包逻辑的概述：</p><p>中断处理：</p><p>网卡通常会生成中断，以通知系统有新的数据包到达。这可以是硬中断或者通过 Polling 机制。 中断服务程序（ISR）是一个与中断相关的函数，它会在中断发生时执行。在网络驱动中，ISR 的任务是通知内核有新的数据包到达。 数据包接收：</p><p>ISR 负责从网卡接收数据包，将数据包存储到内存中。 接收到的数据包通常会以 skb 结构体的形式存在。 net_device 处理：</p><p>接着，网络驱动会将接收到的数据包封装成 skb，并将 skb 与对应的 net_device 关联起来。 驱动可能会更新 net_device 结构体中的统计信息（如接收的字节数、数据包数量等）。 上层处理：</p><p>最后，驱动会将 skb 传递给协议栈的上层，让网络协议栈（例如TCP/IP协议栈）进一步处理。 这是一个简单的概述，实际上，网络驱动的开发涉及到很多复杂的细节，包括对各种网络协议的处理、中断处理程序的高效性等。</p><h3 id="总结">10.7 总结</h3><p>Linux的中断处理分为两个半部，顶半部处理紧急的硬件操作，底半部处理不紧急的耗时操作。tasklet 和工作队列都是调度中断底半部的良好机制，tasklet基于软中断实现。内核定时器也依靠软中断实现。</p><p>内核中的延时可以采用忙等待或睡眠等待，为了充分利用CPU资源，使系统有更好的吞吐性能，在对 延迟时间的要求并不是很精确的情况下，睡眠等待通常是值得推荐的，而ndelay（）、udelay（）忙等待 机制在驱动中通常是为了配合硬件上的短时延迟要求。</p><h2 id="i2cspiusb驱动架构">17.1 I2C、SPI、USB驱动架构</h2><p>您提到的内容涉及Linux中I2C、SPI、USB等总线驱动的架构。下面是对这些内容的一些解释：</p><p>总线驱动架构：</p><p>Linux的总线驱动架构采用了一种分层的设计，将主机端的驱动与外设端的驱动分离。 通过一个核心层对某种总线的协议进行抽象，外设端的驱动可以通过调用核心层的API间接访问主机端的驱动传输函数。 这种设计使得在不同总线上运行的外设可以共享相同的驱动接口，提高了驱动的可移植性。 板级描述信息：</p><p>对于像I2C、SPI这样不具备热插拔能力的总线，通常需要在arch/arm/mach-xxx或者arch/arm/boot/dts中提供板级描述信息。 这些描述信息包括外设与主机的连接情况，有助于内核正确地配置和初始化驱动。 USB、PCI等总线：</p><p>USB、PCI等总线具备热插拔能力，因此在板级描述信息中通常不需要详细描述外设与主机的连接情况。 Linux USB子系统和PCI子系统具有自动探测的功能，可以动态地发现和管理连接到系统的外设。 架构类比：</p><p>不仅限于I2C、SPI、USB，Linux的各个子系统都遵循相似的总线驱动架构。 表17.1中列举了I2C、SPI、USB的架构类比，说明了它们在整体架构上的相似性。 控制器的枚举：</p><p>I2C、SPI、USB控制器实际上也是由它们自身依附的总线枚举出来的。 这些控制器通常直接集成在SoC内部，通过内存访问指令来访问。它们通过platform_driver、platform_device等模型被枚举进内核。 总体而言，这种总线驱动的设计和架构使得Linux内核能够更好地支持不同类型的总线和外设，并且具有良好的可移植性和可扩展性。</p><h2 id="linux-程序开发常用调试工具合集">Linux 程序开发常用调试工具合集</h2><p>Linux 程序开发常用调试工具合集</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs text">01 总览<br>编译阶段<br>nm                 获取二进制文件包含的符号信息<br>strings           获取二进制文件包含的字符串常量<br>strip               去除二进制文件包含的符号<br>readelf           显示目标文件详细信息<br>objdump         尽可能反汇编出源代码<br>addr2line        根据地址查找代码行<br>运行阶段<br>gdb                强大的调试工具<br>pstack<br>ldd                 显示程序需要使用的动态库和实际使用的动态库<br>bpftrace<br>trace-bpfcc<br>execsnoop<br>ftrace<br>trace-cmd<br>perf<br>strace            跟踪程序当前的系统调用<br>ltrace             跟踪程序当前的库函数<br>time               查看程序执行时间、用户态时间、内核态时间<br>gprof              显示用户态各函数执行时间<br>valgrind          检查内存错误<br>mtrace           检查内存错误<br>其他<br>proc文件系统<br>系统日志<br></code></pre></td></tr></table></figure><h2 id="第-7-章-设备虚拟化">第 7 章 设备虚拟化</h2><p>设备虚拟化概述 设备虚拟化是虚拟化技术的一个重要方面，它允许虚拟机（VM）访问模拟的外部设备，从而使得虚拟机能够与物理硬件交互，就像是在真实的计算机上运行一样。这在云计算等场景中至关重要，因为虚拟机通常需要访问各种设备，如磁盘、网络接口、图形显示等。</p><p>QEMU 的角色与发展历程 传统纯软件模拟 最初，QEMU采用传统的纯软件模拟方式，通过软件实现各种外部设备的模拟。这种方式的优势在于通用性强，可以模拟几乎任何类型的设备，但性能相对较低。</p><p>转向 virtio 随着虚拟化技术的发展，QEMU逐渐引入了 virtio 总线。virtio 是一种基于共享内存的设备虚拟化标准，它通过定义一组通用的设备接口和协议，实现了虚拟机与宿主机之间的高效通信。这种方式提高了性能，同时保持了一定的通用性。</p><p>转向 VFIO 设备直通 随着硬件对虚拟化的支持不断增强，QEMU 进一步发展，引入了 VFIO（Virtual Function I/O）设备直通技术。VFIO 允许虚拟机直接访问物理设备，绕过 QEMU 的模拟层，提高了性能和效率。</p><p>常见的总线系统模拟 QEMU对常见的总线系统进行了模拟，以支持各种设备的虚拟化：</p><p>ISA 总线： 用于模拟传统的ISA总线，支持一些古老的设备。 PCI 总线： 模拟了PCI总线，支持更现代的设备，是虚拟机中常见的总线之一。 USB 总线： 用于模拟USB总线及其设备，支持虚拟机中的USB设备连接。 virtio 总线： 为了提高性能，引入了 virtio 总线，用于虚拟机内部的高效通信。 这些总线系统模拟为 QEMU 提供了广泛的设备支持，使得虚拟机能够与各种外部设备进行交互，从而更好地满足不同应用场景的需求。</p><h3 id="virtio-设备模拟">7.4 virtio 设备模拟</h3><p>virtio 设备模拟概述 virtio 简介</p><p>在传统设备模拟中，虚拟机内部设备驱动并不知道自己处于虚拟化环境中，导致 I/O 操作需要经过虚拟机内核栈、QEMU 和宿主机内核栈，产生大量 VM Exit 和 VM Entry，性能较差。virtio 设备模拟方案旨在提高性能，使虚拟机感知到自身处于虚拟化环境中，加载相应的 virtio 总线驱动和 virtio 设备驱动。</p><p>半虚拟化的基本原理</p><p>半虚拟化的基本原理包括两个主要部分：VMM 创建出模拟设备和操作系统内部安装好该模拟设备的驱动。在半虚拟化环境下，设备和驱动是专门为虚拟化环境设计的，通过自定义接口进行通信，减少 VM Exit 次数，提高性能。</p><p>virtio 前后端结构</p><p>virtio 采用前后端结构，包括前端驱动（Front-End Driver）、后端设备（Back-End Device）以及自定义传输协议。virtio 不仅适用于 QEMU/KVM，还可以用于其他虚拟化方案。前端驱动负责用户态请求的接收和封装，后端设备接收前端的 I/O 请求，解析数据并完成请求，通过中断机制通知前端。</p><p>virtio 数据传输</p><p>virtio 前后端驱动的数据传输通过 virtio 队列（virtqueue）实现，一个设备可以注册多个 virtqueue，每个队列处理不同的数据传输，包括控制层面和数据层面的队列。virtqueue 通过 vring 实现，是虚拟机和 QEMU 共享的环形缓冲区。虚拟机将数据描述放入 vring，QEMU 通过读取 vring 获取数据。vring 的基本原理如图 7-21 所示。</p><p>virtio vring</p><p>virtio 设备模拟通过这种前后端协作结构和数据传输机制，旨在提高虚拟机的 I/O 性能，减少不必要的虚拟化开销。</p><h3 id="ioeventfd-和-irqfd">7.5 ioeventfd 和 irqfd</h3><p>ioeventfd 和 irqfd 7.5.1 eventfd 原理 eventfd 概述</p><p>eventfd 是 Linux 内核提供的一种用于在用户空间和内核空间之间进行事件通知的机制。它提供了一种通过文件描述符传递事件信息的方式。</p><p>eventfd 工作原理</p><p>创建 eventfd： 用户空间通过 eventfd 系统调用创建一个 eventfd 对象，获得一个文件描述符。</p><p>读写操作： 用户空间可以通过读写文件描述符进行事件的等待和通知。读操作可以阻塞，等待事件发生；写操作用于通知事件发生。</p><p>内核实现： 内核为每个 eventfd 对象维护一个 64 位的计数器。写操作会增加计数器的值，读操作会减少计数器的值。当计数器的值不为 0 时，读操作可以成功完成，否则读操作可能阻塞。</p><p>触发事件： 用户空间通过写操作将计数器值增加，从而通知事件的发生。每次写操作都会唤醒等待中的读操作。</p><p>7.5.2 ioeventfd 和 irqfd ioeventfd 概述</p><p>ioeventfd 是一种机制，允许虚拟机通过向 QEMU 注册文件描述符，实现在虚拟机中向指定 I/O 地址写入数据时触发事件。</p><p>ioeventfd 工作原理</p><p>注册 ioeventfd： 在 QEMU 中，虚拟机可以通过向 KVM 注册 ioeventfd，将一段 I/O 地址范围与一个 eventfd 关联。</p><p>触发事件： 当虚拟机写入已注册的 I/O 地址范围时，KVM 收到写操作，触发与该 I/O 地址范围关联的 eventfd，从而通知 QEMU。</p><p>QEMU 处理事件： QEMU 主循环中检测到关联的 eventfd 变为可读，执行相应的函数处理事件，绕过了 QEMU 层的分发。</p><p>irqfd 概述</p><p>irqfd 是一种机制，允许虚拟机通过向 QEMU 注册文件描述符，实现在虚拟机中触发中断。</p><p>irqfd 工作原理</p><p>注册 irqfd： 虚拟机可以通过向 KVM 注册 irqfd，将一个 eventfd 与一个虚拟中断线索引关联。</p><p>触发中断： 当虚拟机写入注册的虚拟中断线索引对应的 I/O 地址时，KVM 收到写操作，触发关联的 eventfd，从而通知 QEMU。</p><p>QEMU 处理中断： QEMU 主循环中检测到关联的 eventfd 变为可读，执行相应的函数处理中断，实现了中断的注入。</p><p>通过 ioeventfd 和 irqfd 机制，虚拟机可以更高效地与 QEMU 进行通信，减少了 VM Exit 的开销，提高了虚拟机的性能。</p><h3 id="vhost-net-简介">7.6 vhost net 简介</h3><p>vhost 概述</p><p>vhost 是一种虚拟化技术，用于将虚拟机内部的 I/O 请求直接传递给宿主机内核处理，而不经过用户态的 QEMU，以提高性能。</p><p>vhost net 工作原理</p><p>前端和后端通信： 虚拟机内部的 virtio 驱动充当前端，负责封装虚拟机内的 I/O 请求到 vring 描述符中。vhost 模块在宿主机内核中作为 virtio 的后端，接收来自虚拟机的通知。</p><p>vring 描述符： 虚拟机内的 virtio 驱动通过 vring 描述符传递 I/O 请求信息。这包括需要进行的数据传输的位置、长度等信息。</p><p>vhost 处理： vhost 模块在宿主机内核中接收到来自虚拟机的通知后，直接与 tap 设备通信。这绕过了用户态的 QEMU，提高了收发包的性能。</p><p>tap 设备： 宿主机的 tap 设备负责与宿主机网络协议栈交互，将数据包发送到真实的网络设备上。</p><p>通过使用 vhost net 技术，虚拟机的网络数据包在宿主机内核中的处理路径缩短，避免了用户态和宿主机网络协议栈的多次转换，从而提高了网络性能。vhost net 主要用于优化 virtio 网卡的性能，使其更适用于高性能网络应用场景。</p><h3 id="设备直通与-vfio">7.7 设备直通与 VFIO</h3><p>VFIO 基本思想与原理</p><ol type="1"><li><p>设备直通概述： 设备直通是一种虚拟化技术，将物理设备直接分配给虚拟机，实现虚拟机对设备的直接访问，从而提高性能。</p></li><li><p>传统设备直通问题： 传统的设备直通方法（如PCI passthrough）要求KVM完成大量工作，包括与IOMMU交互、注册中断处理函数等。这使得KVM过多地涉及与设备的交互，不够通用和灵活。</p></li><li><p>VFIO 的出现： VFIO（Virtual Function I/O）是一种用户态驱动框架，利用硬件层面的I/O虚拟化技术（如Intel的VT-d和AMD的AMD-Vi），将设备直通给虚拟机。</p></li><li><p>VFIO 的基本思想：</p></li></ol><p>资源分解： 将物理设备的各种资源进行分解。 导出接口： 将获取这些资源的接口向上导出到用户空间，使QEMU等应用层软件能够获取硬件的所有资源，包括设备的配置空间、BAR（Base Address Register）空间和中断。</p><ol start="5" type="1"><li>VFIO 工作原理： VFIO通过将设备资源导出到用户空间，使QEMU等应用能够直接与这些资源进行交互，包括对设备的配置和中断的处理，而无需KVM过多介入。这提高了设备直通的通用性和灵活性。</li></ol><p>VFIO的引入使得虚拟化环境中设备直通更加高效，通过硬件的支持，它提供了一种通用的框架，使得用户态软件能够更灵活地进行设备直通。</p><h4 id="聚合与-iommu">聚合与 IOMMU</h4><p>在VFIO思想的第二部分中，聚合是关键的一环。聚合的目的是将从硬件设备得到的各种资源整合在一起，为虚拟化展示一个完整的设备接口。这个过程在用户空间完成，以QEMU为例，它将硬件设备分解得到的资源重新整合成虚拟机设备，并将其挂载到虚拟机上。QEMU通过调用KVM的接口将这些资源与虚拟机关联，使虚拟机内部能够无感知VFIO的存在，正常与直通设备进行交互。</p><p>在虚拟化环境中，将设备直通给虚拟机带来两个挑战：设备DMA使用的地址和中断的重定向。虚拟机内部可以随意指定设备DMA地址，因此需要一种机制来隔离对设备DMA地址的访问。此外，在Intel架构上，MSI（Message Signaled Interrupt）中断通过写入地址完成，任何DMA发起者都能够写入任意数据，可能导致虚拟机内部攻击者产生不属于其的中断。</p><p>解决这些问题的关键是IOMMU（Input-Output Memory Management Unit）。IOMMU的主要功能是DMA重映射，确保设备的DMA访问仅限于由宿主机分配的内存。类似于MMU将CPU访问的虚拟机地址转换为物理地址，IOMMU对设备的DMA地址进行重映射。</p><p>IOMMU的工作原理包括DMA Remapping和Interrupt Remapping。DMA Remapping通过建立类似页表的结构来完成DMA地址的转换，确保访问仅限于被分配的物理地址。Interrupt Remapping通过IOMMU对中断请求进行重定向，将直通设备的内部中断正确分派到虚拟机。这一流程确保了设备直通的安全性和正确性。</p><h4 id="vfio-框架设计">VFIO 框架设计</h4><p>VFIO框架设计简洁清晰，主要包含以下组件：</p><p>VFIO Interface: 作为接口层，向应用层导出一系列接口。用户程序如QEMU通过相应的ioctl与VFIO进行交互。</p><p>iommu driver: 物理硬件IOMMU的驱动实现，例如Intel和AMD的IOMMU。</p><p>pci_bus driver: 物理PCI设备的驱动程序。</p><p>vfio_iommu: 对底层iommu driver的封装，向上提供IOMMU功能，包括DMA Remapping和Interrupt Remapping。</p><p>vfio_pci: 对设备驱动的封装，向用户进程提供访问设备驱动的功能，包括配置空间和模拟BAR。</p><p>重要的VFIO功能之一是对各个设备进行分区。在VFIO中，有三个关键的概念：container、group和device。它们的关系如图7-55所示。</p><h4 id="vfio-关键概念解析">VFIO 关键概念解析</h4><p>Group: Group是IOMMU能进行DMA隔离的最小单元。在一个Group内可能包含一个或多个设备，这取决于硬件IOMMU的拓扑结构。在设备直通时，一个Group内的设备必须一起直通给一个虚拟机。这是为了确保物理上的DMA隔离，防止虚拟机中的设备攻击其他虚拟机或宿主机。</p><p>Device: Device指的是要操作的硬件设备。在IOMMU拓扑中，如果设备是独立的，它自身就构成一个IOMMU Group。对于多功能设备（multi-function device），所有的function一起构成一个IOMMU Group，因为它们在物理硬件上是互联的，需要进行隔离。</p><p>Container: Container是由多个Group组成的集合。虽然Group是VFIO的最小隔离单元，但有时候并不是最佳的分割粒度。多个Group可以共享一组页表，将它们组织到一个Container中，可以提高系统性能，也更方便用户管理。通常，每个进程或虚拟机可以作为一个Container。</p><h4 id="vfio-使用方法">2.VFIO 使用方法</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs text">上面介绍了 VFIO 的基本原理，下面介绍 VFIO 的使用方法。<br><br>1）假设需要直通的设备如下所示。<br>01:10.0 Ethernet controller: Intel Corporation 82576 Virtual Function <br>(rev 01) <br><br>2）找到这个设备的 VFIO group，这是由内核生成的。<br># readlink /sys/bus/pci/devices/0000:01:10.0/iommu_group <br>../../../../kernel/iommu_groups/15 <br><br>3）查看 group 里面的设备，这个 group 只有一个设备。<br># ls /sys/bus/pci/devices/0000:01:10.0/iommu_group/devices/ <br>0000:01:10.0 <br><br>4）将设备与驱动程序解绑。<br># echo 0000:01:10.0 &gt;/sys/bus/pci/devices/0000:01:10.0/driver/unbind <br><br>5）找到设备的生产商&amp;设备 ID。<br>$ lspci -n -s 01:10.0 <br>01:10.0 0200: 8086:10ca (rev 01) <br><br>6）将设备绑定到 vfio-pci 驱动，这会导致一个新的设备节点“/dev/vfio/15”被创建，这个<br>节点表示直通设备所属的 group 文件，用户态程序可以通过该节点操作直通设备的 group。<br>$ echo 8086 10ca /sys/bus/pci/drivers/vfio-pci/new_id <br><br>7）修改这个设备节点的属性。<br># chownqemu /dev/vfio/15 <br># chgrpqemu /dev/vfio/15 <br><br>8）设置能够锁定的内存为虚拟机内存+一些 IO 空间。<br># ulimit -l 2621440 # ((2048 + 512) ＊ 1024) <br><br>9）向 QEMU 传递相关参数。<br>sudo qemuqemu-system-x86_64 -m 2048 -hda rhel6vm \ <br> -vga std -vnc :0 -net none \ <br> -enable-kvm \ <br> -device vfio-pci,host=01:10.0,id=net0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gui</title>
    <link href="/linux/kernel/drivers/gpu/gui/"/>
    <url>/linux/kernel/drivers/gpu/gui/</url>
    
    <content type="html"><![CDATA[<h1 id="gui">GUI</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/414403029">深夜磨刀，Linux Graphics Stack 概述 | Linux 驱动</a></li><li><a href="https://blog.csdn.net/Liuqz2009/article/details/134988734">深度探索Linux操作系统 —— Linux图形原理探讨</a></li></ul><h2 id="桌面环境">桌面环境</h2><ul><li><a href="https://wiki.archlinux.org/title/Desktop_environment_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"><font color=Red>Desktop environment (简体中文)</font></a></li><li><a href="https://blog.csdn.net/chantal20080409/article/details/82986283">【转】四大Linux图形界面赏析：KDE、Gnome、Xfce、LXDE</a></li><li><a href="https://blog.csdn.net/iteye_4195/article/details/82522264"><font color=Red>GTK、KDE、Gnome、XWindows图形界面</font></a></li><li><a href="http://c.biancheng.net/view/2912.html">Linux桌面环境（桌面系统）大比拼[附带优缺点]</a></li></ul><h3 id="gnome-桌面">GNOME 桌面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install task-gnome-desktop<br></code></pre></td></tr></table></figure><ul><li><a href="https://wiki.debian.org/zh_CN/Gnome">https://wiki.debian.org/zh_CN/Gnome</a></li></ul><h3 id="显示管理器">显示管理器</h3><ul><li><p><a href="http://www.javashuo.com/article/p-yftqzthz-cp.html"><font color=Red>Linux图形界面：X,X11,XFREE,WM,KDE,GNOME的关系</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/272740410"><font color=Red>Linux 知识分享：显示管理器和桌面环境容易混淆？分分钟带你脱离认识误区</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7174576146997625352"><font color=Red>「小白课程」openKylin登录&amp;锁屏简要介绍</font></a></p></li></ul><h3 id="显示服务器">显示服务器</h3><ul><li><a href="https://www.toutiao.com/article/6869367787744133636/">Linux黑话解释：什么是显示服务器，用来做什么？</a></li><li><a href="https://blog.csdn.net/sunxiaopengsun/article/details/119895985">X11和Wayland的区别，一点感悟</a></li></ul><h4 id="x11">x11</h4><ul><li><a href="https://blog.csdn.net/u014305876/article/details/89475789"><font color=Red>linux图形窗口这家子(xwindows x11 xserver xclient窗口管理器 xdm xwm kde QT GTK+)</font></a></li><li><a href="https://www.cnblogs.com/newjiang/p/8414625.html">Linux图像系统框架-理解X11与Qt的层次结构</a></li><li><a href="https://www.cnblogs.com/yongpenghan/p/4555634.html">[GUI] QT事件与X11的关系</a></li><li><a href="https://www.cnblogs.com/winafa/p/14206600.html">Qt主线程卡死，竟然与X11的_XReply()有关</a></li><li><a href="https://blog.csdn.net/moyu123456789/article/details/90483108">Xsession :warning:unable to write to /tmp; X session may exit with an error问题解决</a></li><li><a href="https://www.cnblogs.com/yutian-blogs/p/13549657.html">Ubuntu系统开机后类似死机（鼠标键盘失效 但系统时间仍在正常更新）解决办法</a></li></ul><h5 id="窗口管理器">窗口管理器</h5><ul><li><a href="https://wiki.archlinux.org/title/Window_manager_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"><font color=Red>Window manager (简体中文)</font></a></li><li><a href="https://my.oschina.net/aspirs/blog/607710">linux（ubuntu）系统什么叫：桌面管理器，窗口管理器？</a></li><li><a href="https://geek-docs.com/linux/linux-ask-answer/difference-between-desktop-environment-vs-window-manager-in-linux.html">Linux中桌面环境和窗口管理器的区别</a></li></ul><h4 id="wayland">wayland</h4><ul><li><a href="https://blog.csdn.net/weixin_36156325/article/details/116895549">linux wayland qt,详解Qt Lighthouse和Wayland</a></li><li><a href="https://blog.csdn.net/yogoloth/article/details/105683815">通过docker使用wayland和x11的gui程序</a></li><li><a href="https://blog.csdn.net/qq_26056015/article/details/122406051">Wayland开发入门系列4：xserver</a></li><li><a href="https://blog.csdn.net/qq_26056015/category_11559440.html"><font color=Red>Wayland开发入门</font></a></li><li><a href="https://www.baike.com/wikiid/3479851875664899506">Wayland是一个简单的“显示服务器”（Display Server）</a></li><li><a href="https://blog.csdn.net/M120674/article/details/123534336">Linux图形栈一览：基于DRM和Wayland</a></li></ul><h2 id="gpu">gpu</h2><ul><li><p><a href="https://blog.csdn.net/tugouxp/article/details/126594480">GPGPU&amp;&amp;渲染GPU的工作原理和认知总结</a></p></li><li><p><a href="https://www.toutiao.com/article/6973922609868063264">Linux显卡驱动，DRM显示框架简单介绍</a></p></li><li><p><a href="https://www.toutiao.com/article/6982072379140784670">Linux显卡驱动，DRM Atomic接口简说</a></p></li><li><p><a href="https://www.toutiao.com/article/6989969291902763558">Linux显卡驱动，TTM内存管理介绍</a></p></li><li><p><a href="https://blog.csdn.net/xuelin273/article/details/131297186">drm gpu scheduler</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/_oe409y93Qm5l3j3o_-P8Q">GPU 调度 - Linux 实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/IHardB0dyky8fhgQkU55pw">【干货】一文看懂GPU流处理器</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/bNGBoeKnvcEB7prpDeAXeQ">【干货】三张图看懂主流GPU性能</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/xGwaaaaMED23dNbO9wNICg">【干货】一文看懂CPU与GPU异构计算</a></p></li></ul><h3 id="admgpu">admgpu</h3><p>在 AMD GPU 驱动中，gfx（Graphics Core Next） Ring Buffer 和 uvd（Unified Video Decoder） Ring Buffer 分别用于图形和视频解码任务，是 GPU 调度器中的两个不同的环形缓冲区。以下是它们之间的主要区别：</p><p>gfx Ring Buffer（图形环形缓冲区）:</p><ul><li>用途： 用于处理图形渲染和计算任务。</li><li>任务类型： 包括图形渲染管道中的图形指令和通用计算任务。</li><li>关联的任务： 与图形 API（如 OpenGL、Vulkan）相关联，用于执行图形任务。</li></ul><p>uvd Ring Buffer（视频解码环形缓冲区）:</p><ul><li>用途： 用于处理硬件视频解码任务。</li><li>任务类型： 专注于解码视频流，支持 Unified Video Decoder（UVD）功能。</li><li>关联的任务： 与视频解码 API 相关，例如在视频播放中执行解码任务。</li></ul><p>总的来说，这两个环形缓冲区服务于不同类型的 GPU 任务。gfx Ring Buffer 处理与图形渲染和通用计算相关的任务，而 uvd Ring Buffer 专门处理硬件视频解码任务。它们在 GPU 调度器中的调度和执行上有所区别，以满足图形和视频处理的不同需求。</p><ul><li><p><a href="https://blog.csdn.net/huang987246510/article/details/106658889"><font color=Red>AMD GPU任务调度（1）—— 用户态分析</font></a></p></li><li><p><a href="https://blog.csdn.net/huang987246510/article/details/106737570"><font color=Red>AMD GPU任务调度（2）—— 内核态分析</font></a></p></li><li><p><a href="https://blog.csdn.net/huang987246510/article/details/106865386">AMD GPU任务调度（3） —— fence机制</a></p></li><li><p><a href="https://blog.csdn.net/tugouxp/article/details/132819114"><font color=Red>AMD GPU 内核驱动分析(一)总览</font></a></p></li><li><p><a href="https://blog.csdn.net/tugouxp/article/details/132953439">AMD GPU 内核驱动分析(二)-video-ring的调度</a></p></li><li><p><a href="https://blog.csdn.net/tugouxp/article/details/133519133">AMD GPU 内核驱动分析(三)-gpu scheduler ring fence同步工作模型</a></p></li></ul><h4 id="virtio">virtio</h4><ul><li><a href="https://blog.csdn.net/huang987246510/article/details/106179145">VFIO硬件依赖——IOMMU机制</a></li><li><a href="https://blog.csdn.net/huang987246510/article/details/106254294">VirtIO-GPU —— 2D加速原理分析</a></li><li><a href="https://blog.csdn.net/huang987246510/article/details/106245900">VirtIO-GPU环境搭建与应用</a></li><li><a href="https://blog.csdn.net/huang987246510/article/details/106322012">Hello OpenGL</a></li><li><a href="https://blog.csdn.net/huang987246510/article/details/107729881">VirtIO GPU基本原理</a></li><li><a href="https://blog.csdn.net/huang987246510/article/details/107283374">DRAW_INDEX与图形流水线</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>gpu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grub</title>
    <link href="/linux/kernel/books/grub/mips-5.10/grub/"/>
    <url>/linux/kernel/books/grub/mips-5.10/grub/</url>
    
    <content type="html"><![CDATA[<h1 id="grub">grub</h1><h2 id="grub-启动项配置文件示例">grub 启动项配置文件示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">menuentry <span class="hljs-string">&#x27;UOS Desktop 20 Pro GNU/Linux&#x27;</span> --class uos --class gnu-linux --class gnu --class os <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-simple-2065c821-2f8f-4182-94ac-fb190c209054&#x27;</span> &#123;<br>        <span class="hljs-built_in">set</span> root=<span class="hljs-string">&#x27;hd0,gpt2&#x27;</span><br>        <span class="hljs-keyword">if</span> [ x<span class="hljs-variable">$feature_platform_search_hint</span> = xy ]; <span class="hljs-keyword">then</span><br>          search --no-floppy --fs-uuid --<span class="hljs-built_in">set</span>=root --hint-ieee1275=<span class="hljs-string">&#x27;ieee1275//disk@0,gpt2&#x27;</span> --hint-bios=hd0,gpt2 --hint-efi=hd0,gpt2 --hint-baremetal=ahci0,gpt2  86213e46-ff4e-41db-a56a-ff2c8841fc1e<br>        <span class="hljs-keyword">else</span><br>          search --no-floppy --fs-uuid --<span class="hljs-built_in">set</span>=root 86213e46-ff4e-41db-a56a-ff2c8841fc1e<br>        <span class="hljs-keyword">fi</span><br>        linux   /vmlinuz-5.10.0-loongson-3-desktop root=UUID=2065c821-2f8f-4182-94ac-fb190c209054 ro  video=efifb:nobgrt splash quiet console=<span class="hljs-built_in">tty</span> loglevel=0 ima_appraise=off libahci.ignore_sss=1<br>        initrd  /initrd.img-5.10.0-loongson-3-desktop<br>        boot <br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是 GRUB（GRand Unified Bootloader）引导加载程序的配置文件（通常是 /boot/grub/grub.cfg 或类似位置）中的一部分。让我为你解释其中的一些关键行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">menuentry <span class="hljs-string">&#x27;UOS Desktop 20 Pro GNU/Linux&#x27;</span> --class uos --class gnu-linux --class gnu --class os <span class="hljs-variable">$menuentry_id_option</span> <span class="hljs-string">&#x27;gnulinux-simple-2065c821-2f8f-4182-94ac-fb190c209054&#x27;</span> &#123;<br></code></pre></td></tr></table></figure><ul><li><p>menuentry 'UOS Desktop 20 Pro GNU/Linux': 定义引导菜单项的标题为 'UOS Desktop 20 Pro GNU/Linux'。</p></li><li><p>--class uos --class gnu-linux --class gnu --class os: 为菜单项设置类别，包括 uos、gnu-linux、gnu 和 os。这些类别可以用于定义 GRUB 主题和其他显示效果。</p></li><li><p>$menuentry_id_option 'gnulinux-simple-2065c821-2f8f-4182-94ac-fb190c209054': 为菜单项设置一个唯一的 ID，这个 ID 通常基于操作系统的 UUID 或其他标识符。这有助于区分不同的操作系统。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> root=<span class="hljs-string">&#x27;hd0,gpt2&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>这行命令设置了 GRUB 根文件系统的位置。在这里，hd0 表示第一个硬盘（通常是 /dev/sda），gpt2 表示硬盘上的 GPT（GUID Partition Table）分区号为 2。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ x<span class="hljs-variable">$feature_platform_search_hint</span> = xy ]; <span class="hljs-keyword">then</span><br>  search --no-floppy --fs-uuid --<span class="hljs-built_in">set</span>=root --hint-ieee1275=<span class="hljs-string">&#x27;ieee1275//disk@0,gpt2&#x27;</span> --hint-bios=hd0,gpt2 --hint-efi=hd0,gpt2 --hint-baremetal=ahci0,gpt2  08822860-675a-4e7d-b597-8093d8230142<br><span class="hljs-keyword">else</span><br>  search --no-floppy --fs-uuid --<span class="hljs-built_in">set</span>=root 08822860-675a-4e7d-b597-8093d8230142<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ul><li><p>这是一个条件语句，根据 GRUB 的特性选择不同的搜索方式。如果 feature_platform_search_hint 存在（xy 表示不为空），则使用具有不同搜索提示的 search 命令。否则，使用标准的 search 命令。如果支持的话，会根据平台特定的提示（hints）来搜索设备。</p></li><li><p>这行命令设置了 GRUB 所在分区文件系统的 UUID。</p></li><li><p>在 grub 中，search 命令的具体实现取决于所使用的引导方式（BIOS 或 UEFI）以及文件系统类型等因素。通常情况下，grub 会在超级块（Superblock）中搜索文件系统的 UUID。</p></li><li><p>超级块是文件系统的元数据结构之一，包含了文件系统的关键信息，例如文件系统类型、块大小、inode 信息等。文件系统的 UUID 通常也存储在超级块中。</p></li><li><p>在 grub 的 search 命令中，--fs-uuid 选项指定了要根据文件系统 UUID 进行搜索。这表示 grub 会在指定的设备上搜索具有特定 UUID 的文件系统。</p></li><li><p>总体而言，grub 的 search 命令不是直接在超级块中搜索 UUID，而是通过读取文件系统的元数据结构（包括超级块）来找到具有指定 UUID 的文件系统。这使得 grub 能够正确识别和定位根文件系统，而无需依赖特定的设备路径。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">linux   /vmlinuz-5.10.0-loongson-3-desktop root=UUID=2065c821-2f8f-4182-94ac-fb190c209054 ro  video=efifb:nobgrt splash quiet console=<span class="hljs-built_in">tty</span> loglevel=0 ima_appraise=off libahci.ignore_sss=1<br></code></pre></td></tr></table></figure><ul><li>这是加载 Linux 内核的命令。它指定了内核的路径（/vmlinux-5.10.197），以及一些内核启动参数，如 root 指定了根文件系统的 UUID，ro 表示以只读模式挂载根文件系统，splash 表示启用启动时的画面，console=ttyS1,115200 表示将控制台输出重定向到串口 ttyS1（波特率为 115200），loglevel=8 表示设置内核消息的日志级别为 8，initcall_debug 和 ima_appraise=off 等是其他内核参数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">initrd /initrd.img-5.10.197<br></code></pre></td></tr></table></figure><ul><li>这是加载 initramfs（初始内存文件系统）的命令，它位于 /initrd.img-5.10.197。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">boot<br></code></pre></td></tr></table></figure><ul><li>这是最终的启动命令，表示执行之前的配置，启动操作系统。</li></ul><p>总体而言，这是一个典型的 GRUB 配置文件段，用于加载 Linux 内核和 initramfs 并启动操作系统。</p><h2 id="rootuuid-与-rootdevsda3的区别">root=UUID 与 root=/dev/sda3的区别</h2><h3 id="rootuuid">root=UUID</h3><p>当使用 root=UUID=<uuid> 这样的引导参数时，Linux 内核在启动过程中通过以下步骤来识别这个参数并挂载真正的根文件系统：</p><ul><li><p>内核启动： 引导加载程序加载内核映像（vmlinuz）到内存中，同时传递引导参数。其中包括 root=UUID=<uuid>，其中 <uuid> 是根文件系统的唯一标识符。</p></li><li><p>内核初始化： 内核初始化过程中，它读取引导加载程序传递的命令行参数，并解析 root=UUID=<uuid>，提取出 <uuid>。</p></li><li><p>设备发现： 内核开始进行设备发现，探测和初始化硬件设备，包括存储设备。这个过程中，内核可能会获得硬盘和分区的基本信息。</p></li><li><p>UUID 匹配： 内核使用之前提取的 <uuid> 与硬盘上的分区进行匹配。内核会检查硬盘上每个分区的文件系统 UUID，与指定的 <uuid> 进行比较。</p></li><li><p>挂载根文件系统： 一旦找到匹配的分区，内核会尝试挂载这个分区作为根文件系统。这个过程涉及到文件系统的识别和挂载操作。内核会尝试识别根文件系统的文件系统类型，并调用相应的文件系统驱动程序进行挂载。</p></li><li><p>切换根文件系统： 一旦成功挂载根文件系统，内核会切换到新的根文件系统，并启动用户空间的初始化进程（通常是 /sbin/init）。</p></li></ul><p>使用 UUID 来标识根文件系统具有优势，因为它不受设备路径变化的影响。设备路径可能会随着硬件配置的变化而改变，而 UUID 作为唯一标识符，更加稳定地确保内核能够找到正确的根文件系统。</p><h3 id="rootdevsda3">root=/dev/sda3</h3><p>在 Linux 内核启动的过程中，内核通过一系列步骤找到和挂载根文件系统。指定的 root=/dev/sda3 参数告诉内核使用哪个块设备作为根文件系统，但是这个信息并不是直接从磁盘上读取的。以下是内核启动时找到根文件系统的基本步骤：</p><ul><li><p>引导加载程序（Bootloader）： 在系统启动时，引导加载程序（例如 GRUB）负责加载内核映像（vmlinuz）和初始内存盘（initramfs）到内存中。引导加载程序的配置文件中通常包含了 root= 参数，指定了根文件系统的设备。</p></li><li><p>内核初始化： 内核初始化过程中，内核会读取引导加载程序传递的命令行参数，其中包括 root= 参数，即指定的根文件系统设备。这个信息被内核保存在相应的内部数据结构中。</p></li><li><p>设备发现： 内核开始进行设备发现，探测和初始化硬件设备。这包括存储设备，例如硬盘和分区。</p></li><li><p>块设备识别： 内核会识别块设备，包括磁盘和分区。在这个阶段，内核使用之前保存的 root= 参数指定的块设备路径（例如 /dev/sda3）来确定根文件系统所在的设备。</p></li><li><p>挂载根文件系统： 一旦找到了指定的块设备，内核会尝试挂载根文件系统。这涉及到文件系统的识别和挂载操作。内核会尝试识别根文件系统的文件系统类型，并调用相应的文件系统驱动程序进行挂载。</p></li><li><p>切换根文件系统： 一旦成功挂载根文件系统，内核会切换到新的根文件系统，并启动用户空间的初始化进程（通常是 /sbin/init）。</p></li></ul><p>这个过程中，指定的 root= 参数提供了一个初始的块设备路径信息，帮助内核找到根文件系统。然而，在现代系统中，使用 UUID 或者标签等更为稳健的方式来指定根文件系统是更为推荐的，因为这可以避免在设备路径发生变化时引起的问题。这种情况下，内核会通过设备的唯一标识符来找到并挂载根文件系统。</p><h4 id="设备发现">设备发现</h4><p>在第3步中，设备发现是指内核开始对系统中的硬件设备进行探测和初始化。这个过程包括对存储设备（如硬盘和分区）的探测。在设备发现阶段，内核会识别硬件设备，并建立与这些设备的连接，以便在接下来的引导过程中使用。</p><p>具体地说，设备发现的过程中，内核会执行以下操作：</p><ul><li><p>加载硬件驱动程序： 内核会加载适当的硬件驱动程序，这些驱动程序负责与硬件通信和管理。</p></li><li><p>PCI 设备探测： 内核会扫描 PCI 总线上的设备，识别连接到系统的各种设备，包括存储控制器等。</p></li><li><p>ATA/SATA 设备探测： 内核会检测并初始化与 ATA/SATA 接口连接的硬盘设备。</p></li><li><p>USB 设备探测： 如果系统中存在 USB 接口，内核也会检测和初始化连接到 USB 总线上的设备，其中可能包括外部硬盘等存储设备。</p></li></ul><p>在设备发现的过程中，内核可能会获得有关硬盘和分区的基本信息，但这些信息通常是内核用于后续步骤的基础，如挂载根文件系统。在设备发现阶段，具体的 /dev/sda3 这样的设备节点并没有被创建。这些设备节点是由用户空间的 udev 服务在后续阶段动态生成的。</p><h4 id="块设备识别">块设备识别</h4><p>在第4步中，块设备识别是指内核对块设备（通常是硬盘、分区等）进行识别和初始化的过程。这个过程涉及到内核的块设备驱动程序，以及硬件检测和识别的一系列操作。以下是这个步骤的一些详细内容：</p><ul><li><p>块设备驱动程序加载： 内核在启动时会加载与块设备通信的驱动程序，例如 SATA、SCSI 等。这些驱动程序负责与相应的硬件通信，管理块设备的读写等操作。</p></li><li><p>PCI 设备扫描： 内核扫描 PCI 总线上的设备，包括存储控制器。如果有存储控制器，内核会尝试初始化并加载相应的驱动程序。</p></li><li><p>ATA/SATA 设备初始化： 内核会检测连接到 ATA/SATA 接口的硬盘设备。这个过程可能包括对硬盘的识别、参数设置和初始化。</p></li><li><p>设备节点分配： 一旦块设备被成功识别和初始化，内核为这些块设备分配相应的设备节点。这些设备节点通常以 /dev/sdX 的形式表示，其中 X 是字母，代表不同的块设备。</p></li><li><p>设备路径解析： 如果在引导参数中指定了根文件系统的设备路径（例如 root=/dev/sda3），内核会根据这个信息来找到相应的块设备。在这个阶段，内核建立了硬件设备与用户空间的设备节点之间的关联。</p></li><li><p>分区表解析： 内核读取块设备上的分区表，识别硬盘上的分区信息。这包括了每个分区的起始位置、大小等信息。</p></li></ul><p>总的来说，块设备识别阶段是内核在引导过程中识别和初始化硬盘、分区等块设备的过程。这个阶段的成功执行是确保内核能够找到并正确挂载根文件系统的关键步骤。</p><h4 id="为啥有的时候写成rootdevsd3才能启动">为啥有的时候写成root=/dev/sd3才能启动？</h4><p>至于为什么有时候需要写成 root=/dev/sdX 才能启动，可能是由于以下原因：</p><p>GRUB 配置问题： GRUB 配置文件中的设备路径可能不正确，或者 GRUB 对 UUID 的支持有问题。</p><p>initramfs 配置问题： initramfs 中可能没有包含正确的文件系统模块，导致无法识别 UUID。</p><p>引导加载程序问题： 引导加载程序可能对某些硬件配置或文件系统特性支持不完善，需要通过设备路径来确保正确的引导。</p><p>在实际使用中，使用 UUID 通常是更可靠和推荐的方式，因为它减少了对硬件配置的依赖。如果存在问题，建议检查 GRUB 配置、initramfs 配置以及引导加载程序的相关问题。</p><h2 id="grub-stage1-stage2-stage3-的区别">grub stage1 stage2 stage3 的区别</h2><p>GRUB（GRand Unified Bootloader）的引导过程分为三个阶段，分别是 Stage 1、Stage 1.5 和 Stage 2。每个阶段有不同的功能和作用。</p><p>Stage 1:</p><ul><li>Stage 1 是 GRUB 引导加载程序的第一阶段，通常存储在引导扇区（Master Boot Record，MBR）的开头。其主要任务是加载 Stage 1.5 或 Stage 2。</li></ul><p>Stage 1.5:</p><ul><li>Stage 1.5 是一个过渡阶段，通常存储在分区的起始扇区。由于 MBR 的空间有限，Stage 1 负责加载 Stage 1.5，以便在 Stage 1.5 中可以更多地加载引导信息和模块。Stage 1.5 的存在使得 GRUB 能够处理更多的文件系统和分区格式，而不受 MBR 大小的限制。</li></ul><p>Stage 2:</p><ul><li>Stage 2 是 GRUB 的主要引导加载程序，包含在文件系统中的特定位置。一旦 Stage 1 或 Stage 1.5 完成其任务，它们就会加载 Stage 2。Stage 2 负责读取 GRUB 的配置文件（通常是 grub.cfg）和操作系统内核，然后引导操作系统。</li></ul><p>这种分层结构允许 GRUB 适应不同的硬件配置和文件系统，使其更加灵活。Stage 1 和 Stage 1.5 的目标是足够小而简单，以适应引导扇区的有限空间，而 Stage 2 则更加复杂，负责处理更多的引导任务。</p><p>需要注意的是，随着计算机硬件和引导标准的发展，UEFI（Unified Extensible Firmware Interface）逐渐取代了传统的 BIOS，并引入了新的引导机制。UEFI 不再需要 Stage 1.5，并且整个引导过程更加灵活。</p><h2 id="uefi-不再需要-stage-1.5">UEFI 不再需要 Stage 1.5</h2><p>在传统的 BIOS 引导中，Stage 1.5 的存在是为了弥补 BIOS 的限制，因为 MBR（Master Boot Record）的空间有限，难以容纳足够的代码和数据。Stage 1.5 被设计为一个额外的引导加载程序，存储在分区的起始扇区，允许加载更多的引导信息和模块。</p><p>UEFI（Unified Extensible Firmware Interface）引入了一种不同的引导机制，与传统的 BIOS 引导方式有很大的区别。在 UEFI 引导中，整个引导过程更加灵活和模块化，不再受到 MBR 大小的限制。以下是一些与 UEFI 引导相关的特点：</p><ul><li><p>GPT 分区表： UEFI 引导使用 GPT（GUID Partition Table）分区表而不是 MBR，提供更大的分区和更灵活的磁盘布局。</p></li><li><p>EFI系统分区（ESP）： UEFI 引导系统通常有一个特定的分区，称为 EFI 系统分区（ESP），其中包含引导加载器、内核文件和其他引导信息。ESP 中的文件系统通常是 FAT32。</p></li><li><p>UEFI固件中的引导管理器： UEFI 固件内置了一个引导管理器，称为 UEFI Boot Manager。UEFI Boot Manager 可以直接从 ESP 中的可执行文件引导操作系统。</p></li><li><p>EFI加载器： 引导加载器（Boot Loader）在 UEFI 中被称为 EFI 加载器。这些加载器通常是 EFI 可执行文件，存储在 ESP 中，并由 UEFI Boot Manager 加载。</p></li></ul><p>由于这些特性，UEFI 不再需要 Stage 1.5 的过渡阶段，因为整个引导过程更加灵活且不受 MBR 大小限制。UEFI 引导可以直接从 EFI 系统分区加载操作系统的 EFI 加载器，而不需要像传统 BIOS 引导那样分为多个阶段。这使得 UEFI 引导更加现代化和适应性强。</p><h2 id="efi加载器">EFI加载器</h2><p>EFI（Extensible Firmware Interface）加载器是 UEFI 引导过程中的一个关键组件，负责加载和启动操作系统。EFI 加载器是一个 EFI 可执行文件，通常存储在 EFI 系统分区（ESP）中，其路径和文件名可以在 UEFI Boot Manager 中进行配置。</p><p>以下是 EFI 加载器的一些关键特点和概念：</p><ul><li><p>文件路径： EFI 加载器的路径通常以 EFI 系统分区为根，然后按照一定的规范组织。例如，一个典型的 EFI 加载器路径可能是 /EFI/{vendor}/{loader_name}.efi，其中 {vendor} 是厂商或发行版的名称，{loader_name} 是加载器的名称。</p></li><li><p>EFI System Partition（ESP）： ESP 是一个专用的分区，用于存储 EFI 加载器、引导配置文件以及其他引导相关的文件。ESP 使用 FAT32 文件系统，因为 FAT32 在多个操作系统之间具有广泛的兼容性。</p></li><li><p>引导配置文件： EFI 加载器通常伴随一个引导配置文件，这个文件包含了引导加载器的配置信息，例如指定操作系统内核的路径、启动参数等。这个引导配置文件的常见名称是 bootx64.efi。</p></li><li><p>UEFI Boot Manager： UEFI Boot Manager 是 UEFI 固件内置的引导管理器，负责在系统启动时选择并加载操作系统。Boot Manager 通过查找 ESP 中的 EFI 加载器和引导配置文件来构建引导菜单。</p></li><li><p>加载过程： 当计算机启动时，UEFI Boot Manager 会扫描 ESP，找到 EFI 加载器的路径和引导配置文件。然后，Boot Manager 将控制权传递给 EFI 加载器，EFI 加载器负责加载操作系统内核并传递启动参数。</p></li><li><p>多操作系统支持： EFI 加载器的设计允许支持多个操作系统。每个操作系统都有自己的 EFI 加载器，它们被存储在 ESP 的不同路径下，并通过引导配置文件进行配置。</p></li></ul><p>总体而言，EFI 加载器是 UEFI 引导过程中的核心组件之一，它使得操作系统的引导过程更加灵活和现代化。这种灵活性和标准化的设计有助于支持多引导配置和多操作系统环境。</p><h2 id="more">More</h2><ul><li><a href="https://realwujing.github.io/linux/kernel/kernel/#%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86">Linux系统启动管理</a></li></ul><h3 id="bugs">bugs</h3><ul><li><a href="https://bugs.launchpad.net/oem-priority/+bug/1842320" class="uri">https://bugs.launchpad.net/oem-priority/+bug/1842320</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>books</category>
      
      <category>grub</category>
      
      <category>mips-5.10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/log/README/"/>
    <url>/linux/kernel/log/README/</url>
    
    <content type="html"><![CDATA[<h1 id="kern.log">kern.log</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cmdline <br>BOOT_IMAGE=/vmlinuz-4.19.0-arm64-desktop root=UUID=fb063bb0-c792-424a-a779-05f5cdab3dcf ro video=efifb:nobgrt splash console=<span class="hljs-built_in">tty</span> plymouth.ignore-serial-consoles ignore_loglevel initcall_debug DEEPIN_GFXMODE= ima_appraise=off libahci.ignore_sss=1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;4662,$p&#x27;</span> /var/log/kern.log &gt; ~/kern.log <span class="hljs-comment"># 4662是Booting Linux所在行</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/kern.log | grep <span class="hljs-string">&quot;initcall&quot;</span> | sed <span class="hljs-string">&quot;s/\(.*\)after\(.*\)/\2 \1/g&quot;</span> | <span class="hljs-built_in">sort</span> -n<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://blog.csdn.net/rikeyone/article/details/84258391">initcall_debug来查看开机慢问题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>log</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/drivers/baohua/develop/README/"/>
    <url>/linux/kernel/drivers/baohua/develop/README/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-rar">linux-rar</h1><h2 id="分卷压缩">分卷压缩</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rar a -v10m linux.rar ../linux<br></code></pre></td></tr></table></figure><h2 id="合并解压">合并解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unrar x linux.rar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>baohua</category>
      
      <category>develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下交叉编译调试arm64内核</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95arm64%E5%86%85%E6%A0%B8/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95arm64%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下交叉编译调试arm64内核">amd64下交叉编译调试arm64内核</h1><h2 id="编译调试版linux内核">1. 编译调试版linux内核</h2><h3 id="下载源码">下载源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/torvalds/linux.git<br></code></pre></td></tr></table></figure><h3 id="安装编译依赖">安装编译依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install build-essential libncurses-dev bison flex libssl-dev libelf-dev gcc-aarch64-linux-gnu<br></code></pre></td></tr></table></figure><h3 id="内核编译选项配置">内核编译选项配置</h3><p>进入源码目录，配置编译选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br>git checkout -b v4.19 v4.19<br><span class="hljs-built_in">export</span> ARCH=arm64<br><span class="hljs-built_in">export</span> CROSS_COMPILE=aarch64-linux-gnu-<br>make defconfig<br></code></pre></td></tr></table></figure><p>比较重要的配置项有：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Kernel hacking  ---&gt;<br>    [*] Kernel debugging<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts for kernel debugging<br></code></pre></td></tr></table></figure><p>一定要打开。 还有下面的选项会导致打断点失败，一定要关闭：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Processor type and features ----&gt;<br>    [] Randomize the address of the kernel image (KASLR)<br></code></pre></td></tr></table></figure><p>保存并退出 menuconfig，开始编译之旅：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) / 2`<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/qq_41660119/article/details/123949923">ubuntu虚拟机中使用QEMU搭建ARM64环境</a></li><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li><li><a href="https://blog.csdn.net/w346665682/article/details/118446953">QEMU实现gdb调试(虚拟硬件)arm64 linux内核以及arm64应用程序</a></li></ul><h2 id="debootstrap制作根文件系统">2. debootstrap制作根文件系统</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-user-static binfmt-support debootstrap debian-archive-keyring<br></code></pre></td></tr></table></figure><h3 id="制作文件系统">制作文件系统</h3><p>使用也十分简单，命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span> [平台] [发行版本代号] [构建目录] [镜像地址]<br></code></pre></td></tr></table></figure><p>以在Deepin 20.7 制作debian10(buster) arm64文件系统为例，预装ifupdown是因为下方配置网络的时候需要用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span>=arm64 --include=ifupdown --foreign buster linux-rootfs http://ftp.cn.debian.org/debian/<br><br>amd64下交叉编译构建arm64需要执行下方命令：<br><br>```bash<br>sudo <span class="hljs-built_in">cp</span> -a /usr/bin/qemu-aarch64-static linux-rootfs/usr/bin/qemu-aarch64-static<br></code></pre></td></tr></table></figure><h3 id="进入文件系统">进入文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/ywhs/linux-software/master/ch-mount.sh<br><span class="hljs-built_in">chmod</span> 777 ch-mount.sh<br><span class="hljs-comment"># 执行脚本后，没有报错会进入文件系统，交叉编译时显示 I have no name ，这是因为还没有初始化。</span><br>./ch-mount.sh -m linux-rootfs/<br><br>debootstrap/debootstrap --second-stage <span class="hljs-comment"># 交叉编译时执行，初始化文件系统，会把一个系统的基础包初始化</span><br><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs/<br></code></pre></td></tr></table></figure><h3 id="定制文件系统">定制文件系统</h3><h4 id="配置网络">配置网络</h4><p>要确保进入文件系统后有网络，可以将 /etc/resolv.conf 文件拷贝到 linux-rootfs/etc/resolv.conf。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/resolv.conf linux-rootfs/etc/resolv.conf<br></code></pre></td></tr></table></figure><h4 id="更换国内镜像源">更换国内镜像源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 再次进入时，执行如下命令即可</span><br>sudo <span class="hljs-built_in">chroot</span> linux-rootfs<br><br><span class="hljs-comment"># 若是遇到没法拉取 https 源的状况，请先使用 http 源并安装</span><br>apt install apt-transport-https<br><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-comment"># 把文件内容所有替换为对应阿里源，参见：https://developer.aliyun.com/mirror/?spm=a2c6h.12873639.J_5404914170.29.2feb6235F6x30d</span><br><br><span class="hljs-built_in">cat</span> &gt; /etc/apt/source.list &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/debian/ buster main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/debian/ buster main contrib non-free</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="配置-root-用户密码">配置 root 用户密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><h4 id="建立一个普通用户">建立一个普通用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这两个环境变量能够自行修改</span><br>USER=wujing<br>HOST=wujing<br>useradd -G sudo -m -s /bin/bash <span class="hljs-variable">$USER</span><br>passwd <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><h4 id="设置主机名和以太网">设置主机名和以太网</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOST</span> &gt; /etc/hostname<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;127.0.0.1 localhost.localdomain localhost&quot;</span> &gt; /etc/hosts<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;127.0.0.1 <span class="hljs-variable">$HOST</span>&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;auto enp0s1&quot;</span> &gt;&gt; /etc/network/interfaces<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;iface enp0s1 inet dhcp&quot;</span> &gt;&gt; /etc/network/interfaces<br></code></pre></td></tr></table></figure><h3 id="退出文件系统">退出文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs<br></code></pre></td></tr></table></figure><h3 id="制作文件系统镜像">制作文件系统镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=buster.img bs=1M seek=2047 count=1<br>sudo mkfs.ext4 -F buster.img<br>sudo <span class="hljs-built_in">mkdir</span> -p /mnt/buster<br>sudo mount -o loop buster.img /mnt/buster<br>sudo <span class="hljs-built_in">cp</span> -a linux-rootfs/. /mnt/buster/.<br>sudo umount /mnt/buster<br>sudo <span class="hljs-built_in">chmod</span> 666 buster.img<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589">内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</a></li><li><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html">debootstrap 制作根文件系统</a></li><li><a href="https://blog.51cto.com/u_13731941/5399257">使用 debootstrap 制作 ARM64 rootfs.cpio</a></li></ul><h2 id="启动内核并调试">3. 启动内核并调试</h2><h3 id="依赖安装">依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu qemu-system qemu-kvm<br></code></pre></td></tr></table></figure><h3 id="qemu启动内核并挂载文件系统调试">qemu启动内核并挂载文件系统调试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo qemu-system-aarch64 -m 1024 -cpu cortex-a57 -M virt -nographic -smp 4 -kernel ~/code/linux/arch/arm64/boot/Image -append <span class="hljs-string">&quot;noinintrd sched_debug root=/dev/vda rootfstype=ext4 rw crashkernel=256M loglevel=8&quot;</span> -drive <span class="hljs-keyword">if</span>=none,file=buster.img,<span class="hljs-built_in">id</span>=hd0 -device virtio-blk-device,drive=hd0 -S -s<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/100021609">Linux aarch64 编译 &amp; qemu 搭建实验平台 initrd initramfs</a></li></ul><h3 id="加载内核调试工具">加载内核调试工具</h3><p>然后切换到内核源码目录，启动 gdb，不过在启动之前，请向 ~/code/linux/.gdbinit 添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add-auto-load-safe-path ./scripts/gdb/vmlinux-gdb.py&quot;</span> &gt;&gt; .gdbinit<br></code></pre></td></tr></table></figure><p>加载内核调试工具，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install gdb-multiarch<br>gdb-multiarch vmlinux<br><span class="hljs-built_in">set</span> architecture aarch64<br>target remote :1234<br>c<br></code></pre></td></tr></table></figure><p>来连接到虚拟机上的 gdb 服务。</p><p>到这里，你就可以像调试普通程序一样调试 Linux 内核了。Linux 的内核入口函数是位于 init/main.c 中的 start_kernel ，在这里完成各种内核数据结构的初始化。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/47783910">如何在x86架构Linux上使用qemu+gdb调试aarch64的内核</a></li></ul><h2 id="网络修复">4. 网络修复</h2><p>输入root密码登录后，查看IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>假设网卡名为enp0s1。</p><p>假设上方设置主机名和以太网中网卡名为eth0。</p><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;s/enp0s3/enp0s1/g&quot;</span> /etc/network/interfaces<br>ifup enp0s1<br></code></pre></td></tr></table></figure><p>现在可以使用apt安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br></code></pre></td></tr></table></figure><p>qemu默认使用的用户模式网络非常适合允许访问网络资源，包括 Internet。 特别是，它允许从guest到主机的 ssh流量。 但是，默认情况下，它充当防火墙，不允许任何传入流量。 它也不支持 TCP 和 UDP 以外的协议 - 例如，ping 和其他 ICMP 程序将不起作用。</p><ul><li><a href="https://blog.csdn.net/m0_43406494/article/details/124827927">QEMU--用户模式网络</a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/">QEMU 网络配置</a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607">Linux 内核调试 七：qemu网络配置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于qemu tap(NAT网络)、debootstrap调试amd64内核、根文件系统</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%E8%B0%83%E8%AF%95amd64%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%E8%B0%83%E8%AF%95amd64%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu-tapnat网络debootstrap调试amd64内核根文件系统">amd64下基于qemu tap(NAT网络)、debootstrap调试amd64内核、根文件系统</h1><h2 id="编译调试版linux内核">1. 编译调试版linux内核</h2><h3 id="安装编译依赖">安装编译依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install build-essential libncurses-dev bison flex libssl-dev libelf-dev<br></code></pre></td></tr></table></figure><h3 id="下载源码">下载源码</h3><p>调试标准版内核，下载github代码即可，本文选择tag v5.10-rc7分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/torvalds/linux.git<br>git checkout -b v5.10-rc7 v5.10-rc7<br></code></pre></td></tr></table></figure><p>调试uos-v20-1054-2内核，下载gerrit代码即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/x86-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;x86-kernel/.git/hooks/&quot;</span><br>git checkout -b 1054-2 499e91c36f62c1790063cabdacff94fd8220f145<br></code></pre></td></tr></table></figure><h3 id="内核编译选项配置">内核编译选项配置</h3><p>进入源码目录，配置编译选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br>make menuconfig<br></code></pre></td></tr></table></figure><p>比较重要的配置项有：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">首先内核中支持tap/tuns设备：<br>Device Drivers  ---&gt; <br>     Networking support  ---&gt;<br>        [M] Universal TUN/TAP device driver support<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Kernel hacking  ---&gt;<br>    [*] Kernel debugging<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts for kernel debugging<br></code></pre></td></tr></table></figure><p>一定要打开。 还有下面的选项会导致打断点失败，一定要关闭：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Processor type and features ----&gt;<br>    [] Randomize the address of the kernel image (KASLR)<br></code></pre></td></tr></table></figure><p>保存并退出 menuconfig，开始编译之旅：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) / 2`<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li></ul><h2 id="debootstrap制作根文件系统">2. debootstrap制作根文件系统</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-user-static binfmt-support debootstrap debian-archive-keyring<br></code></pre></td></tr></table></figure><h3 id="制作文件系统">制作文件系统</h3><p>使用也十分简单，命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span> [平台] [发行版本代号] [构建目录] [镜像地址]<br></code></pre></td></tr></table></figure><p>以在Deepin 20.7 amd64上构建ubuntu18(bionic) amd64为例，预装ifupdown是因为下方配置网络的时候需要用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">cd</span> /usr/share/debootstrap/scripts/<br><span class="hljs-built_in">cp</span> sid bionic<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --no-check-gpg \<br>--<span class="hljs-built_in">arch</span>=amd64 \<br>--include=ifupdown,net-tools,build-essential,gdb,cmake,openssh-server,vim,bash-completion \<br>bionic \<br>linux-rootfs \<br>http://mirrors.aliyun.com/ubuntu/<br></code></pre></td></tr></table></figure><p>以在Deepin 20.7 amd64上构建uos-v20-1054(eagle/1054) amd64为例，预装ifupdown是因为下方配置网络的时候需要用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">cd</span> /usr/share/debootstrap/scripts/<br><span class="hljs-built_in">rm</span> eagle -rf<br><span class="hljs-built_in">mkdir</span> eagle<br><span class="hljs-built_in">cp</span> sid eagle/1054<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --no-check-gpg \<br>--<span class="hljs-built_in">arch</span>=amd64 \<br>--include=ifupdown,net-tools,build-essential,gdb,cmake,openssh-server,vim,bash-completion \<br>eagle/1054 \<br>linux-rootfs \<br>https://pools.uniontech.com/desktop-professional/<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/houxian1103/article/details/121886365">ubuntu 下安装C/C++ 开发编译环境</a></li></ul><p>arm64下交叉编译构建amd64需要执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -a /usr/bin/qemu-x86_64-static linux-rootfs/usr/bin/qemu-x86_64-static<br></code></pre></td></tr></table></figure><h3 id="进入文件系统">进入文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/ywhs/linux-software/master/ch-mount.sh<br><span class="hljs-built_in">chmod</span> 777 ch-mount.sh<br><span class="hljs-comment"># 执行脚本后，没有报错会进入文件系统，交叉编译时显示 I have no name ，这是因为还没有初始化。</span><br>./ch-mount.sh -m linux-rootfs/<br><br>debootstrap/debootstrap --second-stage <span class="hljs-comment"># 交叉编译时执行，初始化文件系统，会把一个系统的基础包初始化</span><br><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs/<br><span class="hljs-comment"># ./ch-mount.sh -m linux-rootfs/</span><br><span class="hljs-comment"># 再次进入时，执行如下命令即可</span><br><span class="hljs-comment"># sudo chroot linux-rootfs</span><br></code></pre></td></tr></table></figure><h3 id="定制文件系统">定制文件系统</h3><h4 id="配置网络">配置网络</h4><p>要确保进入文件系统后有网络，可以将 ​​/etc/resolv.conf​​​ 文件拷贝到 ​​linux-rootfs/etc/resolv.conf​​。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> ​​/etc/resolv.conf​​​ ​​linux-rootfs/etc/resolv.conf<br></code></pre></td></tr></table></figure><h4 id="ubuntu18bionic更换国内镜像源">ubuntu18(bionic)更换国内镜像源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若是遇到没法拉取 https 源的状况，请先使用 http 源并安装</span><br>sudo <span class="hljs-built_in">chroot</span> linux-rootfs<br>apt install apt-transport-https<br><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-comment"># 把文件内容所有替换为对应阿里源，参见：https://developer.aliyun.com/mirror/?spm=a2c6h.12873639.J_5404914170.29.2feb6235F6x30d</span><br>vim /etc/apt/sources.list<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list<br></code></pre></td></tr></table></figure><h4 id="配置-root-用户密码">配置 root 用户密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><h4 id="建立一个普通用户">建立一个普通用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这两个环境变量能够自行修改</span><br>USER=wujing<br>HOST=wujing<br>useradd -G sudo -m -s /bin/bash <span class="hljs-variable">$USER</span><br>passwd <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><h3 id="退出文件系统">退出文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs<br></code></pre></td></tr></table></figure><h3 id="制作文件系统镜像initrd">制作文件系统镜像(initrd)</h3><p>当文件系统是<code>uos-v20-1054(eagle/1054)</code>时，将下方<code>bionic</code>替换为<code>eagle-1054</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim bionic.sh<br></code></pre></td></tr></table></figure><p>将下方内容追加到bionic.sh:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">#! /bin/bash<br><br>dd if=/dev/zero of=bionic.img bs=1M seek=2047 count=1<br>sudo mkfs.ext4 -F bionic.img<br>sudo mkdir -p /mnt/bionic<br>sudo mount -o loop bionic.img /mnt/bionic<br>sudo cp -a linux-rootfs/. /mnt/bionic/.<br>sudo umount /mnt/bionic<br>sudo chmod 666 bionic.img<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x bionic.sh<br>sudo ./bionic.sh<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589">内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</a></li><li><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html">debootstrap 制作根文件系统</a></li><li><a href="https://blog.51cto.com/u_13731941/5399257">使用 debootstrap 制作 ARM64 rootfs.cpio</a></li></ul><h2 id="创建-tap0-虚拟网卡">3. 创建 tap0 虚拟网卡</h2><p>宿主机上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br>sudo ip tuntap add dev tap0 mode tap<br>sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev tap0 up<br>sudo ip address add dev tap0 192.168.2.128/24<br>ifconfig<br></code></pre></td></tr></table></figure><p>宿主机需要为虚拟机开启IP数据包转发，即在192.168.2.*网段转发数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward   <span class="hljs-comment">#可能sudo也会权限不够，在su以后执行即可</span><br>iptables -t nat -A POSTROUTING -j MASQUERADE<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607">Linux 内核调试 七：qemu网络配置</a></li><li><a href="https://www.shuzhiduo.com/A/xl56Dmq0zr/">在qemu-kvm配置桥接网络</a></li></ul><h2 id="启动内核并调试">4. 启动内核并调试</h2><h3 id="依赖安装">依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu qemu-system qemu-kvm<br></code></pre></td></tr></table></figure><h3 id="qemu启动内核并挂载文件系统调试">qemu启动内核并挂载文件系统调试</h3><p>下方两个命令都行，第一个报warning，第二个file=后面要使用绝对路径。</p><p>当文件系统是<code>uos-v20-1054(eagle/1054)</code>时，将下方<code>bionic</code>替换为<code>eagle-1054</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-m 2048 \<br>-kernel ~/code/linux/arch/x86/boot/bzImage \<br>-hda ~/code/tmp/bionic.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> \<br>-nographic \<br>-net nic -net tap,ifname=tap0,script=no,downscript=no \<br>-s -S<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-m 2048 \<br>-kernel ~/code/linux/arch/x86/boot/bzImage \<br>-drive format=raw,file=/home/wujing/code/tmp/bionic.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> \<br>-nographic \<br>-net nic -net tap,ifname=tap0,script=no,downscript=no \<br>-s -S<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/100021609">Linux aarch64 编译 &amp; qemu 搭建实验平台 initrd initramfs</a></li></ul><h3 id="加载内核调试工具">加载内核调试工具</h3><p>然后切换到内核源码目录，启动 gdb，不过在启动之前，请向 ~/code/linux/.gdbinit 添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add-auto-load-safe-path ./scripts/gdb/vmlinux-gdb.py&quot;</span> &gt;&gt; .gdbinit<br></code></pre></td></tr></table></figure><p>加载内核调试工具，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>c<br></code></pre></td></tr></table></figure><p>来连接到虚拟机上的 gdb 服务。</p><p>到这里，你就可以像调试普通程序一样调试 Linux 内核了。Linux 的内核入口函数是位于 init/main.c 中的 start_kernel ，在这里完成各种内核数据结构的初始化。</p><h2 id="虚拟机中配置网络">5. 虚拟机中配置网络</h2><p>输入用户密码登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>假设网卡名为<code>enp0s3</code>。</p><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ip addr add 192.168.2.129/24 dev enp0s3<br>ip addr<br>sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> enp0s3 up<br>ping 192.168.2.128 <span class="hljs-comment"># 192.168.2.128为宿主机虚拟网卡tap0地址，可以ping通</span><br></code></pre></td></tr></table></figure><p>此刻在宿主机上<code>ping 192.168.2.129</code>发现也能ping通了，但是此时，虚拟机还不能上外网，因为虚拟机缺少网关。</p><p>现在把虚拟机的tap0的地址，192.168.2.128，设置为虚拟机的网关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo route add default gw 192.168.2.128<br></code></pre></td></tr></table></figure><p>这样，也可以ping通外网了，比如<code>ping 10.20.52.86</code>，<code>10.20.52.86</code>是宿主机真实网卡<code>ip</code>。</p><p>但是<code>ping www.baidu.com</code>却不行，因为缺少DNS服务器！</p><p>查看宿主机<code>/etc/resolv.conf</code>内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text"># Generated by NetworkManager<br>nameserver 10.20.0.10<br></code></pre></td></tr></table></figure><p>现在就把<code>10.20.0.10</code>指定为虚拟机的DNS服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nameserver 10.20.0.10&quot;</span> &gt;&gt; /etc/resolv.conf<br></code></pre></td></tr></table></figure><p>写入文件之后，DNS立即生效了。现在，虚拟机既能上外网，又能与宿主机通信了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">root@wujing-PC:# ping baidu.com<br>PING baidu.com (110.242.68.66) 56(84) bytes of data.<br>64 bytes from 110.242.68.66 (110.242.68.66): icmp_seq=1 ttl=52 time=27.2 ms<br></code></pre></td></tr></table></figure><p>现在可以使用apt安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br></code></pre></td></tr></table></figure><h2 id="虚拟机挂载nfs网络文件系统">6. 虚拟机挂载NFS网络文件系统</h2><p>在宿主机上安装 NFS 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nfs-kernel-server<br><span class="hljs-built_in">id</span><br>sudo su<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/home/wujing/code 192.168.2.0/24(rw,sync,all_squash,anonuid=1000,anongid=1000,no_subtree_check)&quot;</span> &gt;&gt; /etc/exports <span class="hljs-comment"># 创建共享目录</span><br>exportfs -arv <span class="hljs-comment"># 更新exports配置</span><br>showmount -e <span class="hljs-comment"># 查看NFS共享情况</span><br></code></pre></td></tr></table></figure><p>在虚拟机上安装 NFS 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nfs-common<br>showmount -e 192.168.2.128 <span class="hljs-comment"># 查看NFS服务器共享目录</span><br>sudo mount -t nfs 192.168.2.128:/home/wujing/code /home/wujing/code <span class="hljs-comment"># 临时挂载 NFS 文件系统</span><br></code></pre></td></tr></table></figure><p>临时挂载 NFS 文件系统输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">[ 7990.116497] NFS4: Couldn&#x27;t follow remote path<br>[ 7990.118433] NFS4: Couldn&#x27;t follow remote path<br></code></pre></td></tr></table></figure><p>上述输出仅为warning，请忽略。</p><ul><li><a href="https://www.cnblogs.com/lizhuming/p/13946107.html">挂载NFS网络文件系统教程</a></li><li><a href="https://blog.51cto.com/atong/1343950">NFS原理详解</a></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.jb51.net/article/97216.htm">详解QEMU网络配置的方法</a></li><li><a href="https://js.aizhan.com/server/jishu/6594.html">QEMU的网络配置方法解析</a></li><li><a href="https://www.shuzhiduo.com/A/xl56Dmq0zr/">在qemu-kvm配置桥接网络</a></li><li><a href="https://blog.csdn.net/m0_43406494/article/details/124827927">QEMU--用户模式网络</a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/">QEMU 网络配置</a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607">Linux 内核调试 七：qemu网络配置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于qemu用户网络、debootstrap调试amd64内核、根文件系统</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E7%94%A8%E6%88%B7%E7%BD%91%E7%BB%9C%E3%80%81debootstrap%E8%B0%83%E8%AF%95amd64%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E7%94%A8%E6%88%B7%E7%BD%91%E7%BB%9C%E3%80%81debootstrap%E8%B0%83%E8%AF%95amd64%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu用户网络debootstrap调试amd64内核根文件系统">amd64下基于qemu用户网络、debootstrap调试amd64内核、根文件系统</h1><h2 id="编译调试版linux内核">1. 编译调试版linux内核</h2><h3 id="下载源码">下载源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/torvalds/linux.git<br></code></pre></td></tr></table></figure><h3 id="安装编译依赖">安装编译依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install build-essential libncurses-dev bison flex libssl-dev libelf-dev<br></code></pre></td></tr></table></figure><h3 id="内核编译选项配置">内核编译选项配置</h3><p>进入源码目录，配置编译选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br>git checkout -b v5.10-rc7 v5.10-rc7<br>make menuconfig<br></code></pre></td></tr></table></figure><p>比较重要的配置项有：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Kernel hacking  ---&gt;<br>    [*] Kernel debugging<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts for kernel debugging<br></code></pre></td></tr></table></figure><p>一定要打开。 还有下面的选项会导致打断点失败，一定要关闭：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Processor type and features ----&gt;<br>    [] Randomize the address of the kernel image (KASLR)<br></code></pre></td></tr></table></figure><p>保存并退出 menuconfig，开始编译之旅：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) / 2`<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li></ul><h2 id="debootstrap制作根文件系统">2. debootstrap制作根文件系统</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-user-static binfmt-support debootstrap debian-archive-keyring<br></code></pre></td></tr></table></figure><h3 id="制作文件系统">制作文件系统</h3><p>使用也十分简单，命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span> [平台] [发行版本代号] [构建目录] [镜像地址]<br></code></pre></td></tr></table></figure><p>以在Deepin 20.7 amd64上构建ubuntu18(bionic) amd64为例，预装ifupdown是因为下方配置网络的时候需要用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo debootstrap --<span class="hljs-built_in">arch</span>=amd64 --include=ifupdown bionic linux-rootfs http://mirrors.aliyun.com/ubuntu/<br></code></pre></td></tr></table></figure><p>arm64下交叉编译构建amd64需要执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -a /usr/bin/qemu-x86_64-static linux-rootfs/usr/bin/qemu-x86_64-static<br></code></pre></td></tr></table></figure><h3 id="进入文件系统">进入文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/ywhs/linux-software/master/ch-mount.sh<br><span class="hljs-built_in">chmod</span> 777 ch-mount.sh<br><span class="hljs-comment"># 执行脚本后，没有报错会进入文件系统，交叉编译时显示 I have no name ，这是因为还没有初始化。</span><br>./ch-mount.sh -m linux-rootfs/<br><br>debootstrap/debootstrap --second-stage <span class="hljs-comment"># 交叉编译时执行，初始化文件系统，会把一个系统的基础包初始化</span><br><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs/<br>./ch-mount.sh -m linux-rootfs/<br><span class="hljs-comment"># 再次进入时，执行如下命令即可</span><br><span class="hljs-comment"># sudo chroot linux-rootfs</span><br></code></pre></td></tr></table></figure><h3 id="定制文件系统">定制文件系统</h3><h4 id="配置网络">配置网络</h4><p>要确保进入文件系统后有网络，可以将 /etc/resolv.conf 文件拷贝到 linux-rootfs/etc/resolv.conf。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/resolv.conf linux-rootfs/etc/resolv.conf<br></code></pre></td></tr></table></figure><h4 id="更换国内镜像源">更换国内镜像源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若是遇到没法拉取 https 源的状况，请先使用 http 源并安装</span><br>apt install apt-transport-https<br><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-comment"># 把文件内容所有替换为对应阿里源，参见：https://developer.aliyun.com/mirror/?spm=a2c6h.12873639.J_5404914170.29.2feb6235F6x30d</span><br>vim /etc/apt/source.list<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.list<br></code></pre></td></tr></table></figure><h4 id="配置-root-用户密码">配置 root 用户密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><h4 id="建立一个普通用户">建立一个普通用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这两个环境变量能够自行修改</span><br>USER=wujing<br>HOST=wujing<br>useradd -G sudo -m -s /bin/bash <span class="hljs-variable">$USER</span><br>passwd <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><h4 id="设置主机名和以太网">设置主机名和以太网</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOST</span> &gt; /etc/hostname<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;127.0.0.1 localhost.localdomain localhost&quot;</span> &gt; /etc/hosts<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;127.0.0.1 <span class="hljs-variable">$HOST</span>&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;auto enp0s3&quot;</span> &gt;&gt; /etc/network/interfaces<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;iface enp0s3 inet dhcp&quot;</span> &gt;&gt; /etc/network/interfaces<br></code></pre></td></tr></table></figure><h3 id="退出文件系统">退出文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>./ch-mount.sh -u linux-rootfs<br></code></pre></td></tr></table></figure><h3 id="制作文件系统镜像initrd">制作文件系统镜像(initrd)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=bionic.img bs=1M seek=2047 count=1<br>sudo mkfs.ext4 -F bionic.img<br>sudo <span class="hljs-built_in">mkdir</span> -p /mnt/bionic<br>sudo mount -o loop bionic.img /mnt/bionic<br>sudo <span class="hljs-built_in">cp</span> -a linux-rootfs/. /mnt/bionic/.<br>sudo umount /mnt/bionic<br>sudo <span class="hljs-built_in">chmod</span> 666 bionic.img<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589">内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</a></li><li><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html">debootstrap 制作根文件系统</a></li><li><a href="https://blog.51cto.com/u_13731941/5399257">使用 debootstrap 制作 ARM64 rootfs.cpio</a></li></ul><h2 id="启动内核并调试">3. 启动内核并调试</h2><h3 id="依赖安装">依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu qemu-system qemu-kvm<br></code></pre></td></tr></table></figure><h3 id="qemu启动内核并挂载文件系统调试">qemu启动内核并挂载文件系统调试</h3><p>下方两个命令都行，第一个报warning，第二个file=后面要使用绝对路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -hda ~/code/tmp/bionic.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -drive format=raw,file=/home/wujing/code/tmp/bionic.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/100021609">Linux aarch64 编译 &amp; qemu 搭建实验平台 initrd initramfs</a></li></ul><h3 id="加载内核调试工具">加载内核调试工具</h3><p>然后切换到内核源码目录，启动 gdb，不过在启动之前，请向 ~/code/linux/.gdbinit 添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;add-auto-load-safe-path ./scripts/gdb/vmlinux-gdb.py&quot;</span> &gt;&gt; .gdbinit<br></code></pre></td></tr></table></figure><p>加载内核调试工具，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>c<br></code></pre></td></tr></table></figure><p>来连接到虚拟机上的 gdb 服务。</p><p>到这里，你就可以像调试普通程序一样调试 Linux 内核了。Linux 的内核入口函数是位于 init/main.c 中的 start_kernel ，在这里完成各种内核数据结构的初始化。</p><h2 id="网络修复">4. 网络修复</h2><p>输入root密码登录后，查看IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>假设网卡名为enp0s3。</p><p>假设上方设置主机名和以太网中网卡名为eth0。</p><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;s/eth0/enp0s3/g&quot;</span> /etc/network/interfaces<br>ifup enp0s3<br></code></pre></td></tr></table></figure><p>现在可以使用apt安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br></code></pre></td></tr></table></figure><p>qemu默认使用的用户模式网络非常适合允许访问网络资源，包括 Internet。 特别是，它允许从guest到主机的 ssh流量。 但是，默认情况下，它充当防火墙，不允许任何传入流量。 它也不支持 TCP 和 UDP 以外的协议 - 例如，ping 和其他 ICMP 程序将不起作用。</p><ul><li><a href="https://blog.csdn.net/m0_43406494/article/details/124827927">QEMU--用户模式网络</a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/">QEMU 网络配置</a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607">Linux 内核调试 七：qemu网络配置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>debug</title>
    <link href="/debug/debug/"/>
    <url>/debug/debug/</url>
    
    <content type="html"><![CDATA[<h1 id="debug">debug</h1><h2 id="调试工具">调试工具</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247483984&amp;idx=2&amp;sn=2672096af3ab1844e7b6d0b6e9de802b&amp;chksm=f96870a4ce1ff9b2183f17c2873f1a35b418469dde92eb4e49f9d3de073aeafb87fe4c5b0002&amp;scene=21#wechat_redirect"><font color=Red>Linux 程序开发常用调试工具合集</font></a></li><li><a href="https://blog.csdn.net/u013253075/article/details/120569270">Linux内核调试方法</a></li><li><a href="https://zhuanlan.zhihu.com/p/543103513">全面剖析Linux kernel的调试debug技术</a></li><li><a href="https://blog.csdn.net/sinat_20184565/article/details/111875638">内核earlyprintk选项</a></li><li><a href="?action=getalbum&amp;__biz=MzkwNTI0MzQ4Nw==&amp;scene=1&amp;album_id=2341520520153726976&amp;count=3#wechat_redirect">系统稳定性</a></li></ul><h2 id="fadd2line">fadd2line</h2><ul><li><a href="https://github.com/torvalds/linux/blob/master/scripts/faddr2line"><font color=Red>https://github.com/torvalds/linux/blob/master/scripts/faddr2line</font></a></li></ul><h2 id="binutils">Binutils</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/85913402">GNU binutils 里的九种武器</a></li><li><a href="https://www.cnblogs.com/tocy/p/gnu-binutils-simple-usage.html">GNU Binutils简介及基本用法</a></li></ul><h3 id="addr2line">addr2line</h3><ul><li><a href="https://blog.csdn.net/fengbingchun/article/details/119980076">Linux下addr2line命令用法</a></li></ul><h3 id="nm">nm</h3><ul><li><a href="https://blog.csdn.net/lgfun/article/details/103600880">linux——nm命令：查看符号表</a></li></ul><h4 id="symbols">symbols</h4><ul><li><p><a href="http://sunyongfeng.com/201802/linux/debian_debug_package">deb debug package-标准的 debian / ubuntu 打 deb 包，通过将可执行文件的符号表通过剥离成独立的 dbg 包，称为 debug package</a></p></li><li><p><a href="https://blog.csdn.net/dwh0403/article/details/123551691">Ubuntu 21.10 安装调试符号</a></p></li></ul><h4 id="内核符号表">内核符号表</h4><ul><li><a href="https://blog.csdn.net/ysbj123/article/details/51233618">Linux System.map文件</a></li><li><a href="https://blog.csdn.net/weixin_45030965/article/details/125055828">linux之vmlinux、vmlinuz、System.map和/proc/kallsyms简介</a></li><li><a href="https://zhuanlan.zhihu.com/p/445864686">Linux内核：符号表详解</a></li></ul><h4 id="strip">strip</h4><ul><li><a href="https://blog.csdn.net/nirendao/article/details/104107608">使用strip, eu-strip, objcopy等剥离与导回符号表及调试信息</a></li><li><a href="https://www.cnblogs.com/qiumingcheng/p/15821919.html">17GDB使用符号表调试release程序</a></li><li><a href="https://www.cnblogs.com/dongc/p/9690754.html">使用GDB调试将符号表与程序分离后的可执行文件</a></li></ul><h3 id="strings">strings</h3><ul><li><p><font color=Red>在当前目录下递归查找so文件中的目标字符串</font></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.so*&quot;</span> -<span class="hljs-built_in">exec</span> sh -c <span class="hljs-string">&#x27;strings &quot;$0&quot; | grep &quot;target_string&quot; &amp;&amp; echo &quot;$0&quot;&#x27;</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">这个命令会在当前目录下递归查找所有后缀名为 .so 或者 .so.* 的文件，并使用 strings 命令提取其中的字符串，然后使用 grep 命令在字符串中查找目标字符串，如果目标字符串出现了，就输出包含目标字符串的文件名。<br><br>具体来说，该命令使用 find 命令在当前目录下查找所有类型为文件（-type f）且文件名匹配 *.so* 的文件，然后使用 -exec 选项执行后面的命令。<br><br>后面的命令使用 sh -c 执行，将每个匹配到的文件名（&#123;&#125;）传递给了 $0 变量。在命令中，先使用 strings 命令提取文件中的字符串，然后使用 grep 命令查找目标字符串是否存在，如果存在，就使用 echo 命令输出包含目标字符串的文件名。<br><br>需要注意的是，命令中使用了单引号包围命令，以避免 Shell 解析命令中的 $0 变量和 &#123;&#125; 字符。同时，在命令的末尾需要使用 \; 来表示命令的结束，而不是使用分号 ;，因为分号 ; 是 Shell 的保留字符。<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/383038723">linux中的strings命令简介</a></p></li></ul><h3 id="objdump">objdump</h3><ul><li><p><a href="https://blog.csdn.net/zoomdy/article/details/50563680"><font color=Red>objdump反汇编用法示例</font></a></p></li><li><p><a href="https://blog.csdn.net/kunkliu/article/details/82992361">反汇编代码格式</a></p></li><li><p>objdump 反汇编代码带行号:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d -l -S your_binary_file<br></code></pre></td></tr></table></figure></p><p>这个命令中的参数含义如下：</p><p>-d：表示进行反汇编。</p><p>-l：表示生成包含行号信息的输出。</p><p>-S：表示同时输出源代码。</p><p>-C：如果二进制文件包含 C++ 符号，使用 C++ 符号名进行显示，而不是使用原始符号名。</p><p>将 your_binary_file 替换为你要反汇编的二进制文件的路径。</p><p>这将生成一个包含反汇编代码和源代码行号信息的输出。你可以查看这个输出来分析程序的汇编代码。</p><ul><li>注意事项:<a href="cpp/cmake-objdump">cmake-objdump</a><ul><li>cmake中使用参数-DCMAKE_BUILD_TYPE=Release编译出来的版本在coredump时生成的dmesg报错中的ip地址与使用-DCMAKE_BUILD_TYPE=Debug编出来的版本再使用objdump反汇编得到的汇编代码对不上。</li><li>cmkke中-DCMAKE_BUILD_TYPE=Release编译出来的版本在coredump时生成的dmesg报错中的ip地址与在CMakeLists.txt中额外添加set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")编译选项后再使用objdump反汇编得到的汇编代码对应的上。</li><li>cmake中-DCMAKE_BUILD_TYPE=Debug编译出来的版本后用strip得到的不含调试包的版本在coredump时生成的dmesg报错中的ip地址与使用-DCMAKE_BUILD_TYPE=Debug编出来的版本再使用objdump反汇编得到的汇编代码对应的上。</li></ul></li></ul></li></ul><h2 id="gdb">gdb</h2><ul><li><p><a href="https://www.cnblogs.com/tzj-kernel/p/14909077.html"><font color=Red>gdb调试常用命令</font></a></p></li><li><p><a href="https://blog.codekissyoung.com/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/GDB%E8%B0%83%E8%AF%95%E5%99%A8">GDB调试</a></p></li><li><p><a href="https://www.cnblogs.com/tlam/p/15612774.html">了解和使用GDB调试-基础</a></p></li><li><p><a href="https://blog.csdn.net/chen1415886044/article/details/105094688">GDB调试指南(入门，看这篇够了)</a></p></li><li><p><a href="http://xnzaa.github.io/2016/07/20/GDB%E8%B0%83%E8%AF%95%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/">本文是一篇GDB学习笔记，总结了GDB常用命令，方便以后查阅。</a></p></li><li><p><a href="http://c.biancheng.net/gdb/">GDB调试教程：1小时玩转Linux gdb命令</a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html"><font color=Red>100个gdb小技巧</font></a></p></li><li><p><a href="https://blog.csdn.net/ljss321/article/details/104304591"><font color=Red>GDB实用命令</font></a></p></li><li><p><a href="https://blog.csdn.net/evilswords/article/details/18353181">GDB 调试指令</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/71519244">Linux下GDB调试指令汇总</a></p></li><li><p><a href="https://www.jianshu.com/p/adcf474f5561">linux gdb详解</a></p></li><li><p><a href="https://blog.csdn.net/awm_kar98/article/details/82840811">LINUX下GDB的使用方法(简单说说)_longfan的博客-CSDN博客_gdb</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/t0BidHMCGqTftchGUU5otw">Linux C/C++ 调试的那些“歪门邪道”</a></p></li></ul><h4 id="gef">gef</h4><ul><li><a href="https://mp.weixin.qq.com/s/RQD1Mge_AJIOdfKMEa9ZwQ"><font color=Red>gdb exhanced features(GEF)工具的使用</font></a></li></ul><h4 id="continue">continue</h4><ul><li><a href="https://blog.csdn.net/weixin_39880632/article/details/112621585"><font color=Red>跳至下一个断点_GDB断点调试详解</font></a></li><li><a href="https://blog.csdn.net/weixin_35197990/article/details/116710685"><font color=Red>linux gdb 跳出函数,gdb调试程序时跳进函数和跳出函数</font></a></li></ul><h4 id="print">print</h4><ul><li><a href="http://c.biancheng.net/view/8252.html"><font color=Red>GDB print命令高级用法</font></a></li><li><a href="https://blog.csdn.net/dai_jing/article/details/36896215">gdb设置显示选项</a></li></ul><h4 id="打印内存值">打印内存值</h4><ul><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/examine-memory.html">打印内存的值</a></li><li><a href="https://blog.csdn.net/u014470361/article/details/102230583">GDB调试查看内存数据</a></li><li><a href="https://blog.csdn.net/weixin_44395686/article/details/104727584">GDB打印内存的值</a></li><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/print-ascii-and-wide-string.html">打印ASCII和宽字符字符串</a></li></ul><h4 id="c对象布局">C++对象布局</h4><ul><li><a href="https://blog.csdn.net/tmhanks/article/details/89110833">GDB查看C++对象布局_tmhanks的博客-CSDN博客</a></li></ul><h4 id="list">list</h4><ul><li><a href="https://blog.csdn.net/Mormont/article/details/53037978">gdb中list命令使用</a></li></ul><h4 id="多进程">多进程</h4><ul><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/catch-fork.html">为fork调用设置catchpoint</a></li><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/set-detach-on-fork.html">同时调试父进程和子进程</a></li><li><a href="https://blog.csdn.net/e21105834/article/details/118515137">【工欲善其事，必先利其器】之gdb五大高级用法</a></li></ul><h4 id="gdb-tui">gdb tui</h4><ul><li><a href="https://blog.csdn.net/xiaozi0221/article/details/90512751">gdb TUI界面快捷键</a></li><li><a href="https://blog.csdn.net/whlloveblog/article/details/48090567"><font color=Red>gdb调试的layout使用</font></a></li></ul><h4 id="gdb-assembly">gdb assembly</h4><ul><li><p><a href="https://blog.csdn.net/qq_28499879/article/details/120670684">gdb反汇编disassemble</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) disassemble /m main<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.bbsmax.com/A/mo5kQN04zw/">GDB 单步调试汇编</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/410215049"><font color=Red>汇编语言和gdb调试汇编</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cq0iHepG_xXKXHLlQpPGZw">静态链接符号地址重定位直观描述</a></p></li></ul><h4 id="gdb设置源码路径">gdb设置源码路径</h4><ul><li><p><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Source-Path.html#index-set-substitute_002dpath">https://sourceware.org/gdb/current/onlinedocs/gdb/Source-Path.html#index-set-substitute_002dpath</a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/directory.html">设置源文件查找路径 dir只识别相对路径</a></p></li><li><p><a href="https://blog.csdn.net/jiafu1115/article/details/31790757">GDB指定和修改搜素源码文件的路径（set substitute-path）</a></p></li><li><p><a href="https://www.jianshu.com/p/9c211e92d25e"><font color=Red>源码路径查看与设置</font></a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/substitute-path.html">替换查找源文件的目录 set substitute-path from-path to-path</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> lshw-02.18.85.3<br>gdb lshw<br>b main<br>gef➤  l<br>75      <span class="hljs-keyword">in</span> lshw.cc<br>gef➤  info <span class="hljs-built_in">source</span><br>Current <span class="hljs-built_in">source</span> file is lshw.cc<br>Compilation directory is /build/lshw-02.18.85.3/src<br>Located <span class="hljs-keyword">in</span> /build/lshw-02.18.85.3/src/lshw.cc<br>Source language is c++.<br>Producer is GNU C++14 8.3.0 -mtune=generic -march=x86-64 -g -O2.<br>Compiled with DWARF 2 debugging format.<br>Does not include preprocessor macro info.<br>gef➤  <span class="hljs-built_in">set</span> substitute-path /build/lshw-02.18.85.3/src ./src<br>gef➤  l<br>warning: Source file is more recent than executable.<br>75      int main(int argc,<br>76      char **argv)<br>77      &#123;<br>78<br>79      <span class="hljs-comment">#ifndef NONLS</span><br>80        setlocale (LC_ALL, <span class="hljs-string">&quot;&quot;</span>);<br>81        bindtextdomain (PACKAGE, LOCALEDIR);<br>82        bind_textdomain_codeset (PACKAGE, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>83        textdomain (PACKAGE);<br>84      <span class="hljs-comment">#endif</span><br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/nicholas_duan/article/details/117515155"><font color=Red>gdb调试解决找不到源代码的问题</font></a></p></li><li><p><a href="https://blog.csdn.net/jackgo73/article/details/120431609">gdb分析core文件找不到源码</a></p></li><li><p><a href="https://blog.csdn.net/albertsh/article/details/107437084">gdb调试解决找不到源代码的问题</a></p></li></ul><h4 id="gdb打印qt数据类型">gdb打印qt数据类型</h4><ul><li><p><a href="https://github.com/Lekensteyn/qt5printers">https://github.com/Lekensteyn/qt5printers</a></p></li><li><p><a href="https://listenerri.com/2018/10/23/gdb%E8%B0%83%E8%AF%95qt%E7%A8%8B%E5%BA%8F%E6%97%B6%E6%89%93%E5%8D%B0qt%E7%89%B9%E6%9C%89%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/">gdb调试qt程序时打印qt特有的类型数据</a></p></li><li><p><a href="https://www.cnblogs.com/rickyk/p/4184912.html">解决GDB输出Qt内置类型的显示问题</a></p></li><li><p><a href="https://www.cnblogs.com/Braveliu/p/8426945.html">GDB &amp;&amp; QString</a></p></li><li><p><a href="https://icode.best/i/64401545957413">007 - 配置 Clion 调试显示 Qt 变量-爱代码爱编程</a></p></li></ul><h4 id="gdb-print-errno">gdb print errno</h4><ul><li><a href="http://c.biancheng.net/c/errno/">errno全局变量及使用细则，C语言errno全局变量完全攻略</a></li><li><a href="https://blog.51cto.com/u_15346415/5094459">Linux(程序设计):08-perror、strerror函数(errno全局变量)</a></li><li><a href="https://blog.csdn.net/Gpengtao/article/details/7553307">Linux errno 错误对照表</a></li><li><a href="https://blog.csdn.net/qq_43684922/article/details/106440542">【博客272】errno错误对照表</a></li><li><a href="https://blog.csdn.net/liuhhaiffeng/article/details/104040174">gcc 7.1.0下gdb无法prinf查看errno解决</a></li></ul><h4 id="gdb远程调试">gdb远程调试</h4><ul><li><a href="https://cloud.tencent.com/developer/article/1015873">40.Linux应用调试-使用gdb和gdbserver</a></li><li><a href="https://www.jianshu.com/p/d532d196c89f">使用gdbserver远程调试</a></li><li><a href="https://blog.51cto.com/u_15346415/3678651"><font color=Red>服务/软件管理：38-gdb+gdbserver的使用</font></a></li><li><a href="https://www.cnblogs.com/seven-sky/p/4730225.html">gdb远程及本地调试的一些技巧</a></li><li><a href="https://blog.csdn.net/lvwx369/article/details/121490883">使用GDB进行嵌入式远程调试</a></li></ul><h4 id="gcc">gcc</h4><ul><li><a href="https://blog.csdn.net/fandroid/article/details/32914203">Dwarf Error: wrong version in compilation unit header (is 4, should be 2) [in module /dawnfs/users/</a></li></ul><h4 id="libtool">libtool</h4><ul><li><a href="https://www.cnblogs.com/ericsun/p/3168842.html">gdb调试libtool封装的可执行文件</a></li><li><a href="https://blog.csdn.net/rainharder/article/details/8057819">使用 GNU Libtool 创建库</a></li><li><a href="https://blog.csdn.net/abcd1f2/article/details/49816751">gdb not in executable format file format not recognized</a></li></ul><h4 id="vscode-gdb">vscode gdb</h4><ul><li><p><a href="https://blog.csdn.net/wanzew/article/details/83097457">一步一步学CMake 之 VSCode+CMakeLists 调试 C++ 工程_wanzew的博客-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/tengzijian/p/vscode-cannot-find-libc-start-c.html">VSCode 无法打开 libc-start.c - Zijian/TENG - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference">visualstudio-launch-json-reference</a></p></li><li><p><a href="https://www.jianshu.com/p/22effba56f7e">CentOS下sudo免密配置</a></p></li><li><p><a href="https://www.jianshu.com/p/368e5de24cc9">VS Code 下以 root 用户调试程序</a></p></li><li><p><a href="https://www.mycat.wiki/archives/769">VS Code 下以 root 用户调试程序</a></p></li><li><p><a href="https://zhangxueliang.blog.csdn.net/article/details/110701868">Linux deepin下普通用户免密切换至root用户</a></p></li><li><p><a href="https://www.coder.work/article/7603523">process - Visual Studio Code，调试子进程不起作用</a></p></li><li><p><a href="https://blog.csdn.net/leon_zeng0/article/details/107438624">VSCode 同时调试2个或多个程序</a></p></li><li><p><a href="https://blog.hufeifei.cn/2021/10/C-C++/vscode-debug-nginx/index.html">在vscode中调试nginx源码</a></p></li><li><p><a href="https://blog.csdn.net/wzp20092009/article/details/118327205">设置vscode命令行其缓冲区中保留的最大行数</a></p></li></ul><h4 id="vscode调试linux内核">vscode调试linux内核</h4><ul><li><a href="https://mp.weixin.qq.com/s/cx_vaRTcC29h0pWkJPpqQQ"><font color=Red>调试 Linux 最早期的代码</font></a></li><li><a href="https://github.com/yuan-xy/Linux-0.11"><font color=Red>https://github.com/yuan-xy/Linux-0.11</font></a></li><li><a href="https://www.modb.pro/db/422613"><font color=Red>Linux 0.11 vscode + gdb调试环境搭建</font></a></li><li><a href="https://mp.weixin.qq.com/s/vb1SiI0Uc5KpU2yGwJBRmg">利用vscode远程调试Linux内核</a></li></ul><h2 id="串口">串口</h2><ul><li><p><a href="https://blog.csdn.net/Mculover666/article/details/87647810"><font color=Red>Linux下常用的串口助手 —— minicom、putty、cutecom</font></a></p><p>主机上执行：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo minicom -s -D /dev/ttyUSB0<br></code></pre></td></tr></table></figure></p><p><code>ls -l /dev/ttyUSB0</code>找不到设备时可以尝试手动添加:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsusb<br></code></pre></td></tr></table></figure></p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20231206170018.png" alt="" /><figcaption>ls -l /dev/ttyUSB0</figcaption></figure><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;067b 23a3&#x27;</span> &gt; /sys/bus/usb-serial/drivers/generic/new_id<br></code></pre></td></tr></table></figure></p><p>被调式机上执行：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo cutecom<br></code></pre></td></tr></table></figure></p></li><li><p>查询串口波特率：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">stty</span> -F /dev/ttyS0<br></code></pre></td></tr></table></figure></p><p>其中 /dev/ttyS0 是串口设备文件的路径。你可以将路径更改为你所关心的特定串口。</p><p>这将返回串口的配置，包括波特率、数据位、校验位、停止位等。通常，波特率会显示在配置输出中，如下所示：</p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">speed 9600 baud; line = 0;<br></code></pre></td></tr></table></figure></p></li><li><p>设置串口波特率</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">stty</span> -F /dev/ttyS0 9600<br></code></pre></td></tr></table></figure></p><p>在上面的命令中：</p><p>/dev/ttyS0 是串口设备文件的路径，你可以根据需要更改为你使用的串口。</p><p>9600 是所需的波特率。你可以将其替换为你想要的任何波特率。</p><p>运行此命令后，串口 /dev/ttyS0 的波特率将设置为 9600。确保串口没有被其他程序占用，以便成功设置波特率。</p></li></ul><h2 id="kgdb">kgdb</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/546416941">linux内核调试（七）使用kdb/kgdb调试内核</a></p></li><li><p><a href="https://www.kernel.org/doc/html/latest/dev-tools/kgdb.html?highlight=kgdb">Using kgdb, kdb and the kernel debugger internals</a></p></li><li><p><a href="https://blog.csdn.net/weixin_38832162/article/details/115347640">使用KGDB调试Linux驱动（以imx6ull开发板为例）</a></p></li><li><p><a href="https://www.cnblogs.com/qiynet/p/6432717.html">用 kGDB 调试 Linux 内核</a></p></li><li><p><a href="https://www.jianshu.com/p/5418908bc883">使用kgdb调试Vagrant guest kernel</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39871788/article/details/120313821">kgdb调试linux内核以及驱动模块</a></p></li><li><p><a href="https://cloud.tencent.com/developer/ask/sof/249935">内核调试- vmlinux-gdb.py无法在gdb上运行</a></p></li><li><p><a href="https://quard-star-tutorial.readthedocs.io/zh_CN/latest/ext1.html">kgdb调试linux内核以及驱动模块</a></p></li></ul><h3 id="kgdboe">kgdboe</h3><ul><li><a href="https://stackoverflow.com/questions/21300420/how-to-use-kgdb-over-ethernet-kgdboe">How to use kgdb over ethernet (kgdboe)?</a></li></ul><h2 id="ptrace">ptrace</h2><ul><li><a href="https://www.toutiao.com/article/7199644016760554018">Linux GDB的实现原理</a></li><li><a href="https://blog.csdn.net/Z_Stand/article/details/108395906">一文带你看透 GDB 的 实现原理 ptrace真香</a></li><li><a href="https://zhuanlan.zhihu.com/p/110793460?utm_id=0">断点原理与实现</a></li><li><a href="https://blog.csdn.net/D_R_L_T/article/details/80632311">硬件断点和软件断点的区别</a></li><li><a href="https://zhuanlan.zhihu.com/p/38339306?utm_id=0">ROM, FLASH和RAM的区别</a></li><li><a href="https://blog.csdn.net/gengzhikui1992/article/details/111856016">调试器工作原理CPU软件断点/硬件断点/单步执行标识</a></li><li><a href="https://cataloc.gitee.io/blog/2020/09/19/%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9/">硬件断点</a></li><li><a href="https://cataloc.gitee.io/blog/2020/09/18/%E5%86%85%E5%AD%98%E6%96%AD%E7%82%B9/">内存断点</a></li><li><a href="https://cataloc.gitee.io/blog/2020/09/17/%E8%BD%AF%E4%BB%B6%E6%96%AD%E7%82%B9/">软件断点</a></li><li><a href="https://blog.csdn.net/Rong_Toa/article/details/112155847">Linux ptrace系统调用详解：利用 ptrace 设置硬件断点</a></li><li><a href="http://c.biancheng.net/view/8191.html">watch 命令实现监控机制的方式有 2 种，一种是为目标变量（表达式）设置硬件观察点，另一种是为目标变量（表达式）设置软件观察点。</a></li><li><a href="https://www.toutiao.com/article/7127950932549272094">Linux内核：自己动手写一个GDB设置断点（原理篇）</a></li></ul><h2 id="core文件">core文件</h2><ul><li><p><a href="https://cloud.tencent.com/developer/article/1177442">Linux下使用gdb调试core文件</a></p></li><li><p><a href="https://wangchujiang.com/linux-command/c/ulimit.html">ulimit命令 用来限制系统用户对shell资源的访问</a></p></li><li><p><a href="https://www.cnblogs.com/wangcp-2014/p/15466518.html">linux：永久打开core文件功能</a></p></li><li><p><a href="https://blog.csdn.net/u011417820/article/details/71435031">Linux生成core文件、core文件路径设置</a></p></li><li><p><a href="https://blog.csdn.net/xmcy001122/article/details/105665732">golang-进程崩溃后如何输出错误日志？</a></p></li><li><p><a href="https://zhengyun.blog.csdn.net/article/details/107365187">【Linux】core文件存储位置和命名</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1860631">一文读懂 | coredump文件是如何生成的</a></p></li><li><p><a href="https://www.cnblogs.com/huixinquan/p/14941880.html">linux下产生core文件以及不产生core文件的条件</a></p></li><li><p><a href="https://blog.csdn.net/qq_36580990/article/details/125540487"><font color=Red>程序死掉了，没有 core 文件怎么查？</font></a></p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">core[<span class="hljs-number">1161856</span>]: segfault at <span class="hljs-number">0</span> ip <span class="hljs-number">0000000000401136</span> sp <span class="hljs-number">00007f</span>fcdbaf3240 error <span class="hljs-number">6</span> in core[<span class="hljs-number">401000</span>+<span class="hljs-number">1000</span>] likely on CPU <span class="hljs-number">2</span> (core <span class="hljs-number">2</span>, socket <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></p><ul><li><p>core[1161856]: 这可能是指示生成的 core dump 文件名。在这里，core 文件名为 "core"，后缀为 "1161856"，这可能是一个进程 ID 或其他唯一标识符。</p></li><li><p>segfault at 0: 这表示一个段错误（Segmentation Fault）发生在地址 0 处。这通常是因为程序试图访问一个无效的内存地址。</p></li><li><p>ip 0000000000401136: 这是导致段错误的指令的地址。在这里，ip（Instruction Pointer）指向地址 0000000000401136 的指令。</p></li><li><p>sp 00007ffcdbaf3240: 这是栈指针（Stack Pointer），指向栈的当前顶部。在这里，sp 指向地址 00007ffcdbaf3240。</p></li><li><p>error 6: 这是一个错误代码，表示导致段错误的原因。在 Linux 中，错误代码 6 通常表示尝试执行非法的指令。</p></li><li><p>core[401000+1000]: 这表示 core dump 文件的内存范围。在这里，core 文件捕获了从地址 401000 开始的 1000 个字节的内存内容，1000一般指向了_init符号。</p></li><li><p>likely on CPU 2 (core 2, socket 0): 这是指示错误可能发生在第二个 CPU 核心上，该核心位于第一个物理 CPU 插槽上。</p></li></ul></li><li><p><a href="https://www.cnblogs.com/lynsen/p/8439550.html">Linux如何使用gdb查看core堆栈信息</a></p></li><li><p><a href="https://blog.csdn.net/xmcy001122/article/details/105665732"><font color=Red>golang-进程崩溃后如何输出错误日志？core dump</font></a></p></li></ul><h3 id="coredumpctl">coredumpctl</h3><ul><li><a href="https://www.man7.org/linux/man-pages/man1/coredumpctl.1.html">coredumpctl - Retrieve and process saved core dumps and metadata</a></li><li><a href="https://blog.csdn.net/wentian901218/article/details/119845991">使用systemd的coredump工具分析程序崩溃问题</a></li><li><a href="https://documentation.suse.com/zh-cn/sles/15-SP2/html/SLES-all/cha-tuning-systemd-coredump.html">18 使用 systemd-coredump 针对应用程序崩溃进行调试</a></li></ul><h2 id="dmesg">dmesg</h2><ul><li><a href="https://mp.weixin.qq.com/s/sQIoEE0iTxlVQDxhgBbY3A">Linux 命令： dmesg | uname</a></li><li><a href="https://blog.csdn.net/carefree2005/article/details/120737841">Linux命令之dmesg命令</a></li><li><a href="https://mp.weixin.qq.com/s/6qpMiy6L5qIazmqNopCd0A">Linux dmesg命令</a></li></ul><h2 id="dump_stack">dump_stack</h2><ul><li><a href="https://blog.csdn.net/cddchina/article/details/125175118">【Linux内核调试-dump_stack】</a></li><li><a href="https://blog.csdn.net/sunshineywz/article/details/105763755">dump_stack 实现分析</a></li></ul><h2 id="sysctl">sysctl</h2><ul><li><a href="https://www.cnblogs.com/tolimit/p/5065761.html">内核参数说明</a></li></ul><h2 id="oops">oops</h2><ul><li><p><a href="https://blog.csdn.net/pwl999/article/details/106931608"><font color=Red>Linux 死机复位(oops、panic)问题定位指南</font></a></p></li><li><p><a href="https://github.com/gatieme/LDD-LinuxDeviceDrivers/blob/master/study/debug/tools/systemtap/01-install/README.md">Linux内核调试的方式以及工具集锦</a></p></li><li><p><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></p></li><li><p><a href="https://blog.csdn.net/xl19862005/article/details/107605906">kernel oops (Unable to handle kernel paging request at virtual address )三种内存访问异常</a></p></li><li><p><a href="https://www.toutiao.com/article/6868133266415845892">LSM Oops 内存错误根因分析与解决</a></p></li><li><p><a href="https://blog.csdn.net/qq_21688871/article/details/131114564">【Linux】内核oops/缺页异常分析</a></p></li><li><p><a href="http://blog.chinaunix.net/uid-27159438-id-3280213.html">ARM Linux Oops使用小结</a></p></li></ul><h2 id="panic">panic</h2><ul><li><a href="https://mp.weixin.qq.com/s/d0vJgQYVDB3ZiQRMoDvvDw">一起学习64位ARM平台稳定性分析：遇见内核 panic</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/105691909">Linux内核故障分类和排查</a></li><li><a href="https://mp.weixin.qq.com/s/RPS_QernHHgBBKBlFJksHA"><font color=Red>这是你了解的空指针吗？</font></a></li><li><a href="https://blog.csdn.net/tugouxp/article/details/128834562">Linux内核panic核心执行逻辑</a></li></ul><p>更改 sysctl 中的某些内核参数可能导致系统不稳定，甚至触发 panic。以下是一些可能会导致系统问题的内核参数，慎重修改：</p><ul><li><p>kernel.panic</p><p>作用： 设置系统 panic 的延迟时间。</p><p>潜在风险： 如果将其设置得太低，系统可能会在不必要的情况下触发 panic。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w kernel.panic=10<br></code></pre></td></tr></table></figure></p><ul><li><a href="https://blog.csdn.net/yihui8/article/details/46480627"><font color=Red>Linux kernel Panic后自动重启机器的设置</font></a></li></ul></li><li><p>kernel.panic_on_oops</p><p>作用： 控制在发生内核 oops（可修复的内核错误）时是否触发 panic。</p><p>潜在风险： 如果启用，系统在 oops 时会触发 panic。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w kernel.panic_on_oops=1<br></code></pre></td></tr></table></figure></p></li><li><p>kernel.hung_task_panic</p><p>作用： 控制在系统检测到“挂起”任务（可能是由于死锁）时是否触发 panic。</p><p>潜在风险： 如果启用，系统在检测到挂起任务时会触发 panic。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w kernel.hung_task_panic=1<br></code></pre></td></tr></table></figure></p></li><li><p>kernel.hung_task_timeout_secs：</p><p>作用： 该参数用于设置系统在检测到任务挂起（hanging task）的超时时间。如果系统中的某个任务在指定的时间内没有恢复正常运行，内核将记录信息并采取相应的措施。</p><p>默认值： 通常情况下，kernel.hung_task_timeout_secs 的默认值是 120 秒（2 分钟）。</p><p>潜在风险： 如果将其设置得太低，系统可能会对一些正常但需要一定时间来完成的任务误报为挂起状态。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w kernel.hung_task_timeout_secs=60<br></code></pre></td></tr></table></figure></p></li><li><p>vm.panic_on_oom</p><p>作用： 控制在发生内存耗尽（OOM）时是否触发 panic。</p><p>潜在风险： 如果启用，系统在内存不足时会触发 panic。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w vm.panic_on_oom=1<br></code></pre></td></tr></table></figure></p></li><li><p>kernel.softlockup_panic</p><p>作用： 软死锁是指内核中的一个任务（线程）由于长时间未能释放CPU而导致系统失去响应时是否触发 panic。</p><p>潜在风险： 如果启用，系统在检测到软锁定时会触发 panic。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w kernel.softlockup_panic=1<br></code></pre></td></tr></table></figure></p></li><li><p>kernel.panic_on_warn</p><p>作用： 这个参数控制内核在遇到某些非致命性错误（例如警告）时是否触发 panic。</p><p>0： 禁用自动重启。内核在遇到警告时不会触发系统重启，而是继续正常运行。</p><p>1： 启用自动重启。当内核发生某些警告时，系统会自动重启。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w kernel.panic_on_warn=1<br></code></pre></td></tr></table></figure><p>在调试或特殊情况下，禁用自动重启可能有助于保留内核警告的信息以进行故障排除。在生产环境中，通常将其设置为非0，以确保系统在遇到某些严重问题时能够自动重启，尽早恢复正常运行状态。</p></li></ul><p><code>sysctl -w kernel.hung_task_panic=1</code>、<code>echo 1 &gt; /proc/sys/kernel/hung_task_panic</code>这两种方法都是在运行时直接生效的，而且都是暂时性的修改。</p><p>如果你希望修改是持久的，可以将相应的配置写入 <code>/etc/sysctl.conf</code> 文件，并使用 <code>sysctl -p</code> 命令使其生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/sysctl.conf</span><br><span class="hljs-string"></span><br><span class="hljs-string"># sysrq</span><br><span class="hljs-string">kernel.sysrq=1</span><br><span class="hljs-string"></span><br><span class="hljs-string"># panic</span><br><span class="hljs-string">kernel.panic=10</span><br><span class="hljs-string">kernel.panic_on_oops=1</span><br><span class="hljs-string">kernel.hung_task_panic=1</span><br><span class="hljs-string">kernel.hung_task_timeout_secs=60</span><br><span class="hljs-string">vm.panic_on_oom=1</span><br><span class="hljs-string">kernel.softlockup_panic=1</span><br><span class="hljs-string">kernel.panic_on_warn=1</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p<br></code></pre></td></tr></table></figure><h3 id="任务挂起和睡眠的区别">任务挂起和睡眠的区别？</h3><p>任务挂起（hanging task）和睡眠（sleep）是两个概念，涉及到系统中运行的进程和线程的状态。</p><p>任务挂起（Hanging Task）：</p><ul><li><p>定义： 任务挂起指的是系统中的某个任务（通常是一个进程或线程）由于某种原因而无法继续正常执行，长时间处于一种不响应的状态。</p></li><li><p>原因： 挂起可能是由于死锁、资源争用、错误的程序行为或其他系统问题引起的。</p></li><li><p>检测： 内核通过监视任务的执行状态和超时机制来检测是否有任务挂起。</p></li><li><p>处理： 一旦检测到任务挂起，系统可能会采取相应的措施，例如记录相关信息、触发系统 panic，以及尝试恢复任务的正常执行。</p></li></ul><p>睡眠（Sleep）：</p><ul><li><p>定义： 睡眠指的是一个任务主动放弃 CPU 并进入一种等待状态，等待某个事件的发生。在睡眠期间，任务通常不占用 CPU 时间，并允许其他任务执行。</p></li><li><p>原因： 任务可能进入睡眠状态以等待外部事件，例如等待 I/O 操作完成、等待定时器触发、等待信号量或锁的释放等。</p></li><li><p>检测： 睡眠通常是由任务自己通过系统调用（如 sleep、wait）或内核操作引起的，不同于挂起的 passivity（被动性）。</p></li><li><p>处理： 睡眠是一种正常的任务状态，系统不会像在检测到挂起时那样采取紧急措施。任务会在等待的事件发生时被唤醒，继续执行。</p></li></ul><p>总的来说，任务挂起通常是一种异常状态，可能导致系统不稳定，而睡眠是一种正常的、被控制的状态，允许任务在需要时主动放弃 CPU 并等待特定条件的发生。</p><h2 id="watchdog">watchdog</h2><ul><li><p><a href="https://cloud.tencent.com/developer/article/1843976">禁用watchdog方法汇总</a></p></li><li><p><a href="https://blog.csdn.net/jiexijihe945/article/details/128021600">Linux watchdog配置</a></p></li><li><p><a href="https://blog.csdn.net/qq_28278079/article/details/104218588">Linux禁用watchdog</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">nmi_watchdog=   [KNL,BUGS=X86] Debugging features for SMP kernels<br>                      Format: [panic,][nopanic,][num]<br>                      Valid num: 0 or 1<br>                      0 - turn hardlockup detector in nmi_watchdog off<br>                      1 - turn hardlockup detector in nmi_watchdog on<br>                      When panic is specified, panic when an NMI watchdog<br>                      timeout occurs (or &#x27;nopanic&#x27; to not panic on an NMI<br>                      watchdog, if CONFIG_BOOTPARAM_HARDLOCKUP_PANIC is set)<br>                      To disable both hard and soft lockup detectors,<br>                      please see &#x27;nowatchdog&#x27;.<br>                      This is useful when you use a panic=... timeout and<br>                      need the box quickly up again.<br><br>                      These settings can be accessed at runtime via<br>                      the nmi_watchdog and hardlockup_panic sysctls.<br></code></pre></td></tr></table></figure></li></ul><h2 id="kdump">kdump</h2><ul><li><p><a href="https://www.kernel.org/doc/html/latest/admin-guide/kdump/kdump.html"><font color=Red>Documentation for Kdump - The kexec-based Crash Dumping Solution</font></a></p></li><li><p><a href="https://www.cyberciti.biz/faq/how-to-on-enable-kernel-crash-dump-on-debian-linux/"><font color=Red>How to on enable kernel crash dump on Debian Linux</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install kdump-tools crash kexec-tools makedumpfile linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br>Linux wujing-PC 5.15.77-amd64-desktop <span class="hljs-comment">#2 SMP Thu Jun 15 16:06:18 CST 2023 x86_64 GNU/Linux</span><br><span class="hljs-built_in">cat</span> /etc/default/grub.d/kdump-tools.cfg<br>GRUB_CMDLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;<span class="hljs-variable">$GRUB_CMDLINE_LINUX_DEFAULT</span> crashkernel=384M-:128M&quot;</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br>Linux wujing-PC 4.19.0-arm64-desktop-tyy-5312 <span class="hljs-comment">#5312 SMP Tue Dec 12 10:52:22 CST 2023 aarch64 GNU/Linux</span><br><span class="hljs-built_in">cat</span> /etc/default/grub.d/kdump-tools.cfg<br>GRUB_CMDLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;<span class="hljs-variable">$GRUB_CMDLINE_LINUX_DEFAULT</span> crashkernel=2G-4G:320M,4G-32G:512M,32G-64G:1024M,64G-128G:2048M,128G-:4096M&quot;</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/kernel/sysrq<br><span class="hljs-built_in">echo</span> c &gt; /proc/sysrq-trigger<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/chenlycly/article/details/126074433">详解Linux内核态调试工具kdump</a></p></li><li><p><a href="https://blog.csdn.net/qq_41782149/article/details/129021833"><font color=Red>Linux内核转储-Kdump，Crash使用介绍</font></a></p></li><li><p><a href="https://ebpf.top/post/ubuntu_kdump_crash/"><font color=Red>Ubuntu 20.04 Kdump + Crash 初体验</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_42915431/article/details/112555690">ubuntu 20.04 启用kdump服务及下载vmlinux</a></p></li><li><p><a href="https://blog.csdn.net/yhb1047818384/article/details/104115915">Linux内核调试之kdump</a></p></li><li><p><a href="https://blog.csdn.net/ludaoyi88/article/details/114194687">Linux Kdump内核崩溃转储部署详解</a></p></li><li><p><a href="https://www.cnblogs.com/wwang/archive/2010/11/19/1881304.html">Ubuntu的内核转储工具</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45030965/article/details/124960224"><font color=Red>centos7 kdump、crash调试内核</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7103352500777910821/">Linux Kdump 机制详解</a></p></li><li><p><a href="https://manpages.debian.org/testing/kdump-tools/kdump-tools.5.en.html">x86 and x86_64 - Some systems can take advantage of the nmi watchdog. Add nmi_watchdog=1 to the boot commandline to turn on the watchdog. The nmi interrupt will call panic if activated.</a></p></li></ul><h2 id="carsh">carsh</h2><p>crash 是一个用于分析 Linux 内核转储文件（core dump）的工具，允许在不中断系统运行的情况下进行诊断。以下是 crash 的一些基本原理：</p><ul><li><p>核心文件： crash 的核心原理是基于核心文件的分析。内核转储文件（core dump）记录了系统在发生关键错误时的内存和寄存器状态。crash 使用这些核心文件进行分析。</p></li><li><p>调试信息： 为了正确解析核心文件，crash 需要访问内核二进制文件（通常是 vmlinux）。这个文件包含有关内核符号、数据结构和函数的调试信息。在使用 crash 之前，你需要确保有匹配正在运行内核的 vmlinux 文件。</p></li><li><p>在线调试： crash 允许在线调试运行中的内核，而无需停止系统。它通过访问 /proc/kcore 文件获取正在运行内核的内存映像，结合核心文件和调试信息，提供了对内核状态的深入分析。</p></li><li><p>命令式界面： crash 提供了一个交互式的命令行界面，用户可以在其中运行各种命令以查看内核状态、进程信息、调度器信息等。这样用户可以动态地检查系统状态。</p></li><li><p>插件系统： crash 具有可扩展的插件系统，可以通过插件添加额外的命令和功能。这使得用户可以根据需要定制分析环境。</p></li><li><p>安全性和谨慎使用： 尽管 crash 在不中断系统的情况下进行诊断，但仍需注意，对于生产环境，谨慎使用是很重要的。某些 crash 命令可能会对系统产生影响，因此建议在测试环境中使用。</p></li></ul><p>总的来说，crash 提供了一种非常强大的工具，用于在不影响系统运行的情况下进行 Linux 内核的调试和分析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/crash-utility/crash.git<br><span class="hljs-built_in">cd</span> crash/<br>git checkout -b 8.0.4 8.0.4<br>make -j16<br>sudo make install<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/qq_42931917/article/details/108236139">Linux crash 调试环境搭建</a></li><li><a href="https://www.cnblogs.com/ssyfj/p/16278883.html">linux内核学习-Linux内核程序调试工具Crash的安装</a></li><li><a href="https://blog.csdn.net/weixin_39545102/article/details/111215997">dump分析工具_ubantu18.04内核奔溃调试工具Crash的搭建</a></li><li><a href="https://mp.weixin.qq.com/s/Hp-n9n3M9zy92Xm-dnRUZQ"><font color=Red>用crash tool观察ARM64 Linux地址转换</font></a></li><li><a href="https://www.toutiao.com/article/6903790073377063428/">CRASH安装和调试</a></li></ul><h2 id="sysrq-trigger">sysrq-trigger</h2><ul><li><a href="https://www.kernel.org/doc/html/latest/translations/zh_CN/admin-guide/sysrq.html"><font color=Red>Linux Magic System Request Key Hacks</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/608948166">【调试】sysRq按键使用方法</a></li><li><a href="https://cloud.tencent.com/developer/article/2139743">/proc/sysrq-trigger 详解</a></li><li><a href="https://blog.csdn.net/openswc/article/details/9105071">Linux死机解决办法</a></li></ul><p>“Alt+PrtSc+C”：手动触发kdump，触发后服务器会自动重启。（正常情况下勿按该组合键。）</p><h2 id="pstore">pstore</h2><ul><li><a href="https://blog.csdn.net/faxiang1230/article/details/103778193">linux获取oops的dmesg之ramoops</a></li><li><a href="https://www.toutiao.com/article/6888542275027075591/">Linux pstore 实现自动“抓捕”内核崩溃日志</a></li></ul><h2 id="windebug">windebug</h2><ul><li><a href="https://blog.csdn.net/pathfinder1987/article/details/86620985">windebug快速使用及调试注意事项</a></li><li><a href="https://blog.csdn.net/sunboyhch/article/details/37914727">windebug指令详解</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://wiki.archlinux.org/title/Debugging">https://wiki.archlinux.org/title/Debugging</a></li><li><a href="http://c.biancheng.net/c/ascii/">ASCII码一览表，ASCII码对照表</a></li><li><a href="https://www.bejson.com/convert/ox2str/">16进制到文本字符串</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Golang</tag>
      
      <tag>strings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16位汇编语言</title>
    <link href="/debug/assembly/16%E4%BD%8D%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/debug/assembly/16%E4%BD%8D%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="位汇编语言">16位汇编语言</h1><h2 id="寄存器">寄存器</h2><p>8086CPU有14个寄存器，所有寄存器都是16位的，可以存放2个字节：</p><ul><li>AX</li><li>BX</li><li>CX</li><li>DX</li><li>SI</li><li>DI</li><li>SP</li><li>BP</li><li>CS</li><li>SS</li><li>DS</li><li>ES</li><li>PSW</li></ul><p>这 14 个寄存器有可能进行具体的划分，按照功能可以分为三种：</p><ul><li>通用寄存器</li><li>段寄存器</li><li>控制寄存器</li></ul><h3 id="通用寄存器">通用寄存器</h3><p>8086CPU有4个通用寄存器，用来存放一般性的数据：</p><ul><li><p>AX(Accumulator Register) ：累加寄存器，它主要用于输入/输出和大规模的指令运算。</p></li><li><p>BX(Base Register)：基址寄存器，用来存储基础访问地址。</p></li><li><p>CX(Count Register)：计数寄存器，CX 寄存器在迭代的操作中会循环计数。</p></li><li><p>DX(Data Register)：数据寄存器，它也用于输入/输出操作。它还与 AX 寄存器以及 DX 一起使用，用于涉及大数值的乘法和除法运算。</p></li></ul><p>8086CPU的<code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code>这4个通用寄存器都可以分为两个可独立使用的8位寄存器来用：</p><table><thead><tr class="header"><th>寄存器</th><th>高位</th><th>低位</th></tr></thead><tbody><tr class="odd"><td>AX</td><td>AH</td><td>AL</td></tr><tr class="even"><td>BX</td><td>BH</td><td>BL</td></tr><tr class="odd"><td>CX</td><td>CH</td><td>CL</td></tr><tr class="even"><td>DX</td><td>DH</td><td>DL</td></tr></tbody></table><p>除了<code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code> 寄存器以外，其他寄存器均不可以分为两个独立的 8 位寄存器。</p><p>寄存器的存储方式是先存储低位，如果低位满足不了就存储高位，如果低位能够满足，高位用 0 补全，在其他低位能满足的情况下，其余位也用 0 补全。</p><p>8086 CPU 可以一次存储两种类型的数据：</p><ul><li><p>字节(byte)： 一个字节由 8 bit 组成，这是一种恒定不变的存储方式</p></li><li><p>字(word)：字是由指令集或处理器硬件作为单元处理的固定大小的数据，对于 intel 来说，一个字长就是两个字节。</p></li></ul><p>字是计算机一个非常重要的特征，针对不同的指令集架构来说，计算机一次处理的数据也是不同的。也就是说，针对不同指令集的机器，一次能处理不用的字长，有字、双字（32位）、四字（64位）等。</p><h3 id="段寄存器">段寄存器</h3><p>8086CPU有4个段寄存器：</p><ul><li>CS(Code Segment)：代码段寄存器，程序代码的基础位置。</li><li>DS(Data Segment)：数据段寄存器，变量的基本位置。</li><li>SS(Stack Segment)：堆栈段寄存器，栈的基础位置。</li><li>ES(Extra Segment)：附加段寄存器，内存中变量的其他基本位置。</li></ul><h4 id="代码段寄存器">代码段寄存器</h4><ul><li>CS</li></ul><h4 id="数据段寄存器">数据段寄存器</h4><ul><li>DS</li></ul><p>8086CPU不支持将数据直接送入段寄存器，需要先将数据送入一个一般的寄存器，如<code>BX</code>，再将<code>BX</code>中的内容送入<code>DS</code>。</p><h4 id="堆栈段寄存器">堆栈段寄存器</h4><ul><li>SS</li></ul><p>8086CPU中，有两个寄存器，堆栈段寄存器<code>SS</code>和栈指针寄存器<code>SP</code>，栈顶的段地址存放在<code>SS</code>中，偏移地址存放在<code>SP</code>中。</p><p>任意时刻，<code>SS:SP</code>指向栈顶元素。</p><p><code>push</code>指令和<code>pop</code>指令执行时，CPU从<code>SS</code>和<code>SP</code>中得到栈顶的地址。</p><h5 id="栈顶超界的问题">栈顶超界的问题</h5><p>当栈满的时候，使用<code>push</code>指令入栈，或栈空的时候使用<code>pop</code>指令出栈，都将发生栈顶超界的问题。</p><p>8086CPU不保证我们对栈的操作不会越界，8086CPU只知道栈顶在何处（由<code>SS:SP</code>指示），而不知道我们安排的栈空间有多大。</p><p>编程时要根据可能用到的最大栈空间，来安排栈的大小，防止入栈的数据太多而导致超界；执行出栈操作的时候也要注意，以防栈空的时候继续出栈而导致的超界。</p><h4 id="索引寄存器">索引寄存器</h4><p>索引寄存器主要包含段地址的偏移量，索引寄存器主要分为：</p><ul><li>BP(Base Pointer)：基础指针，它是栈寄存器上的偏移量，用来定位栈上变量。</li><li>SP(Stack Pointer)：栈指针，它是栈寄存器上的偏移量，用来定位栈顶。</li><li>SI(Source Index)：变址寄存器，用来拷贝源字符串。</li><li>DI(Destination Index)：目标变址寄存器，用来复制到目标字符串。</li></ul><h3 id="控制寄存器">控制寄存器</h3><ul><li>IP(Instruction Pointer)：指令指针寄存器，它是从 Code Segment 代码寄存器处的偏移来存储执行的下一条指令.</li><li>FLAG(EFLAGS Register)：标志寄存器用于存储当前进程的状态。</li></ul><h4 id="指令指针寄存器">指令指针寄存器</h4><p>指令指针寄存器（Instruction Pointer）</p><ul><li>IP</li></ul><p>在8086PC机中，任意时刻，设<code>CS</code>中的内容为<code>M</code>，<code>IP</code>中的内容为<code>N</code>，8086CPU将从内存<code>M*16+N</code>单元开始，读取一条指令并执行。</p><p>也可以这样表述：8086机中，任意时刻，CPU将<code>CS:IP</code>指向的内容当做指令执行。</p><p><code>mov</code>指令不能用于设置<code>CS</code>、<code>IP</code>寄存器的值，原因很简单，因为8086CPU没有提供这样的功能。</p><p>使用<code>jmp 段地址:偏移地址</code>指令可以同时修改<code>CS:IP</code>寄存器的值：</p><ul><li><code>jmp 2AE3:3</code>，执行后：<code>CS=2AE3H</code>， <code>IP=0003H</code>，CPU将从<code>2AE33H</code>处读取指令。</li><li><code>jmp 3:0B16</code>，执行后：<code>CS=0003H</code>， <code>IP=0B16H</code>，CPU将从<code>00B46H</code>处读取指令。</li></ul><p>若想仅修改<code>IP</code>寄存器的内容，可用<code>jmp 某一合法寄存器</code>的指令完成，如：</p><ul><li><code>jmp ax</code>，指令执行前，<code>ax=1000H</code>，<code>CS=2000H</code>，<code>IP=0003H</code> 指令执行后，<code>ax=1000H</code>，<code>CS=2000H</code>，<code>IP=1000H</code></li></ul><h4 id="标志寄存器">标志寄存器</h4><p>FLAG(EFLAGS Register)：标志寄存器用于存储当前进程的状态。</p><p>标志寄存器，又称程序状态寄存器（它的内容是Program Status Word，PSW）。</p><p>这是一个，控制标志和系统标志的寄存器。</p><p>标志寄存器EFLAGS中的系统标志和IOPL字段用于控制I/O访问、可屏蔽硬件中断、调试、任务切换以及虚拟8086模式。</p><p>FLAG : Flag 寄存器用于存储当前进程的状态，这些状态有：</p><ul><li><p>位置 (Direction)：用于数据块的传输方向，是向上传输还是向下传输</p></li><li><p>中断标志位 (Interrupt) ：1 - 允许；0 - 禁止</p></li><li><p>陷入位 (Trap) ：确定每条指令执行完成后，CPU 是否应该停止。1 - 开启，0 - 关闭</p></li><li><p>进位 (Carry) : 设置最后一个无符号算术运算是否带有进位</p></li><li><p>溢出 (Overflow) : 设置最后一个有符号运算是否溢出</p></li><li><p>符号 (Sign) : 如果最后一次算术运算为负，则设置 1 =负，0 =正</p></li><li><p>零位 (Zero) : 如果最后一次算术运算结果为零，1 = 零</p></li><li><p>辅助进位 (Aux Carry) ：用于第三位到第四位的进位</p></li><li><p>奇偶校验 (Parity) : 用于奇偶校验</p></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.jb51.net/article/230062.htm">图文详解通俗易懂的汇编语言寄存器</a></li><li><a href="https://www.toutiao.com/article/7039892076707807748">二进制分析实战：x86汇编快速入门</a></li><li><a href="https://baike.baidu.com/item/cs/19501238">硬件CPU中的代码段寄存器</a></li><li><a href="https://blog.csdn.net/weixin_42240667/article/details/104503184">8086cpu中的寄存器（cs、ds、es、ss、ip、sp、bp、si、di）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>assembly</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/debug/assembly/README/"/>
    <url>/debug/assembly/README/</url>
    
    <content type="html"><![CDATA[<h1 id="assembly-learning">assembly-learning</h1><ul><li><a href="https://cmsblogs.cn/3358.html">汇编语言（第4版）PDF下载</a></li><li><a href="https://pan.baidu.com/s/1BUWnerHO20rkMlesAesEFQ">链接: https://pan.baidu.com/s/1BUWnerHO20rkMlesAesEFQ 密码: wdd7</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>assembly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>assembly</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>assembly</title>
    <link href="/debug/assembly/assembly/"/>
    <url>/debug/assembly/assembly/</url>
    
    <content type="html"><![CDATA[<h1 id="assembly">assembly</h1><ul><li><a href="https://mp.weixin.qq.com/s/qqjvXXKG-3TtUFeccQ7ZGQ">第2期 | x86指令集和ARM指令集的区别——从底层原理的角度来理解</a></li></ul><h2 id="汇编语言">汇编语言</h2><ul><li><p><a href="https://www.jb51.net/article/230062.htm"><font color=Red>图文详解通俗易懂的汇编语言寄存器</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7039892076707807748/"><font color=Red>二进制分析实战：x86汇编快速入门</font></a></p></li><li><p><a href="https://blog.codekissyoung.com/%E7%AC%AC%E9%9B%B6%E5%B1%82/64%E4%BD%8DCPU%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"><font color=Red>Linux 下 64 位汇编语言</font></a></p></li><li><p><a href="https://blog.codekissyoung.com/%E7%AC%AC%E9%9B%B6%E5%B1%82/32%E4%BD%8DCPU%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"><font color=Red>32 位汇编语言</font></a></p></li><li><p><a href="https://blog.codekissyoung.com/%E7%AC%AC%E9%9B%B6%E5%B1%82/16%E4%BD%8DCPU%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"><font color=Red>16 位汇编语言</font></a></p></li><li><p><a href="https://www.dazhuanlan.com/alzheimers/topics/1114443"><font color=Red>Linux 汇编语言程序设计 (使用 NASM)</font></a></p></li><li><p><a href="https://www.jianshu.com/p/1bae868660ae">开始在Linux下使用汇编语言</a></p></li><li><p><a href="https://www.bxtkezhan.xyz/post/022-asmx64-first/"><font color=Red>汇编语言「Linux/x86-64」・第一步</font></a></p></li><li><p><a href="https://www.bxtkezhan.xyz/post/026-asmx64-explanation/">汇编语言「Linux/x86-64」・代码解析</a></p></li><li><p><a href="https://www.bxtkezhan.xyz/post/049-asmx64-c/">汇编语言「Linux/x86-64」・调用C程序</a></p></li><li><p><a href="http://c.biancheng.net/asm/">汇编语言入门教程：汇编语言程序设计指南（精讲版）</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程简明版（阮一峰博客）</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程</a></p></li><li><p><a href="https://www.cnblogs.com/euler0525/p/16313494.html">汇编语言</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45309916/article/details/107837561">ARM汇编基础详解</a></p></li><li><p><a href="https://www.jc2182.com/assemblylanguage/assembly-language-jiaocheng.html"><font color=Red>汇编语言 教程</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/54853591"><font color=Red>汇编语言Linux 汇编语言开发指南</font></a></p></li><li><p><a href="https://github.com/fmw666/Assembly"><font color=Red>汇编语言基础</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_36894974/article/details/103365258">程序员需要了解的硬核知识之汇编语言(全)_程序员cxuan的个人主页-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/cxuanBlog/p/11976084.html">程序员需要了解的硬核知识之汇编语言(全)</a></p></li><li><p><a href="https://blog.csdn.net/qq_40148538/article/details/101355488">64位和32位在汇编语言中的区别</a></p></li></ul><h2 id="内联汇编">内联汇编</h2><ul><li><a href="https://blog.csdn.net/weixin_36209467/article/details/122113552">扩展内联汇编__asm__</a></li><li><a href="https://blog.csdn.net/qq_42931917/article/details/117779286"><font color=Red>C语言内联汇编使用方法__asm__</font></a></li><li><a href="https://blog.csdn.net/chenchengwudi/article/details/121089099#t5">Linux 0.11内核分析03：系统调用 中断描述符安装函数</a></li><li><a href="https://pvcstillingradschool.github.io/miniWiki/programming/csapp/3_machine_level_programming.html">程序的机器级表示-汇编</a></li><li><a href="https://www.cnblogs.com/xiaojianliu/articles/8733568.html">main函数和启动例程 汇编程序的入口是_start，而C程序的入口是main函数。</a></li></ul><h2 id="栈帧回溯">栈帧回溯</h2><ul><li><a href="https://blog.csdn.net/qq_41658597/article/details/115603733">栈帧详解ebp、esp</a></li><li><a href="https://blog.csdn.net/qq_25814297/article/details/113475019">EBP 和 ESP 详解</a></li><li><a href="https://blog.csdn.net/qq_44288506/article/details/104767511">关于汇编语言中PUSH和POP指令的一个小结</a></li><li><a href="https://www.cnblogs.com/dyyblog/p/13812922.html">2020-2021-1 20209320 《Linux内核原理与分析》第二周作业</a></li><li><a href="https://blog.csdn.net/assiduous_me/article/details/119488503"><font color=Red>初步分析汇编代码</font></a></li><li><a href="https://mp.weixin.qq.com/s/HRoddV3KuKlTl-3if5HN_w">一起学习64位ARM平台稳定性分析：函数调用标准</a></li><li><a href="https://mp.weixin.qq.com/s/I1I3Ee3b--hgnIoH_GCPjQ">ARM栈回溯</a></li><li><a href="https://zhuanlan.zhihu.com/p/598210639">Stack Unwind 堆栈回溯</a></li><li><a href="https://blog.csdn.net/Rong_Toa/article/details/110846509">Unwind 栈回溯详解：libunwind</a></li><li><a href="https://blog.csdn.net/pwl999/article/details/107569603">Unwind 栈回溯详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/665401236">当没有了framepointer该如何进行栈回溯？</a></li><li><a href="https://blog.csdn.net/lidan113lidan/article/details/121801335">AARCH64平台的栈回溯</a></li></ul><h2 id="x86">x86</h2><ul><li><a href="https://blog.csdn.net/weixin_43833642/article/details/108511881">Intel® 64 位和 IA-32 架构开发手册说明三卷中文版</a></li></ul><h2 id="龙芯">龙芯</h2><ul><li><a href="https://blog.csdn.net/weixin_43833642/article/details/108511881">龙芯架构参考手册</a></li></ul><h2 id="其它">其它</h2><ul><li><a href="https://m.toutiao.com/article_series/7147341959684751880">编译器的技术文章</a></li><li><a href="https://mp.weixin.qq.com/s/E7XL4BVrJ99dG4RNo-olyQ">为什么 JVM 叫做基于栈的 RISC 虚拟机</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>assembly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/debug/bpf/README/"/>
    <url>/debug/bpf/README/</url>
    
    <content type="html"><![CDATA[<h1 id="bpf-learning">bpf-learning</h1><h2 id="安装教程">安装教程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install bpfcc-tools linux-headers-$(<span class="hljs-built_in">uname</span> -r) bpftrace<br></code></pre></td></tr></table></figure><ul><li><a href="bcc.md">BPF Compiler Collection (BCC)</a></li><li><a href="bpftrace.md">bpftrace</a></li></ul><h2 id="动态追踪">动态追踪</h2><p>可以通过探针机制，来采集内核或者应用程序的运行信息。所谓动态，表示他可以不用修改内核和应用程序的代码，就获得丰富的信息。因为在以往的排查和调试性能问题过程中，我们往往会先给应用程序设置一系列的断点(gdb),然后以手动或者脚本(GDB的Python扩展)的方式，在断点处去分析程序状态，或者增加一系列的日志，在日志中寻找线索。相比以往的进程及追踪方法(ptrace)，动态追踪往往只需要消耗很小的性能消耗（5%甚至更少）。</p><p>根据类型不同，动态追踪所使用的事件源，可以分为静态探针，动态探针，硬件事件这三类。</p><h3 id="硬件事件">硬件事件</h3><p>其中硬件事件通常由性能监控计数器PMC(Performance Monitoring Counter)产生，他包括了各种硬件的性能指标，比如CPU的缓存，指令周期，分支预测等等。</p><h3 id="静态探针">静态探针</h3><p>静态探针，指事先在代码中定义好，并编译到应用程序和内核中的探针。这些探针只有在开启探测功能时，才会被执行到。未开启时，不会执行。常见的静态探针包括内核中的跟踪点(tracepoints)和USDT(Userland Statically Defined Tracing)探针：</p><ul><li><p>跟踪点(tracepoints) - 在源码中插入一些带控制条件的探测点，这些探测点允许事后添加处理函数，比如在内核中，最常见的静态追踪方法就是printk(),输出日志，Linux内核定义了大量的跟踪点，可以通过内核编译选项来开启和关闭。</p></li><li><p>USDT探针，全称是用户级静态定义跟踪，需要在源码中插入DTRACE_PROBE()代码，并编译到应用程序中。不过在很多应用程序内置了USDT探针，比如MySQL, PostgreSQL等。</p></li></ul><h3 id="动态探针">动态探针</h3><p>动态探针，是指没有实现在代码定义，但却可以在运行时动态添加的探针。比如函数的调用和返回等，动态探针支持按需在内核或者应用程序中添加探测点，具有更高的灵活性，常见的动态探针有两种，即用于内核态的kprobes以及用户态的uprobes:</p><ul><li><p>kprobes - 用来跟踪内核态的函数，包括用于函数调用的kprobe和用于函数返回的kretprobe。</p></li><li><p>uprobes - 用来跟踪用户态的函数，包括用于函数调用的uprobe以及用于函数返回的uretprobe。</p></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.toutiao.com/article/7077801491347833374">Linux动态追踪技术概念介绍</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/debug/binary-analysis/README/"/>
    <url>/debug/binary-analysis/README/</url>
    
    <content type="html"><![CDATA[<h1 id="binaryanalysis">binaryanalysis</h1><ul><li><a href="https://nostarch.com/binaryanalysis">https://nostarch.com/binaryanalysis</a></li><li><a href="https://practicalbinaryanalysis.com/">Download code samples and virtual machine.</a></li><li><a href="https://practicalbinaryanalysis.com/file/pba-code.tar.gz">You can also download just the example code.</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>binary-analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bcc</title>
    <link href="/debug/bpf/bcc/"/>
    <url>/debug/bpf/bcc/</url>
    
    <content type="html"><![CDATA[<h1 id="bcc">bcc</h1><p><a href="https://github.com/iovisor/bcc.git">BPF Compiler Collection (BCC)</a></p><p>本教程适用于Deepin 20.6、Deepin 20.7。</p><h2 id="安装依赖">安装依赖</h2><p>查看宿主机已安装llvm版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l | grep libllvm<br></code></pre></td></tr></table></figure><p>结果输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">ii  libllvm11:amd64                               1:11.0.1-2                                 amd64        Modular compiler and toolchain technologies, runtime library<br></code></pre></td></tr></table></figure><p>下方安装llvm、clang时版本需要选定为11。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -y install bison \<br>build-essential \<br>cmake \<br>flex \<br>git \<br>libedit-dev \<br>llvm-11-dev \<br>libclang-11-dev \<br>python \<br>zlib1g-dev \<br>libelf-dev \<br>libfl-dev \<br>python3-distutils<br></code></pre></td></tr></table></figure><h2 id="源码下载">源码下载</h2><ol type="1"><li><p>代码下载方式一(推荐使用)</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/iovisor/bcc/releases/download/v0.25.0/bcc-src-with-submodule.tar.gz<br>tar -zxvf bcc-src-with-submodule.tar.gz<br></code></pre></td></tr></table></figure></p></li><li><p>代码下载方式二</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/iovisor/bcc.git<br>git checkout -b v0.25.0<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ol><h2 id="编译安装bcc">编译安装bcc</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -ex<br><span class="hljs-built_in">mkdir</span> bcc/build<br><span class="hljs-built_in">cd</span> bcc/build<br>cmake ..<br>make<br>sudo make install<br>cmake -DPYTHON_CMD=python3 .. <span class="hljs-comment"># build python3 binding</span><br><span class="hljs-built_in">pushd</span> src/python/<br>make<br>sudo make install<br><span class="hljs-built_in">popd</span><br></code></pre></td></tr></table></figure><h2 id="environment-variable-configuration">Environment variable configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=<span class="hljs-variable">$PATH</span>:/usr/share/bcc/tools&quot;</span> &gt;&gt; /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo visudo后追加/usr/share/bcc/tools到secure_path后面<br>Defaults        secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/usr/share/bcc/tools&quot;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="将python3设置为默认的python">将python3设置为默认的python</h2><p>直接执行这两个命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100<br>sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150<br></code></pre></td></tr></table></figure><p>上述命令执行后，python3已被设置为默认的python。</p><p>切换到Python2，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-alternatives --config python<br></code></pre></td></tr></table></figure><h2 id="get-started">Get started</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo execsnoop<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">trace-bpfcc -tKU -I <span class="hljs-string">&#x27;sound/pci/hda/hda_codec.h&#x27;</span> <span class="hljs-string">&#x27;r::snd_hda_codec_configure(struct hda_codec *codec) &quot;ret:%d&quot;, retval&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">trace-bpfcc <span class="hljs-string">&#x27;r::parse_user_pin_configs &quot;ret:%d&quot;, retval&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://github.com/iovisor/bcc/blob/master/INSTALL.md#ubuntu---source">https://github.com/iovisor/bcc/blob/master/INSTALL.md#ubuntu---source</a></li><li><a href="https://blog.csdn.net/qq_33344148/article/details/123255679">BCC在ubuntu18.04源码安装</a></li><li><a href="https://www.cnblogs.com/lfri/p/16277069.html">解决 sudo 执行命令时找不到命令问题</a></li><li><a href="https://blog.51cto.com/u_15351425/3727453">linux系统下将python3设置为默认的python</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bpftrace</title>
    <link href="/debug/bpf/bpftrace/"/>
    <url>/debug/bpf/bpftrace/</url>
    
    <content type="html"><![CDATA[<h1 id="bpftrace">bpftrace</h1><h2 id="source-install">source install</h2><p>git clone bpftrace:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/iovisor/bpftrace.git<br>git checkout -b v0.16.0<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><h2 id="depends">depends</h2><p>查看宿主机已安装llvm版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l | grep libllvm<br></code></pre></td></tr></table></figure><p>结果输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">ii  libllvm11:amd64                               1:11.0.1-2                                 amd64        Modular compiler and toolchain technologies, runtime library<br></code></pre></td></tr></table></figure><p>下方安装llvm、clang时版本需要选定为11。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install -y \<br>bison \<br>cmake \<br>flex \<br>g++ \<br>git \<br>libelf-dev \<br>zlib1g-dev \<br>libfl-dev \<br>systemtap-sdt-dev \<br>binutils-dev \<br>libcereal-dev \<br>llvm-11-dev \<br>llvm-11-runtime \<br>libclang-11-dev \<br>clang-11 \<br>libpcap-dev \<br>libgtest-dev \<br>libgmock-dev \<br>asciidoctor<br></code></pre></td></tr></table></figure><h2 id="cmake-build-and-install">cmake build and install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bpftrace<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>../build-libs.sh<br>cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release .. <span class="hljs-comment"># 此处关闭单元测试，是因为单元测试跑不过</span><br>make -j8<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="environment-variable-configuration">Environment variable configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=<span class="hljs-variable">$PATH</span>:/usr/local/share/bpftrace/tools&quot;</span> &gt;&gt; /etc/profile<br></code></pre></td></tr></table></figure><p>add /usr/local/share/bpftrace/tools to /etc/sudoers:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo visudo<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Defaults        secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/share/bpftrace/tools&quot;<br></code></pre></td></tr></table></figure><h2 id="get-started">Get started</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo bpftrace -l<br>sudo execsnoop.bt<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://github.com/iovisor/bpftrace.git">https://github.com/iovisor/bpftrace.git</a></li><li><a href="https://github.com/iovisor/bpftrace/blob/master/INSTALL.md">bpftrace Install</a></li><li><a href="http://1.117.71.82/os/bpf%E4%B9%8B%E5%B7%85-%E6%B4%9E%E6%82%89linux%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD/">BPF之巅--洞悉Linux系统和应用性能</a></li><li><a href="https://blog.csdn.net/qq_31220203/article/details/118686482">BPF之巅--洞悉Linux系统和应用性能 Brendan Gregg</a></li><li><a href="https://pan.baidu.com/disk/pdfview?path=%2F%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90%2FBPF.Performance.Tools.2019.12.pdf&amp;fsid=947754417850329&amp;size=8414043">BPF.Performance.Tools.2019.12.pdf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能之巅</title>
    <link href="/debug/bpf/%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85/"/>
    <url>/debug/bpf/%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85/</url>
    
    <content type="html"><![CDATA[<h1 id="性能之巅">性能之巅</h1><ul><li><a href="http://www.javashuo.com/article/p-gycyrpiy-me.html">性能之巅 洞悉系统、企业与云计算PDF（完整版）</a></li><li><a href="https://pan.baidu.com/s/17iUesk0w5DzdON6-Y06fYQ?pwd=abq8">性能之巅 洞悉系统、企业与云计算PDF（完整版）提取码: abq8</a></li><li><a href="https://blog.csdn.net/qq_31220203/article/details/120067331">性能之巅——洞悉系统、企业与云计算 Brendan Gregg</a></li><li><a href="http://download.eeworld.com.cn/detail/%E6%8A%9B%E7%A0%96%E5%BC%95%E7%8E%89/628714">BPF之巅 洞悉Linux系统和应用性能</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能调优</title>
    <link href="/debug/bpf/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <url>/debug/bpf/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<h1 id="性能调优">性能调优</h1><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247498209&amp;idx=1&amp;sn=80567d62967575953d0d33132841d907&amp;chksm=f96b8b15ce1c0203b09acee19f2570a011678987077c7a0c3905a6ba108cfeae21ee121ca9da&amp;token=526082791&amp;lang=zh_CN&amp;scene=21#wechat_redirect">Linux性能调优工具9张图-你肯定会用到</a></p></li><li><p><a href="https://www.cnblogs.com/alantu2018/p/8997149.html">Linux内核调试方法总结</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/n42ngcgBdbCdF927ncTa3Q">Linux 性能分析工具汇总</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uMPr0ZlRtLmIperu8hA0EQ">性能优化基础：深入理解Linux文件系统</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Cv_9-wxXQ9GrUMjQ606sbw">技术硬核 | Linux性能优化总结，赞！赞！赞！咱熬夜也要读完！</a></p></li><li><p><a href="https://linux.cn/article-9424-1.html">Linux跟踪器之选</a></p></li><li><p><a href="https://linux.cn/article-8038-1.html">Linux 中的 DTrace ：BPF 进入 4.9 内核</a></p></li><li><p><a href="https://linux.cn/article-9507-1.html">深入理解 BPF：一个阅读清单</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1698426">Linux超能力BPF技术介绍及学习分享（技术创作101训练营）</a></p></li><li><p><a href="https://www.toutiao.com/article/7077801491347833374"><font color=Red>Linux动态追踪技术概念介绍</font></a></p></li><li><p><a href="https://lzz5235.github.io/2013/11/22/ltrace-strace-ftrace.html"><font color=Red>调试工具ltrace strace ftrace的使用</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/NoVJlGQFh02NiuE3d355XQ">Linux 中 CPU 利用率是如何算出来的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/bxuKq1up9xs3VfZaPfbkxw">Linux 中 CPU 利用率是如何算出来的？</a></p></li><li><p><a href="http://arthurchiao.art/blog/linux-tracing-basis-zh/#412-%E5%8A%9F%E8%83%BD%E4%BA%8C%E8%B0%83%E7%94%A8%E6%A0%88%E5%B1%95%E5%BC%80stack-unwinding">Linux tracing/profiling 基础：符号表、调用栈、perf/bpftrace 示例等（2022）</a></p></li><li><p><a href="https://blog.csdn.net/wzx8731/article/details/106631071">gdb、strace、pmap、perf等跟踪调试工具使用介绍</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/_PYGtj-7my9uGyuRbbkD1g">改了一行代码，数组遍历耗时从10.3秒降到了0.5秒！</a></p></li></ul><h2 id="ltrace">ltrace</h2><ul><li><a href="https://www.cnblogs.com/machangwei-8/p/10388938.html">ltrace命令详解</a></li><li><a href="https://www.toutiao.com/article/6793545198694564355">Linux库函数调用工具—ltrace命令</a></li></ul><h2 id="strace">strace</h2><ul><li><a href="https://www.cnblogs.com/kongzhongqijing/articles/4913192.html">linux命令—— strace命令（跟踪进程中的系统调用）</a></li><li><a href="https://blog.csdn.net/a6864657/article/details/123915757">Linux之strace命令</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html">strace 跟踪进程中的系统调用</a></li><li><a href="https://www.toutiao.com/article/7090332571376337408">Linux strace 跟踪进程中的系统调用</a></li></ul><h2 id="ftrace">ftrace</h2><ul><li><p><a href="https://blog.csdn.net/u012489236/article/details/119427091">linux性能工具--ftrace基础篇</a></p></li><li><p><a href="https://carlyleliu.github.io/2021/Linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89ftrace/"><font color=Red>Linux内核调试（一）ftrace</font></a></p></li><li><p><a href="https://blog.csdn.net/Luckiers/article/details/124646205">ftrace命令调试内核详细总结（快速掌握附实例讲解）</a></p></li><li><p><a href="https://blog.csdn.net/longerzone/article/details/16884703">Linux内核调试工具 Ftrace 进阶使用手册</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/644133270"><font color=Red>通过Ftrace实现高效、精确的内核调试与分析</font></a></p></li><li><p><a href="https://blog.csdn.net/scarecrow_byr/article/details/102748967">使用ftrace跟踪函数</a></p></li><li><p><a href="https://www.toutiao.com/w/1737234292871172">实时获取linux内核函数的调用栈以及各个子函数的执行时间，linux ftrace是最适合的</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/33267453">ftrace：跟踪你的内核函数！</a></p></li><li><p><a href="https://linux.cn/article-13852-1.html"><font color=Red>使用 trace-cmd 追踪内核</font></a></p></li><li><p><a href="https://blog.csdn.net/Rong_Toa/article/details/116718182">Linux内核 eBPF基础：ftrace基础-ftrace_init初始化</a></p></li><li><p><a href="https://blog.csdn.net/u012489236/article/details/119519361">linux性能工具--ftrace使用</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">trace-cmd list -f snd_usb_audio<br>trace-cmd record -p function_graph -g usb_audio_probe<br>trace-cmd report<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="perf">perf</h2><ul><li><p><a href="https://blog.csdn.net/zhangpeterx/article/details/98505349">debian/ubuntu 安装和使用perf</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/2Hu-D0k9a42-j-IfRzXPxw">Linux perf：掀开性能分析的神秘面纱</a></p></li><li><p><a href="https://ruanyifeng.com/blog/2017/09/flame-graph.html"><font color=Red>L如何读懂火焰图？</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/530622057"><font color=Red>硬核干货！perf工具简介及火焰图制作与解读</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/54276509"><font color=Red>Linux Perf 性能分析工具及火焰图浅析</font></a></p></li><li><p><a href="https://kernel.0voice.com/forum.php?mod=viewthread&amp;tid=6072">Linux Perf 性能分析工具及火焰图浅析</a></p></li><li><p><a href="https://github.com/brendangregg/FlameGraph">https://github.com/brendangregg/FlameGraph</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/134721612"><font color=Red>用Perf寻找程序中的性能热点</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install linux-perf<br>git <span class="hljs-built_in">clone</span> https://github.com/brendangregg/FlameGraph.git<br><span class="hljs-built_in">cd</span> FlameGraph<br>sudo perf record -F 99 -p 512318 -g -- <span class="hljs-built_in">sleep</span> 30<br>sudo perf report -i perf.data<br>sudo perf script | ./stackcollapse-perf.pl | ./flamegraph.pl &gt; WXWork.exe.svg<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.toutiao.com/article/7154336826105266726/">一文看懂 Linux 性能分析｜perf 源码实现（超详细~）</a></p></li><li><p><a href="https://www.toutiao.com/article/7154278740749517347/">一文看懂 Linux 性能分析｜perf原理（超详细~）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/AubfEBTfwcyslSqWLYl6ag">Perfetto工具集之traced_perf</a></p></li></ul><h3 id="性能采集小工具">性能采集小工具</h3><p>获取自制性能采集小工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo wget -P /usr/local/bin https://raw.githubusercontent.com/realwujing/realwujing.github.io/main/debug/bpf/perf.sh<br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/perf.sh<br>sudo wget -P /etc/systemd/system https://raw.githubusercontent.com/realwujing/realwujing.github.io/main/debug/bpf/perf.service<br></code></pre></td></tr></table></figure><p>重新加载systemd配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>开机自动启动且立马启动性能采集服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> --now perf.service<br></code></pre></td></tr></table></figure><p>查看性能采集服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status perf.service<br></code></pre></td></tr></table></figure><p>查看性能采集服务日志:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo journalctl -fxeu perf.service<br></code></pre></td></tr></table></figure><p>关闭性能采集服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl stop perf.service<br></code></pre></td></tr></table></figure><p>禁止性能采集服务开机自动启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">disable</span> perf.service<br></code></pre></td></tr></table></figure><p>收集日志:</p><p>/var/log：系统日志</p><p>/var/log/iostat：实时报告系统的磁盘 I/O 统计信息</p><p>/var/log/pidstat：找到 IO 占用高的进程</p><p>/var/log/top：实时报告系统的进程资源占用</p><p>/var/log/perf：实时报告系统的性能热点</p><h3 id="perf实践">perf实践</h3><ul><li><a href="https://www.bbsmax.com/A/QW5YvYZ9dm/"><font color=Red>Linux性能优化实战学习笔记：第四十九讲</font></a></li><li><a href="https://pingcap.com/zh/blog/online-environment-analysis-system">线上环境 Linux 系统调用追踪丨TiDB 应用实践 perf trace traceloop</a></li></ul><h2 id="hcache">hcache</h2><ul><li><a href="https://blog.csdn.net/linxi7/article/details/109078516">Linux查看Buffer&amp;Cache被哪些进程占用</a></li><li><a href="https://github.com/silenceshell/hcache">https://github.com/silenceshell/hcache</a></li></ul><h2 id="ebpf">eBPF</h2><ul><li><p><a href="http://kerneltravel.net/blog/2021/ebpf_beginner/ebpf.pdf"><font color=Red>高效入门eBPF</font></a></p></li><li><p><a href="http://kerneltravel.net/blog/2020/ebpf_ljr_no1/">EBPF学习——EBPF简介、安装和简单示例</a></p></li><li><p><a href="https://blog.csdn.net/qq_33344148/article/details/123255679">BCC在ubuntu18.04源码安装</a></p></li><li><p><a href="https://github.com/iovisor/bcc" class="uri">https://github.com/iovisor/bcc</a></p></li><li><p><a href="https://github.com/realwujing/ebpf-learning/blob/main/BCC.md"><font color=Red>BCC安装教程</font></a></p></li><li><p><a href="https://github.com/DavadDi/bpf_study">bpf 学习仓库</a></p></li><li><p><a href="https://github.com/zoidbergwill/awesome-ebpf">https://github.com/zoidbergwill/awesome-ebpf</a></p></li><li><p><a href="https://github.com/iovisor/bpftrace/blob/master/docs/tutorial_one_liners_chinese.md"><font color=Red>bpftrace一行教程</font></a></p></li><li><p><a href="https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md"><font color=Red>bpftrace 参考指南</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_31220203/article/details/118686482"><font color=Red>BPF之巅洞悉Linux系统和应用性能 Brendan Gregg</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/98XAzJ-9SByM2RzhUcYsMQ">BCC小白写测试上下文切换延时程序</a></p></li><li><p><a href="https://www.toutiao.com/article/7168812402375787043/">eunomia-bpf项目重磅开源！eBPF 轻量级开发框架来了 | 龙蜥技术</a></p></li><li><p><a href="https://www.toutiao.com/article/7156057067848106530">中国工商银行基于eBPF技术的云原生可观测图谱探索与实践</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zx-zxoKZQqsaK2pU0fj7FQ">使用 ChatGPT ，通过自然语言编写 eBPF 程序和追踪 Linux 系统</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/iwpV4akZDIukDVFH-PJ7lA">eBPF程序注入到内核中的流程，现在就带你研究(上）</a></p></li></ul><h3 id="bpftrace">bpftrace</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bpftrace -e <span class="hljs-string">&#x27;tracepoint:signal:signal_generate &#123; printf(&quot;Process %d %s sent SIGNAL %d to process %d %s\n&quot;, pid, comm, args-&gt;sig, args-&gt;pid, args-&gt;comm); &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>您提供的命令是使用 bpftrace 工具来跟踪信号生成事件，并打印相关信息。让我解释一下这个命令的含义：</p><p>bpftrace：是一个强大的跟踪和探查工具，它使用BPF（Berkley Packet Filter）技术来提供对内核和用户空间的动态跟踪能力。</p><p>-e：这是 bpftrace 命令的选项，用于指定要执行的跟踪程序。</p><p>'tracepoint:signal:signal_generate { printf("Process %d %s sent SIGNAL %d to process %d %s", pid, comm, args-&gt;sig, args-&gt;pid, args-&gt;comm); }'：这是要执行的 bpftrace 跟踪程序。</p><p>跟踪程序的含义是：当信号生成事件（signal_generate）发生时，打印相关信息。具体来说，它打印了发送信号的进程的进程ID（pid）、进程名称（comm），以及接收信号的进程的进程ID（args-&gt;pid）和进程名称（args-&gt;comm）。</p><p>这个命令可以帮助您跟踪信号的生成情况，并提供有关发送和接收信号的进程信息。您可以根据需要修改打印的信息或添加其他的跟踪逻辑来满足您的需求。请注意，使用 bpftrace 跟踪程序需要在支持BPF的内核版本上运行，并具有足够的权限。</p><h2 id="pstack">pstack</h2><ul><li><a href="https://blog.csdn.net/jusu10/article/details/121745153">linux命令-- pstack命令(跟踪进程栈)</a></li><li><a href="https://www.cnblogs.com/chenxinshuo/p/11986858.html">Debug 利器：pstack &amp; strace</a></li></ul><h2 id="method-tracing">method tracing</h2><ul><li><a href="https://mp.weixin.qq.com/s/j-zgr50wCY5beppYpXGAyQ">ART虚拟机method tracing技术解析</a></li></ul><h2 id="性能优化">性能优化</h2><ul><li><p><a href="https://www.toutiao.com/article/7103456440978997763">从通用的协议栈层面来优化Redis性能的实践</a></p></li><li><p><a href="https://www.toutiao.com/article/7146843167709594147/">Nginx性能调优实战</a></p></li><li><p><a href="https://www.toutiao.com/article/7090814899458146855/">Linux性能问题分析流程与性能优化思路</a></p></li><li><p><a href="https://www.toutiao.com/article/7152791666980651531/">linux性能优化之网络篇</a></p></li><li><p><a href="https://www.toutiao.com/article/7152410220101583401/">linux性能优化之内存篇</a></p></li><li><p><a href="https://www.toutiao.com/article/7199661075120669216">网易二面：CPU狂飙900%，该怎么处理？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/H2P0-WcnZDzMCnLm0xcZ6A">如何排查网络丢包问题</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/JSx-l20fnmZd0symx5MNEw">Linux内核分析：页回收导致的cpu load瞬间飙高的问题分析与思考</a></p></li></ul><h2 id="grafana">Grafana</h2><p>安装环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install grafana prometheus prometheus-alertmanager<br></code></pre></td></tr></table></figure><p>由于主机9090端口被占用，故通过systemd启动prometheus时需要更改一下端口为9999：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/default/prometheus | <span class="hljs-built_in">head</span> -n5<br><span class="hljs-comment"># Set the command-line arguments to pass to the server.</span><br>ARGS=<span class="hljs-string">&quot;&quot;</span>--web.listen-address=<span class="hljs-string">&quot;127.0.0.1:9999&quot;</span><br><br><span class="hljs-comment"># Prometheus supports the following options:</span><br><span class="hljs-comment">#  --config.file=&quot;/etc/prometheus/prometheus.yml&quot;</span><br></code></pre></td></tr></table></figure><p>开启自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl <span class="hljs-built_in">enable</span> --now grafana-server.service prometheus.service prometheus-alertmanager.service<br></code></pre></td></tr></table></figure><p>登录grafana：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:3000 <span class="hljs-comment"># 初始账号密码都是admin</span><br></code></pre></td></tr></table></figure><p>Add your first data source:</p><p>选择Prometheus</p><p>Connection</p><p>Prometheus server URL *填入下方url:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:9999<br></code></pre></td></tr></table></figure><p>跳到最下方点击Save &amp; test即可。</p><p>Create your first dashboard：</p><p>Import dashboard填入下方链接(本机为deepin 20.9，不支持最新版本的Node Exporter Full，建议使用下方链接)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://grafana.com/api/dashboards/1860/revisions/22/download<br></code></pre></td></tr></table></figure><p>也可通过id导入，建议id:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">1860<br>10842<br>8919<br>15172<br>2747<br></code></pre></td></tr></table></figure><p>prometheus-alertmanager暂未配置。</p><ul><li><a href="https://grafana.com/docs/grafana/latest/setup-grafana/installation/debian/">Install Grafana on Debian or Ubuntu</a></li><li><a href="https://blog.csdn.net/weixin_42230348/article/details/108324882">分分钟搞定Grafana（图文详解）</a></li><li><a href="https://www.toutiao.com/article/6914917162675192324/">CentOS7搭建prometheus 监控Linux主机</a></li><li><a href="https://grafana.com/api/dashboards/1860/revisions/22/download">Node Exporter Full</a></li></ul><h2 id="其它">其它</h2><ul><li><a href="https://mp.weixin.qq.com/s/wPXcfzfFXygyAOatypVwxQ">CPU 空闲时在干嘛？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>bpf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/books/UEFI%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/README/"/>
    <url>/linux/kernel/books/UEFI%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/README/</url>
    
    <content type="html"><![CDATA[<h1 id="uefi编程实践.pdf">UEFI编程实践.pdf</h1><h2 id="split-cat">split cat</h2><h3 id="分割">分割</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">split</span> -d -b 10m UEFI编程实践.pdf UEFI编程实践.pdf_<br></code></pre></td></tr></table></figure><h3 id="合并">合并</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> UEFI编程实践.pdf_* &gt; UEFI编程实践.pdf<br></code></pre></td></tr></table></figure><h2 id="rar">rar</h2><h3 id="分卷压缩">分卷压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rar a -v10m UEFI编程实践.pdf.rar UEFI编程实践.pdf<br></code></pre></td></tr></table></figure><h3 id="合并解压">合并解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unrar x UEFI编程实践.pdf.part01.rar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>books</category>
      
      <category>UEFI编程实践</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/linux/vim/vim/"/>
    <url>/linux/vim/vim/</url>
    
    <content type="html"><![CDATA[<h1 id="vim">vim</h1><h2 id="vim-1">vim</h2><ul><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch01.zh-cn.html#_setting_a_default_text_editor">设置默认文本编辑器</a></p></li><li><p><a href="https://www.runoob.com/linux/linux-vim.html"><font color=Red>Linux vi/vim - 菜鸟教程</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_34306360/article/details/78720090"><font color=Red>vi 和vim 的区别</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_44441367/article/details/124810525"><font color=Red>VIM常用命令</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_54227557/article/details/122782139"><font color=Red>vim如何删除全文</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/MyV3ZC7A7vdWpQ1lt3d_dg">12 个超实用的 vim 编辑技巧</a></p></li></ul><h2 id="函数跳转">函数跳转</h2><ul><li><a href="https://blog.csdn.net/m0_37624499/article/details/90705658">ubuntu下vim安装ctags工具</a></li><li><a href="https://www.cnblogs.com/oddcat/articles/9678044.html">Linux——vim插件之ctags的安装与配置</a></li><li><a href="http://t.zoukankan.com/quant-lee-p-6659696.html">vim多窗口，常用命令集</a></li><li><a href="https://blog.csdn.net/ballack_linux/article/details/71036072"><font color=Red>vim之函数跳转功能</font></a></li><li><a href="https://blog.csdn.net/qwaszx523/article/details/77838855">vim -t 选项</a></li></ul><h2 id="折叠">折叠</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43971252/article/details/123218379">Vim折叠操作(折叠代码、折叠函数、方法、类等)</a></p></li><li><p><a href="http://t.zoukankan.com/happyamyhope-p-11906183.html">【Linux基础】vim如何显示文件名称</a></p></li><li><p><a href="https://www.toutiao.com/article/7167342849502446114/">vim小技巧：多行行首插入、删除、替换</a></p></li><li><p><a href="https://www.cnblogs.com/woshimrf/p/vim.html">vim 基本命令查找和替换</a></p></li><li><p><a href="https://waliblog.com/2019/05/06/vim-7.html"><font color=Red>vim 多行操作(7)</font></a></p></li><li><p><a href="https://blog.csdn.net/sinat_36053757/article/details/78183506">Linux——VIM学习选取多行（转）</a></p></li><li><p><a href="https://blog.csdn.net/xiajun07061225/article/details/8488210">【Linux】Vim编辑器-批量注释与反注释</a></p></li><li><p><a href="https://blog.csdn.net/lambert310/article/details/77659417">Linux下快速收起vim 并暂存修改</a></p></li><li><p><a href="https://blog.csdn.net/vastz/article/details/120064236">vim使用技巧-如何暂时返回终端</a></p></li><li><p><a href="https://xwsoul.com/posts/472">vim 技巧 – 查找的时候忽略大小写</a></p></li><li><p><a href="https://shagain.club/index.php/archives/382/">vim鼠标模式打开与关闭</a></p></li><li><p><a href="https://blog.51cto.com/u_15083238/2600714">彻底解决基于Debian发行系统的vim鼠标模式(可视模式)问题</a></p></li><li><p><a href="https://www.cnblogs.com/yukina/p/16401529.html">vim操作之多窗格,多文件的编辑和操作</a></p></li><li><p><a href="https://www.bilibili.com/read/cv16390641">在Vim中同时打开多个文件的相关操作技巧</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44531336/article/details/126187768">技巧045：以超级用户权限保存文件</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:w !sudo <span class="hljs-built_in">tee</span> % &gt; /dev/null<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.cnblogs.com/jackie-astro/p/13295584.html">vim中使用sudo保存文件</a></p></li></ul><h2 id="插件">插件</h2><ul><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/123593749"><font color=Red>vim配置</font></a></li><li><a href="https://vimawesome.com/"><font color=Red>https://vimawesome.com/</font></a></li><li><a href="https://blog.51cto.com/u_15905375/5919878">（转）Vim十大必备插件</a></li><li><a href="https://blog.csdn.net/eric_sunah/article/details/51028874">Ubuntu 下 vim+Ctags+Taglist+WinManager工具的安装</a></li><li><a href="https://blog.csdn.net/weihua1643/article/details/121264521">2021-11-11 vim 显示函数列表</a></li><li><a href="https://blog.csdn.net/qq_36754075/article/details/100030981">linux安装vim插件 NERDTree、taglist 、winmanager（类似source insight）</a></li><li><a href="https://github.com/VundleVim/Vundle.vim"><font color=Red>https://github.com/VundleVim/Vundle.vim</font></a></li><li><a href="https://github.com/preservim/nerdtree">https://github.com/preservim/nerdtree</a></li><li><a href="https://github.com/yegappan/taglist">https://github.com/yegappan/taglist</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install vim vim-gtk ctags cscope<br>git <span class="hljs-built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim<br>wget -O ~/.vimrc https://raw.githubusercontent.com/realwujing/realwujing.github.io/main/linux/vim/.vimrc<br>vim .<br>:PluginInstall<br></code></pre></td></tr></table></figure><h2 id="nano">nano</h2><ul><li><a href="https://www.wenjiangs.com/doc/8ij4xm4z">4.4 超简单文书编辑器： nano</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>power_button</title>
    <link href="/linux/kernel/drivers/acpi/power_button/"/>
    <url>/linux/kernel/drivers/acpi/power_button/</url>
    
    <content type="html"><![CDATA[<h1 id="power_button">power_button</h1><ul><li><a href="https://blog.csdn.net/jjjjjj0000/article/details/120187623">linux下获取按键响应事件</a></li><li><a href="https://www.cnblogs.com/yangwindsor/articles/3454955.html">linux下获取按键响应事件</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /sys/bus/acpi/drivers/button<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// drivers/acpi/button.c:398</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">acpi_button_notify</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> acpi_device *device, u32 event)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">acpi_button</span> *<span class="hljs-title">button</span> =</span> acpi_driver_data(device); <span class="hljs-comment">// 获取与按钮相关的数据结构</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">input_dev</span> *<span class="hljs-title">input</span>;</span> <span class="hljs-comment">// 定义输入设备结构体指针</span><br><span class="hljs-type">int</span> users; <span class="hljs-comment">// 定义用户数</span><br><br><span class="hljs-keyword">switch</span> (event) &#123;<br><span class="hljs-keyword">case</span> ACPI_FIXED_HARDWARE_EVENT:<br>event = ACPI_BUTTON_NOTIFY_STATUS; <span class="hljs-comment">// 重置事件为 ACPI_BUTTON_NOTIFY_STATUS</span><br><span class="hljs-comment">/* fall through */</span><br><span class="hljs-keyword">case</span> ACPI_BUTTON_NOTIFY_STATUS:<br>input = button-&gt;input; <span class="hljs-comment">// 获取按钮关联的输入设备结构体</span><br><br><span class="hljs-keyword">if</span> (button-&gt;type == ACPI_BUTTON_TYPE_LID) &#123; <span class="hljs-comment">// 如果按钮类型是盖子开合按钮</span><br>mutex_lock(&amp;button-&gt;input-&gt;mutex); <span class="hljs-comment">// 锁定输入设备的互斥锁</span><br>users = button-&gt;input-&gt;users; <span class="hljs-comment">// 获取输入设备的用户数</span><br>mutex_unlock(&amp;button-&gt;input-&gt;mutex); <span class="hljs-comment">// 解锁输入设备的互斥锁</span><br><br><span class="hljs-keyword">if</span> (users)<br>acpi_lid_update_state(device, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 如果有用户使用输入设备，更新盖子状态</span><br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 对于其他类型的按钮</span><br><span class="hljs-type">int</span> keycode;<br><br>acpi_pm_wakeup_event(&amp;device-&gt;dev); <span class="hljs-comment">// 唤醒事件</span><br><span class="hljs-keyword">if</span> (button-&gt;suspended)<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果按钮被挂起，则跳过后续操作</span><br><br>keycode = test_bit(KEY_SLEEP, input-&gt;keybit) ? KEY_SLEEP : KEY_POWER; <span class="hljs-comment">// 根据按钮类型确定按键代码</span><br>input_report_key(input, keycode, <span class="hljs-number">1</span>); <span class="hljs-comment">// 上报按键按下事件</span><br>input_sync(input); <span class="hljs-comment">// 同步输入事件</span><br>input_report_key(input, keycode, <span class="hljs-number">0</span>); <span class="hljs-comment">// 上报按键释放事件</span><br>input_sync(input); <span class="hljs-comment">// 同步输入事件</span><br><br>acpi_bus_generate_netlink_event(<br>device-&gt;pnp.device_class,<br>dev_name(&amp;device-&gt;dev),<br>event, ++button-&gt;pushed); <span class="hljs-comment">// 生成ACPI按钮事件的Netlink事件，递增按钮按下次数</span><br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>ACPI_DEBUG_PRINT((ACPI_DB_INFO,<br>  <span class="hljs-string">&quot;Unsupported event [0x%x]\n&quot;</span>, event)); <span class="hljs-comment">// 输出不支持的事件信息</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// drivers/acpi/button.c:110</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">acpi_driver</span> <span class="hljs-title">acpi_button_driver</span> =</span> &#123;<br>.name = <span class="hljs-string">&quot;button&quot;</span>, <span class="hljs-comment">// 驱动程序的名称为 &quot;button&quot;</span><br>.class = ACPI_BUTTON_CLASS, <span class="hljs-comment">// 驱动程序的类别为 ACPI_BUTTON_CLASS</span><br>.ids = button_device_ids, <span class="hljs-comment">// 驱动程序支持的设备标识列表</span><br>.ops = &#123;<br>.add = acpi_button_add, <span class="hljs-comment">// 添加设备时调用的回调函数</span><br>.remove = acpi_button_remove, <span class="hljs-comment">// 移除设备时调用的回调函数</span><br>.notify = acpi_button_notify, <span class="hljs-comment">// 处理设备通知事件的回调函数</span><br>&#125;,<br>.drv.pm = &amp;acpi_button_pm, <span class="hljs-comment">// 驱动程序的电源管理信息</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">drivers/acpi/bus.c:<span class="hljs-number">450</span><br>acpi_device_install_notify_handler<br></code></pre></td></tr></table></figure><hr /><h2 id="按下电源键后acpi固件生成电源按钮事件的具体流程是啥">按下电源键后，acpi固件生成电源按钮事件的具体流程是啥？</h2><p>按下电源键后，ACPI固件生成电源按钮事件的具体流程可以概括如下：</p><ol type="1"><li><p><strong>电源按钮按下</strong>：当用户按下电源按钮时，电源按钮硬件上的电路状态发生变化，通常是由于按钮的闭合。这个状态变化是电源按钮事件的触发。</p></li><li><p><strong>硬件检测</strong>：ACPI固件定期轮询或等待电源按钮硬件的状态变化。一旦电源按钮按下，电源按钮硬件的状态变化会被检测到。</p></li><li><p><strong>事件检测</strong>：ACPI固件检测到电源按钮事件的发生后，会识别事件的类型，即电源按钮事件。这一步通常涉及解析电源按钮事件的特定电路信号。</p></li><li><p><strong>生成ACPI事件</strong>：一旦事件被检测到并识别，ACPI固件将生成一个ACPI事件，包含以下信息：</p><ul><li>事件类型：通常标识为电源按钮事件。</li><li>事件参数：可能包括按钮按下的详细信息，如持续时间等。</li><li>其他相关信息：与事件相关的附加数据。</li></ul></li><li><p><strong>ACPI事件传递</strong>：生成的ACPI事件需要传递给操作系统内核，以便内核可以进一步处理事件。这个传递通常通过ACPI中断或其他ACPI事件传递机制完成。</p></li><li><p><strong>ACPI中断处理程序</strong>：ACPI中断处理程序位于操作系统内核中，负责处理ACPI事件。一旦事件传递给操作系统内核，ACPI中断处理程序会被触发。</p></li><li><p><strong>事件处理</strong>：ACPI中断处理程序根据事件类型执行相应的操作。对于电源按钮事件，可能的操作包括：</p><ul><li>执行关机操作。</li><li>执行休眠操作。</li><li>执行其他电源管理操作。</li></ul></li></ol><p>总之，ACPI固件生成电源按钮事件的流程涉及硬件状态变化的检测、事件识别、生成ACPI事件、传递到操作系统内核以及在内核中的ACPI中断处理程序中进行事件处理。这种处理方式允许操作系统根据电源按钮事件的类型和配置来自定义响应。</p><hr /><h2 id="第4步中的生成acpi事件在硬件层面如何观测呢">第4步中的生成ACPI事件在硬件层面如何观测呢？</h2><p>在硬件层面，ACPI固件观测电源按钮事件的方式通常涉及以下步骤：</p><ol type="1"><li><p><strong>硬件电路设计</strong>：在计算机系统的主板或电源管理控制器（例如，ACPI固件通常与主板上的BIOS或UEFI固件集成）上，存在一个与电源按钮相关的电路。这个电路通常包括与电源按钮物理连接的电线、电路元件和电子元器件。</p></li><li><p><strong>按钮状态检测</strong>：硬件电路会不断检测与电源按钮连接的电线上的电压或电位差。电源按钮通常是一个开关，用户按下按钮时会导致电位差发生变化，从而被电路检测到。</p></li><li><p><strong>状态变化检测器</strong>：电路中可能包括一个状态变化检测器或电平触发器，用于检测到电位差的变化。这个检测器可以识别电位差的升降沿（从高电位变为低电位或从低电位变为高电位）。</p></li><li><p><strong>电源按钮事件生成</strong>：一旦状态变化检测器检测到电位差的变化（电源按钮按下），它会向ACPI固件发送一个信号或触发一个事件。这个事件通常是一个中断信号或一个电源按钮事件信号，通知ACPI固件有关电源按钮按下的发生。</p></li><li><p><strong>ACPI固件响应</strong>：ACPI固件会响应收到的电源按钮事件信号，生成相应的ACPI事件。这个ACPI事件包含事件类型（通常是电源按钮事件）和相关的事件参数。</p></li></ol><p>总之，硬件观测电源按钮事件的关键是通过电路设计和电路元件来检测电位差的变化，然后将这个变化转化为一个事件信号，通知ACPI固件有关事件的发生。这种硬件观测电源按钮事件的方式允许ACPI固件及时响应用户按下电源按钮的操作。</p><hr /><h2 id="中断或事件通知这里再细化一下罗列出相关的函数">中断或事件通知这里再细化一下，罗列出相关的函数?</h2><p>中断或事件通知的具体实现会涉及到与硬件和操作系统相关的多个函数和组件。以下是涉及到中断或事件通知的一些相关函数和组件，尽管具体的函数和调用链可能会因Linux内核版本和系统配置而有所不同，但这些函数和组件通常是涉及到的：</p><ol type="1"><li><p><strong>中断处理程序</strong>：中断处理程序负责响应硬件产生的中断请求，其中可能包含与电源键事件相关的中断。这些函数通常在<code>arch/</code>和<code>drivers/</code>目录下实现，包括：</p><ul><li><code>irq_handler_t</code>：用于注册中断处理程序的函数指针类型。</li><li><code>request_irq</code>：用于请求和注册中断处理程序的函数。</li><li><code>handle_irq</code>：用于处理中断的通用中断处理程序。</li></ul></li><li><p><strong>ACPI中断处理程序</strong>：如果电源键事件与ACPI相关，ACPI中断处理程序可能会介入。这些函数通常位于<code>drivers/acpi</code>目录下，包括：</p><ul><li><code>acpi_ev_fixed_event_detect</code>：用于检测固定事件（如电源按钮事件）的ACPI中断处理程序。</li><li><code>acpi_gbl_FADT</code>：包含固定事件的ACPI固定描述符表。</li><li><code>acpi_ut_execute_HID</code>：用于执行与电源键事件相关的ACPI方法的函数。</li></ul></li><li><p><strong>事件通知</strong>：事件通知机制可以是中断、ACPI通知、信号等，通知操作系统有事件发生。涉及的函数和组件可能包括：</p><ul><li><code>acpi_ev_queue_notify_request</code>：用于将ACPI通知请求排队以触发事件。</li><li><code>acpi_os_queue_for_execution</code>：将ACPI通知请求排队以在操作系统中执行。</li><li>Netlink通知机制：用于在Linux中将事件通知传递到用户空间。</li></ul></li><li><p><strong>ACPI事件分发</strong>：ACPI事件分发通常涉及到以下函数：</p><ul><li><code>acpi_bus_generate_netlink_event</code>：用于生成ACPI事件的Netlink通知，以通知用户空间或其他内核组件有关事件的发生。</li></ul></li><li><p><strong>ACPI事件处理程序</strong>：ACPI事件处理程序通常位于<code>drivers/acpi</code>目录下，用于根据事件类型执行相应的操作。对于电源键事件，可能包括：</p><ul><li><code>acpi_button_notify</code>：用于处理电源按钮事件的ACPI事件处理程序。</li></ul></li></ol><p>请注意，具体的代码路径和函数调用链可能因Linux内核版本和系统配置而有所不同。要深入了解特定版本的Linux内核实现，您可以查看相应版本的内核源代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">grep acpi_ev_fixed_event_detect . -inr --color --include=&#123;*.c,*.h&#125;<br>./acpica/evsci.c:<span class="hljs-number">92</span>:    interrupt_handled |= acpi_ev_fixed_event_detect();<br>./acpica/evevent.c:<span class="hljs-number">157</span>: * FUNCTION:    acpi_ev_fixed_event_detect<br>./acpica/evevent.c:<span class="hljs-number">167</span>:u32 <span class="hljs-title function_">acpi_ev_fixed_event_detect</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>./acpica/acevents.h:34:u32 <span class="hljs-title function_">acpi_ev_fixed_event_detect</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">grep acpi_ev_install_sci_handler . -inr --color --include=&#123;*.h,*.c&#125;<br>./acpica/evsci.c:<span class="hljs-number">140</span>: * FUNCTION:    acpi_ev_install_sci_handler<br>./acpica/evsci.c:<span class="hljs-number">150</span>:u32 acpi_ev_install_sci_handler(<span class="hljs-type">void</span>)<br>./acpica/evevent.c:<span class="hljs-number">94</span>:  status = acpi_ev_install_sci_handler();<br>./acpica/acevents.h:<span class="hljs-number">242</span>:u32 <span class="hljs-title function_">acpi_ev_install_sci_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">grep acpi_ev_install_xrupt_handlers . -inr --color --include=&#123;*.h,*.c&#125;<br>./acpica/utxfinit.c:<span class="hljs-number">184</span>:                status = acpi_ev_install_xrupt_handlers();<br>./acpica/evevent.c:<span class="hljs-number">70</span>: * FUNCTION:    acpi_ev_install_xrupt_handlers<br>./acpica/evevent.c:<span class="hljs-number">80</span>:acpi_status <span class="hljs-title function_">acpi_ev_install_xrupt_handlers</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>./acpica/acevents.h:32:acpi_status <span class="hljs-title function_">acpi_ev_install_xrupt_handlers</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">grep acpi_enable_subsystem . -inr --color --include=&#123;*.h,*.c&#125;<br>./acpica/utxfinit.c:<span class="hljs-number">100</span>: * FUNCTION:    acpi_enable_subsystem<br>./acpica/utxfinit.c:<span class="hljs-number">110</span>:acpi_status ACPI_INIT_FUNCTION acpi_enable_subsystem(u32 flags)<br>./acpica/utxfinit.c:<span class="hljs-number">114</span>:        ACPI_FUNCTION_TRACE(acpi_enable_subsystem);<br>./acpica/utxfinit.c:<span class="hljs-number">194</span>:ACPI_EXPORT_SYMBOL_INIT(acpi_enable_subsystem)<br>./acpica/evxfregn.c:<span class="hljs-number">35</span>: * NOTE: This function should only be called after acpi_enable_subsystem has<br>./acpica/evxfregn.c:<span class="hljs-number">39</span>: * initialized (via acpi_enable_subsystem.)<br>./bus.c:<span class="hljs-number">1107</span>:   status = acpi_enable_subsystem(~ACPI_NO_ACPI_ENABLE);<br>./bus.c:<span class="hljs-number">1157</span>:   status = acpi_enable_subsystem(ACPI_NO_ACPI_ENABLE);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">uname -a<br>Linux ARM-PC <span class="hljs-number">5.10</span><span class="hljs-number">.0</span>-arm64-desktop #<span class="hljs-number">1</span> SMP Thu Sep <span class="hljs-number">21</span> <span class="hljs-number">17</span>:<span class="hljs-number">42</span>:<span class="hljs-number">23</span> CST <span class="hljs-number">2023</span> aarch64 GNU/Linux<br><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.165690</span>] CPU: <span class="hljs-number">0</span> PID: <span class="hljs-number">1731</span> Comm: kworker/<span class="hljs-number">0</span>:<span class="hljs-number">3</span> Tainted: G           OE     <span class="hljs-number">5.10</span><span class="hljs-number">.0</span>-arm64-desktop #<span class="hljs-number">1</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.174643</span>] Hardware name: Centerm C7F-G3/C7F-G3, BIOS <span class="hljs-number">1.05</span> <span class="hljs-number">20210816</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.180993</span>] Workqueue: kacpi_notify acpi_os_execute_deferred<br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.186642</span>] Call trace:<br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.189080</span>]  dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x1e8</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.192731</span>]  show_stack+<span class="hljs-number">0x18</span>/<span class="hljs-number">0x28</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.196036</span>]  dump_stack+<span class="hljs-number">0xf0</span>/<span class="hljs-number">0x128</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.199431</span>]  acpi_button_notify+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x114</span> [button]<br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.204297</span>]  acpi_device_notify+<span class="hljs-number">0x1c</span>/<span class="hljs-number">0x28</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.208296</span>]  acpi_ev_notify_dispatch+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x70</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.212728</span>]  acpi_os_execute_deferred+<span class="hljs-number">0x1c</span>/<span class="hljs-number">0x38</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.217248</span>]  process_one_work+<span class="hljs-number">0x1f4</span>/<span class="hljs-number">0x4f0</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.221247</span>]  worker_thread+<span class="hljs-number">0x140</span>/<span class="hljs-number">0x568</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.224985</span>]  kthread+<span class="hljs-number">0x110</span>/<span class="hljs-number">0x118</span><br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span> <span class="hljs-number">14</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span> ARM-PC kernel: [  <span class="hljs-number">180.228201</span>]  ret_from_fork+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x18</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">../../../scripts/faddr2line evmisc.o acpi_ev_notify_dispatch+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x70</span><br>acpi_ev_notify_dispatch+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x70</span>:<br>acpi_ev_notify_dispatch 于 /data3/home/yuanqiliang/code/arm-kernel<span class="hljs-number">-5.10</span>/kernel/drivers/acpi/acpica/evmisc.c:<span class="hljs-number">184</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">../../scripts/faddr2line bus.o acpi_device_notify+<span class="hljs-number">0x1c</span>/<span class="hljs-number">0x28</span><br>acpi_device_notify+<span class="hljs-number">0x1c</span>/<span class="hljs-number">0x28</span>:<br>acpi_device_notify 于 /data3/home/yuanqiliang/code/arm-kernel<span class="hljs-number">-5.10</span>/kernel/drivers/acpi/bus.c:<span class="hljs-number">425</span><br></code></pre></td></tr></table></figure><p>系统启动后到图形化登录界面，按下电源键后，内核函数acpi_button_notify有被执行到。</p><p>系统登录后按下电源键后，内核函数acpi_button_notify没有被执行到。</p><p>这两个中情况下按下电源键，对于acpi固件来讲，区别在哪？acpi固件在第二种情况下到底捕捉到了acpi电源键按下事件没有？</p><p>第二次到底是ACPI事件通知机制有问题还是acpi固件没检测到电源按钮被按下？</p><p>第一次acpi固件检测到了电源键按下事件并成功通过ACPI事件通知机制将电源键按下事件上报给了内核，进一步导致acpi_button_notify函数被调用。</p><hr /><h2 id="电源按下后acpi固件电源按钮事件未能正确处理或未能在处理完后恢复正常状态会不会导致再次按下电源键后acpi固件检测电源按下事件异常">电源按下后acpi固件电源按钮事件未能正确处理或未能在处理完后恢复正常状态，会不会导致再次按下电源键后acpi固件检测电源按下事件异常？</h2><p>电源按下后，如果ACPI固件未能正确处理电源按钮事件或未能在处理完事件后恢复正常状态，可能会导致再次按下电源键时出现异常情况。这种异常情况可能包括以下情况之一：</p><ol type="1"><li><p><strong>电源按钮事件丢失</strong>：如果ACPI固件在首次按下电源按钮事件后未能正确处理并清除该事件，可能会导致后续的电源按钮事件被丢失或无法被正确检测。</p></li><li><p><strong>重复电源按钮事件</strong>：ACPI固件可能会在一次电源按钮事件处理完成后意外地生成重复的事件。这可能会导致不必要的操作，例如多次关机或重启。</p></li><li><p><strong>系统状态不一致</strong>：如果ACPI固件在电源按钮事件处理期间未能正确管理系统状态，可能会导致系统状态变得不一致，从而导致后续操作的异常行为。</p></li></ol><p>要解决这些问题，通常需要进行以下操作：</p><ul><li><p><strong>更新ACPI固件</strong>：检查计算机制造商是否提供了更新的BIOS或UEFI固件，其中可能包含了解决电源按钮事件处理问题的修复。</p></li><li><p><strong>检查硬件</strong>：确保电源按钮硬件没有故障。有时候，硬件故障可能导致电源按钮事件无法正确检测或处理。</p></li><li><p><strong>操作系统和内核更新</strong>：确保操作系统和内核是最新的，以确保其与ACPI固件协同工作正常。</p></li><li><p><strong>ACPI设置</strong>：在BIOS或UEFI设置中，检查与电源按钮事件相关的配置选项，确保其设置正确。</p></li><li><p><strong>ACPI事件监测</strong>：使用ACPI事件监测工具（如 <code>acpidump</code> 或 <code>acpi_listen</code>）来监视ACPI事件，以检查它们是否按预期生成。</p></li><li><p><strong>系统状态恢复</strong>：如果ACPI固件未能正确管理系统状态，可能需要手动干预来恢复系统状态。</p></li></ul><p>如果您遇到了电源按钮事件处理的异常情况，建议首先尝试更新ACPI固件和操作系统，并检查硬件是否正常。如果问题仍然存在，可能需要更深入的系统诊断和调试，可能需要与计算机制造商或操作系统供应商联系以获取更多支持。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>acpi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qemu编译调试-v2</title>
    <link href="/linux/kernel/qemu/code/qemu%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95-v2.8.1/"/>
    <url>/linux/kernel/qemu/code/qemu%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95-v2.8.1/</url>
    
    <content type="html"><![CDATA[<h1 id="qemu编译调试-v2.8.1">qemu编译调试-v2.8.1</h1><h2 id="内核环境">内核环境</h2><p>镜像基于Ubuntu 16.04.7 LTS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/os-release<br><br>NAME=<span class="hljs-string">&quot;Ubuntu&quot;</span><br>VERSION=<span class="hljs-string">&quot;16.04.7 LTS (Xenial Xerus)&quot;</span><br>ID=ubuntu<br>ID_LIKE=debian<br>PRETTY_NAME=<span class="hljs-string">&quot;Ubuntu 16.04.7 LTS&quot;</span><br>VERSION_ID=<span class="hljs-string">&quot;16.04&quot;</span><br>HOME_URL=<span class="hljs-string">&quot;http://www.ubuntu.com/&quot;</span><br>SUPPORT_URL=<span class="hljs-string">&quot;http://help.ubuntu.com/&quot;</span><br>BUG_REPORT_URL=<span class="hljs-string">&quot;http://bugs.launchpad.net/ubuntu/&quot;</span><br>VERSION_CODENAME=xenial<br>UBUNTU_CODENAME=xenial<br></code></pre></td></tr></table></figure><p>将内核版本替换成linux主线v4.4:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:realwujing/linux.git<br>git checkout -b v4.4 v4.4<br>sudo apt build-dep linux<br><span class="hljs-built_in">cp</span> /boot/config-4.4.0-161-generic .config<br>make menuconfig<br><span class="hljs-comment"># load .config</span><br>make bindeb-pkg -j10 2&gt; make_error.log<br>sudo apt install ../*.deb<br></code></pre></td></tr></table></figure><h2 id="源码下载">源码下载</h2><p>本次源码解读基于git标签v2.8.1。</p><p>方式一</p><p>qemu源码位于github上，但是v2.8.1对应的git submodules仓库位于gitlab上，无法下载对应gitmodules源码，故手动替换git submodules仓库为github镜像仓库源，详情见提交：<a href="https://github.com/realwujing/qemu/commit/56fe7ca29adddd876b590e301e62d5b6e4b3a33e">gitmodules: update git submodule url to github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:realwujing/qemu.git<br>git checkout -b v2.8.1-comment v2.8.1-comment<br>git submodule init<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p>方式二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://download.qemu.org/qemu-2.8.1.tar.xz<br>tar -xvJf qemu-2.8.1.tar.xz<br></code></pre></td></tr></table></figure><h2 id="编译调试">编译调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>sudo apt install libglib2.0-dev libpixman-1-dev libfdt-dev<br><span class="hljs-built_in">export</span> CFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span><br><span class="hljs-built_in">export</span> LDFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span><br>../configure<br>make<br></code></pre></td></tr></table></figure><h2 id="开始调试">开始调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name qemu-system-x86_64<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb --args ./x86_64-softmmu/qemu-system-x86_64 \<br>--enable-kvm \<br>-m 2048 \<br>-kernel ~/code/linux/arch/x86/boot/bzImage \<br>-hda ~/code/qemu-img/bionic.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> \<br>-nographic<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) b cpus.c:<span class="hljs-number">1421</span><br>Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x237720</span>: file /home/wujing/code/qemu/cpus.c, line <span class="hljs-number">1425.</span><br>(gdb) c<br>The program is not being run.<br>(gdb) r<br>Starting program: /home/wujing/code/qemu/build/x86_64-softmmu/qemu-system-x86_64 --enable-kvm -m <span class="hljs-number">2048</span> -kernel /home/wujing/code/linux/arch/x86/boot/bzImage -hda /home/wujing/code/qemu-img/bionic.img -append root=/dev/sda\ rootfstype=ext4\ rw\ console=ttyS0\ nokaslr -nographic<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.<br>[New Thread <span class="hljs-number">0x7ffff59fa700</span> (LWP <span class="hljs-number">19433</span>)]<br>[New Thread <span class="hljs-number">0x7ffff51f9700</span> (LWP <span class="hljs-number">19434</span>)]<br>WARNING: Image format was not specified <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;/home/wujing/code/qemu-img/bionic.img&#x27;</span> and probing guessed raw.<br>         Automatically detecting the format is dangerous <span class="hljs-keyword">for</span> raw images, write operations on block <span class="hljs-number">0</span> will be restricted.<br>         Specify the <span class="hljs-string">&#x27;raw&#x27;</span> format explicitly to remove the restrictions.<br><br>Thread <span class="hljs-number">1</span> <span class="hljs-string">&quot;qemu-system-x86&quot;</span> hit Breakpoint <span class="hljs-number">1</span>, qemu_kvm_start_vcpu (cpu=<span class="hljs-number">0x5555565ab4b0</span>) at /home/wujing/code/qemu/cpus.c:<span class="hljs-number">1425</span><br><span class="hljs-number">1425</span>        cpu-&gt;thread = g_malloc0(<span class="hljs-keyword">sizeof</span>(QemuThread));<br>(gdb) bt<br>#<span class="hljs-number">0</span>  qemu_kvm_start_vcpu (cpu=<span class="hljs-number">0x5555565ab4b0</span>) at /home/wujing/code/qemu/cpus.c:<span class="hljs-number">1425</span><br>#<span class="hljs-number">1</span>  qemu_init_vcpu (cpu=cpu@entry=<span class="hljs-number">0x5555565ab4b0</span>) at /home/wujing/code/qemu/cpus.c:<span class="hljs-number">1470</span><br>#<span class="hljs-number">2</span>  <span class="hljs-number">0x0000555555834a4a</span> in <span class="hljs-title function_">x86_cpu_realizefn</span> <span class="hljs-params">(dev=<span class="hljs-number">0x5555565ab4b0</span>, errp=<span class="hljs-number">0x7fffffffdcf0</span>)</span> at /home/wujing/code/qemu/target-i386/cpu.c:3361<br>#3  0x00005555558dbb65 in <span class="hljs-title function_">device_set_realized</span> <span class="hljs-params">(obj=&lt;optimized out&gt;, value=&lt;optimized out&gt;, errp=<span class="hljs-number">0x7fffffffdde0</span>)</span> at /home/wujing/code/qemu/hw/core/qdev.c:918<br>#4  0x0000555555a01f2e in <span class="hljs-title function_">property_set_bool</span> <span class="hljs-params">(obj=<span class="hljs-number">0x5555565ab4b0</span>, v=&lt;optimized out&gt;, name=&lt;optimized out&gt;, opaque=<span class="hljs-number">0x55555659e2a0</span>, errp=<span class="hljs-number">0x7fffffffdde0</span>)</span><br>    at /home/wujing/code/qemu/qom/object.c:1854<br>#5  0x0000555555a05da1 in <span class="hljs-title function_">object_property_set_qobject</span> <span class="hljs-params">(obj=obj@entry=<span class="hljs-number">0x5555565ab4b0</span>, value=value@entry=<span class="hljs-number">0x5555565c68b0</span>, name=name@entry=<span class="hljs-number">0x555555b187ab</span> <span class="hljs-string">&quot;realized&quot;</span>, </span><br><span class="hljs-params">    errp=errp@entry=<span class="hljs-number">0x7fffffffdde0</span>)</span> at /home/wujing/code/qemu/qom/qom-qobject.c:27<br>#6  0x0000555555a03c40 in <span class="hljs-title function_">object_property_set_bool</span> <span class="hljs-params">(obj=<span class="hljs-number">0x5555565ab4b0</span>, value=&lt;optimized out&gt;, name=<span class="hljs-number">0x555555b187ab</span> <span class="hljs-string">&quot;realized&quot;</span>, errp=<span class="hljs-number">0x7fffffffdde0</span>)</span><br>    at /home/wujing/code/qemu/qom/object.c:1157<br>#7  0x00005555557f0d6e in <span class="hljs-title function_">pc_new_cpu</span> <span class="hljs-params">(typename=typename@entry=<span class="hljs-number">0x555556506200</span> <span class="hljs-string">&quot;qemu64-x86_64-cpu&quot;</span>, apic_id=<span class="hljs-number">0</span>, errp=<span class="hljs-number">0x5555564ee820</span> &lt;error_fatal&gt;)</span> at /home/wujing/code/qemu/hw/i386/pc.c:1099<br>#8  0x00005555557f407c in <span class="hljs-title function_">pc_cpus_init</span> <span class="hljs-params">(pcms=pcms@entry=<span class="hljs-number">0x555556581970</span>)</span> at /home/wujing/code/qemu/hw/i386/pc.c:1188<br>#9  0x00005555557f6de3 in <span class="hljs-title function_">pc_init1</span> <span class="hljs-params">(machine=<span class="hljs-number">0x555556581970</span>, pci_type=<span class="hljs-number">0x555555b54084</span> <span class="hljs-string">&quot;i440FX&quot;</span>, host_type=<span class="hljs-number">0x555555adcc01</span> <span class="hljs-string">&quot;i440FX-pcihost&quot;</span>)</span> at /home/wujing/code/qemu/hw/i386/pc_piix.c:149<br>#10 0x000055555588358d in <span class="hljs-title function_">main</span> <span class="hljs-params">(argc=<span class="hljs-number">11</span>, argv=<span class="hljs-number">0x7fffffffe2b8</span>, envp=<span class="hljs-number">0x7fffffffe318</span>)</span> at /home/wujing/code/qemu/vl.c:4548<br><span class="hljs-params">(gdb)</span> i b<br>Num     Type           Disp Enb Address            What<br>1       breakpoint     keep y   0x000055555578b720 in qemu_kvm_start_vcpu at /home/wujing/code/qemu/cpus.c:1425<br>        breakpoint already hit 1 time<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qemu编译调试</title>
    <link href="/linux/kernel/qemu/code/qemu%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/"/>
    <url>/linux/kernel/qemu/code/qemu%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="qemu编译调试">qemu编译调试</h1><h2 id="源码下载">源码下载</h2><p>本次源码解读基于git标签v7.2.4:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:realwujing/qemu.git<br>git checkout -b v7.2.4-comment v7.2.4<br></code></pre></td></tr></table></figure><h2 id="编译调试">编译调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>../configure<br>make<br></code></pre></td></tr></table></figure><h2 id="开始调试">开始调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb ./qemu-system-x86_64<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">(gdb) b main<br>Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x2d9700</span>: file ../softmmu/main.c, line <span class="hljs-number">47.</span><br>(gdb) b qemu_main_loop<br>Breakpoint <span class="hljs-number">2</span> at <span class="hljs-number">0x4a38f0</span>: file ../softmmu/runstate.c, line <span class="hljs-number">729.</span><br>(gdb) i b<br>Num     Type           Disp Enb Address            What<br><span class="hljs-number">1</span>       breakpoint     keep y   <span class="hljs-number">0x00000000002d9700</span> in main at ../softmmu/main.c:<span class="hljs-number">47</span><br><span class="hljs-number">2</span>       breakpoint     keep y   <span class="hljs-number">0x00000000004a38f0</span> in qemu_main_loop at ../softmmu/runstate.c:<span class="hljs-number">729</span><br>(gdb) r<br>Starting program: /home/wujing/code/qemu/build/qemu-system-x86_64 <br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.<br>[New Thread <span class="hljs-number">0x7ffff753c6c0</span> (LWP <span class="hljs-number">1027371</span>)]<br><br>Thread <span class="hljs-number">1</span> <span class="hljs-string">&quot;qemu-system-x86&quot;</span> hit Breakpoint <span class="hljs-number">1</span>, main (argc=<span class="hljs-number">1</span>, argv=<span class="hljs-number">0x7fffffffdc18</span>) at ../softmmu/main.c:<span class="hljs-number">47</span><br><span class="hljs-number">47</span>          qemu_init(argc, argv);<br>(gdb) c<br>Continuing.<br>[New Thread <span class="hljs-number">0x7ffff68236c0</span> (LWP <span class="hljs-number">1027464</span>)]<br>[New Thread <span class="hljs-number">0x7fffa79ff6c0</span> (LWP <span class="hljs-number">1027465</span>)]<br>VNC server running on ::<span class="hljs-number">1</span>:<span class="hljs-number">5900</span><br><br>Thread <span class="hljs-number">1</span> <span class="hljs-string">&quot;qemu-system-x86&quot;</span> hit Breakpoint <span class="hljs-number">2</span>, qemu_main_loop () at ../softmmu/runstate.c:<span class="hljs-number">729</span><br><span class="hljs-number">729</span>     &#123;<br></code></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span> </span><a href="//">softmmu/main.c</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;qemu/osdep.h&quot;</span>                                      <span class="hljs-comment">// QEMU 系统仿真器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;qemu-main.h&quot;</span>                                      <span class="hljs-comment">// QEMU 主程序</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sysemu/sysemu.h&quot;</span>                                   <span class="hljs-comment">// QEMU 系统仿真</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SDL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span>                                             <span class="hljs-comment">// 简单直接媒体层（Simple DirectMedia Layer，SDL）库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">qemu_default_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> status;<br><br>    status = qemu_main_loop();                                <span class="hljs-comment">// 执行 QEMU 主循环</span><br>    qemu_cleanup();                                            <span class="hljs-comment">// 清理 QEMU 资源</span><br><br>    <span class="hljs-keyword">return</span> status;<br>&#125;<br><br><span class="hljs-type">int</span> (*qemu_main)(<span class="hljs-type">void</span>) = qemu_default_main;                   <span class="hljs-comment">// 指向 QEMU 主函数的指针</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    qemu_init(argc, argv);                                     <span class="hljs-comment">// 初始化 QEMU</span><br>    <span class="hljs-keyword">return</span> qemu_main();                                       <span class="hljs-comment">// 执行 QEMU 主函数</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设备驱动</title>
    <link href="/linux/kernel/drivers/%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
    <url>/linux/kernel/drivers/%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="设备驱动">设备驱动</h1><ul><li><a href="https://blog.csdn.net/tiantianhaoxinqing__?type=blog"><font color=Red>设备驱动</font></a></li><li><a href="https://mp.weixin.qq.com/s/Aai7Ccwwp7SROEXpPnEfzA">一篇文章汇总嵌入式处理器相关的知识</a></li><li><a href="https://mp.weixin.qq.com/s/LVHWCiRL9ZpB26hD4tgKkA">【干货】一文搞懂芯粒（Chiplet）技术</a></li><li><a href="https://mp.weixin.qq.com/s/WR8_RuN03OfaYmRfqoT75w">【干货】一文掌握ARM基础及架构演变</a></li><li><a href="https://mp.weixin.qq.com/s/R_E6dEQTZhgps8NpAR6xhQ">Linux内核入门篇之驱动的前世今生</a></li></ul><h2 id="元器件">元器件</h2><ul><li><a href="https://mp.weixin.qq.com/s/QGPxHCYxgLi656D8wq2Dzw"><font color=Red>常用电子产品接口大全（很全，值得收藏）</font></a></li><li><a href="https://mp.weixin.qq.com/s/Z15ML8HlzWhbpA2Gy8UqHA">搞懂元器件，就搞懂了电路的一半</a></li></ul><h2 id="disk">disk</h2><ul><li><a href="https://mp.weixin.qq.com/s/JZ-TLajS1FdyGT-ktOGYlw">【干货】一文看懂机械硬盘和固态硬盘</a></li></ul><h2 id="cpu">CPU</h2><ul><li><a href="https://mp.weixin.qq.com/s/BLCaELMbmeA18Yq3AIk6jg">【干货】一文吃透CPU超线程技术</a></li><li><a href="https://mp.weixin.qq.com/s/e2pvevissBvWzqtmMvmL0w">【干货】一文搞懂CPU的工作原理</a></li><li><a href="https://mp.weixin.qq.com/s/MPNP4THuLtHxOGzGeEdbiQ">【干货】一文看懂物理CPU和逻辑CPU</a></li><li><a href="https://mp.weixin.qq.com/s/gZIl3eBY72HBg35Ew4PBIQ">【干货】CPU是怎么计算“1+2”的（上）</a></li><li><a href="https://mp.weixin.qq.com/s/zuR2OxE787f9duLqPsbLTQ">【干货】一文搞懂CPU流水线的工作原理</a></li></ul><h3 id="numa">NUMA</h3><ul><li><a href="https://mp.weixin.qq.com/s/awMSx3XMM6HbUlidC-UUCQ">NUMA架构：CPU和内存性能瓶颈的终结者！</a></li></ul><h3 id="设备io">设备I/O</h3><ul><li><a href="https://mp.weixin.qq.com/s/EnlB0htIKDnw3WLMYfFCIA">操作系统之I/O设备管理，你所不知道的I/O</a></li><li><a href="https://mp.weixin.qq.com/s/hUy65DgnMqW7IQU1yqtsBA">【Linux内核源码分析】regmap机制</a></li></ul><h2 id="iommu">iommu</h2><ul><li><a href="https://www.zhihu.com/question/325947168?utm_id=0">什么是IOMMU？</a></li><li><a href="https://www.toutiao.com/article/6815874213623104003">ARM SMMU学习笔记</a></li></ul><h4 id="io端口与io内存">io端口与io内存</h4><ul><li><a href="https://mp.weixin.qq.com/s/5Sw9drDOGf0Bs_N34ZFc0w"><font color=Red>Linux系统是如何管理IO端口和IO内存的？看这里</font></a></li><li><a href="https://mp.weixin.qq.com/s/DCQpGacYSQZlD_Nm15aRtA">详解io端口与io内存</a></li><li><a href="https://mp.weixin.qq.com/s/sSEPnLMfZx7-jLjJhauYiw">IO端口与IO内存</a></li></ul><p>ARM I/O内存（Memory-Mapped I/O）：</p><ul><li>定义： ARM I/O内存是将外设寄存器映射到CPU的地址空间中的特殊内存区域。通过读写这些内存区域的值，可以实现对外设的控制和通信。</li><li>用途： 用于与外设进行直接的内存读写交互，例如访问显示控制器、网络接口等。</li></ul><p>I/O端口：</p><ul><li>定义： 在一些架构中，I/O端口是一种通过专用指令（in和out指令）而非内存地址进行访问的I/O设备寄存器。与内存映射I/O不同，I/O端口提供了一种专门的寄存器访问机制。</li><li>用途： 用于与特定I/O设备进行通信，这些设备被分配到I/O地址空间的端口。</li></ul><p>IOMMU（I/O Memory Management Unit）：</p><ul><li>定义： IOMMU 是一种硬件设备，用于管理主内存和外设之间的内存映射，以提供更灵活的I/O设备访问。它可以防止I/O设备越界访问主内存，并提供内存隔离。</li><li>用途： 用于支持虚拟地址空间的设备，提供更好的内存管理和安全性，特别是在虚拟化环境中。</li></ul><p>在 ARM 架构中，ARM I/O内存通常是指使用内存映射I/O的方式，而I/O端口的概念在ARM中较为不常见。至于IOMMU，它在ARM平台上也有应用，用于提供更高级别的内存管理和隔离，以满足复杂的I/O设备需求。</p><h4 id="dma">dma</h4><ul><li><a href="https://mp.weixin.qq.com/s/UYTmqJy1ODRNiPzfEa-SOg">【干货】一文搞懂DMA（直接内存访问）技术</a></li><li><a href="https://mp.weixin.qq.com/s/8_8K1IO4TA54aeJ7FMKKfA">存储与IO系统（三）</a></li><li><a href="https://mp.weixin.qq.com/s/IjyIm4l24ouJ3kcu81rZpg">DMA问题定位小结</a></li><li><a href="https://www.toutiao.com/article/7314253739483955739/">搞嵌入式，不懂DMA？笑死人。。。</a></li></ul><h4 id="cache">Cache</h4><ul><li><a href="https://mp.weixin.qq.com/s/IhVFDN77nePJwQM9opsMQg">【干货】CPU如何与内存交互（上）：高速缓存</a></li><li><a href="https://mp.weixin.qq.com/s/t9sFzCLmnlnHHALzyiRk4Q">【干货】CPU如何与内存交互（下）：虚拟内存</a></li><li><a href="https://mp.weixin.qq.com/s/Gm6CyXW0XU2VN2neXoJ9og"><font color=Red>【干货】一文吃透CPU的缓存一致性</font></a></li><li><a href="https://mp.weixin.qq.com/s/9p4F2I-kCVEwr63XAFz9Iw">【干货】一文吃透CPU的三级缓存</a></li><li><a href="https://mp.weixin.qq.com/s/zVReUAUJihBLorNo3o0luQ"><font color=Red>深入理解CPU cache：组织、一致性（同步）、编程</font></a></li></ul><h2 id="fpga">FPGA</h2><ul><li><a href="https://mp.weixin.qq.com/s/ELlEjORUWe0UQk8IXNEBGg">FPGA：“万能芯片”的技术原理与应用优势</a></li></ul><h2 id="jtag">JTAG</h2><ul><li><a href="https://mp.weixin.qq.com/s/6qYFssdV9DUb-l7Py2X_5w">【DFX】万字长文带你搞懂JTAG的门门道道</a></li><li><a href="https://blog.csdn.net/tugouxp/article/details/119486580">调试系统及ARM CPU挂死和总线挂死的DS-5(JTAG)调试方法</a></li></ul><h2 id="总线">总线</h2><ul><li><a href="https://www.toutiao.com/article/7264843567909126715/">终于搞清了：SPI、UART、I2C通信的区别与应用！</a></li><li><a href="https://mp.weixin.qq.com/s/N36JOLDHGHDU8EHro4uS9w">终于搞清了：SPI、UART、I2C通信的区别与应用！</a></li><li><a href="https://mp.weixin.qq.com/s/rVWoSl-QbwdwoSB0cNTXbQ">英伟达三大AI法宝：CUDA、Nvlink、InfiniBand</a></li></ul><h3 id="pci">pci</h3><ul><li><p><a href="https://devicehunt.com/"><font color=Red>Find your device &amp; driver from a massive database of PCI and USB devices.</font></a></p></li><li><p><a href="https://www.cnblogs.com/LoyenWang/p/14165852.html">【原创】Linux PCI驱动框架分析（一）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/LHYOeuHeAdpa-vxmbyVvSQ">Linux内核PCIE</a></p></li><li><p><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/125464240"><font color=Red>PCIE总线初始化</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_39376747/article/details/112723350">PCI总线驱动代码梳理（一）--整体框架</a></p></li><li><p><a href="https://blog.csdn.net/qq_39376747/article/details/112723705">PCI总线驱动代码梳理（三）--PCI设备的枚举</a></p></li><li><p><a href="https://blog.csdn.net/sinat_42759524/article/details/103885497">PCIE设备的x1，x4，x8，x16有什么区别？</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/26172972">深入PCI与PCIe之一：硬件篇</a></p></li><li><p><a href="https://winddoing.github.io/post/7a90000d.html">pcieport 报错分析 -- 网络间隔断掉</a></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">pcieport 0000:00:01.1: AER: Multiple Corrected error received: 0000:00:00.0<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -t<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -tv<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -v<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -vv<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -vvv<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -n<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -nn<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lspci -nnn<br></code></pre></td></tr></table></figure></p></li></ul><h4 id="pci配置寄存器">PCI配置寄存器</h4><ul><li><a href="https://cloud.tencent.com/developer/article/2164590">Linux驱动之PCI子系统剖析</a></li></ul><p>所有的PCI设备都有至少256字节的地址空间，其中前64字节是标准化的，被称为PCI配置寄存器，剩下的字节是设备相关的 (取决于具体的厂商，需要查看datasheet得知)。</p><p>PCI配置寄存器如下图所示。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/9178ba2599d6c4bb6c1f0f9a232cf3f3.png" alt="" /><figcaption>PCI配置寄存器</figcaption></figure><ul><li>Vendor ID: 标识硬件厂商，需要向特定组织进行注册。</li><li>Device ID: 由硬件厂商来分配的设备ID，无需对ID进行注册。</li><li>Subsystem ID、Subsystem Vendor ID: 用来进一步标识设备。</li></ul><h3 id="usb">usb</h3><ul><li><a href="http://www.kroah.com/linux-usb/">USBView</a></li><li><a href="https://github.com/gregkh/usbview/">https://github.com/gregkh/usbview/</a></li><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/124515504"><font color=Red>USB基础知识1</font></a></li><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/124694130"><font color=Red>USB基础知识2</font></a></li><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/124756002"><font color=Red>USB基础知识3</font></a></li></ul><h4 id="usb子系统">USB子系统</h4><ul><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/124899503"><font color=Red>USB子系统初始化</font></a></li><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/124888836"><font color=Red>XHCI注册过程和设备接入识别</font></a></li></ul><h3 id="i2c">I2C</h3><ul><li><a href="https://www.cnblogs.com/ancongliang/p/7842648.html">I2C总线驱动框架详解</a></li><li><a href="https://www.toutiao.com/article/7270153829277205026/">I2C问题的七宗罪</a></li><li><a href="https://www.toutiao.com/article/7312733194422846006/">linux I2C驱动详解</a></li></ul><h3 id="spi">SPI</h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247492491&amp;idx=1&amp;sn=df405ac3e578820bd6daef2da82b14b1&amp;chksm=f96b917fce1c18695a0972e0027a553ff2394765de3d3bd543361f09bcb146901f5c1aacf937&amp;scene=21#wechat_redirect">Linux下SPI驱动详解（干货）</a></li><li><a href="https://blog.csdn.net/lzy13785490347/article/details/91373912">SPI协议</a></li></ul><h3 id="gpio">gpio</h3><ul><li><a href="https://www.kernel.org/doc/html/latest/firmware-guide/acpi/gpio-properties.html">https://www.kernel.org/doc/html/latest/firmware-guide/acpi/gpio-properties.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/80096604">硬件工程师必看：GPIO用法大汇总</a></li><li><a href="https://blog.csdn.net/bjbz_cxy/article/details/119925257">详细介绍GPIO、I2C、SPI通讯原理以及物理层原理</a></li></ul><h2 id="acpi">acpi</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/488898867">为什么ARM Server要用ACPI？ACPI vs DeviceTree</a></p></li><li><p><a href="https://maggie262.github.io/2020/02/06/acpi-summary/">acpi summary</a></p></li><li><p><a href="extension://idghocbbahafpfhjnfhpbfbmpegphmmp/assets/pdf/web/viewer.html?file=http%3A%2F%2Fwww.tup.tsinghua.edu.cn%2Fupload%2Fbooks%2Fyz%2F064076-01.pdf">ACPI：高级配置与电源接口</a></p></li><li><p><a href="https://blog.csdn.net/jiangwei0512/article/details/83317890">【UEFI实战】Linux下如何解析ACPI表</a></p></li><li><p><a href="https://www.kernel.org/doc/html/latest/firmware-guide/acpi/namespace.html">ACPI Device Tree - Representation of ACPI Namespace</a></p></li><li><p>dsst表导出：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install acpica-tools iasl<br>sudo acpidump -n DSDT -b<br>iasl -d dsdt.dat<br>vim dsdt.dsl<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="acpi-debug">acpi debug</h3><ul><li><p><a href="https://blog.csdn.net/dachai/article/details/91398387">ACPI AML debug and override ACPI tables using initrd</a></p></li><li><p><a href="https://www.kernel.org/doc/html/latest/admin-guide/acpi/initrd_table_override.html"><font color=Red>Upgrading ACPI tables via initrd</font></a></p><ul><li><p>通过initrd，可以直接修改acpi tables，方便调试，本次以修改dsdt表做demo展示:</p><p>内核编译选项<code>ACPI_TABLE_UPGRADE</code>默认是开启的，故无需重新编译内核。</p><p>安装<code>acpica-tools</code>、<code>iasl</code>导出dtst表：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install acpica-tools iasl<br><span class="hljs-built_in">mkdir</span> acpidump<br><span class="hljs-built_in">cd</span> acpidump<br>sudo acpidump -b<br>iasl -d *.dat <span class="hljs-comment"># 生成dsdt.dsl</span><br></code></pre></td></tr></table></figure></p><p>本次修改电池_HID值，将<code>FTEC0002</code>替换为<code>FTEC0005</code>：</p><p>修改前：</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// vim dsdt.dsl +307</span><br>  <span class="hljs-number">307</span>             Device (BAT1)<br>  <span class="hljs-number">308</span>             &#123;<br>  <span class="hljs-number">309</span>                 Name (_HID, <span class="hljs-string">&quot;FTEC0002&quot;</span>)  <span class="hljs-comment">// _HID: Hardware ID</span><br>  <span class="hljs-number">310</span>                 Name (_UID, Zero)  <span class="hljs-comment">// _UID: Unique ID</span><br>  <span class="hljs-number">311</span>                 Name (_CRS, Buffer (<span class="hljs-number">0x02</span>)  <span class="hljs-comment">// _CRS: Current Resource Settings</span><br>  <span class="hljs-number">312</span>                 &#123;<br>  <span class="hljs-number">313</span>                      <span class="hljs-number">0x79</span>, <span class="hljs-number">0x00</span>                                       <span class="hljs-comment">// y.</span><br>  <span class="hljs-number">314</span>                 &#125;)<br>  <span class="hljs-number">315</span>             &#125;<br></code></pre></td></tr></table></figure></p><p>修改后：</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// vim dsdt.dsl +307</span><br>  <span class="hljs-number">307</span>             Device (BAT1)<br>  <span class="hljs-number">308</span>             &#123;<br>  <span class="hljs-number">309</span>                 Name (_HID, <span class="hljs-string">&quot;FTEC0005&quot;</span>)  <span class="hljs-comment">// _HID: Hardware ID</span><br>  <span class="hljs-number">310</span>                 Name (_UID, Zero)  <span class="hljs-comment">// _UID: Unique ID</span><br>  <span class="hljs-number">311</span>                 Name (_CRS, Buffer (<span class="hljs-number">0x02</span>)  <span class="hljs-comment">// _CRS: Current Resource Settings</span><br>  <span class="hljs-number">312</span>                 &#123;<br>  <span class="hljs-number">313</span>                      <span class="hljs-number">0x79</span>, <span class="hljs-number">0x00</span>                                       <span class="hljs-comment">// y.</span><br>  <span class="hljs-number">314</span>                 &#125;)<br>  <span class="hljs-number">315</span>             &#125;<br></code></pre></td></tr></table></figure></p><p>增加dsdt.dsl中的OEM version从而达到覆盖原有的dsdt表:</p><p>修改前:</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// vim dsdt.dsl +21</span><br><span class="hljs-number">21</span> DefinitionBlock (<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;DSDT&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;ARMLTD&quot;</span>, <span class="hljs-string">&quot;PHYTIUM &quot;</span>, <span class="hljs-number">0x20180509</span>)<br></code></pre></td></tr></table></figure></p><p>修改后:</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// vim dsdt.dsl +21</span><br><span class="hljs-number">21</span> DefinitionBlock (<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;DSDT&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;ARMLTD&quot;</span>, <span class="hljs-string">&quot;PHYTIUM &quot;</span>, <span class="hljs-number">0x20180510</span>)<br></code></pre></td></tr></table></figure></p><p>编译修改后的dsdt.dsl，生成新的dsdt.aml:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iasl -sa dsdt.dsl<br></code></pre></td></tr></table></figure></p><p>制作调试用的initrd，将新生成的dsdt.aml拷贝到initrd顶部：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p kernel/firmware/acpi<br><span class="hljs-built_in">cp</span> dsdt.aml kernel/firmware/acpi<br>find kernel | cpio -H newc --create &gt; /boot/initrd_dsdt<br><span class="hljs-built_in">cat</span> /boot/initrd.img-4.19.0-arm64-desktop &gt;&gt; /boot/initrd_dsdt<br></code></pre></td></tr></table></figure></p><p>在grub中增加以下acpi.debug参数，从而启用与ACPI硬件相关的所有日志：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">acpi.debug_layer=0x2 acpi.debug_level=0xffffffff<br></code></pre></td></tr></table></figure></p><p>更新grub配置并重启系统：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">update-grub<br>reboot<br></code></pre></td></tr></table></figure></p><p>在grub引导界面修改initrd：</p><p>将<code>initrd  /initrd.img-4.19.0-arm64-desktop</code>这一行修改为<code>initrd  /boot/initrd_dsdt</code>即可。</p><p>按下<code>Ctrl +x</code> 或者<code>F10</code>引导系统启动，进入系统后可以再次导出dsdt表，可以看到<code>FTEC0002</code>已经替换成了<code>FTEC0005</code>。</p></li></ul></li><li><p><a href="https://www.cnblogs.com/kuwoyidai/archive/2010/08/18/1870471.html">解决ACPI问题的小窍门</a></p></li><li><p><a href="https://blog.csdn.net/wh8_2011/article/details/51523585">Linux acpi off关于Suspend to Disk 问题分析</a></p><ul><li><p>基于linux源码调试DSDT表</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iasl -tc DSDT.dsl <span class="hljs-comment"># 产生一个 DSDT. hex 文件</span><br><span class="hljs-built_in">cp</span> DSDT.hex <span class="hljs-variable">$SRC</span>/include/ <span class="hljs-comment"># 将这个文件复制到 Linux 源代码的 include 文件夹下</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">向 .config 文添加以下描述<br>CONFIG_STANDALONE = n # 将原 .config 的 y 改写为 n<br>CONFIG_ACPI_CUSTOM_DSDT = y<br>CONFIG_ACPI_CUSTOM_DSDT_FILE = ″DSDT.hex″<br></code></pre></td></tr></table></figure></p></li></ul></li></ul><h3 id="acpi表定位">acpi表定位</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/49500489">Linux启动时如何定位BIOS提供的ACPI表</a></li></ul><h3 id="acpi电源管理">ACPI电源管理</h3><ul><li><p><a href="https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/16_Waking_and_Sleeping/sleeping-states.html?highlight=power%20button">16. Waking and Sleeping » 16.1. Sleeping States</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/541710326">ACPI简介之全局状态：G0/G1/G2/G3/S0/S1/S2/S3/S4/S5</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45279063/article/details/115867110"><font color=Red>BIOS ACPI基础(总览）</font></a></p></li><li><p><a href="https://www.toutiao.com/article/6833104599457464839">「科普」电脑，待机/睡眠/休眠有啥区别？（ACPI SPM S0-S5）</a></p></li><li><p><a href="https://blog.csdn.net/jiangwei0512/article/details/51614383">【UEFI基础】ACPI基础</a></p></li><li><p><a href="https://blog.csdn.net/gaojy19881225/article/details/80027213">ACPI</a></p></li><li><p><a href="https://www.cnblogs.com/lvzh/p/16203890.html"><font color=Red>ACPI规范概览</font></a></p></li><li><p><a href="https://www.codenong.com/cs106476323/"><font color=Red>调试Linux系统挂起和休眠问题的最佳实践</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">initcall_debug no_console_suspend ignore_loglevel initcall_blacklist=phytium_spi_driver_init module_blacklist=spi_phytium_plat dyndbg=<span class="hljs-string">&#x27;module phytium_dc_drm +p; module snd_soc_phytium_i2s +p; module snd_soc_pmdk_es8388 +p; module snd_soc_pmdk_es8336 +p; module snd_soc_pmdk_dp +p&#x27;</span><br></code></pre></td></tr></table></figure></p></li></ul><h4 id="pm-debug">pm-debug</h4><ul><li><a href="https://awokezhou.github.io/2019/12/05/pm-debugging/">pm-debugging</a></li><li><a href="https://www.cnblogs.com/hellokitty2/p/11073937.html">调试休眠和挂起</a></li><li><a href="https://www.kernel.org/doc/html/latest/power/basic-pm-debugging.html">Debugging hibernation and suspend</a></li></ul><h4 id="pm-graph">pm-graph</h4><ul><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/122603089"><font color=Red>UOS系统在龙芯平台使用pm-graph</font></a></li></ul><h4 id="电源按钮">电源按钮</h4><ul><li><p><a href="https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/04_ACPI_Hardware_Specification/ACPI_Hardware_Specification.html">ACPI_Hardware_Specification</a></p></li><li><p><a href="https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/04_ACPI_Hardware_Specification/ACPI_Hardware_Specification.html#control-method-power-button">ACPI_Hardware_Specification.html#control-method-power-button</a></p></li><li><p><a href="https://blog.csdn.net/qq_37342551/article/details/79490662">电源按钮</a></p></li><li><p><a href="https://blog.csdn.net/qq_21186033/article/details/116977816">ACPI相关（9）- Generic Button Device</a></p></li></ul><h3 id="acpi事件">acpi事件</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/412580819">ACPI事件模型</a></li></ul><h4 id="acpid">acpid</h4><ul><li><a href="https://blog.csdn.net/weixin_32075603/article/details/116883913">linux中acpid管理,acpid 服务介绍</a></li></ul><h4 id="logind">logind</h4><ul><li><a href="https://cloud.tencent.com/developer/article/2020314">笔记本安装Linux按下关机按钮、合上盖子等操作阻止电脑休眠</a></li></ul><h2 id="设备树">设备树</h2><ul><li><a href="https://mp.weixin.qq.com/s/pmJ45JsY_-R8PK2ip7uCng">手把手教linux驱动11-linux设备驱动统一模型</a></li><li><a href="https://mp.weixin.qq.com/s/v_HWfKtqAdNkhvymZ_UrMA">重新理解一波设备驱动 | Linux 驱动</a></li><li><a href="https://mp.weixin.qq.com/s/BI23d71SJkYPHnzQbFyvpQ">整理了一份Linux设备树基础知识，建议收藏！</a></li><li><a href="https://mp.weixin.qq.com/s/6xjgqwDSuNc7TELeI_2GWA">万字长文教你设备树语法 | 设备树实例解析</a></li><li><a href="https://mp.weixin.qq.com/s/WET4m1Nd2vpvojKjgmRkbw">linux设备模型之kset/kobj/ktype分析</a></li><li><a href="https://mp.weixin.qq.com/s/Cy90ADUkWobu8YQH3dx4Nw">Linux设备树的传递以及kernel中对设备树的解析</a></li><li><a href="https://mp.weixin.qq.com/s/6SrEu4RBxb1Av5qu_eNo5Q">Linux设备模型之class</a></li><li><a href="https://blog.csdn.net/qq_40537232/article/details/115507062">Linux 设备树的加载与匹配</a></li><li><a href="https://blog.csdn.net/cha1290878789/article/details/121559526">Linux驱动——设备树</a></li><li><a href="https://blog.csdn.net/tiantianhaoxinqing__/article/details/124843344?spm=1001.2014.3001.5502"><font color=Red>Linux设备驱动和设备匹配过程</font></a></li></ul><h3 id="设备树导出">设备树导出</h3><p>安装DTC工具:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install device-tree-compiler<br></code></pre></td></tr></table></figure><p>在运行的linux系统中获取设备树:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dtc -I fs -O dts /sys/firmware/devicetree/base &gt; hw.dts<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/dakewei/p/14453373.html">如何在运行的linux系统中获取设备树？</a></li></ul><h2 id="udev">udev</h2><ul><li><a href="https://cloud.tencent.com/developer/article/2128481"><font color=Red>udev高效、动态地管理 Linux 设备文件</font></a></li><li><a href="https://www.cnblogs.com/hellokitty2/p/9521340.html">udev学习笔记汇总</a></li></ul><p>通过<code>udev monitor</code>捕获uevent包含的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">udevadm monitor --kernel --property --udev<br></code></pre></td></tr></table></figure><p>也可采用简写命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">udevadm monitor -kpu<br></code></pre></td></tr></table></figure><p>也可直接采用<code>udev mointor -p</code>命令查看信息，推荐使用上方两个命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">udevadm mointor -p<br></code></pre></td></tr></table></figure><p>借助udev中的<code>udevadm info</code>工具查找规则文件能利用的内核信息和sysfs属性信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">udevadm info -a -p /sys/devices/virtual/misc/globalfifo<br></code></pre></td></tr></table></figure><p>如果/dev/下面的节点已被创建，但是不知道它对应的/sys具体路径，可以使用<code>udevadm info -a -p $(udevadm info -q path -n /dev/&lt;节点名&gt;)</code>命令反向分析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">udevadm info -a -p $(udevadm info -q path -n /dev/globalfifo)<br></code></pre></td></tr></table></figure><h2 id="input">input</h2><ul><li><a href="https://blog.csdn.net/a1105778208/article/details/132092743">Linux 驱动实例 (输入子系统 按键中断)</a></li></ul><h3 id="evtest">evtest</h3><ul><li><a href="https://blog.csdn.net/phmatthaus/article/details/127748541">Linux下查看输入设备、获取输入事件的详细方法</a></li><li><a href="https://zhuanlan.zhihu.com/p/423502840">linux下的keycode与keysym</a></li></ul><h2 id="中断">中断</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/s66fFzCLHdcWA0Vksxgg6A">AArch64 TrustZone</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/AZFypzMVxD4H9pcpEbV7eg">Arm通用中断控制器GICv3和GICv4</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/360548214"><font color=Red>一文讲透计算机的“中断”</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/izTe-FATT76g9HNk6c5r2Q"><font color=Red>嵌入式基础知识-中断处理过程</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/dEH0qZfSyqmcdiiREq7gdQ"><font color=Red>从软硬件交互的角度去看中断的一生</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/407100254">PCIe中断机制(4): MSI和MSI-X</a></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs text">MSI（Message Signaled Interrupts）和MSI-X（Message Signaled Interrupts eXtended）是用于替代传统的PCI中断线机制的中断分配和传递机制。它们具有一些优势，如减少中断冲突、提高系统性能和可扩展性。<br><br>以下是MSI和MSI-X中断机制的主要特点：<br><br>MSI（Message Signaled Interrupts）：<br><br>MSI允许设备发送消息来请求中断，而不是使用共享的中断线。<br>每个设备都有自己的MSI寄存器，可以用来发送中断消息给CPU。<br>中断消息通常包括中断向量和标识特定设备的信息。<br>MSI机制减少了中断冲突，因为每个设备都有自己的中断向量，不再需要共享中断线。<br>MSI支持的中断数量通常受硬件的限制。<br><br>MSI-X（Message Signaled Interrupts eXtended）：<br><br>MSI-X是MSI的扩展，它提供更多的中断向量，更灵活的配置和更好的性能。<br>MSI-X支持的中断向量数目通常比MSI多，这意味着更多的设备可以同时拥有自己的中断。<br>MSI-X还提供了更灵活的配置选项，允许设备在多个中断向量之间进行映射，从而更好地支持虚拟化和多处理器系统。<br><br>使用场景：<br><br>MSI和MSI-X通常用于高性能计算和服务器领域，以减少中断冲突并提高系统性能。<br>它们也对虚拟化技术非常有帮助，因为它们可以更好地支持虚拟机之间的中断隔离和映射。<br>总之，MSI和MSI-X是一种现代化的中断机制，它们提供了更好的性能、可扩展性和虚拟化支持，特别适用于高性能计算和服务器环境。它们有助于减少中断冲突，提高系统效率。<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="open-release">open release</h2><ul><li><p><a href="https://blog.csdn.net/tugouxp/article/details/118807613">Linux字符设备驱动程序是否可以共享同一个主设备号？</a></p></li><li><p><a href="https://www.cnblogs.com/wanpengcoder/p/11759693.html">Linux设备驱动程序 之 open和release</a></p></li><li><p><a href="https://blog.csdn.net/tang_jin_chan/article/details/16993417">字符设备之open()与release()函数</a></p></li><li><p><a href="https://blog.csdn.net/u012142460/article/details/78932165">详解应用层open函数如何调用到底层驱动中xxx_open函数</a></p></li><li><p><a href="https://blog.csdn.net/qq_41882586/article/details/127012495">Linux驱动：应用程序open如何调用到驱动程序的open函数</a></p></li><li><p><a href="https://blog.csdn.net/m0_46535940/article/details/124585580">linux设备驱动模型一字符设备open系统调用流程</a></p></li><li><p><a href="https://blog.csdn.net/junguo/article/details/125156101">2. 关于文件（第三部分）</a></p></li></ul><h2 id="rk3588s">RK3588S</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install -y repo git python<br><span class="hljs-built_in">mkdir</span> rk3588_sdk<br><span class="hljs-built_in">cd</span> rk3588_sdk<br>repo init --no-clone-bundle --repo-url https://gitlab.com/firefly-linux/git-repo.git -u https://gitlab.com/firefly-linux/manifests.git -b master -m rk3588_linux_release.xml<br>.repo/repo/repo <span class="hljs-built_in">sync</span> -c --no-tags<br>.repo/repo/repo start firefly --all<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b rk3588_v1.0.6e 29f0634<br>git checkout rk3588_v1.0.6e<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">readlink</span> -f .repo/manifest.xml<br>/home/wujing/code/rk3588_sdk/.repo/manifests/rk3588/rk3588_linux_release_20230301_v1.0.6e.xml<br></code></pre></td></tr></table></figure><p>注释掉kernel/arch/arm64/configs/firefly-linux.config 194行CONFIG_SPI_WK2XXX=y</p><ul><li><a href="https://www.t-firefly.com/doc/download/164.html">ROC-RK3588S-PC资料下载</a></li><li><a href="https://wiki.t-firefly.com/zh_CN/ROC-RK3588S-PC/index.html">Welcome to ROC-RK3588S-PC Manual</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://mp.weixin.qq.com/s/5qYO5RjCDUcxo4tR3_f_ow">Camera | 2.MIPI、CSI基础</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>显示功能学习comments</title>
    <link href="/linux/kernel/drivers/gpu/%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD%E5%AD%A6%E4%B9%A0comments/"/>
    <url>/linux/kernel/drivers/gpu/%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD%E5%AD%A6%E4%B9%A0comments/</url>
    
    <content type="html"><![CDATA[<h1 id="显示功能学习comments">显示功能学习comments</h1><h2 id="一显示过程">一、显示过程</h2><h3 id="一开机过程中的显示变换">（一）开机过程中的显示变换</h3><h4 id="固件logo到grub菜单">1、固件logo到grub菜单</h4><p>这个时候由固件UEFI提供的GOP驱动来支持显示，GOP驱动是由显卡厂商提供给固件厂商的，GOP驱动比较简单， 通常只有有限的分辨率，有限的像素深度。只是为了设置固件和显示grub菜单。</p><h4 id="grub菜单被选择之后到出现内核console日志">2、grub菜单被选择之后到出现内核console日志</h4><p>这个时候显示由内核efifb提供，efifib创建了/dev/fb0节点，但是并没有改变显示模式，只是沿用了固件GOP提供的Framebuffer。 efifb只是所有显卡的linux通用显卡驱动，等到后续显卡厂商编写的显卡驱动被加载后就调用remove_conflicting_framebuffers卸载掉之前加载的驱动。但是如果后续没有厂商显卡驱动加载的话，efifb会一直用，Xorg也会使用FBDEV扩展+/dev/fb0节点 去点亮桌面。一般来说，这时候Xorg只有一个分辨率。</p><h4 id="uos-logo到uos桌面登陆界面">3、UOS logo到UOS桌面登陆界面</h4><p>这个时候由厂商显卡驱动提供显示，如果没有厂商显卡驱动，则由内核efifb提供。主要是由plymouth调用drm接口去显示UOS logo。</p><h4 id="uos桌面登陆界面输入密码后">4、UOS桌面登陆界面输入密码后</h4><p>这个时候显示由 Xorg 掌控，但是同时也受startdde配置文件影响。如果是第一次进入桌面，Xorg的默认分辨率是EDID提供的，一般EDID会将最大分辨率（原生分辨率）置为最佳分辨率并被Xorg用作默认分辨率。 部分linux显卡驱动，特别是虚拟显卡驱动，是无法获取显示器EDID信息的，会使用 drm_set_preferred_mode 设置一个最佳分辨率。 如果通过UOS控制中心重新设置过分辨率，那么startdde会将新分辨率保存为配置文件 ~/.config/deepin/startdde/display_v5.json。后续再次进入桌面，startdde会自动还原分辨率为上一次保存的分辨率。</p><h3 id="二应用程序的3d图形渲染过程">（二）应用程序的3D图形渲染过程</h3><p>【这里描述的就是DRM框架，通常说的显卡驱动符合DRM框架，就是实现了这些功能。国内适配的显卡，有的做的不那么规范，有在umd里直接做ioctl的相当于绕过了drm】</p><h4 id="应用程序到mesa-3d">1、 应用程序到Mesa 3D</h4><ul><li>应用程序调用图形API库（如OpenGL）进行3D渲染。</li><li>Mesa 3D库提供了OpenGL的实现，充当中间件，将这些命令转化为GPU特定的命令。</li></ul><h4 id="mesa-3d到libdrm">2、 Mesa 3D到libdrm</h4><ul><li>Mesa 3D库通过使用libdrm库中的接口与DRM子系统建立联系。如打开和关闭DRM设备文件（drmOpen、drmClose）、获取有关GPU设备的信息（drmModeGetResources）、帧缓冲管理（drmModeAddFB）、页面翻转（drmModePageFlip）、内存映射（drmModeMapDumb）等。</li></ul><h4 id="libdrm到drm内核模块">3、 libdrm到DRM内核模块</h4><ul><li>libdrm通过调用ioctl（Input/Output Control）函数，并传递相应的命令和参数，向DRM发送请求。</li></ul><h4 id="drm到显示器和显示设备">4、 DRM到显示器和显示设备</h4><ul><li>DRM子系统将执行的GPU命令发送到GPU Driver，GPU Driver解析命令并发送给GPU硬件。GEM会分配一部分显存用于存储渲染所需的图像数据，GPU会从显存中读取数据进行渲染，然后，GPU Driver会将渲染结果从显存复制到Framebuffer中。</li><li>应用程序与GPU Driver通信，请求访问渲染结果。应用程序发送绘制窗口请求到X Server/ Wayland Compositor，X Server/ Wayland Compositor使用ioctl发送请求到KMS以配置显示输出。</li><li>KMS负责管理显示模式、分辨率等，确保显示器能正确显示图像，通过CRTC扫描framebuffer内容并编码好发送到显示器。</li></ul><h2 id="二涉及到的组件介绍">二、涉及到的组件介绍</h2><h3 id="一用户空间">（一）用户空间</h3><h4 id="窗口系统">1、窗口系统</h4><p>如X Window System、Wayland。负责管理应用程序的窗口、处理用户输入事件、执行窗口管理任务（如最大化、最小化、移动窗口等）以及将应用程序的图形内容合成为整个屏幕上的用户界面。</p><h4 id="图形api库">2、图形API库</h4><p>如OpenGL。提供了一组函数和接口，允许应用程序发出图形渲染命令和创建图形对象。</p><h4 id="mesa3d">3、Mesa3D</h4><p>开源的3D图形库，实现了OpenGL标准，提供了libGL.so ，允许应用程序通过OpenGL API与图形硬件进行通信，从而实现图形渲染和3D图形的显示。</p><h4 id="libdrm">4、libdrm</h4><p>对底层接⼝进⾏封装，向上层提供通⽤的API接⼝，主要是对各种IOCTL接⼝进⾏封装。提供了用户空间应用程序与DRM子系统通信的接口，包括打开DRM设备、查询GPU信息、创建DRM缓冲等。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/libdrm.png" alt="" /><figcaption>libdrm</figcaption></figure><p>libdrm.so是通⽤DRM⽀持的IOCTL操作；libdrm_xxxx.so是针对不同的硬件提供的特有IOCTL操作，实现硬件特有的功能。</p><p>一些函数：</p><ul><li><p>drmModeGetResources：用于获取DRM设备上的资源信息，如连接的显示器、可用的CRTC和连接器等。</p></li><li><p>drmModeGetCRTC：获取CRTC的详细信息（如ID）。</p></li><li><p>drmModeGetConnector：获取显示器连接器的详细信息。</p></li><li><p>drmModeGetEncoder：获取编码器的详细信息。</p></li><li><p>drmModeAddFB：将Buffer Object绑定到一个fb。</p></li><li><p>Create_DUMB：【dumb buffer - 通常只用在kms中，dumb表示哑的、呆的，这里的意思是只在kms中使用，不保证在其它场景能用，这里理解为专用类似；dumb buffer和kms配合使用，创建硬件无关的用户空间程序，这里可理解为在用户空间kms使用dumb buffer这种方式，可以忽略底层硬件的差异】</p></li><li><p>drmModeSetPlane：设置显卡的一个平面（plane）的输出。</p></li><li><p>drmModeSetXX：</p></li><li><p>drmModePageFlip：当Mesa 3D准备好显示新的图像时，可以使用此函数请求DRM系统在下一个垂直同步时切换显示，避免撕裂等问题。</p></li><li><p>drmModeMapDumb/drmModeUnmapDumb：允许Mesa 3D映射和解除映射帧缓冲对象中的内存，以在内存中访问图像数据。</p></li></ul><h3 id="二内核空间">（二）内核空间</h3><h4 id="framebuffer帧缓冲对象plane负责存储和组织渲染结果">1、Framebuffer：帧缓冲对象、Plane：负责存储和组织渲染结果。</h4><ul><li><p>Framebuffer：存储整个屏幕的图像，包括所有可见窗口、图形和文本等内容。 GPU将图形渲染的结果存储在帧缓冲对象中。</p></li><li><p>Plane：允许将图像以不同的层叠方式组合在一起，每个Plane通常表示屏幕上的一个图层，例如视频、鼠标指针。</p></li></ul><h4 id="kms主要功能为">2、KMS：主要功能为</h4><ul><li><p>（1）更新画面：显示buffer的切换，多图层的合成方式，以及每个图层的显示位置。</p></li><li><p>（2）设置显示参数：包括分辨率、刷新率、电源状态（休眠唤醒）等。</p></li><li><p>抽象模块：</p><ul><li>CRTC：负责控制Framebuffer的显示输出。</li><li>Encoder：将CRTC的输出信号编码为显示器可以理解的格式。例如,将数字信号编码为VGA、HDMI或DisplayPort等模拟信号。</li><li>Connector：将Encoder输出的信号传输到显示器。常见的Connector包括VGA、DVI、HDMI和DisplayPort接口。</li></ul></li><li><p>一些函数：</p><ul><li>drm_mode_setplane</li><li>drm_mode_setcrtc</li></ul></li></ul><h4 id="gem提供内存管理方法主要负责显示buffer的分配和释放">3、 GEM：提供内存管理方法，主要负责显示buffer的分配和释放</h4><p>一些函数：</p><ul><li>drm_mode_create_dumb_ioctl</li><li>drm_mode_mmap_dumb_ioctl</li></ul><h2 id="三关于测试">三、关于测试</h2><h3 id="modetest工具">1、 modetest工具</h3><p>由libdrm提供的测试程序，可以查询显示设备的支持状况，进行基本的显示测试，以及设置显示的模式。</p><p>（1）代码编译： 下载链接：https://dri.freedesktop.org/libdrm/libdrm-2.4.100.tar.bz2</p><p>解压并进入目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure<br>make -j4<br></code></pre></td></tr></table></figure><p>编译完成后会在目录libdrm-2.4.100/tests/modetest下生成 modetest 可执行文件。</p><p>（2）modetest示例：</p><p>通过--help参数可以查看modetest支持的全部选项。</p><h3 id="modeset与显示有关的参数">2、modeset：与显示有关的参数</h3><p>（1）编辑 /etc/default/grub</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/grub.png" alt="" /><figcaption>grub</figcaption></figure><p>（2）“quiet splash video=LVDS-1:1920×1080"：设置分辨率为1920×1080，假定显示设备标识为LVDS-1。</p><p>（3）更新grub配置：sudo update-grub，重启生效</p><h3 id="nomodeset禁用内核模式设置">3、nomodeset：禁用内核模式设置</h3><p>在某些情况下，禁用KMS可以解决启动问题或出现兼容性问题时恢复显示。</p><h3 id="显示设备的特性">4、显示设备的特性</h3><p>分辨率、刷新率、颜色深度、亮度和对比度、响应时间、连接接口、视角、旋转和调整、自适应同步技术、多显示器支持、电源管理和节能模式、色温调整、色域覆盖率、音频支持、触摸屏和多点触控</p><h2 id="四对一些问题的思考">四、对一些问题的思考</h2><h3 id="为什么需要mesa-3d">1、为什么需要Mesa 3D？</h3><p>Mesa 3D库的实现提供了对图形硬件的抽象，使得应用程序可以在不同的图形硬件设备上运行，而不需要关心底层硬件的细节。它提供了一致的编程接口，使得应用程序可以跨平台地使用OpenGL功能，无论是在Windows、Linux还是其他操作系统上。</p><p>【mesa 3D并不是必需的，可以也存在其它opengl的实现。mesa3D用的普遍，一方面是开源免费，另一方面是功能多、而且社区活跃。mesa3D除了提供了Opengl的实现，还将GPU计算、开源的A卡、Intel显卡、开源N卡的umd包含在内，通知支持vulkan接口】</p><h3 id="为什么需要libdrm">2、为什么需要libdrm？</h3><p>不仅避免了将内核接口直接暴露给应用程序，而且还表现出在程序之间重用和共享代码的优势。 【libdrm的核心或者说设计的初衷的确是将drm接口暴露给用户层。在上面mesa3D的功能中提到了，开源的显卡umd在Mesa3D范围内，libdrm层也做了显卡相关的扩展（类似libdrm-intel）, libdrm层逻辑上分为dri接口和kms接口】</p><h2 id="五一些疑惑的地方">五、一些疑惑的地方</h2><p>1、作为测试人员，可测的地方有哪些，怎样有针对性地对显示功能进行测试？</p><p>2、在X Window System/Wayland中，应用程序的2D图形显示过程是怎样的？不需要Mesa 3D库和内核中的DRM参与吗？</p><p>我的理解是否正确：在X Window System中，2D图形是由DDX支持的，DDX直接与libdrm交互。在Wayland中，不论是2D还是3D，都通过Mesa 3D库与libdrm进行交互。</p><p>3、不太明白DRM Driver和GPU Driver的具体含义，GPU Driver是特定的显卡驱动程序吗？比如intel、radeon、nouveau。GPU Driver的作用是解析命令并发送给GPU硬件并将渲染结果从显存复制到Framebuffer？DRM Driver的作用也是如此吗？[DRM driver是DRM框架的实现，GPU driver是将显卡在DRM框架里实现的程序；DRM driver是抽象出来的公共操作，GPU driver是显卡独有的；类似Xserver、DDX的关系]</p><p>4、在应用程序的3D图形渲染过程的第4步的第二小步中：X Server/ Wayland Compositor使用ioctl发送请求到KMS，这里的ioctl与libdrm无关吗？窗口合成工作是在set mode后合成吗？</p><p>5、在应用程序的3D图形渲染过程中，GEM具体的工作是什么？只知道是负责管理显示buffer的分配和释放，但在整个流程中无法说清GEM的作用【所有操作针对的都是数据，数据的管理就是buffer的管理】。</p><p>6、modetest找不到设备：【modeset需要将当前图形杀掉】</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/modeset.png" alt="" /><figcaption>modeset</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>drivers</category>
      
      <category>gpu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>do_initcalls</title>
    <link href="/linux/kernel/qemu/do_initcalls/"/>
    <url>/linux/kernel/qemu/do_initcalls/</url>
    
    <content type="html"><![CDATA[<h1 id="do_initcalls函数中每个level都有啥">do_initcalls()函数中每个level都有啥</h1><p>在Linux内核初始化的第二阶段中，do_initcalls()函数会按照一定顺序执行多个初始化级别，每个级别都会进行不同的初始化操作。以下是每个级别的主要初始化操作：</p><p>LEVEL_BUILTIN_EARLY: 在这个级别中，内核会注册所有编译进内核镜像的驱动程序，这些驱动程序通常是用于启动引导过程的核心驱动程序，例如存储设备驱动和文件系统驱动。</p><p>LEVEL_EARLY: 在这个级别中，内核会执行一些与系统环境相关的初始化操作，包括处理引导参数和初始化系统时钟。</p><p>LEVEL_PLATFORM_EARLY: 在这个级别中，内核会初始化与硬件平台相关的驱动程序和设备，例如I/O设备、中断控制器和时钟源等。</p><p>LEVEL_ARCH_EARLY: 在这个级别中，内核会初始化与特定CPU架构相关的驱动程序和设备，例如MMU、虚拟内存和异常处理等。</p><p>LEVEL_CPUS: 在这个级别中，内核会初始化多处理器系统的处理器和调度程序，包括中断处理和进程调度。</p><p>LEVEL_PLATFORM: 在这个级别中，内核会初始化与硬件平台相关的高级驱动程序和设备，例如电源管理、温度控制和传感器设备等。</p><p>LEVEL_SECURITY: 在这个级别中，内核会初始化安全相关的子系统，例如SELinux或AppArmor。</p><p>LEVEL_FILESYSTEMS: 在这个级别中，内核会挂载根文件系统和其他文件系统，并注册文件系统驱动程序和相关的VFS操作。</p><p>LEVEL_BLKDEV: 在这个级别中，内核会初始化块设备驱动程序，包括磁盘和闪存设备等。</p><p>LEVEL_NET: 在这个级别中，内核会初始化网络协议栈、网络设备和套接字，为网络服务做准备。</p><p>LEVEL_LAST: 在这个级别中，内核会执行最后的初始化任务，包括启动用户空间进程、启动调度器、启动中断处理程序和完成其他系统初始化。</p><p>以上每个级别都会完成一些特定的初始化操作，以确保内核能够正常工作。不同的系统可能会有不同的级别和初始化操作，具体情况取决于内核配置和系统需求。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uos-1060 kgdb 修复</title>
    <link href="/linux/kernel/sysrq_trigger/uos-1060%20kgdb%20%E4%BF%AE%E5%A4%8D/"/>
    <url>/linux/kernel/sysrq_trigger/uos-1060%20kgdb%20%E4%BF%AE%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="uos-1060-kgdb-修复">uos-1060 kgdb 修复</h1><h2 id="修复代码">修复代码</h2><p>将<code>x86-kernel</code> 分支<code>4.19-rc8</code>中的<code>kernel/debug</code>目录、<code>include/linux/sysrq.h</code>、<code>drivers/tty/sysrq.c</code>覆盖<code>4.19内核 6026</code>对应位置文件。 编译过程中会遇到<code>include/linux/security2.h</code>中的<code>void security_set_audit_started(int started)</code>重复定义，注释掉154-156行即可。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230711164047.png" alt="" /><figcaption>涉及到的源码</figcaption></figure><ul><li><code>4.19-rc8</code> 对应commit id：35a7f35ad1b1</li><li><code>4.19内核 6026</code>对应commit id：69a08e713fb2</li></ul><h3 id="生成patch">生成patch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git format-patch -1 c907106159ca -o kgdb_not_work.patch<br></code></pre></td></tr></table></figure><p>patch下载地址：<a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel/sysrq_trigger">kgdb_not_work.patch</a></p><h3 id="应用patch">应用patch</h3><p>先检查patch文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git apply --<span class="hljs-built_in">stat</span> kgdb_not_work.patch<br></code></pre></td></tr></table></figure><p>检查能否应用成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git apply --check kgdb_not_work.patch<br></code></pre></td></tr></table></figure><p>打补丁：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git am --signoff &lt; kgdb_not_work.patch<br></code></pre></td></tr></table></figure><h2 id="内核kgdb编译选项">内核kgdb编译选项</h2><h3 id="kgdb相关">kgdb相关</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_KGDB = y     # 加入KGDB支持<br>CONFIG_KGDB_SERIAL_CONSOLE = y      # 使KGDB通过串口与主机通信(打开这个选项，默认会打开CONFIG_CONSOLE_POLL和CONFIG_MAGIC_SYSRQ)<br>CONFIG_KGDB_KDB = y     # 加入KDB支持<br>CONFIG_DEBUG_KERNEL = y     #包含驱动调试信息<br>CONFIG_DEBUG_INFO = y       # 使内核包含基本调试信息<br></code></pre></td></tr></table></figure><h3 id="vmlinux-gdb.py相关">vmlinux-gdb.py相关</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_GDB_SCRIPTS = y # gdb脚本<br></code></pre></td></tr></table></figure><h3 id="关闭内核随机地址选项">关闭内核随机地址选项</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_RANDOMIZE_BASE = n<br></code></pre></td></tr></table></figure><h2 id="编译内核deb包">编译内核deb包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make bindeb-pkg -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) / 2`<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>sysrq_trigger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于kgdb调试uos-1060-6026</title>
    <link href="/linux/kernel/sysrq_trigger/%E5%9F%BA%E4%BA%8Ekgdb%E8%B0%83%E8%AF%95uos-1060-6026/"/>
    <url>/linux/kernel/sysrq_trigger/%E5%9F%BA%E4%BA%8Ekgdb%E8%B0%83%E8%AF%95uos-1060-6026/</url>
    
    <content type="html"><![CDATA[<h1 id="基于kgdb调试uos-1060-6026">基于kgdb调试uos-1060-6026</h1><ul><li>cpu架构：amd64</li></ul><h2 id="基于virt-manager搭建调试环境">基于virt-manager搭建调试环境</h2><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230711172931.png" alt="" /><figcaption>串口设备</figcaption></figure><p>基于virt-manager可以模拟串口，加快调试环境的搭建，本次宿主机提供的串口设备为<code>/dev/pts/2</code>，x86虚拟机内一般为<code>/dev/ttyS0</code>。</p><p>在宿主机上安装<code>minicom</code>、虚拟机上安装<code>cutecom</code>可以测试串口设备通不通。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install minicom<br>sudo minicom -s<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install cutecom<br>sudo cutecom<br></code></pre></td></tr></table></figure><p>如果使用的是真实串口设备，宿主机串口设备设别一般为<code>/dev/ttyUSB0</code>，x86被调试机串口设备一般为<code>/dev/ttyS0</code>，arm被调试机串口设备一般为<code>/dev/ttyAMA0</code>。</p><p>具体串口请使用<code>minicom</code>、<code>cutecom</code>测试确认。</p><h2 id="被调试设备引导参数">被调试设备引导参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/default/grub<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text"># Generated by deepin-installer<br>GRUB_BACKGROUND=&quot;/boot/grub/themes/deepin-fallback/background.jpg&quot;<br>GRUB_CMDLINE_LINUX_DEFAULT=&quot;video=efifb:nobgrt splash quiet kgdboc=ttyS0,115200 nokaslr&quot;<br>GRUB_DEFAULT=0<br>GRUB_DISTRIBUTOR=&quot;`/usr/bin/lsb_release -d -s 2&gt;/dev/null || echo UOS 20`&quot;<br>GRUB_THEME=&quot;/boot/grub/themes/deepin-fallback/theme.txt&quot;<br>GRUB_TIMEOUT=1<br>GRUB_GFXMODE=1024x768<br>DEEPIN_GFXMODE_DETECT=1<br></code></pre></td></tr></table></figure><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230711174403.png" alt="" /><figcaption>kgdb启动参数</figcaption></figure><p>如果想在内核引导阶段调试，在上图红框中增加<code>kgdbwait</code>参数即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">update-grub<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cmdline<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">BOOT_IMAGE=/boot/vmlinuz-4.19.0-amd64-desktop root=UUID=586655c5-5cd3-421c-a1b5-e1b1b2b9e545 ro video=efifb:nobgrt splash quiet kgdboc=ttyS0,115200 nokaslr DEEPIN_GFXMODE= ima_appraise=off libahci.ignore_sss=1<br></code></pre></td></tr></table></figure><h2 id="不想修改引导参数">不想修改引导参数</h2><p>echo "ttyS0,115200" &gt; /sys/module/kgdboc/parameters/kgdboc</p><p>这种方式最简单，可以不重启机器调试内核。</p><h2 id="被调试设备陷入kgdb">被调试设备陷入kgdb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> g &gt; /proc/sysrq-trigger<br></code></pre></td></tr></table></figure><p>注意，每次打断点前都要先执行上述命令。</p><h2 id="宿主机gdb-vmlinux">宿主机gdb vmlinux</h2><p>进入内核源码目录后使用<code>gdb vmlinux</code>命令进入gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">add-auto-load-safe-path .<br><span class="hljs-built_in">source</span> ./vmlinux-gdb.py<br><span class="hljs-built_in">set</span> serial baud 115200<br>target remote /dev/pts/2<br></code></pre></td></tr></table></figure><p>执行完上述命令后即可通过串口设备连接被调试设备。</p><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230711175332.png" alt="" /><figcaption>gdb串口</figcaption></figure><h3 id="打断点">打断点</h3><h4 id="宿主机上执行">宿主机上执行</h4><p>内核编译选项<code>CONFIG_GDB_SCRIPTS = y</code>会在内核源码根目录下生成<code>vmlinux-gdb.py</code>软链接，指向编译内核源码机器的<code>scripts/gdb/vmlinux-gdb.py</code>文件，由于我是在服务器上编译后拷贝到我本机的，需要先删除此链接，然后根据实际源文件新建，具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf vmlinux-gdb.py<br><span class="hljs-built_in">ln</span> -s /home/wujing/code/qemu/amd64/uos/1060/6064/x86-kernel/scripts/gdb/vmlinux-gdb.py vmlinux-gdb.py<br></code></pre></td></tr></table></figure><p>使用<code>kgdb</code>提供的额外扩展命令<code>lx-symbols</code>可以加载内核ko模块调试符号，不然断点会显示<code>no source file named ... pending</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lx-symbols<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b sound/core/pcm_native.c:2511<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c<br></code></pre></td></tr></table></figure><h4 id="被调试机上执行">被调试机上执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aplay bensound-sunny.mp3<br></code></pre></td></tr></table></figure><h4 id="段点命中">段点命中</h4><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230711180243.png" alt="" /><figcaption>aplay bensound-sunny.mp3</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/企业微信截图_16890632761750.png" alt="" /><figcaption>b sound/core/pcm_native.c:2511</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>sysrq_trigger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sysrq_trigger</title>
    <link href="/linux/kernel/sysrq_trigger/sysrq_trigger/"/>
    <url>/linux/kernel/sysrq_trigger/sysrq_trigger/</url>
    
    <content type="html"><![CDATA[<h1 id="echo-g-procsysrq_trigger">echo g &gt; /proc/sysrq_trigger</h1><p>本次调试环境：</p><ul><li>宿主机：amd64 debian12</li><li>虚拟机：qemu虚拟化debian12</li><li>linux kernel：6.1.27</li><li>宿主机与虚拟机通过virt-manager提供的串口设备/dev/pts/4进行kgdb调试</li></ul><h2 id="核心断点">核心断点</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">drivers/tty/sysrq.c:1155 static ssize_t write_sysrq_trigger(struct file *file, const char __user *buf,<br>   size_t count, loff_t *ppos)<br>drivers/tty/sysrq.c:1163 __handle_sysrq(c, false);<br>drivers/tty/sysrq.c:572 void __handle_sysrq(int key, bool check_mask)<br>drivers/tty/sysrq.c:602 op_p-&gt;handler(key);<br>kernel/debug/debug_core.c:971 static void sysrq_handle_dbg(int key)<br>kernel/debug/debug_core.c:977 if (!kgdb_connected) &#123;<br>kernel/debug/debug_core.c:986 kgdb_breakpoint();<br>drivers/tty/sysrq.c:1166 return count;<br></code></pre></td></tr></table></figure><h3 id="参考断点">参考断点</h3><p><code>save breakpoints sysrq_trigger.break</code>结果如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">break drivers/tty/sysrq.c:572<br>break drivers/tty/sysrq.c:593<br>break drivers/tty/sysrq.c:594<br>break drivers/tty/sysrq.c:599<br>break drivers/tty/sysrq.c:608<br>break drivers/tty/sysrq.c:602<br>break kernel/debug/debug_core.c:973<br>break kernel/debug/debug_core.c:977<br>break kernel/debug/debug_core.c:986<br>break kernel/debug/debug_core.c:1214<br>break drivers/tty/sysrq.c:625<br>break drivers/tty/sysrq.c:1166<br>break drivers/tty/sysrq.c:631<br>break drivers/tty/sysrq.c:1155<br>break drivers/tty/sysrq.c:1166<br></code></pre></td></tr></table></figure><p>使用<code>source breakpoints sysrq_trigger.break</code>可恢复断点，方便调试。</p><h2 id="sysrq_handle_dbg与魔法键g">sysrq_handle_dbg与魔法键g</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sysrq_key_op</span> <span class="hljs-title">sysrq_dbg_op</span> =</span> &#123;   <span class="hljs-comment">// kernel/debug/debug_core.c:989</span><br>.handler= sysrq_handle_dbg,<br>.help_msg= <span class="hljs-string">&quot;debug(g)&quot;</span>,<br>.action_msg= <span class="hljs-string">&quot;DEBUG&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_MAGIC_SYSRQ   <span class="hljs-comment">// kernel/debug/debug_core.c:1075</span></span><br>register_sysrq_key(<span class="hljs-string">&#x27;g&#x27;</span>, &amp;sysrq_dbg_op);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>sysrq_trigger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于qemu调试uos-v20-1054</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1054/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1054/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu调试uos-v20-1054">amd64下基于qemu调试uos-v20-1054</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qemu-system qemu-kvm qemu-utils qemu-efi ovmf<br></code></pre></td></tr></table></figure><h2 id="制作启动盘">制作启动盘</h2><h3 id="下载镜像">下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdimage.uniontech.com/daily-iso/1050-update4/daily-stable/20221231/uniontechos-desktop-20-professional-1050-update4-amd64.iso<br></code></pre></td></tr></table></figure><h3 id="创建虚拟盘">创建虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/code/tmp/1054<br><span class="hljs-built_in">cd</span> ~/code/tmp/1054<br>qemu-img create -f qcow2 1054.img 64G<br></code></pre></td></tr></table></figure><h3 id="安装镜像到虚拟盘">安装镜像到虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 4 \<br>-enable-kvm \<br>-cpu host \<br>-m 4G \<br>-hda ~/code/tmp/1054/1054.img \<br>-cdrom ~/Downloads/iso/uniontechos-desktop-20-professional-1050-update4-amd64.iso<br></code></pre></td></tr></table></figure><p>如需调试 <code>bios</code>，添加下方参数即可，启动时也需要附带此参数： <code>-bios /usr/share/ovmf/OVMF.fd</code></p><h2 id="启动虚拟机">启动虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 2 \<br>-enable-kvm \<br>-cpu host \<br>-m 2G \<br>-hda ~/code/tmp/1054/1054.img \<br>-net user,hostfwd=tcp::2222-:22 -net nic<br></code></pre></td></tr></table></figure><p>启动时，我们做一下端口转发，我们这里把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><h2 id="调试虚拟机">调试虚拟机</h2><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt purge linux-headers-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg<br>sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-5402 linux-image-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-5402 linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg=4.19.90-5402<br></code></pre></td></tr></table></figure><p>在虚拟机中执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1054<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1054<br>scp /usr/lib/debug/lib/modules/4.19.0-amd64-desktop/vmlinux wujing@10.20.52.86:~/code/tmp/1054<br></code></pre></td></tr></table></figure><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 2 \<br>-enable-kvm \<br>-cpu host \<br>-m 2G \<br>-kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>-initrd ~/code/tmp/1054/initrd.img-4.19.0-amd64-desktop \<br>-hda ~/code/tmp/1054/1054.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>-net user,hostfwd=tcp::2222-:22 -net nic \<br>-S -s<br></code></pre></td></tr></table></figure><p>上方 <code>-append</code>传递给内核的参数可以通过在启动时，访问 GRUB 启动菜单，按 <code>e</code>键编辑引导参数可以看到参数，也可虚拟机启动后通过 <code>cat /proc/cmdline</code>查看。</p><p>在 <code>~/code/tmp/1054</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>uos-v20-1054内核第一个断点必须设置为硬件断点，否则gdb输出如下Warning且无法捕捉断点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Warning:<br>Cannot insert breakpoint 1.<br>Cannot access memory at address 0xffffffff824bbb8d<br><br>Command aborted.<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     init/main.c: 没有那个文件或目录. <br></code></pre></td></tr></table></figure><p>很明显找不到源码，解决方案有两种：</p><ol type="1"><li><code>gdb</code>中使用 <code>dir</code>命令或 <code>set substitute-path</code>命令指定和修改搜素源码文件的路径</li><li>基于源码编译出内核，在源码目录执行 <code>gdb vmlinux</code>命令。</li></ol><p>下文采用方案2：</p><p>下载1054-2源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/x86-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;x86-kernel/.git/hooks/&quot;</span><br>git checkout -b 1054-2 499e91c36f62c1790063cabdacff94fd8220f145<br></code></pre></td></tr></table></figure><p>内核编译选项配置参考：<a href="https://github.com/realwujing/linux-learning/blob/main/debug/kernel/qemu/%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.md#%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE">内核编译选项配置</a></p><p>内核编译完成后启动虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-smp 2 \<br>-enable-kvm \<br>-cpu host \<br>-m 2G \<br>-kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>-initrd ~/code/tmp/1054/initrd.img-4.19.0-amd64-desktop \<br>-hda ~/code/tmp/1054/1054.img \<br>-append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>-net user,hostfwd=tcp::2222-:22 -net nic \<br>-S -s<br></code></pre></td></tr></table></figure><p>在 <code>~/code/x86-kernel</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     &#123;  <br></code></pre></td></tr></table></figure><p>可以看到断点正常命中，继续敲 <code>c</code>命令可以看到虚拟机正常启动到登录界面。</p><h2 id="more">More</h2><ul><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448">使用Qemu在Mac上安装虚拟机</a></li><li><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893">Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</a></li><li><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于qemu调试debian12</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95debian12/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95debian12/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu调试debian12">amd64下基于qemu调试debian12</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install virt-manager<br></code></pre></td></tr></table></figure><h2 id="制作启动盘">制作启动盘</h2><h3 id="下载镜像">下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/debian-12.0.0-amd64-DVD-1.iso<br></code></pre></td></tr></table></figure><h3 id="安装镜像到虚拟盘">安装镜像到虚拟盘</h3><p>直接利用virt-manager图形界面安装镜像更快。</p><p>添加仓库源，仓库源位于:<a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">https://mirrors.tuna.tsinghua.edu.cn/help/debian/</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释<br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware<br><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware<br><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware<br><br># deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware<br># # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware<br><br>deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware<br># deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt policy linux-image-`<span class="hljs-built_in">uname</span> -r`<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">linux-image-6.1.0-9-amd64:<br>  已安装：6.1.27-1<br>  候选： 6.1.27-1<br>  版本列表：<br> *** 6.1.27-1 500<br>        500 https://mirrors.tuna.tsinghua.edu.cn/debian bookworm/main amd64 Packages<br>        100 /var/lib/dpkg/status<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=6.1.27-1 linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg=6.1.27-1<br></code></pre></td></tr></table></figure><p>在虚拟机中执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br>scp /boot/initrd.img-6.1.0-9-amd64 wujing@10.20.42.43:~/code/qemu/amd64/debian/12<br>scp /boot/vmlinuz-6.1.0-9-amd64 wujing@10.20.42.43:~/code/qemu/amd64/debian/12<br>scp /usr/lib/debug/boot/vmlinux-6.1.0-9-amd64 wujing@10.20.42.43:~/code/qemu/amd64/debian/12<br>scp /boot/config-6.1.0-9-amd64 wujing@10.20.42.43:~/code/qemu/amd64/debian/12<br></code></pre></td></tr></table></figure><p>上述操作执行完后关闭此虚拟机。</p><h2 id="调试虚拟机">调试虚拟机</h2><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo qemu-system-x86_64 \<br>    -accel kvm \<br>    -cpu host \<br>    -m 4G \<br>    -smp 8 \<br>    -kernel /home/wujing/code/qemu/amd64/debian/12/vmlinuz-6.1.0-9-amd64 \<br>    -initrd /home/wujing/code/qemu/amd64/debian/12/initrd.img-6.1.0-9-amd64 \<br>    -drive file=/media/wujing/data/Downloads/kvm/debian12.qcow2,<span class="hljs-keyword">if</span>=virtio,format=qcow2 \<br>    -append <span class="hljs-string">&quot;root=/dev/vda1 ro video=efifb:nobgrt quiet nokaslr&quot;</span> \<br>    -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>    -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>    -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0 \<br>    -device qemu-xhci -device usb-kbd -device usb-tablet \<br>    -S -s<br></code></pre></td></tr></table></figure><p><code>-drive file=/media/wujing/data/Downloads/kvm/debian12.qcow2,if=virtio,format=qcow2</code>中的<code>if=virtio</code>很重要，不然内核启动报错：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Gave up waiting for root device. Common problems:<br>-Boot args (cat /proc/cmdline)<br>  -Check rootdelay= (did the system wait long enough?)<br>-Missing modules (cat /proc/modules; ls /dev)<br>ALERT! /dev/vda1 does not exist. Dropping to a shell!<br><br>BusyBox v1.27.2 (debian 1:1.27.2-2debian3.2) built-in shell (ash)<br>Enter &#x27;help&#x27; for a list of built-in commands.<br><br>(initramfs)_<br></code></pre></td></tr></table></figure><p><code>if=virtio</code>参数必须附带的原因是本次调试宿主机也为debian12，<code>qemu-system-x86</code>版本为<code>1:7.2+dfsg-7</code>，默认采用virtio块设备，virtio块设备是 kvm 来宾的半虚拟化设备，与普通的模拟硬盘驱动器不同，传输速度更快。</p><p><code>-append</code>传递给内核的参数可以通过在启动时，访问 GRUB 启动菜单，按 <code>e</code>键编辑引导参数可以看到参数，也可虚拟机启动后通过 <code>cat /proc/cmdline</code>查看。</p><p>启动时，我们做一下端口转发，我们这里把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><p>在宿主机上下载debian 12 linux-image-6.1.0-9-amd64对应的内核源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt <span class="hljs-built_in">source</span> linux-source=6.1.27-1<br></code></pre></td></tr></table></figure><p>创建软链接vmlinux到源码目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /home/wujing/code/qemu/amd64/debian/12/vmlinux-6.1.0-9-amd64 /home/wujing/code/qemu/amd64/debian/12/linux-6.1.27/vmlinux<br></code></pre></td></tr></table></figure><p>在 <code>/home/wujing/code/qemu/amd64/debian/12/linux-6.1.27</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>debian12内核第一个断点必须设置为硬件断点，否则gdb输出如下Warning且无法捕捉断点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Warning:<br>Cannot insert breakpoint 1.<br>Cannot access memory at address 0xffffffff824bbb8d<br><br>Command aborted.<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     &#123;  <br></code></pre></td></tr></table></figure><p>可以看到断点正常命中，继续敲 <code>c</code>命令可以看到虚拟机正常启动到登录界面。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++命名规范</title>
    <link href="/cpp/C++%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/cpp/C++%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="c命名规范">C++命名规范</h1><ul><li><a href="https://blog.csdn.net/Hhrock/article/details/82386014">Google C++编程规范 (中文版)</a></li><li><a href="https://blog.csdn.net/freeking101/article/details/78930381">Google 的 C++ 代码规范</a></li><li><a href="https://www.jianshu.com/p/b2d9cfaa2adb?clicktime=1580457233">vscode C++ 开发配置 google code style</a></li><li><a href="https://developer.aliyun.com/article/619121">[C++][编程风格]C++命名规则-阿里云开发者社区 (aliyun.com)</a></li><li><a href="https://www.jianshu.com/p/bb160b0f8a14">C++命名规则 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_37764129/article/details/81779766">C++笔记（七）——类1：定义、命名规则、类成员函数的定义方式（含字符串输出举例）、对象的定义及引用_马大哈先生的博客-CSDN博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>protobuf</title>
    <link href="/cpp/protobuf/"/>
    <url>/cpp/protobuf/</url>
    
    <content type="html"><![CDATA[<h1 id="protobuf">protobuf</h1><ul><li><a href="https://www.toutiao.com/article/7171459285988753923/"><font color=Red>一文读懂RPC/HTTP/TCP的区别</font></a></li><li><a href="https://mp.weixin.qq.com/s/Pjuqq_ADpBIWljXVFoxIPA"><font color=Red>如果面试提到Protobuf，面试官问其原理怎么办？</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1176660">Protocol Buffers C++入门教程</a></li><li><a href="https://blog.csdn.net/qq_37868450/article/details/113727764?utm_source=app&amp;app_version=4.18.0">CMake使用protobuf生成c++代码</a></li><li><a href="https://blog.csdn.net/ZM_Yang/article/details/112992759">CMake笔记：add_custom_command不执行 编译.proto文件</a></li><li><a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html">序列化和反序列化</a></li><li><a href="https://www.cnblogs.com/dengchj/p/7453432.html">序列化和反序列化及Protobuf 基本使用</a></li><li><a href="https://blog.csdn.net/u013989576/article/details/66476635">protobuf 数据类型</a></li><li><a href="https://blog.csdn.net/tennysonsky/article/details/73921025">protobuf入门教程(四)：repeated限定修饰符</a></li><li><a href="https://blog.csdn.net/fengfengdiandia/article/details/86688520"><font color=Red>cmake protobuf</font></a></li><li><a href="https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html"><font color=Red>cmake protobuf官方使用手册</font></a></li><li><a href="https://www.cnblogs.com/doggod/p/13360504.html">Google protocol buffer 常用序列化和反序列化函数</a></li><li><a href="https://blog.csdn.net/pianistOfSoftware/article/details/72779938">json和protobuf互转</a></li><li><a href="https://wenfh2020.com/2020/10/28/protobuf-convert-json/"><font color=Red>protobuf / json 数据转换（C++）</font></a></li><li><a href="https://linuxhint.com/install-protobuf-ubuntu/"><font color=Red>How to install Protobuf on Ubuntu</font></a></li><li><a href="https://blog.csdn.net/weixin_38054045/article/details/104145544"><font color=Red>C++实用技术 – YAML &amp; JSON互转</font></a></li><li><a href="https://www.cnblogs.com/silvermagic/p/9087593.html"><font color=Red>Protocol Buffers官方文档(开发指南)</font></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++日志</title>
    <link href="/cpp/C++%E6%97%A5%E5%BF%97/"/>
    <url>/cpp/C++%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="c日志">C++日志</h1><ul><li><a href="http://c.biancheng.net/view/242.html"><font color=Red>C++重载&lt;<和>&gt;（C++重载输出运算符和输入运算符） (biancheng.net)</font></a></li><li><a href="https://www.runoob.com/cplusplus/input-output-operators-overloading.html">C++ 输入输出运算符重载 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://blog.csdn.net/chinabhlt/article/details/110480363">c++实现流式写日志_The Coding World-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/84175431">支持c++流风格的日志库设计 - 知乎 (zhihu.com)</a></li><li><a href="https://www.tqwba.com/x_d/jishu/353703.html">C++ 标准输入输出流探索-实现日志模块的流式输出_跳墙网 (tqwba.com)</a></li><li><a href="https://open.toutiao.com/a6965373694814224908/"><font color=Red>C++日志库spdlog</font></a></li><li><a href="https://www.jianshu.com/p/ef2b4f68abba"><font color=Red>spdlog教程：创建loggers</font></a></li><li><a href="https://blog.csdn.net/u012234115/article/details/111992209">基于C++ spdlog日志库的完善封装_踏莎行的博客-CSDN博客_spdlog 封装</a></li><li><a href="https://blog.csdn.net/xmcy001122/article/details/105864473/">c++日志库实战——spdlog，是不是感觉log4cxx有点笨重，不妨试一试spdlog_xmcy001122的专栏-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/339742121">C++流：练习写一个“日志流”</a></li><li><a href="https://www.cnblogs.com/shuqin/p/12103952.html">一个轻量快速的C++日志库 - 小胖西瓜 - 博客园 (cnblogs.com)</a></li><li><a href="https://github.com/LeechanX/Ring-Log">Ring Log是一个适用于C++的异步日志</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题自定义标签页小图标</title>
    <link href="/markdown/hexo/fluid/fluid%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%B0%8F%E5%9B%BE%E6%A0%87/"/>
    <url>/markdown/hexo/fluid/fluid%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%B0%8F%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="fluid主题自定义标签页小图标">fluid主题自定义标签页小图标</h1><h2 id="制作favicon图标">制作favicon图标</h2><p>准备好用作标签页/网页小图标favicon的图片。</p><p>在线<a href="https://www.bitbug.net/">制作ico图标</a>。</p><p>推荐16<em>16、32</em>32。</p><p>将下载后的图标复制到<code>source/images</code>目录下。</p><h2 id="配置_config.fluid.yml">配置_config.fluid.yml</h2><p>增加如下配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text"># 用于浏览器标签的图标<br># Icon for browser tab<br>favicon: /img/favicon.png<br><br># 用于苹果设备的图标<br># Icon for Apple touch<br>apple_touch_icon: /img/favicon.png<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://github.com/Cenergy/blog-dev/blob/dev/_config.fluid.yml">https://github.com/Cenergy/blog-dev/blob/dev/_config.fluid.yml</a></li><li><a href="https://blog.csdn.net/qq_39181839/article/details/109477357">Hexo攻略-更换网页图标</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
      <category>hexo</category>
      
      <category>fluid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/docker/README/"/>
    <url>/docker/README/</url>
    
    <content type="html"><![CDATA[<h1 id="dockerproject">DockerProject</h1><p>以下教程基于Ubuntu 16.04 LTS.</p><h2 id="安装docker">安装docker</h2><pre><code class="hljs"># 推荐使用使用国内 daocloud 一键安装命令curl -sSL https://get.daocloud.io/docker | sh# 使用 Docker 作为非 root 用户，则应考虑使用类似以下方式将用户添加到 docker 组sudo usermod -aG docker your-user# Docker 镜像加速sudo cat daemon.json &gt; /etc/docker/daemon.json# 重新启动服务sudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h2 id="dockerfile">DockerFile</h2><pre><code class="hljs">cd ubuntu## 创建镜像docker build -t ubuntu:ai2 .## 启动镜像docker run -p 22223:22 -p 33307:3306 -dit --name ubuntu-ai2 ubuntu:ai2</code></pre>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iptables</title>
    <link href="/docker/iptables/"/>
    <url>/docker/iptables/</url>
    
    <content type="html"><![CDATA[<h1 id="iptables">iptables</h1><ul><li><a href="https://blog.csdn.net/qq_30013585/article/details/116191215">docker容器启动后添加端口映射_realwujing的博客-CSDN博客</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.2:8080<br><br>sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.2:8080<br></code></pre></td></tr></table></figure><h2 id="prerouting链">1、PREROUTING链</h2><h3 id="查看nat表中的prerouting链">1.1 查看NAT表中的PREROUTING链</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo iptables -t nat --list-rules PREROUTING<br></code></pre></td></tr></table></figure><h3 id="结果">结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">-P PREROUTING ACCEPT<br>-A PREROUTING -p tcp -m addrtype --dst-type LOCAL -j DOCKER<br><br>sudo iptables -t nat -A PREROUTING -p tcp -m addrtype --dst-type LOCAL -j DOCKER<br>sudo iptables -t nat -A PREROUTING -p tcp -m tcp --dport 8081 -j DNAT --to-destination 192.168.9.151:8080<br>sudo iptables -t nat --list-rules DOCKER<br>sudo iptables -t nat -D DOCKER ! -i docker0 -p tcp -m tcp --dport 8081 -j DNAT --to-destination 172.17.0.2:8080<br><br>sudo iptables -t nat --list-rules POSTROUTING<br>sudo iptables -t nat -D POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 8080 -j MASQUERADE<br><br>sudo iptables --list-rules DOCKER<br>sudo iptables -t filter -D DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 8080 -j ACCEPT<br><br>curl 172.17.0.2:8080/test/hello<br><br>sudo iptables -t nat -vnL DOCKER --line-number<br><br>sudo iptables -t nat -D DOCKER 4<br><br>sudo iptables -t nat --list-rules PREROUTING<br>sudo iptables -t nat -D PREROUTING -p tcp -m tcp --dport 8081 -j DNAT --to-destination 192.168.9.151:8080<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/docker/ubuntu/README/"/>
    <url>/docker/ubuntu/README/</url>
    
    <content type="html"><![CDATA[<!-- * @Author: wujing * @Date: 2021-04-02 20:14:30 * @LastEditTime: 2021-04-08 01:40:29 * @LastEditors: wujing * @Description:  * @FilePath: /DockerProject/ubuntu/README.md * 可以输入预定的版权声明、个性签名、空行等--><h2 id="git初始化">1、git初始化</h2><pre><code class="hljs">git config --global user.email &quot;178955347@qq.com&quot;git config --global user.name &quot;RealWuJing&quot;</code></pre><h2 id="创建镜像">2、创建镜像</h2><pre><code class="hljs">docker build -t ubuntu:ai .docker build -t ubuntu:ai2 .</code></pre><h2 id="启动镜像">3、启动镜像</h2><pre><code class="hljs"># bash    docker run -itd --name ubuntu-ai ubuntu:ai /bin/bash# dashdocker run -itd --name ubuntu-wujing ubuntu:wujing# 端口映射docker run -p 22222:22 -p 33306:3306 -dit --name ubuntu-ai ubuntu:aidocker run -p 22222:22 -p 33306:3306 -dit --name ubuntu-ai ubuntu:ai /bin/bashdocker run -p 22223:22 -p 33307:3306 -dit --name ubuntu-ai2 ubuntu:ai2 /bin/bash</code></pre><h2 id="mysql">4、mysql</h2><p><a href="https://www.cnblogs.com/cnwcl/p/13805643.html">mysql 启动失败：su: warning: cannot change directory to /nonexistent: No such file or directory</a></p><p><a href="https://blog.csdn.net/YM_1111/article/details/107555383">Ubuntu20.04安装Mysql（亲测有效，一定要按步骤来）</a></p><pre><code class="hljs"># 修复 mysql 启动失败sudo usermod -d /var/lib/mysql/ mysql# 启动 mysqlsudo service mysql start# mysql 初始化配置sudo mysql_secure_installation</code></pre><h2 id="ssh">5、ssh</h2><pre><code class="hljs"># 启动 sshsudo service ssh start# 配置ssh客户端，去掉PasswordAuthentication yes前面的#号，保存退出sudo vim /etc/ssh/ssh_config</code></pre><h2 id="anaconda">6、anaconda</h2><pre><code class="hljs"># 安装包https://mirrors.bfsu.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh# .condarchttps://mirrors.bfsu.edu.cn/help/anaconda/# https://mirrors.bfsu.edu.cn/help/pypi/pip config set global.index-url https://mirrors.bfsu.edu.cn/pypi/web/simple</code></pre><h2 id="ai环境">AI环境</h2><pre><code class="hljs"># 新建ai python环境conda create -y -n ai python=3.6# 激活环境conda activate ai# 安装tensorflow pytorch等conda install -y tensorflow pytorch pandas matplotlib</code></pre>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/architect/README/"/>
    <url>/architect/README/</url>
    
    <content type="html"><![CDATA[<h1 id="system-architect-learning">system-architect-learning</h1><ul><li><a href="考试介绍及备考攻略.md">考试介绍及备考攻略</a></li><li><a href="计算机组成与体系结构.md">计算机组成与体系结构</a></li><li><a href="操作系统.md">操作系统</a></li><li><a href="数据库系统.md">数据库系统</a></li><li><a href="计算机网络.md">计算机网络</a></li><li><a href="数学与经济管理.md">数学与经济管理</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>architect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>system-architect</title>
    <link href="/architect/system-architect/"/>
    <url>/architect/system-architect/</url>
    
    <content type="html"><![CDATA[<h1 id="system-architect">system-architect</h1><h2 id="软件开发模型">软件开发模型</h2><ul><li><a href="https://blog.csdn.net/xc917563264/article/details/115024764">软件工程基础 - 九种开发模型</a></li><li><a href="https://blog.csdn.net/shadowyelling/article/details/7412336">统一软件过程的基本概念</a></li><li><a href="https://blog.51cto.com/tonyguan/712491">浅谈RUP的9个核心工作流(Core Workflows)</a></li><li><a href="https://blog.csdn.net/hu19930613/article/details/82154842">开发方法-基于架构的软件设计</a></li></ul><h2 id="需求分析-用例图">需求分析-用例图</h2><ul><li><p><a href="https://blog.csdn.net/wrs120/article/details/52838469">包含、扩展、泛化的区别</a></p></li><li><p><a href="https://blog.csdn.net/abcd1101/article/details/83240965">用例关系（包含、扩展、泛化） uml类关系（依赖、关联、聚合、组合、泛化）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000021317534">终于明白六大类UML类图关系了</a></p></li><li><p><a href="https://blog.51cto.com/u_15067225/3989277">软件需求3个层次――业务需求、用户需求和功能需求</a></p></li><li><p><a href="https://blog.csdn.net/Edraw_Max/article/details/111474777">1分钟了解流程图、顺序图、状态图</a></p></li></ul><h2 id="软件架构风格">软件架构风格</h2><ul><li><p><a href="http://blog.itpub.net/8816263/viewspace-1006692/">C/S结构的两层模型、三层模型及多层模型</a></p></li><li><p><a href="https://www.cnblogs.com/applerosa/p/6001270.html">WebService,ESB笔记</a></p></li></ul><h2 id="构件与中间件技术">构件与中间件技术</h2><ul><li><a href="https://blog.csdn.net/wishfly/article/details/2026340">“构件”和“对象”</a></li></ul><h2 id="项目管理">项目管理</h2><ul><li><a href="https://www.jianshu.com/p/1b0305165d9e">项目管理中的WBS应该怎么做</a></li><li><a href="https://wiki.mbalib.com/wiki/%E5%B7%A5%E4%BD%9C%E5%88%86%E8%A7%A3%E7%BB%93%E6%9E%84">工作分解结构(Work Breakdown Structure，简称WBS)</a></li></ul><h2 id="应用数学">应用数学</h2><ul><li><a href="https://wx.xisaiwang.com/tiku2/85220.html">甲、乙、丙、丁4人加工A、B 、C、D四种工件所需工时如下表所示。指派每人加工一种工件，四人加工四种工件其总工时最短的最优方案中，工件B应由（ ）加工。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/architect/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/architect/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统">操作系统</h1><h2 id="磁盘管理">磁盘管理</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/373313740">10分钟学懂磁盘的结构(盘片、磁道、扇区、柱面)</a></li></ul><h2 id="进程管理">进程管理</h2><h3 id="进程的状态">进程的状态</h3><p><a href="https://www.ruantiku.com/shiti/4057716528.html">试题：某计算机系统中的进程管理采用三态模型，那么下图所示的 PCB（进程控制块）的组织方式采用（1 ），图中（2 ）。</a></p><h3 id="进程的同步与互斥">进程的同步与互斥</h3><p>互斥：如千军万马过独木桥 同步：速度有差异，在一定情况下停下等待。</p><ul><li>临界资源：诸进程间需要互斥方式对其进行共享的资源，如打印机、磁带机等。</li><li>临界区：每个进程中访问临界资源的那段代码称为临界区。</li><li>信号量：是一种特殊的变量。</li></ul><p><a href="https://cloud.tencent.com/developer/article/1803377">试题一：看完了进程同步与互斥机制，我终于彻底理解了 PV 操作</a></p><p><a href="https://m.cnitpm.com/st/2890817349.html">试题二：某航空公司机票销售系统有n个售票点，该系统为每个售票点创建一个进程Pi（i=1，2，…，n）管理机票销售。假设Tj（j=1，2，…，m）单元存放某日某航班的机票剩余票数，Temp为Pi进程的临时工作单元，x为某用户的订票张数。初始化时系统应将信号量S赋值为（ ）。Pi进程的工作流程如下图所示，若用P操作和V操作实现进程间的同步与互斥，则图中空（a），空（b）和空（c）处应分别填入（ ）。</a></p><h3 id="死锁">死锁</h3><p>死锁的预防→打破四大条件：</p><ul><li>互斥</li><li>保持和等待</li><li>不剥夺</li><li>环路等待</li></ul><p>死锁的避免：</p><ul><li>有序资源分配法</li><li>银行家算法</li></ul><p><a href="https://blog.csdn.net/weixin_44422604/article/details/107614867">死锁产生的四个必要条件？如何避免和预防死锁产生？</a></p><p><a href="https://www.cnblogs.com/wkfvawl/p/11929508.html">操作系统——银行家算法（Banker's Algorithm）</a></p><h2 id="存储管理">存储管理</h2><h3 id="页式存储">页式存储</h3><p>页式存储：将程序与内存均划分为同样大小的块，以页为单位将程序调入内存。</p><p>高级程序语言使用逻辑地址； 运行状态，内存中使用物理地址。</p><p>物理块号又称页帧号。</p><p><span class="math display">\[逻辑地址=页号+页内地址\]</span></p><p><span class="math display">\[逻辑地址=页帧号+页内地址\]</span></p><p>例如，页式存储系统中，每个页的大小为4KB。 逻辑地址： 10 1100 1101 1110 对应的物理地址为： 110 1100 1101 1110</p><p>优点：利用率高，碎片小，分配及管理简单。 缺点：增加了系统开销；可能产生抖动现象。</p><table><thead><tr class="header"><th style="text-align: center;">页号(逻辑)</th><th style="text-align: center;">页帧号(物理)</th><th style="text-align: center;">状态位</th><th style="text-align: center;">访问位</th><th style="text-align: center;">修改位</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">高级程序语言中使用</td><td style="text-align: center;">内存中使用</td><td style="text-align: center;">1:在内存中 0:不在内存中</td><td style="text-align: center;">1:最近访问过 0:最近未被访问</td><td style="text-align: center;">1:内容被修改过 0:内容未被修改</td></tr></tbody></table><h4 id="试题">试题</h4><ul><li><a href="https://wangxiao.xisaiwang.com/tiku2/906265.html">进程P有8个页面，页号分别为0-7，页面大小为4K，假设系统给进程P分配了4个存储块P，进程P的页面变换表如下所示。表中状态位等于1和0分别表示页面在内存和不在内存。若进程P要访问的逻辑地址为十六进制5148H,则该地址经过变换后，其物理地址应为十六进制（ ）；如果进程P要访问的页面6不在内存，那么应该淘汰页号为（ ）的页面。</a></li></ul><h3 id="段式存储">段式存储</h3><p>段式存储：按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样。</p><p>优点：多道程序共享内存，各段程序修改互不影响。 缺点：内存利用率低，内存碎片浪费大。</p><h4 id="试题-1">试题</h4><ul><li><a href="https://m.cnitpm.com/st/2890922192.html">假设系统采用段式存储管理方法，进程P的段表如下所示</a></li></ul><h3 id="段页式存储">段页式存储</h3><p>段页式存储：段式与页式的结合体。先分段，再分页。1个程序有若干个段，每个段中有若干个页，每个页的大小相同，但每个段的大小不同。</p><p>优点：空间浪费小、存储共享容易、存储保护容易、能动态连接。 缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内存也有所增加，使得执行速度大大下降。</p><h3 id="快表">快表</h3><p>快表是一块小容量的相联存储器(Associative Memory)，由高速缓存器组成，速度快，并且可以从硬件上保证内容并行查找，一般用来存放当前访问最频繁的少数活动页面的页号。</p><ul><li>快表：将页表存于Cache上</li><li>慢表：将页表存于内存上</li></ul><h2 id="文件管理">文件管理</h2><h3 id="索引文件结构">索引文件结构</h3><ul><li>直接索引</li><li>一级间接索引</li><li>二级间接索引</li><li>三级间接索引</li></ul><h4 id="试题-2">试题</h4><ul><li><p><a href="https://www.zuotixia.com/item/KNdKam.html">假设文件系统采用索引节点管理，且索引节点有8个地址项iaddr[0]～iaddr[7]，每个地址项大小为4B，iaddr[0]～iaddr[4]采用直接地址索引，iaddr[5]和iaddr[6]采用一级间接地址索引，iaddr[7]采用二级间接地址索引。假设磁盘索引块和磁盘数据块大小均为1KB字节，文件File1的索引节点如下图所示。若用户访问文件File1中逻辑块号为5和261的信息，则对应的物理块号分别为（ ）；101号物理块存放的是（ ）。</a></p></li><li><p><a href="https://www.z21.org/question/74">某文件系统采用索引节点管理，其磁盘索引块和磁盘数据块大小均为1KB字节且每个文件索引节点有8个地址项i_addr[0]~i_addr[7]，每个地址项大小为 4字节，其中i_addr[0]~i_addr[4]采用直接地址索引，i_addr[5]和i_addr[6]采用一级间接地址索引，i_addr[7]采用二级间接地址索引。若用户要访问文件 userA中逻辑块号为4和5的信息，则系统应分别采用（），该文件系统可表示的单个文件最大长度是（）KB</a></p></li></ul><h3 id="位示图">位示图</h3><ul><li>空闲区表法(空闲文件目录)</li><li>空闲链表法</li><li>位示图法</li><li>成组链表法</li></ul><p><a href="https://zhuanlan.zhihu.com/p/141578176">操作系统—文件管理</a></p><h2 id="嵌入式系统开发设计">嵌入式系统开发设计</h2><h3 id="交叉开发环境">交叉开发环境</h3><ul><li>宿主机系统<ul><li>交叉编译器</li><li>交叉链接器</li><li>调试器</li></ul></li><li>目标机系统<ul><li>动态装载器</li><li>链接装载器</li><li>调试监视器</li><li>调试代理</li></ul></li></ul><h2 id="嵌入式操作系统">嵌入式操作系统</h2><ol type="1"><li>嵌入式操作系统特点：<ol type="1"><li>微型化</li><li>代码质量高</li><li>专业化</li><li>实时性强</li><li>可裁剪、可配置</li></ol></li><li>实时嵌入式操作系统的内核服务有：<ol type="1"><li>异常和中断</li><li>计时器</li><li>I/O管理</li></ol></li></ol><h2 id="实时操作系统">实时操作系统</h2><p>常见的嵌入式RTOS(实时操作系统，Real-Time OperatingSystem)</p><ul><li>VxWorks</li><li>RT-Linux</li><li>QNX</li><li>pSOS</li></ul><table><thead><tr class="header"><th style="text-align: center;">比较类型</th><th style="text-align: center;">VxWorks</th><th style="text-align: center;">RT-Linux</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">工作方式</td><td style="text-align: center;">操作系统与应用程序处于同一存储空间</td><td style="text-align: center;">操作系统与应用程序处于不同存储空间</td></tr><tr class="even"><td style="text-align: center;">多任务支持</td><td style="text-align: center;">支持多任务（线程）操作</td><td style="text-align: center;">支持多进程、多线程操作</td></tr><tr class="odd"><td style="text-align: center;">实时性</td><td style="text-align: center;">实时系统</td><td style="text-align: center;">实时系统</td></tr><tr class="even"><td style="text-align: center;">安全性</td><td style="text-align: center;">任务间无隔离保护</td><td style="text-align: center;">支持进程间隔离保护</td></tr><tr class="odd"><td style="text-align: center;">标准API</td><td style="text-align: center;">支持</td><td style="text-align: center;">支持</td></tr></tbody></table><h2 id="微内核操作系统">微内核操作系统</h2><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">实质</th><th style="text-align: center;">优点</th><th style="text-align: center;">缺点</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">单体内核</td><td style="text-align: center;">将图形、设备驱动及文件系统等功能全部在内核中实现，运行在内核状态和同一地址空间。</td><td style="text-align: center;">减少进程间通信和状态切换的系统开销，获得较高的运行效率。</td><td style="text-align: center;">内核庞大，占用资源较多且不易剪裁。系统的稳定性和安全性不好。</td></tr><tr class="even"><td style="text-align: center;">微内核</td><td style="text-align: center;">只实现基本功能，将图形系统、文件系统、设备驱动及文件系统等功能放在内核之外。</td><td style="text-align: center;">内核精练，便于剪裁和移植。系统服务程序运行在用户地址空间，系统的可靠性、稳定性和安全性较高。可用于分布式系统</td><td style="text-align: center;">用户状态和内核状态需要频繁切换，从而导致系统效率不如单体内核。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学与经济管理</title>
    <link href="/architect/%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%BB%8F%E6%B5%8E%E7%AE%A1%E7%90%86/"/>
    <url>/architect/%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%BB%8F%E6%B5%8E%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="数学与经济管理">数学与经济管理</h1><ul><li><a href="https://blog.51cto.com/jackwei/5408077">软考系统分析师倒计时第7天</a></li></ul><h2 id="图论应用">图论应用</h2><h3 id="最小生成树">最小生成树</h3><ul><li><a href="https://baijiahao.baidu.com/s?id=1711403874944606800&amp;wfr=spider&amp;for=pc">最小生成树两大算法：prim、kruskal</a></li></ul><h3 id="最短路径">最短路径</h3><ul><li><a href="https://seineo.github.io/%E5%9B%BE%E8%AE%BA%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3.html">图论：常用的最短路算法详解</a></li><li><a href="https://blog.csdn.net/asdfjklingok/article/details/119522489">有一批货物要从城市s发送到城市t，线条上的数字代表通过这条路的费用（单位为万元）。那么，运送这批货物，至少需要花费多少万元？</a></li></ul><h3 id="网络与最大流量">网络与最大流量</h3><ul><li><a href="https://blog.51cto.com/jackwei/5408077">下图标出了某地区的运输网。各节点之间的运输能力如下表（万吨/小时），从节点1到节点6的最大运输能力（流量）可以达到（）万吨/小时。</a></li></ul><h3 id="其它">其它</h3><ul><li><a href="https://wx.xisaiwang.com/tiku2/85220.html">甲、乙、丙、丁4人加工A、B 、C、D四种工件所需工时如下表所示。指派每人加工一种工件，四人加工四种工件其总工时最短的最优方案中，工件B应由（ ）加工。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考试介绍及备考攻略</title>
    <link href="/architect/%E8%80%83%E8%AF%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/"/>
    <url>/architect/%E8%80%83%E8%AF%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="考试介绍及备考攻略">考试介绍及备考攻略</h1><ul><li>核心<ul><li>软件工程</li><li>软件架构设计</li><li>操作系统</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统</title>
    <link href="/architect/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    <url>/architect/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库系统">数据库系统</h1><h2 id="数据库系统的体系结构">数据库系统的体系结构</h2><h3 id="视图">视图</h3><p>数据库视图：它一个虚拟表（逻辑上的表），其内容由查询定义（仅保存SQL查询语句）。同真实的表一样，视图包含一系列带有名称的列和行数据。但是视图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据。</p><p>视图的优点：</p><ol type="1"><li>视图能简化用户操作</li><li>视图使用户能以多种角度看待同一数据</li><li>视图对重构数据库提供了一定成都的逻辑独立性</li><li>视图可以对机密数据提供安全保护</li></ol><p>物化视图：他不是传统意义上的虚拟视图，是实体化视图，其本身会存储数据。同时当原始表中的数据更新时，物化视图也会更新。</p><h3 id="分布式数据库">分布式数据库</h3><!-- ![分布式数据库](images/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/分布式数据库.png" alt="" /><figcaption>分布式数据库</figcaption></figure><ul><li>分片透明：是指用户不必关心数据是如何分片的，它们对数据的操作在全局关系上进行，即如何分片对用户是透明的。</li><li>复制透明：用户不用关心数据库在网络中各个节点的复制情况，被复制的数据的更新都由系统自动完成。</li><li>位置透明：是指用户不必知道所操作的数据放在何处，即数据分配到哪个或哪些站点存储对用户是透明的。</li><li>局部映像透明性（逻辑透明）：是最低层次的透明性，该透明性提供数据到局部数据库的映像，即用户不必关心局部DBMS支持哪种数据模型、使用哪种数据操纵语言、数据模型和操纵语言的转换是由系统完成的。因此，局部映像透明性对异构型和同构异质的分布式数据库系统是非常重要的。</li></ul><h4 id="试题">试题</h4><p><a href="https://wx.xisaiwang.com/tiku2/20994404.html">分布式数据库系统除了包含集中式数据库系统的模式结构之外，还增加了几个模式级别，其中（ ）定义分布式数据库中数据的整体逻辑结构，使得数据使用方便，如同没有分布一样。</a></p><h2 id="数据仓库与数据挖掘">数据仓库与数据挖掘</h2><p>数据仓库特点：</p><ul><li>面向主题：数据按主题组织。</li><li>集成的：消除了源数据中的不一致性。</li><li>相对稳定的（非易失的）：主要进行查询操作，只有少量的修改和删除操作（或是不删除）。</li><li>反映历史变化（随着时间变化）：记录了企业从过去某一时刻到当前各个阶段的信息，可对发展历程和未来趋势做定量分析和预测。</li></ul><!-- ![数据仓库与数据挖掘](images/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据仓库与数据挖掘.png" alt="" /><figcaption>数据仓库与数据挖掘</figcaption></figure><h3 id="试题-1">试题</h3><p><a href="https://www.999kao.com/category/7681/kamdz9z.html">数据挖掘是从数据库的大量数据中揭示出隐含的、先前未知的、并有潜在价值的</a></p><h2 id="数据库设计过程">数据库设计过程</h2><!-- ![数据库设计过程](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库设计过程.png" alt="" /><figcaption>数据库设计过程</figcaption></figure><h3 id="试题-2">试题</h3><p><a href="https://m.zqnf.com/4606999.html">在数据库设计的（ ）阶段进行关系规范化。</a> <a href="https://www.51bdks.net/view/vvq3ov.html">在数据库设计的需求分析阶段应完成包括（ ）在内的文档。</a></p><h2 id="概念结构设计">概念结构设计</h2><!-- ![概念结构设计](images/%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/概念结构设计.png" alt="" /><figcaption>概念结构设计</figcaption></figure><!-- ![概念结构设计2](images/%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A12.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/概念结构设计2.png" alt="" /><figcaption>概念结构设计2</figcaption></figure><ul><li>集成的方法：<ul><li>多个局部E-R图一次集成。</li><li>逐步集成，用累加的方式一次集成两个局部E-R。</li></ul></li><li>集成产生的冲突及解决办法：<ul><li>属性冲突：包括属性域冲突和属性取值冲突。</li><li>命名冲突：包括同名异议和异名同异。</li><li>结构冲突：包括同一对象在不同应用中具有不同的抽象，以及同一实体在不同局部E-R图中所包含的属性个数和属性排列次序不完全相同。</li></ul></li></ul><h2 id="关系模型相关概念">关系模型相关概念</h2><ul><li>目或度：关系模式中属性的个数。</li><li>候选码（候选键）</li><li>主码（主键）</li><li>主属性或非主属性：组成候选码的属性就是主属性，其它的就是非主属性。</li><li>外码（外键）</li><li>全码（ALL-Key）：关系模式的所有属性组是这个关系的候选码。</li></ul><!-- ![关系模型相关概念](images/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/关系模型相关概念.png" alt="" /><figcaption>关系模型相关概念</figcaption></figure><ul><li><a href="https://blog.csdn.net/weixin_32144483/article/details/113466887">mysql逻辑结构设计_数据库设计：逻辑结构设计</a></li></ul><h3 id="关系的3中类型">关系的3中类型</h3><ul><li>基本关系</li><li>查询表</li><li>视图表</li></ul><h3 id="完整性约束">完整性约束</h3><ul><li>实体完整性约束</li><li>参考完整性约束</li><li>用户自定义完整性约束</li></ul><blockquote><p>触发器</p></blockquote><p><a href="https://owen027.github.io/2019/09/19/integrity_constraint_of_relational/">关系数据模型要素三 关系完整性约束</a></p><h4 id="试题-3">试题</h4><p><a href="http://mtk.mxqe.com/shiti/1530293.html">某数据库中有员工关系E（员工号，姓名，部门，职称，月薪）；产品关系P（产品号，产品名称，型号，尺寸，颜色）；仓库关系W（仓库号，仓库名称，地址，负责人）；库存关系I（仓库号，产品号，产品数量）。</a></p><h2 id="规范化理论">规范化理论</h2><h3 id="函数依赖">函数依赖</h3><!-- ![函数依赖](images/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/函数依赖.png" alt="" /><figcaption>函数依赖</figcaption></figure><h3 id="求候选键">求候选键</h3><ul><li>将关系模式的函数依赖关系用“有向图”的方式表示</li><li>找入度为0的属性，并以该属性集合为起点，尝试遍历有向图，若能正常遍历图中的所有节点，则该属性集即为关系模式的候选键。</li><li>若入度为0的属性集不能遍历图中所有节点，则需要尝试性的将一些中间节点（既有入度，也有出度的节点）并入入度为0的属性集中，直至该集合能遍历所有结点，集合为候选键。</li></ul><h4 id="求候选键实例">求候选键实例</h4><p><a href="https://m.cnitpm.com/st/2867618239.html">例1：给定关系R(A1, A2, A3, A4)上的函数依赖集F</a></p><h3 id="范式">范式</h3><!-- ![范式](images/%E8%8C%83%E5%BC%8F.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/范式.png" alt="" /><figcaption>范式</figcaption></figure><h3 id="无损分解">无损分解</h3><p>什么是有损，什么又是无损？</p><ul><li>有损：不能还原。</li><li>无损：可以还原。</li></ul><p>无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式。</p><h2 id="并发控制">并发控制</h2><h3 id="基本概念">基本概念</h3><!-- ![并发控制-基本概念](images/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/并发控制-基本概念.png" alt="" /><figcaption>并发控制-基本概念</figcaption></figure><h3 id="封锁协议">封锁协议</h3><ul><li>X锁：排它锁</li><li>S锁：共享锁</li></ul><p>基本的封锁类型有两种：排它锁(X锁)和共享锁(S锁)。</p><p>所谓X锁，是事务T对数据A加上X锁时，只允许事务T读取和修改数据A。 所谓S锁，是事务T对数据A加上S锁时，其他事务只能再对数据A加S锁，而不能加X锁，直到T释放A上的S锁。</p><p>若事务T对数据对象A加了S锁，则T就可以对A进行读取，但不能进行更新(S锁因此又称为读锁)，在T释放A上的S锁以前，其他事务可以再对A加S锁，但不能加X锁，从而可以读取A，但不能更新A。</p><p><a href="https://blog.51cto.com/lzs66/1856025">数据库的S锁和X锁，两段锁协议</a></p><h3 id="数据库安全性">数据库安全性</h3><!-- ![数据库安全性](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库安全性.png" alt="" /><figcaption>数据库安全性</figcaption></figure><h3 id="数据备份">数据备份</h3><ul><li>冷备份也称为静态备份，是将数据库正常关闭，在停止状态下，将数据库的文件全部备份（复制）下来。</li><li>热备份也称为动态备份，是利用备份软件，在数据库正常运行的状态下，将数据库中的数据文件备份出来。</li></ul><!-- ![数据库备份](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库备份.png" alt="" /><figcaption>数据库备份</figcaption></figure><ul><li>完全备份：备份所有数据</li><li>差量备份：仅备份上一次完全备份之后变化的数据</li><li>增量备份：备份上一次备份之后变化的数据</li></ul><blockquote><p>日志文件：事务日志是针对数据库改变所做的记录，他可以记录针对数据库的任何操作，并将记录结果保存在独立的文件中。</p></blockquote><h4 id="试题-4">试题</h4><p><a href="https://m.tikukan.com/shiti-120591/">假设某证券公司的股票交易系统中有正在运行的事务，此时，若要转储改交易系统数据中的全部数据，则应采用（）方式。</a></p><h3 id="数据库故障与恢复">数据库故障与恢复</h3><!-- ![数据库故障与恢复](images/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%85%E9%9A%9C%E4%B8%8E%E6%81%A2%E5%A4%8D.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/数据库故障与恢复.png" alt="" /><figcaption>数据库故障与恢复</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成与体系结构</title>
    <link href="/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <url>/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机组成与体系结构">计算机组成与体系结构</h1><h2 id="主存储器">主存储器</h2><p>主存储器（Main memory）是存放指令和数据，并能由中央处理器（CPU）直接随机存取的随机存储器（RAM）。主要由存储体、控制线路、地址寄存器、数据寄存器和地址译码电路五部分组成。</p><ul><li><a href="https://blog.51cto.com/u_15127663/3697454?abTest=51cto">主存储器</a></li></ul><h2 id="控制器">控制器</h2><p>程序计数器PC：存储下一条要执行指令的地址。</p><h3 id="试题">试题</h3><ul><li><a href="https://blog.csdn.net/qq_40307919/article/details/83550412">计算机在一个指令中的过程中，为从内存读取指令操作码，首先要将（）的内容送到地址总线上</a></li></ul><blockquote><ul><li><a href="https://blog.csdn.net/fuhanghang/article/details/114625070">CPU的工作过程</a></li></ul></blockquote><h2 id="存储系统">存储系统</h2><h3 id="层次化存储结构">层次化存储结构</h3><ul><li><a href="https://blog.51cto.com/u_14286115/5194187">Cache和Buffer的区别</a></li></ul><h3 id="主存编址">主存编址</h3><ul><li>存储单元<ul><li>存储单元个数=最大地址-最小地址+1</li></ul></li><li>编址内容<ul><li>按字编址：存储体的存储单元是字存储单元，即最小寻址单位是一个字</li><li>按字节编址：存储体的存储单元是字节存储单元，即最小寻址单位是一个字节</li><li><a href="https://blog.csdn.net/Fabulous1111/article/details/79525384">“一个字等于多少个字节？”是一个不严谨的问法</a></li></ul></li><li>总容量<ul><li>总容量=存储单元个数*编址内容</li></ul></li><li>总片数<ul><li>总片数=总容量/每片的容量</li></ul></li></ul><h4 id="试题-1">试题</h4><ul><li><p><a href="https://www.educity.cn/rk/586060.html">试题来源：2010年下半年系统架构设计师考试试题</a></p></li><li><p><a href="https://www.51bdks.net/view/8p974.html">题解：2010年下半年系统架构设计师考试试题</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">内存按字节编址，利用8K*4bit的存储器芯片构成84000H到8FFFFH的内存，共需（）片。<br>A 6<br>B 8<br>C 12<br>D 24<br></code></pre></td></tr></table></figure><p>解析：本题的题型在软考中较为常见，其难度在于计算时需要注意技巧，如果不注意技巧，将浪费大量时间于无谓的计算过程。</p><p><span class="math display">\[8FFFFH-84000H+1=(8FFFFH+1)-84000H=90000H-84000H=C000H\]</span></p><p>化为十进制为48K。</p><p><span class="math display">\[C000H=12\times16^3=2^2\times3\times2^{12}=3\times2^4\times2^{10}=48\times1024=48K\]</span></p><p>由于内存是按字节编址，所以存储容量为：</p><p><span class="math display">\[48K\times8bit，48K\times8bit\div(8K\times4bit)=12\]</span></p></li></ul><h2 id="存储管理">存储管理</h2><h3 id="磁盘管理">磁盘管理</h3><ul><li>读取磁盘数据的时间应该包括以下三个部分：<ul><li>找磁道的时间。</li><li>找块（扇区）的时间，即旋转延迟时间。</li><li>传输时间。</li></ul></li><li>存取时间=寻道时间+等待时间（平均定位时间+转动延迟）这个公式我认为有问题。 我认为应该是：存取时间=寻道时间+转动延迟+存（或取）磁盘扇区内容的时间？</li></ul><h4 id="试题-2">试题</h4><blockquote><ol type="1"><li>试题一 <a href="https://www.educity.cn/rk/585904.html">试题来源：2012年上半年系统分析师考试试题</a> <a href="https://blog.csdn.net/interestANd/article/details/115539993">题解：假设某磁盘的每个磁道划分成11个物理块……处理11个记录的最少时间为（ ）。</a></li><li>试题二 <a href="https://www.ruankaoti.com/ruanjianshejishi/103110202031972.html">假设磁盘臂位于15号柱面上，进程的请求序列如下表所示，如果采用最短移臂调度算法，那么系统的响应序列应为（ ）。</a></li></ol></blockquote><h2 id="数据传输控制方式">数据传输控制方式</h2><p>从上到下效率越来越高：</p><ul><li>程序控制（查询）方式</li><li>程序中断方式</li><li>DMA方式</li><li>通道方式</li><li>I/O处理机</li></ul><h3 id="参考">参考</h3><ul><li><a href="https://www.cnblogs.com/juanzhi/p/12837375.html">DMA方式与通道方式</a></li><li><a href="https://baike.baidu.com/item/I%2FO%E9%80%9A%E9%81%93/451362">I/O通道</a></li><li><a href="https://blog.51cto.com/u_15080029/4126766">操作系统：I/O 设备与 I/O 系统</a></li></ul><h3 id="试题-3">试题</h3><ul><li><a href="https://kaoyan.cqvip.com/view/professional/subject/list.aspx?searchkey=&amp;cid=1201&amp;page=12">嵌入式系统中采用中断方式实现输入/输出的主要原因是______。在中断时，CPU断点信息一般保存到______中。</a></li></ul><h2 id="总线">总线</h2><p>一条总线同一时刻仅允许一个设备发送，但允许多个设备接收。所以总线是半双工模式。</p><ul><li>半双工与全双工<ul><li><a href="https://blog.csdn.net/chaofanwei/article/details/13274815">简述单工、半双工、全双工的区别</a></li></ul></li><li>串行总线与并行总线<ul><li><a href="https://new.qq.com/rain/a/20210609A03VSB00">串并行总线的区别和优劣，看完这篇就懂了！</a></li><li><a href="https://mbb.eet-china.com/blog/3890995-413465.html">串行总线和并行总线的区别</a></li></ul></li></ul><h3 id="总线分类">总线分类</h3><ul><li>数据总线（Data Bus, DB）：在CPU与ARM之间来回传送需要处理或是需要储存的数据。</li><li>地址总线（Address Bus, AB）：用来指定在RAM（Random Access Memory）之中储存的数据的地址。</li><li>控制总线（Control Bus, CB）：将微处理器控制单元（Control Unit）的信号，传送到周边设备。</li></ul><h4 id="试题-4">试题</h4><ul><li><a href="https://blog.csdn.net/oopxiajun2011/article/details/108432340">试题：下列说法中正确的是（ ）。</a></li></ul><h2 id="cisc与risc">CISC与RISC</h2><ul><li>复杂指令集计算机(CISC, Complex Instruction Set Computers)</li><li>精简指令集计算机(RISC, Reduced Instruction Set Computers)</li></ul><table><thead><tr class="header"><th style="text-align: center;">指令系统类型</th><th style="text-align: center;">指令</th><th style="text-align: center;">寻址方式</th><th style="text-align: center;">实现方式</th><th style="text-align: center;">其他</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">CISC(复杂)</td><td style="text-align: center;">数据量多，使用评率差别大，可变长格式</td><td style="text-align: center;">支持多种</td><td style="text-align: center;">微程序控制技术(微码)</td><td style="text-align: center;">研制周期长</td></tr><tr class="even"><td style="text-align: center;">RISC(精简)</td><td style="text-align: center;">数量少，使用频率接近，定长格式，大部分为单周期指令，操作寄存器，只有Load/Store操作内存</td><td style="text-align: center;">支持方式少</td><td style="text-align: center;">增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td><td style="text-align: center;">优化编译，有效支持高级语言</td></tr></tbody></table><h2 id="流水线">流水线</h2><p>相关参数计算：流水线执行时间计算、流水线吞吐率、流水线加速比等。</p><p>→取指→分析→执行→</p><h3 id="流水线执行时间计算">流水线执行时间计算</h3><p>流水线周期为执行时间最长的一段</p><ul><li>流水线计算公式为：</li></ul><p><span class="math display">\[1条指令执行时间+(指令条数-1)*流水线周期\]</span></p><ul><li>理论公式：</li></ul><p><span class="math display">\[(t_1+t_2+..+t_k)+(n-1)*t\]</span></p><ul><li>实践公式：</li></ul><p><span class="math display">\[k*t+(n-1)*t\]</span></p><h4 id="试题-5">试题</h4><ul><li>试题一<ul><li><a href="https://wx.xisaiwang.com/tiku2/136/26778.html">一条指令的执行过程可以分解为取指、分析和执行三步，在取指时间t取指=3△t、分析时间t分析=2△t、执行时间t执行=4△t的情况下，若按串行方式执行，则10条指令全部执行完需要（ ）△t；若按流水线的方式执行，则10条指令全部执行完需要（ ）△t。</a></li></ul></li></ul><h3 id="流水线吞吐率">流水线吞吐率</h3><p>流水线的吞吐率（Though Put rate, TP）是指在单位时间内流水线所完成的任务数量或输出的结果数量。计算流水线吞吐率的最基本公式如下：</p><p><span class="math display">\[TP=\displaystyle\frac{指令条数}{流水线执行时间}\]</span></p><p>流水线的最大吞吐率：</p><p><span class="math display">\[TP_{max}=\displaystyle\lim_{n \to ∞}{\frac{n}{(k+n-1)t}}={\frac{1}{t}}\]</span></p><h3 id="流水线加速比计算">流水线加速比计算</h3><p>完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比为流水线的加速比。计算流水线加速比的基本公式如下：</p><p><span class="math display">\[S=\displaystyle\frac{不使用流水线执行时间}{使用流水线执行时间}\]</span></p><h4 id="试题-6">试题</h4><ul><li><a href="https://wx.xisaiwang.com/tiku2/351833.html">试题：某计算机系统采用5级流水线结构执行指令</a></li></ul><h2 id="嵌入式系统开发设计">嵌入式系统开发设计</h2><h3 id="芯片">芯片</h3><table><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">简介</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">DSP芯片</td><td style="text-align: center;">数字信号处理器</td></tr><tr class="even"><td style="text-align: center;">SoC片上系统</td><td style="text-align: center;">Soc是一个微小型系统</td></tr><tr class="odd"><td style="text-align: center;">MPU微处理器</td><td style="text-align: center;">微机中的中央处理器</td></tr><tr class="even"><td style="text-align: center;">MCU微控制单元</td><td style="text-align: center;">又称单片微型计算机或者单片机</td></tr></tbody></table><h4 id="试题-7">试题</h4><ul><li><a href="http://www.cnitpm.com/st/286712756.html">试题：嵌入式处理器是嵌入式系统的核心不见……错误的是（ ）。</a></li></ul><h2 id="校验码">校验码</h2><h3 id="奇偶校验">奇偶校验</h3><p>奇偶校验的编码方法是：由若干位有效信息（如一个字节），再加上一个二进制位（校验位）组成校验码。</p><ul><li>奇校验：整个校验码（有效信息位和校验位）中“1”的个数为奇数。</li><li>偶校验：整个校验码（有效信息位和校验位）中“1”的个数为偶数。</li></ul><p>奇偶校验，可检查1位的错误，不可纠错。</p><p><a href="https://blog.csdn.net/icxiaoge/article/details/79996456">Parity(奇偶校验)和ECC（错误检查和纠正）</a></p><h3 id="循环校验码crc">循环校验码CRC</h3><p>CRC校验，可检错，不可纠错。</p><p>模2除法。</p><p><a href="https://zhuanlan.zhihu.com/p/61636624">CRC（循环冗余校验码）简介与实现解析</a></p><p><em><a href="https://blog.51cto.com/winda/1063951">最通俗的CRC校验原理剖析</a></em></p><p><a href="https://blog.csdn.net/weixin_39450145/article/details/83987836">二进制模2除法（CRC校验）</a></p><h4 id="试题-8">试题</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/82967915">软考-CRC检验码计算</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/architect/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络">计算机网络</h1><h2 id="tcpip协议族">TCP/IP协议族</h2><!-- ![TCP/IP协议族](images/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/TCP-IP协议族.png" alt="" /><figcaption>TCP-IP协议族</figcaption></figure><!-- ![TCP-IP协议族2](images/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F2.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/TCP-IP协议族2.png" alt="" /><figcaption>TCP-IP协议族2</figcaption></figure><h2 id="dhcp">DHCP</h2><!-- ![DHCP](images/DHCP.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/DHCP.png" alt="" /><figcaption>DHCP</figcaption></figure><h2 id="dns">DNS</h2><p>域名系统（DNS, Domain Name System）</p><!-- ![DNS](images/DNS.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/DNS.png" alt="" /><figcaption>DNS</figcaption></figure><!-- ![DNS2](images/DNS2.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/DNS2.png" alt="" /><figcaption>DNS2</figcaption></figure><ul><li><p><a href="https://www.ruanyifeng.com/blog/2018/05/root-domain.html">根域名的知识</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43914604/article/details/105583806">6.2 详解DNS域名解析系统（域名、域名服务器[根、顶级、授权/权限、本地]、域名解析过程[递归与迭代]）</a></p></li><li><p><a href="https://www.jianshu.com/p/476a92a39b45">linux环境下/etc/hosts文件详解</a></p></li></ul><h2 id="网络规划与设计">网络规划与设计</h2><h3 id="需求分析">需求分析</h3><ul><li>功能需求</li><li>通信需求</li><li>性能需求</li><li>可靠性需求</li><li>安全需求</li><li>运行与维护需求</li><li>管理需求</li></ul><!-- ![网络规划与设计-需求分析](images/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络规划与设计-需求分析.png" alt="" /><figcaption>网络规划与设计-需求分析</figcaption></figure><!-- ![网络规划与设计](images/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%BE%E8%AE%A1.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络规划与设计.png" alt="" /><figcaption>网络规划与设计</figcaption></figure><h3 id="逻辑网络设计">逻辑网络设计</h3><p>利用需求分析和现有网络体系分析的结果来设计逻辑网络结构，最后得到一份逻辑网络设计文档，输出内容包括以下几点：</p><ul><li>逻辑网络设计图</li><li>IP地址方案</li><li>安全方案</li><li>招聘和培训网络员工的具体说明</li><li>软硬件、服务、员工和培训的费用初步估计</li></ul><h3 id="物理网络设计">物理网络设计</h3><p>物理网络设计是对逻辑网络设计的物理实现，通过对设备的具体物理分布、运行环境等确定，确保网络的物理连接符合逻辑连接的要求。输出如下内容：</p><ul><li>网络物理结构图和布线方案</li><li>设备和部件的详细列表清单</li><li>软硬件和安装费用的估算</li><li>安装后的测试计划</li><li>用户的培训计划</li></ul><h3 id="分层设计">分层设计</h3><!-- ![分层设计](images/%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/分层设计.png" alt="" /><figcaption>分层设计</figcaption></figure><h2 id="网络存储技术">网络存储技术</h2><h3 id="分类">分类</h3><!-- ![网络存储技术-分类](images/网络存储技术-分类.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络存储技术-分类.png" alt="" /><figcaption>网络存储技术-分类</figcaption></figure><!-- ![网络存储技术-分类2](images/网络存储技术-分类2.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/网络存储技术-分类2.png" alt="" /><figcaption>网络存储技术-分类2</figcaption></figure><h3 id="raid">Raid</h3><!-- ![Raid](images/Raid.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/Raid.png" alt="" /><figcaption>Raid</figcaption></figure><figure><img src="images/Raid2.png" alt="" /><figcaption>Raid2</figcaption></figure><figure><img src="images/Raid3.png" alt="" /><figcaption>Raid3</figcaption></figure><h2 id="ipv6">IPv6</h2><figure><img src="images/IPv6.png" alt="" /><figcaption>IPv6</figcaption></figure><figure><img src="images/IPv62.png" alt="" /><figcaption>IPv62</figcaption></figure><figure><img src="images/IPv63.png" alt="" /><figcaption>IPv63</figcaption></figure><figure><img src="images/IPv64.png" alt="" /><figcaption>IPv64</figcaption></figure><h2 id="网络接入技术">网络接入技术</h2><figure><img src="images/%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF.png" alt="" /><figcaption>网络接入技术</figcaption></figure><figure><img src="images/%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF2.png" alt="" /><figcaption>网络接入技术2</figcaption></figure><h2 id="综合布线系统">综合布线系统</h2><figure><img src="images/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF%E7%B3%BB%E7%BB%9F.png" alt="" /><figcaption>综合布线系统</figcaption></figure><figure><img src="images/%E7%BB%BC%E5%90%88%E5%B8%83%E7%BA%BF%E7%B3%BB%E7%BB%9F2.png" alt="" /><figcaption>综合布线系统2</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>architect</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础</title>
    <link href="/cpp/C++%E5%9F%BA%E7%A1%80/"/>
    <url>/cpp/C++%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="c基础">C++基础</h1><h2 id="cc">C/C++</h2><ul><li><a href="https://mp.weixin.qq.com/s/h3On-o0QybTkMy88Dy7qpA">C语言和C++的区别和联系</a></li><li><a href="https://www.bookstack.cn/read/linux-c/menu.md">Linux C编程一站式学习</a></li><li><a href="http://fsemouse.com/wordpress/2021/01/19/%E5%85%B3%E4%BA%8Elinux%E7%B3%BB%E7%BB%9F%E9%87%8Cglibc%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E8%BF%B0/">关于linux系统里glibc库的一些记述</a></li><li><a href="https://www.w3xue.com/manual/c/">C标准库 在线速查手册</a></li><li><a href="http://c.biancheng.net/view/7936.html">gcc和g++是什么，有什么区别？</a></li><li><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html">GCC 参数详解</a></li></ul><h2 id="库函数系统调用">库函数、系统调用</h2><ul><li><a href="https://blog.csdn.net/kwame211/article/details/77572123">Linux系统调用函数列表</a></li><li><a href="https://www.chinastor.com/manuals/linuxfunctions/">Linux函数调用手册</a></li><li><a href="https://www.cnblogs.com/Yogurshine/p/3666527.html">linux系统调用和库函数调用的区别</a></li><li><a href="https://mp.weixin.qq.com/s/64xAPVhntRjz65SvrCqi7g">在程序里面执行system(“cd /某个目录“)，为什么路径切换不成功？</a></li></ul><h2 id="main">main</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/main-function-command-line-args?view=msvc-170">main 函数和命令行参数</a></li></ul><h2 id="typedef">typedef</h2><ul><li><a href="https://www.cnblogs.com/xkdn/p/14518465.html">C语言typedef的用法详解</a></li><li><a href="https://blog.csdn.net/hai008007/article/details/80651886">C++typedef的详细用法</a></li><li><a href="http://c.biancheng.net/view/298.html">typedef的用法，C语言typedef详解 (biancheng.net)</a></li><li><a href="https://blog.csdn.net/astrotycoon/article/details/41286413">C语言的不完整类型和前置声明</a></li><li><a href="https://stackoverflow.com/questions/9999512/forward-declaration-of-a-struct-in-c"><font color=Red>forward declaration of a struct in C?</font></a></li><li><a href="https://blog.csdn.net/whahu1989/article/details/83627658"><font color=Red>C++里类的前置声明分析</font></a></li></ul><h2 id="头文件源文件">头文件、源文件</h2><ul><li><a href="https://www.runoob.com/cplusplus/cpp-variable-types.html"><font color=Red>C++ 变量类型 声明 定义</font></a></li><li><a href="https://www.cnblogs.com/fenghuan/p/4794514.html">C++中头文件（.h）和源文件（.cpp）都应该写些什么</a></li><li><a href="https://www.runoob.com/w3cnote/cpp-header.html">理解C++中的头文件和源文件的作用</a></li></ul><h3 id="预处理命令">预处理命令</h3><ul><li><a href="https://www.cnblogs.com/lanhaicode/p/10546514.html">预处理命令使用详解#if、#endif、#undef、#ifdef、#else、#elif - 蓝海人 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/sinat_28752257/article/details/84989928">与c++握手言和：define宏定义遇上expected primary-expression before ' ' taken</a></li><li><a href="https://www.cnblogs.com/acec/p/14674448.html">#pragma once用法总结</a></li></ul><h3 id="constdefine">const、define</h3><ul><li><a href="https://blog.csdn.net/YL970302/article/details/88916973"><font color=Red>const和define的区别以及const的优点</font></a></li></ul><h2 id="sizeof-strlen">sizeof strlen</h2><ul><li><a href="https://blog.csdn.net/ty6693/article/details/86699176">C语言中关于 strlen 和 sizeof 的用法及区别（含例题及解析）</a></li></ul><h2 id="运算符优先级">运算符优先级</h2><ul><li><a href="https://blog.csdn.net/yuliying/article/details/72898132">C语言运算符优先级（超详细）_yuliying的专栏-CSDN博客_运算符优先级</a></li></ul><h2 id="if">if</h2><ul><li><a href="https://blog.csdn.net/ithomer/article/details/5017929">[C/C++] 为什么把常量写在 == 运算符的左边</a></li><li><a href="https://blog.csdn.net/qq_41452267/article/details/105264542">C++ &amp;、&amp;&amp;、 |、|| 、|=、?: 逻辑运算符用法</a></li><li><a href="https://blog.csdn.net/weixin_44153896/article/details/108217579"><font color=Red>C语言中if(a)；if(!a)；if(a!=0)；if(a==0)有什么区别</font></a></li></ul><h2 id="switch">switch</h2><ul><li><a href="https://www.runoob.com/cplusplus/cpp-switch.html">C++ switch 语句</a></li></ul><h2 id="for">for</h2><ul><li><a href="https://blog.csdn.net/chenguigan/article/details/102637747">C语言的for循环中i++和++i的关系</a></li></ul><h2 id="extern">extern</h2><ul><li><a href="https://www.toutiao.com/i7028025947727217160/">C++是如何调用C接口的？</a></li><li><a href="https://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777431.html">C/C++中extern关键字详解</a></li></ul><h2 id="union">union</h2><ul><li><a href="http://c.biancheng.net/view/2035.html">C语言共用体（C语言union用法）详解</a></li></ul><h2 id="位域">位域</h2><ul><li><a href="https://www.cnblogs.com/zlcxbb/p/6803059.html">C/C++ 位域知识小结</a></li><li><a href="https://www.runoob.com/cprogramming/c-bit-fields.html">C 位域</a></li></ul><h2 id="数组">数组</h2><ul><li><a href="https://blog.csdn.net/qq_41574298/article/details/108873959">C/C++ 关于一维或二维数组首地址表示含义</a></li><li><a href="http://c.biancheng.net/view/2022.html">C语言二维数组指针（指向二维数组的指针）详解</a></li><li><a href="https://blog.csdn.net/qq_41574298/article/details/108873959">C/C++ 关于一维或二维数组首地址表示含义</a></li><li><a href="https://blog.csdn.net/qq_38325803/article/details/102751865">数组和指针绝不等价，数组是另外一种类型</a></li><li><a href="http://m.biancheng.net/view/227.html">二维数组指针表示，C语言指针引用二维数组详解</a></li></ul><h2 id="引用">引用</h2><ul><li><a href="https://blog.csdn.net/Amber_technology/article/details/105020482">C++引用、取地址符</a></li></ul><h2 id="指针">指针</h2><ul><li><a href="http://c.biancheng.net/view/1991.html">C语言指针变量的定义和使用（精华）</a></li><li><a href="https://blog.csdn.net/qq_43205256/article/details/123097791">第九章 指针_只需一招，彻底攻克C语言指针，再复杂的指针都不怕</a></li><li><a href="https://mp.weixin.qq.com/s/t7vomHGTMJ179XTmuJjDqQ">看完还不会指针，锤自己！</a></li></ul><h2 id="函数">函数</h2><ul><li><p><a href="https://blog.csdn.net/qq826364410/article/details/88902027">C++函数编译原理和成员函数的实现</a></p></li><li><p><a href="http://c.biancheng.net/view/1855.html"><font color=Red>C语言return的用法详解，C语言函数返回值详解</font></a></p></li><li><p><a href="https://blog.csdn.net/K346K346/article/details/88371267">ABI 与 API 的区别</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328525009056">函数式编程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/D9lLDvdLI9lkDXhMhr-VKQ">Linux 可重入、异步信号安全和线程安全</a></p></li></ul><h3 id="回调函数">回调函数</h3><ul><li><a href="https://www.toutiao.com/i7054434692053090853">「C/C++」回调函数详解，拿捏住了</a></li><li><a href="https://mp.weixin.qq.com/s/eFYM4uOIF09t8b9tTD523A">10张图让你彻底理解回调函数</a></li><li><a href="https://mp.weixin.qq.com/s/wq2Zwpx_V9JHvC81gN4hPA">C语言回调函数，提升C技巧必备</a></li><li><a href="https://www.cnblogs.com/skynet/p/3343726.html">C++对象模型</a></li><li><a href="https://blog.csdn.net/qq_34938983/article/details/118277929">C++对象模型——Function语意学</a></li><li><a href="https://mp.weixin.qq.com/s/4mFv0IqvOS_FBEXSwg8KnQ">为什么C++中有函数指针还需要std::function？</a></li></ul><h3 id="c函数返回指针">C++函数返回指针</h3><ul><li><a href="https://www.runoob.com/cplusplus/cpp-return-pointer-from-functions.html">C++ 从函数返回指针</a></li><li><a href="https://blog.csdn.net/u013700358/article/details/100941168">关于C++函数返回指针的情况</a></li><li><a href="https://blog.csdn.net/gogokongyin/article/details/51472062">函数返回局部变量问题</a></li><li><a href="https://www.runoob.com/w3cnote/cpp-return-array.html">C++ 怎样让函数返回数组</a></li></ul><h2 id="class">Class</h2><ul><li><a href="http://c.biancheng.net/view/9442.html">面向对象究竟是什么鬼？该如何理解？</a></li><li><a href="https://mp.weixin.qq.com/s/93Z1QX5cMsN6888i8KFjWA">漫画 | 因为用了C语言，Linux内核代码一团糟</a></li><li><a href="https://mp.weixin.qq.com/s/2ivQ9hcRvZnhk89jzAppSg">C语言：春节回家过年，我发现只有我没有对象！</a></li><li><a href="https://kb.cnblogs.com/page/129490/">UML类图几种关系的总结</a></li></ul><h3 id="conststatic">const、static</h3><ul><li><a href="https://blog.csdn.net/weixin_43644231/article/details/88769163">关于C++ 类中数据成员在定义时初始化问题。</a></li><li><a href="http://c.biancheng.net/view/2223.html">初始化const成员变量</a></li><li><a href="https://www.runoob.com/w3cnote/cpp-static-const.html">C++ static、const 和 static const 类型成员变量声明以及初始化</a></li><li><a href="https://blog.csdn.net/FreeApe/article/details/50979425">C/C++-static函数，static成员函数，static变量，static成员变量 再来理一理</a></li><li><a href="https://www.cnblogs.com/hustfeiji/articles/5168529.html">C++ static、const和static const 以及它们的初始化（转） - hustfeiji - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/m0_37433111/article/details/115342523">C++中static变量的初始化</a></li><li><a href="http://c.biancheng.net/view/7644.html">C++ const常量在多文件编程中的3种用法</a></li><li><a href="http://c.biancheng.net/view/2230.html">C++ const成员变量和成员函数（常成员函数）</a></li><li><a href="https://blog.csdn.net/QQrenzai/article/details/49716515"><font color=Red>C/C++语法高阶：const的应用，const在类中的体现</font></a></li></ul><h3 id="默认初始化和值初始化">默认初始化和值初始化</h3><ul><li><a href="https://www.cnblogs.com/FengZeng666/p/9276618.html"><font color=Red>C++ 变量的默认初始化和值初始化</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/350008529">注意了！C++默认初始化与值初始化的这个细节，千万不要忽视！</a></li><li><a href="https://blog.csdn.net/xiazhiyiyun/article/details/52551359">C++基础 内置类型和类类型的默认初始化和值初始化</a></li><li><a href="https://www.coder.work/article/30481">c++ - 是否需要在头文件中定义初始化列表？</a></li><li><a href="https://blog.csdn.net/Lanyan9/article/details/123316610">C/C++中局部/全局变量初始值或默认值问题</a></li></ul><h3 id="构造函数">构造函数</h3><ul><li><p><a href="https://www.cnblogs.com/xiaoniu-666/p/9491897.html">C++ 对象实例化（转）</a></p></li><li><p><a href="https://www.cnblogs.com/gklovexixi/p/5814626.html">C++的默认构造函数与构造函数</a></p></li><li><p><a href="https://blog.csdn.net/qq_40024275/article/details/100528201"><font color=Red>【C/C++】构造函数调用次数</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_45740212/article/details/117621845">C++ 构造函数详解</a></p></li><li><p><a href="https://blog.csdn.net/TABE_/article/details/116714304">C++中的五种构造函数</a></p></li><li><p><a href="https://www.51cto.com/article/698838.html">Part2二、构造/析构/赋值运算-Effective C++ 高阶笔记</a></p></li><li><p><a href="https://www.toutiao.com/article/7162493227524702724"><font color=Red>解密C++ 构造函数</font></a></p></li><li><p><a href="https://www.cnblogs.com/lsgxeva/p/7668200.html"><font color=Red>c++ 类的默认八种函数 - lsgxeva - 博客园 (cnblogs.com)</font></a></p></li><li><p><a href="https://blog.shipengx.com/archives/2eb22c6f.html">如果一个类定义了自己的拷贝构造函数、拷贝赋值运算符或者析构函数，编译器就不会为它合成移动构造函数和移动赋值运算符</a></p></li><li><p><a href="https://blog.csdn.net/cherrydreamsover/article/details/81949668"><font color=Red>C++类的六个默认成员函数_cherrydreamsover的博客-CSDN博客_c++类的6个默认成员函数</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_29344757/article/details/76037255"><font color=Red>c++的默认拷贝构造函数，从深度拷贝和浅拷贝说起</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/188311618">C++的默认拷贝构造函数，从深拷贝和浅拷贝说起 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/wangpei0522/p/4530635.html">C++调用构造函数的方式 - P.wang - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.cnblogs.com/QG-whz/p/4676481.html">C++ 合成默认构造函数的真相 - melonstreet - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/ysayk/article/details/50978974">默认构造函数和合成默认构造函数_XDMonkey-CSDN博客_合成默认构造函数</a></p></li><li><p><a href="https://blog.csdn.net/hankai1024/article/details/7947989">C++默认构造函数——深入理解_HAN Kai-CSDN博客_c++ 默认构造函数</a></p></li><li><p><a href="https://blog.csdn.net/qq_41540355/article/details/120751543">C++ override 虚析构函数 使用技巧</a></p></li></ul><h4 id="explicit-default-delete">explicit default delete</h4><ul><li><a href="https://blog.csdn.net/readyone/article/details/112371671"><font color=Red>C++ explicit关键字用法详解</font></a></li><li><a href="https://blog.csdn.net/liunan199481/article/details/85251197">c++ 隐式类型转换_一只懒虫的博客-CSDN博客_c++隐式转换</a></li><li><a href="https://blog.csdn.net/qq_35524916/article/details/58178072">C++中explicit的用法</a></li><li><a href="https://blog.csdn.net/u012333003/article/details/25299939"><font color=Red>C++中的默认函数与default和delete用法</font></a></li><li><a href="https://www.jianshu.com/p/ef66ba66916c">C++11 =default和=delete -简书(jianshu.com)</a></li><li><a href="https://blog.csdn.net/weixin_38339025/article/details/89161324">C++中的=default和=delete_FEEL的博客-CSDN博客_c++ default</a></li></ul><h4 id="初始化列表">初始化列表</h4><ul><li><a href="https://www.cnblogs.com/shijingjing07/p/5550556.html">C++ 初始化列表</a></li><li><a href="https://www.cnblogs.com/weizhixiang/p/6374430.html">C++使用初始化列表提高效率（转）： - A-祥子 - 博客园 (cnblogs.com)</a></li><li><a href="https://magodo.github.io/inheritance">2.2 在子类的构造函数中初始化基类中的成员变量</a></li><li><a href="https://zhuanlan.zhihu.com/p/106920426">C++日志（三十一）类继承时的构造函数</a></li><li><a href="https://blog.csdn.net/qq_26728227/article/details/51332970"><font color=Red>C++ 子类继承带参的父类构造函数应该怎么写</font></a></li><li><a href="https://blog.csdn.net/K346K346/article/details/81703914"><font color=Red>C++11 继承构造函数</font></a></li><li><a href="http://c.biancheng.net/view/2275.html">C++基类和派生类的构造函数</a></li><li><a href="https://blog.csdn.net/zhjixi495/article/details/103197312">为什么很多人禁用拷贝（复制）构造函数</a></li><li><a href="https://blog.csdn.net/qq_34673519/article/details/101429799">C++中为什么需要将基类的析构函数设置为虚函数</a></li><li><a href="https://blog.csdn.net/heibao111728/article/details/80814313"><font color=Red>析构函数写成virtual的好处</font></a></li><li><a href="https://blog.csdn.net/qq_38393591/article/details/108997232">C++继承 构造函数和析构函数的执行顺序</a></li></ul><h3 id="内联函数">内联函数</h3><ul><li><a href="http://c.biancheng.net/view/199.html">C++内联函数（C++ inline）详解</a></li><li><a href="http://c.biancheng.net/view/2201.html">C++ inline内联函数详解</a></li><li><a href="https://www.runoob.com/cplusplus/cpp-inline-functions.html">C++ 内联函数</a></li><li><a href="http://c.biancheng.net/cpp/biancheng/view/186.html">C++类的成员变量和成员函数</a></li></ul><h3 id="friend">friend</h3><ul><li><a href="https://blog.csdn.net/weixin_53472920/article/details/119577775"><font color=Red>C++之友元：是朋友（friend）也是破坏者</font></a></li><li><a href="http://c.biancheng.net/cpp/biancheng/view/211.html">C++ friend友元函数和友元类</a></li><li><a href="http://c.biancheng.net/view/169.html">C++友元函数和友元类（C++ friend）详解</a></li><li><a href="https://blog.csdn.net/snowsnowsnow1991/article/details/50314961#commentBox">流运算符为什么不能重载为成员函数，只能用友元函数重载</a></li></ul><h3 id="类指针成员">类指针成员</h3><ul><li><a href="http://c.biancheng.net/cpp/biancheng/view/201.html">C++ this指针详解</a></li><li><a href="https://www.cnblogs.com/lucy-lizhi/p/6551308.html">C++ 带有指针成员的类处理方式</a></li><li><a href="https://bbs.csdn.net/topics/370037865">c++ 类中指针的释放（delete）</a></li><li><a href="http://c.biancheng.net/cpp/biancheng/view/196.html">C++析构函数（Destructor）</a></li></ul><h3 id="继承多态">继承多态</h3><ul><li><a href="https://blog.csdn.net/scottly1/article/details/24354489">C++中public、protected、private的区别_SCOTT技术博客-CSDN博客_private</a></li><li><a href="https://zhuanlan.zhihu.com/p/37340242">C++ 多态 - 知乎 (zhihu.com)</a></li><li><a href="https://www.cnblogs.com/lfri/p/12722086.html">C++菱形继承问题 - Rogn - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/onlyshi/article/details/81672279">C 语言实现面向对象编程_onlyshi的专栏-CSDN博客_c 面向对象</a></li><li><a href="https://blog.csdn.net/z13653662052/article/details/89003731"><font color=Red>C语言结构体变量私有化</font></a></li></ul><h2 id="内存管理">内存管理</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/344377490"><font color=Red>深度阅读：深入 C++ 内存管理（万字长文）</font></a></li></ul><h3 id="进程结构">进程结构</h3><ul><li><a href="https://blog.csdn.net/cl_linux/article/details/80328608">Linux进程地址空间和进程的内存分布</a></li><li><a href="https://cloud.tencent.com/developer/article/1449872">认识目标文件结构 - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://www.toutiao.com/article/7198085217624687161">C++栈与堆 内存空间模型详解</a></li></ul><h4 id="代码区常量区静态区全局区堆区栈区">代码区、常量区、静态区（全局区）、堆区、栈区</h4><ul><li><a href="https://blog.csdn.net/MQ0522/article/details/114823770">C语言：内存分配---栈区、堆区、全局区、常量区和代码区</a></li><li><a href="https://blog.csdn.net/u014470361/article/details/79297601"><font color=Red>什么是代码区、常量区、静态区（全局区）、堆区、栈区？</font></a></li></ul><h3 id="虚拟内存">虚拟内存</h3><ul><li><a href="https://juejin.cn/post/6844903507594575886">虚拟内存的那点事儿 - 掘金 (juejin.cn)</a></li></ul><h3 id="对象内存">对象内存</h3><ul><li><a href="https://blog.csdn.net/weixin_43374723/article/details/107128204">Linux 下利用 gdb 查看 C++ 对象内存分布_WavenZ的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/www_dong/article/details/115050681">c++——类内部的内存分布_www_dong的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/zcyzsy/article/details/77935651">C/C++中基本数据类型所占内存大小_ZMyths的博客-CSDN博客_c++类型大小</a></li><li><a href="https://blog.csdn.net/tmhanks/article/details/89110833"><font color=Red>GDB查看C++对象布局_tmhanks的博客-CSDN博客</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/156880783"><font color=Red>面试系列之C++的对象布局【建议收藏】 - 知乎 (zhihu.com)</font></a></li><li><a href="https://mp.weixin.qq.com/s/xTj_FLz0P3uXi-hi8jN_zA"><font color=Red>深入探究C++虚函数表——从内存的角度</font></a></li><li><a href="https://mp.weixin.qq.com/s/wlgmS5DVJF80epo7PKxOuQ">C语言各数据类型的内存映像</a></li><li><a href="https://www.cnblogs.com/zhjblogs/p/15149681.html">C++中类所占的内存大小以及成员函数的存储位置 - 北极星! - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/bryant_xw/article/details/89479480"><font color=Red>C++类大小详解</font></a></li><li><a href="https://blog.csdn.net/qfturauyls/article/details/107646050"><font color=Red>程序员应了解的那些事（10）-为什么C++中空类和空结构体大小为1？</font></a></li><li><a href="https://blog.csdn.net/feigegegegegegegeg/article/details/52613627">C++引用占用内存？_飞鸿印雪的博客-CSDN博客_c++引用占用内存吗</a></li><li><a href="https://mikeblog.top/2019/02/15/C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/">C++ 对象模型</a></li></ul><h3 id="大小端">大小端</h3><ul><li><a href="https://www.ruanyifeng.com/blog/2016/11/byte-order.html">理解字节序</a></li><li><a href="https://blog.csdn.net/u010368322/article/details/106790016">二进制读写之大端VS小端</a></li></ul><h3 id="new-delete-malloc-free">new delete malloc free</h3><ul><li><a href="https://www.jianshu.com/p/e9c2b523f297">C++ 定位（placement）new 操作符 - 简书 (jianshu.com)</a></li><li><a href="https://www.jianshu.com/p/4af119c44086">理解C++ placement语法 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/shuzishij/article/details/86574927">操作系统brk()和mmap()详解_moots-CSDN博客_brk mmap</a></li><li><a href="https://www.cnblogs.com/sxy-798013203/p/7790376.html">【 C语言指针详解 】(七）野指针 - 799 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.jianshu.com/p/c092e8c20479">野指针 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_36570733/article/details/80043321"><font color=Red>C++指针delete后还要置为null</font></a></li><li><a href="https://blog.csdn.net/u014465639/article/details/72854760"><font color=Red>C++之RAII惯用法</font></a></li></ul><h2 id="c11-新特性">C++11 新特性</h2><ul><li><p><a href="http://c.biancheng.net/cplus/11/"><font color=Red>C++11教程：C++11新特性大汇总</font></a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/cpp-11-faq/content/52.html">C++11的原生字符串-标识</a></p></li></ul><h3 id="右值引用">右值引用</h3><ul><li><a href="https://www.cnblogs.com/kekec/p/10810507.html"><font color=Red>深入理解C++右值引用</font></a></li><li><a href="https://blog.csdn.net/kakadiablo/article/details/123068336">左值和右值我的理解</a></li><li><a href="https://www.cnblogs.com/qicosmos/p/4283455.html"><font color=Red>从4行代码看右值引用</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/54050093"><font color=Red>C++右值引用 - 知乎 (zhihu.com)</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1868759"><font color=Red>理解C++右值引用和std::move-云+社区-腾讯云(tencent.com)</font></a></li><li><a href="https://www.toutiao.com/i6906371639865655816">不再困惑！一文教你读懂C++右值引用和std::move (toutiao.com)</a></li><li><a href="https://blog.csdn.net/p942005405/article/details/84644069">c++ 之 std::move 原理实现与用法总结_学之知之的博客-CSDN博客_std::move</a></li><li><a href="https://www.cnblogs.com/shadow-lr/p/14748272.html">一文带你详细介绍c++中的std::move函数 - shadow_lr - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1561361">现代C++之如何返回一个对象?</a></li></ul><h3 id="智能指针">智能指针</h3><ul><li><a href="https://blog.csdn.net/cpp_learner/article/details/118912592">C++ 智能指针 - 全部用法详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/356627164">C++智能指针：std::auto_ptr为什么被废弃 - 知乎 (zhihu.com)</a></li><li><a href="https://www.toutiao.com/article/6839870422234694156">现代 C++一文读懂智能指针</a></li><li><a href="https://zhuanlan.zhihu.com/p/63890916">智能指针auto_ptr、unique_ptr、shared_ptr区别-知乎(zhihu.com)</a></li><li><a href="https://blog.csdn.net/yj_android_develop/article/details/87983707">C++智能指针——auto_ptr详解_yj_android_develop的博客-CSDN博客_auto_ptr</a></li><li><a href="https://mp.weixin.qq.com/s/deG0GHRpz4Qgq4cLSiW6-g">C++ 共享指针四宗罪</a></li></ul><h3 id="constexpr">constexpr</h3><ul><li><a href="http://c.biancheng.net/view/7781.html">C++11 constexpr：验证是否为常量表达式（长篇神文） (biancheng.net)</a></li></ul><h3 id="stdfunction">std::function</h3><ul><li><a href="https://www.cnblogs.com/yinwei-space/p/12708871.html">C++11： std::function&lt;void()&gt; func;</a></li><li><a href="https://blog.csdn.net/k346k346/article/details/82818801">C++ 仿函数</a></li><li><a href="https://www.toutiao.com/article/7168329361840718369">C++中有函数指针，为什么还需要std::function？</a></li></ul><h3 id="lambda函数">lambda函数</h3><ul><li><a href="https://blog.csdn.net/zxm342698145/article/details/91978568">C++11 lambda函数</a></li><li><a href="https://blog.csdn.net/zxm342698145/article/details/91978568">c++新特性：lambda</a></li></ul><h3 id="模板">模板</h3><ul><li><a href="https://blog.csdn.net/xin_hen/article/details/108782175">模板为什么必须定义在头文件</a></li><li><a href="https://blog.csdn.net/l15799033407/article/details/120411311">C++中模板以及模板实例化都放在头文件</a></li><li><a href="https://www.jianshu.com/p/70ca94872418">C++类模板，你看我就够了</a></li><li><a href="https://www.cnblogs.com/qicosmos/p/4325949.html">泛化之美C++11可变模版参数的妙用</a></li><li><a href="https://cloud.tencent.com/developer/article/1701143">整理C/C++的可变参数</a></li></ul><h3 id="stl">STL</h3><ul><li><a href="https://blog.csdn.net/qq_36779888/article/details/82220997">C++STL详解</a></li><li><a href="https://www.cnblogs.com/anywei/archive/2011/10/27/2226830.html">C++中map容器的说明和使用技巧 - anywei - 博客园</a></li><li><a href="http://c.biancheng.net/view/480.html">C++ priority_queue(STL priority_queue)用法详解</a></li><li><a href="https://blog.csdn.net/sandalphon4869/article/details/105419706">C++：std::greater()、std::less()、自定义比较函数的规则</a></li><li><a href="http://c.biancheng.net/view/7230.html"><font color=Red>C++ STL无序容器（哈希容器）是什么？</font></a></li><li><a href="http://c.biancheng.net/view/3437.html"><font color=Red>哈希表（散列表）详解（包含哈希表处理冲突的方法）</font></a></li><li><a href="http://data.biancheng.net/view/85.html"><font color=Red>红黑树算法和应用(更高级的二叉查找树)</font></a></li></ul><h4 id="stl排序sort">STL排序(Sort)</h4><ul><li><a href="https://www.cnblogs.com/junbaobei/p/10776066.html">C++中sort函数使用方法 - 俊宝贝 - 博客园</a></li><li><a href="https://blog.csdn.net/qianlixiaomage/article/details/81205584">C++自带sort函数对vector容器元素进行排序</a></li><li><a href="https://blog.csdn.net/zhouxun623/article/details/49887555">C++中,结构体vector使用sort排序</a></li><li><a href="https://www.cnblogs.com/zhouxiaosong/p/5557990.html">关于C++中vector和set使用sort方法进行排序-不著人间风雨门-博客园</a></li><li><a href="https://www.cnblogs.com/helloWaston/p/4584324.html">【C++】从最简单的vector中sort用法到自定义比较函数comp后对结构体排序的sort算法 - HelloWaston - 博客园</a></li><li><a href="https://www.cnblogs.com/li-daphne/p/5525546.html">详细解说 STL 排序(Sort)</a></li><li><a href="http://www.cppblog.com/mzty/archive/2005/12/15/1770.html">详细解说 STL 排序(Sort)</a></li><li><a href="https://blog.csdn.net/weixin_36750623/article/details/92075565">STL &amp; vector： max_element、min_element</a></li><li><a href="http://m.biancheng.net/stl/algorithms/">C++ STL常用算法（排序、合并、搜索和分区）</a></li><li><a href="https://www.toutiao.com/article/7143891436965462536/">C++STL「容器」详解 （全站最详细）</a></li><li><a href="https://www.toutiao.com/article/7135719892027720232/">STL 红黑树源码分析</a></li></ul><h4 id="容器元素的深拷贝和浅拷贝">容器元素的深拷贝和浅拷贝</h4><ul><li><a href="https://cloud.tencent.com/developer/article/1868759"><font color=Red>理解C++右值引用和std::move-云+社区-腾讯云(tencent.com)</font></a></li><li><a href="https://www.cnblogs.com/Manual-Linux/p/11087903.html">容器元素的深拷贝和浅拷贝问题</a></li><li><a href="https://blog.csdn.net/weixin_41874599/article/details/91444953">c++ 中容器元素深拷贝和浅拷贝的问题</a></li><li><a href="https://www.jianshu.com/p/9d93ec48ae6a">C++STL | 容器元素浅拷贝深拷贝问题及容器共性和使用场景</a></li><li><a href="https://blog.csdn.net/earbao/article/details/44492185">vector内数据的深拷贝和浅拷贝</a></li></ul><h2 id="boost">boost</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1433313">详解BOOST库智能指针</a></li><li><a href="https://blog.csdn.net/xp178171640/article/details/105405950">面试之Boost</a></li></ul><h2 id="设计模式">设计模式</h2><ul><li><p><a href="http://c.biancheng.net/view/1317.html">软件设计模式概述 (biancheng.net)</a></p></li><li><p><a href="https://github.com/jaredtao/DesignPattern"><font color=Red>C++11实现23种设计模式</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_33854260/article/details/77398781#t4"><font color=Red>C++各类设计模式及实现详解</font></a></p></li><li><p><a href="https://www.cnblogs.com/chengjundu/p/8473564.html">C++常用设计模式（学习笔记）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/x_VnTXSkb1MAnm6WSpRh8g">经典永不过时！重温设计模式 (qq.com)</a></p></li><li><p><a href="https://www.cnblogs.com/chengjundu/p/8473564.html">C++设计模式</a></p></li><li><p><a href="https://bbs.huaweicloud.com/blogs/348717">简单工厂、工厂方法和抽象工厂之间的区别</a></p></li><li><p><a href="https://www.cnblogs.com/xiaolincoding/p/11437231.html"><font color=Red>C++ 线程安全的单例模式总结</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/232319083"><font color=Red>C++ 单例模式的模板实现 - 知乎 (zhihu.com)</font></a></p></li><li><p><a href="https://blog.csdn.net/heibao111728/article/details/80814313">析构函数写成virtual的好处</a></p></li><li><p><a href="https://www.cnblogs.com/sunchaothu/p/10389842.html"><font color=Red>C++ 单例模式总结与剖析</font></a></p></li><li><p><a href="https://www.cnblogs.com/loveis715/archive/2012/07/18/2598409.html">面试中的Singleton</a></p></li><li><p><a href="https://blog.csdn.net/janeqi1987/article/details/103671600">奇异递归模板模式(CRTP: Curiously Recurring Template Pattern)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/142407249">Design Patterns With C++（八）CRTP（上）</a></p></li><li><p><a href="https://blog.csdn.net/lihao21/article/details/47610309"><font color=Red>编译防火墙——C++的Pimpl惯用法解析</font></a></p></li><li><p><a href="https://refactoringguru.cn/design-patterns/command">命令模式</a></p></li><li><p><a href="https://blog.csdn.net/nzdwancgb/article/details/120377588"><font color=Red>软件架构风格 仓库风格</font></a></p></li></ul><h2 id="file">file</h2><ul><li><a href="https://www.cjavapy.com/article/1835/">C++ File文件处理 删除文件和文件夹目录</a></li></ul><h2 id="time">time</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1735036">C++获取当前系统时间并格式化输出 - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://www.jianshu.com/p/032da8113be5">C/C++时间函数(Linux) - 简书 (jianshu.com)</a></li></ul><h2 id="进度条">进度条</h2><ul><li><a href="https://mp.weixin.qq.com/s/dQ907HjxEq8sZXkHx0dPkQ">教你在 Linux 上写一个进度条小程序</a></li><li><a href="https://www.cnblogs.com/cnjavahome/p/8893813.html">Linux、Windows 和 Mac 中的换行符对比</a></li></ul><h2 id="缓存">缓存</h2><ul><li><a href="https://blog.csdn.net/irean_lau/article/details/51395515">redis+mysql数据同步（协同）C/C++实现 原</a></li><li><a href="https://www.cnblogs.com/qingyunzong/p/9004509.html">Kafka学习之路 （一）Kafka的简介</a></li><li><a href="https://mp.weixin.qq.com/s/ijek6Tdb6H3hqY2CEC917Q">从面试角度来看一看 Kafka</a></li></ul><h2 id="其他">其他</h2><ul><li><p><a href="https://www.linuxidc.com/Linux/2015-01/111501.htm">看开源代码利器—用Graphviz + CodeViz生成C/C++函数调用图(call graph)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/FQaT8DhfDYugA1CYiymqaA">求求你不要写满屏的 try...catch 了，这才是优雅的处理方式，真香！</a></p></li><li><p><a href="https://www.toutiao.com/article/7169042655157174796/">漫画 | 永不过时的编程语言终于出现了</a></p></li><li><p><a href="https://www.toutiao.com/article/7169041177684050445/">漫画：为什么C语言永不过时？</a></p></li></ul><h3 id="快捷键">快捷键</h3><ul><li><a href="https://www.cnblogs.com/nevermore/p/6936329.html">clion 快捷键 - NeverMore! - 博客园</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++多线程</title>
    <link href="/cpp/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/cpp/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="c多线程">C++多线程</h1><ul><li><p><a href="https://mp.weixin.qq.com/s/Z07Hc9SRfGz6n8XhFHGVyA">高并发高性能服务器是如何实现的</a></p></li><li><p><a href="https://blog.csdn.net/github_37382319/article/details/108478589">看完这篇还不懂高并发中的线程与线程池你来打我(内含20张图)</a></p></li><li><p><a href="https://blog.csdn.net/valada/article/details/104707137">写给大忙人看的进程和线程（内附思维导图）</a></p></li></ul><h2 id="pthread">pthread</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/gfON0gD6gV3QdobC_uYckA">为什么glibc 2.34删除libpthread</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/2eetiUAtedavND8c-sQM5w">Linux 多线程全面解析</a></p></li><li><p><a href="https://blog.csdn.net/w903414/article/details/110005612"><font color=Red>【Linux】多线程详解，一篇文章彻底搞懂多线程中各个难点！！！</font></a></p></li><li><p><a href="https://www.cnblogs.com/yinbiao/p/11190336.html"><font color=Red>【Linux】多线程同步的四种方式 - Y先森0.0 - 博客园 (cnblogs.com)</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7106767459059089923"><font color=Red>linux c/c++开发：多线程并发锁：互斥锁、自旋锁、原子操作、CAS</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/QITWTjR1T9eVBwPJ6sGZBA">详解Linux多线程中互斥锁、读写锁、自旋锁、条件变量、信号量</a></p></li><li><p><a href="https://blog.csdn.net/hairetz/article/details/4535920"><font color=Red>pthread_cond_wait()用法分析</font></a></p></li><li><p><a href="https://blog.csdn.net/wteruiycbqqvwt/article/details/99707580"><font color=Red>linux对线程等待和唤醒操作（pthread_cond_timedwait 详解）</font></a></p></li></ul><h2 id="c11多线程">C++11多线程</h2><ul><li><p><a href="https://www.cnblogs.com/HeyLUMouMou/p/17481385.html">从C++mutex到futex</a></p></li><li><p><a href="https://www.toutiao.com/article/7153230059011686948/">从无栈协程到 C++异步框架</a></p></li><li><p><a href="https://blog.csdn.net/fanyun_01/article/details/100178104">c++11中关于std::thread的join函数详解_fanyun的博客-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/haippy/p/3284540.html">C++11 并发指南系列 - Haippy - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.cnblogs.com/haippy/p/3252041.html">C++11 并发指南五(std::condition_variable 详解) - Haippy - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/feikudai8460/article/details/109604690">C++11条件变量：notify_one()与notify_all()的区别_feikudai8460的博客-CSDN博客_c++ notify_one</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/WsYEvRays-l58KAOwwzP-w">C++11是如何封装Thread库的？</a></p></li></ul><h3 id="join">join</h3><ul><li><a href="https://www.cnblogs.com/chen-cs/p/13055211.html">【C++多线程】join()及注意 - Chen沉尘 - 博客园 (cnblogs.com)</a></li></ul><h4 id="文件锁">文件锁</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/25134841">被遗忘的桃源——flock 文件锁 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/Cassiel_Paris/article/details/79776712">linux 文件记录锁</a></li><li><a href="https://blog.csdn.net/weixin_35983774/article/details/126050686">Linux Programming 学习笔记 ：File Locking</a></li><li><a href="https://blog.csdn.net/ls2018536/article/details/121856510">linux文件锁</a></li><li><a href="https://www.cnblogs.com/wanpengcoder/p/5305749.html">Linux-进程间通信（六）: 记录锁</a></li><li><a href="https://blog.csdn.net/ciguaxi2841/article/details/100778292">Linux文件锁实现之flock(2)与fcntl(2)</a></li></ul><h2 id="死锁">死锁</h2><ul><li><p><a href="https://www.toutiao.com/article/7131231200097862158">手把手带你实现一个死锁检测组件</a></p></li><li><p><a href="https://blog.csdn.net/qq_26553393/article/details/122281044">2.4.2 死锁的处理策略-预防死锁（破坏互斥条件、破坏不可剥夺条件、破坏请求和保持条件、破坏循环等待条件）</a></p></li><li><p><a href="https://blog.csdn.net/zsiming/article/details/126695393"><font color=Red>Linux下排除死锁详细教程（基于C++11、GDB）</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Jjio-cNapfUMBqEOefi1og">手画图解 | 关于死锁，面试的一切都在这里了</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/446932523"><font color=Red>多线程检测工具ThreadSanitizer 与 Helgrind 的使用</font></a></p></li></ul><h2 id="线程池">线程池</h2><ul><li><a href="https://blog.csdn.net/MOU_IT/article/details/88712090">C++实现线程池_蓬莱道人的博客-CSDN博客_c++实现线程池</a></li><li><a href="https://www.cnblogs.com/oloroso/p/5881863.html">C++11的简单线程池代码阅读-乌合之众-博客园(cnblogs.com)</a></li><li><a href="https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/"><font color=Red>C++ 线程池</font></a></li><li><a href="https://blog.csdn.net/zzhongcy/article/details/89453370">c++11：线程池，boost threadpool、thread_group example_zzhongcy的专栏-CSDN博客_boost 线程池</a></li><li><a href="https://www.cnblogs.com/lidabo/p/3328402.html">线程池原理及创建（C++实现）- DoubleLi -博客园(cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/cpper-kaixuan/articles/3640485.html">C++线程池原理及创建（转）- cpper-kaixuan -博客园(cnblogs.com)</a></li><li><a href="https://www.jb51.net/article/75295.htm">深入解析C++编程中线程池的使用_C 语言_脚本之家 (jb51.net)深入解析C++编程中线程池的使用_C 语言_脚本之家 (jb51.net)</a></li><li><a href="https://blog.csdn.net/qq_36359022/article/details/78796784">线程池原理及C语言实现线程池</a></li><li><a href="https://blog.csdn.net/robothj/article/details/80172287">c++/c实现线程池</a></li><li><a href="https://github.com/lzpong/threadpool/blob/master/Main.cpp">threadpool/Main.cpp at master · lzpong/threadpool (github.com)</a></li><li><a href="https://www.cnblogs.com/lzpong/p/6397997.html">基于C++11的线程池(threadpool),简洁且可以带任意多的参数 - _Ong - 博客园 (cnblogs.com)</a></li></ul><h3 id="数据库连接池">数据库连接池</h3><ul><li><a href="https://blog.csdn.net/weixin_43825537/article/details/104516274">C++数据库连接池的设计与实现_暮明已逝的博客-CSDN博客_c++数据库连接池</a></li><li><a href="https://www.toutiao.com/i7004734534830801420/">基于c++的数据库连接池的实现与理解(toutiao.com)</a></li></ul><h2 id="其他">其他</h2><ul><li><p><a href="https://www.coder.work/article/1954428">c++ - 执行并行任务而无需等待C++中的结果</a></p></li><li><p><a href="https://github.com/seanmiddleditch/jobxx" class="uri">https://github.com/seanmiddleditch/jobxx</a></p></li><li><p><a href="https://github.com/cdwfs/cds_job" class="uri">https://github.com/cdwfs/cds_job</a></p></li><li><p><a href="https://github.com/delscorcho/basic-job-system" class="uri">https://github.com/delscorcho/basic-job-system</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++进阶指南</title>
    <link href="/cpp/C++%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
    <url>/cpp/C++%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="c进阶指南">C++进阶指南</h1><h2 id="api参考手册">API参考手册</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1983531">推荐两个C++API参考网站</a></li><li><a href="https://www.apiref.com/cpp-zh/index.html">中文版C++ 参考手册</a></li><li><a href="https://cplusplus.com/" class="uri">https://cplusplus.com/</a></li></ul><h2 id="学习线路">学习线路</h2><ul><li><a href="https://mp.weixin.qq.com/s/PTglU70SGKrDsyE4QiKoAA">几张图片，告诉你C++要学什么</a></li><li><a href="https://interview.huihut.com/#/">interview (huihut.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/114311142">interview -📚C/C++技术面试基础知识总结（一）</a></li><li><a href="https://zhuanlan.zhihu.com/p/38431524">程序员如何写一份更好的简历 - 知乎 (zhihu.com)</a></li><li><a href="https://www.nowcoder.com/tutorial/93/8ba2828006dd42879f3a9029eabde9f1">【C++工程师面试宝典】学习说明_互联网校招面试真题面经汇总_牛客网(nowcoder.com)</a></li><li><a href="https://blog.codekissyoung.com/" class="uri">https://blog.codekissyoung.com/</a></li></ul><h3 id="cc学习后端开发进阶指南">C/C++学习，后端开发进阶指南</h3><ul><li><p><a href="https://github.com/balloonwj/CppGuide">C/C++学习，后端开发进阶指南。</a></p></li><li><p><a href="https://balloonwj.github.io/cpp-guide-web/">在线阅读站点1：https://balloonwj.github.io/cpp-guide-web/</a></p></li><li><p><a href="http://balloonwj.gitee.io/cpp-guide-web/">在线阅读站点2: http://balloonwj.gitee.io/cpp-guide-web/</a></p></li><li><p><a href="http://101.37.25.166/blog/">备份站点：http://101.37.25.166/blog/</a></p></li><li><p><a href="https://github.com/balloonwj/CppGuide" class="uri">https://github.com/balloonwj/CppGuide</a></p></li><li><p><a href="https://www.cnblogs.com/yjd_hycf_space/p/7495640.html">C++经典面试题（最全，面中率最高）</a></p></li><li><p><a href="https://www.cnblogs.com/nancymake/p/6516933.html">linux C/C++服务器后台开发面试题总结</a></p></li><li><p><a href="https://www.toutiao.com/i7006207567915450892/">linux高性能服务器开发十大必须掌握的核心技术(toutiao.com)</a></p></li><li><p><a href="https://zhaoyang.blog.csdn.net/article/details/102717590"><font color=Red>C/C++后端-服务端开发技术博文分类汇总</font></a></p></li><li><p><a href="https://www.toutiao.com/i7009166988941591079/">对标腾讯，阿里，字节的C/C++/Linux后台服务器开发技术体系 (toutiao.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/3427b2bee081">Linux后台C++学习之路 &amp; 面经知识点收录</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt教程</title>
    <link href="/cpp/Qt%E6%95%99%E7%A8%8B/"/>
    <url>/cpp/Qt%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="qt教程">Qt教程</h1><h2 id="qt教程-1">QT教程</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/345452320">Qt进阶之路-目录</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/42824849">万丈高楼平地起：学习Qt5</a></p></li><li><p><a href="https://www.qtdoc.cn/BookInfo.html">Qt中文文档</a></p></li><li><p><a href="https://github.com/QtDocumentCN/QtDocumentCN" class="uri">https://github.com/QtDocumentCN/QtDocumentCN</a></p></li><li><p><a href="http://c.biancheng.net/qt/">Qt教程，Qt5编程入门教程（非常详细）</a></p></li><li><p><a href="https://www.bookstack.cn/read/qt-study-road-2/ddf84b4ac149953f.md">Qt 学习之路 2</a></p></li><li><p><a href="https://qtguide.ustclug.org/">Qt 编程指南 - USTC LUG</a></p></li></ul><h2 id="qt宏">QT宏</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/43598693">QT相关的宏</a></li></ul><h2 id="qobject及其子类都禁用了复制构造函数和赋值运算符">QObject及其子类都禁用了复制构造函数和赋值运算符</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/43522035"><font color=Red>Qt 中的对象模型（Object Model）</font></a></li><li><a href="https://blog.csdn.net/u012230798/article/details/97014395"><font color=Red>QObject的拷贝构造函数与赋值运算符</font></a></li></ul><h2 id="元对象系统">元对象系统</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/42824849"><font color=Red>Qt中的元对象系统（Meta-Object System）</font></a></li><li><a href="https://blog.csdn.net/ayang1986/article/details/76176233">QT中元对象系统（MOC）原理</a></li><li><a href="http://c.biancheng.net/view/1826.html">Qt元对象和属性系统详解</a></li><li><a href="https://blog.csdn.net/qq_33663749/article/details/53006073">Qt MetaObject 详解之二:QMeta数据以及数据结构信息</a></li><li><a href="https://zhuanlan.zhihu.com/p/61303678">Qt中的元对象系统（Meta-Object System）</a></li><li><a href="https://blog.csdn.net/hp_cpp/article/details/105933851">Qt之自定义属性Q_PROPERTY使用的一些体会</a></li><li><a href="https://www.programminghunter.com/article/5445110702/"><font color=Red>Qt5之反射机制（内省）</font></a></li><li><a href="https://stackoverflow.com/questions/22044737/when-where-and-why-use-namespace-when-registering-custom-types-for-qt">When, where and why use namespace when registering custom types for Qt</a></li></ul><h2 id="对象树">对象树</h2><ul><li><a href="https://www.toutiao.com/article/7087434391818895887">Qt-对象树 ObjectTree</a></li><li><a href="https://blog.csdn.net/weixin_44743991/article/details/120183305">简单理解Qt中的对象树</a></li><li><a href="https://zhuanlan.zhihu.com/p/150178215">Qt5 超好用的"deleteLater()"</a></li></ul><h2 id="事件循环">事件循环</h2><ul><li><a href="https://blog.csdn.net/fanyun_01/article/details/79604344">Qt事件驱动机制原理及源码剖析</a></li><li><a href="https://zhuanlan.zhihu.com/p/72758194"><font color=Red>Qt实用技能3-理解事件循环</font></a></li></ul><h2 id="多线程和并发">多线程和并发</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/53270619"><font color=Red>Qt 多线程编程之敲开 QThread 类的大门</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/55081052"><font color=Red>Qt 多线程编程之降低线程的开销</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/43598693"><font color=Red>QObject 类的成员变量是否为其子对象问题</font></a></li><li><a href="https://blog.csdn.net/y396397735/article/details/78637634">QT线程池的使用：QThreadPool类和QRunnable类</a></li><li><a href="https://blog.csdn.net/zyhse/article/details/109517671">QThreadPool线程池的原理与使用</a></li><li><a href="https://blog.csdn.net/fghler/article/details/109444779">QtConcurrent多线程</a></li><li><a href="https://runebook.dev/zh-CN/docs/qt/qtconcurrenttask">QtConcurrent::task为在单独的线程中运行任务提供了一个替代接口</a></li><li><a href="https://blog.csdn.net/gongjianbo1992/article/details/106957888">QFuture的使用：多线程与进度条</a></li><li><a href="https://blog.csdn.net/flyoxs/article/details/54617342">QWaitCondition 的正确使用方法</a></li></ul><h2 id="qt-sqlite">Qt sqlite</h2><ul><li><a href="https://blog.csdn.net/frieryumao/article/details/93871774">QT实现sqlite数据库连接池</a></li><li><a href="https://blog.csdn.net/redchairman/article/details/111600129">QT数据库连接池</a></li><li><a href="https://blog.csdn.net/Think88666/article/details/85239987">Qt数据库之数据库连接池</a></li></ul><h2 id="资源系统">资源系统</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/60457016"><font color=Red>Qt 资源系统（Qt Resource System）</font></a></li><li><a href="https://blog.csdn.net/weixin_30731287/article/details/95144714">Qt 相对路径 绝对路径</a></li></ul><h2 id="数据类型转换">数据类型转换</h2><ul><li><a href="https://www.jianshu.com/p/42d343236406">QT-语法-string和qstring转换</a></li><li><a href="https://blog.csdn.net/qq_29187197/article/details/85457078">QT与C++数据类型转换</a></li></ul><h2 id="指针">指针</h2><ul><li><a href="https://blog.csdn.net/qq_43517257/article/details/120396856">QPointer简介</a></li><li><a href="https://www.toutiao.com/article/7087065119888441895">Qt-QPointer的使用</a></li><li><a href="https://blog.csdn.net/zjy900507/article/details/109232509">QT 学习：QT中的3种指针介绍与使用</a></li><li><a href="https://blog.csdn.net/liyuanbhu/article/details/77825655">Qt 中的智能指针</a></li><li><a href="https://blog.csdn.net/luoyayun361/article/details/90255944">Qt智能指针QSharedPointer</a></li></ul><h2 id="网络">网络</h2><ul><li><a href="https://www.jianshu.com/p/777a866a1fed">qt中post和get请求</a></li><li><a href="https://stackoverflow.com/questions/13302236/qt-simple-post-request">Qt Simple Post Request</a></li><li><a href="https://stackoverflow.com/questions/15774386/create-qt-thread-event-loop">create qt thread event loop</a></li><li><a href="https://github.com/realwujing/qt-learning/tree/master/network">post请求不阻塞主线程</a></li></ul><h2 id="qvariant">QVariant</h2><ul><li><a href="https://blog.csdn.net/woniulx2014/article/details/82752835">Qt之QVariant用法</a></li><li><a href="https://zhuanlan.zhihu.com/p/73726452">经典的QVariant设计之道</a></li><li><a href="https://blog.csdn.net/qq_33485434/article/details/78499930"><font color=Red>qRegisterMetaType的使用</font></a></li><li><a href="https://blog.csdn.net/xiaopei_yan/article/details/81410092">QVariant的用法</a></li></ul><h2 id="qstring">QString</h2><ul><li><a href="https://www.toutiao.com/article/7163987601668915753">Qt开发——字符串详解</a></li></ul><h2 id="qt信号与槽函数">qt信号与槽函数</h2><ul><li><a href="https://blog.csdn.net/hyongilfmmm/article/details/83015045">Qt信号与槽原理</a></li><li><a href="https://blog.csdn.net/business122/article/details/80988373">QT核心：signal-slot 信号/槽机制 最详细最通俗易懂的一篇</a></li><li><a href="https://jaredtao.github.io/2019/09/02/%E7%8E%A9%E8%BD%ACQt(8)-%E6%8E%8C%E6%8F%A1%E4%BF%A1%E5%8F%B7%E6%A7%BD%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%82/"><font color=Red>玩转Qt(8)-掌握信号槽使用细节</font></a></li></ul><h2 id="q指针-d指针">q指针 d指针</h2><ul><li><a href="https://blog.csdn.net/u010155023/article/details/50826102">Qt中Q_D宏及d指针</a></li><li><a href="https://www.toutiao.com/article/7087771469484245537">Qt-D指针和Q指针及使用</a></li><li><a href="https://blog.csdn.net/weixin_44399394/article/details/109898445"><font color=Red>【Qt】Qt源码学习（一）：Q_D和Q_Q，简称d指针</font></a></li><li><a href="https://blog.csdn.net/weixin_39568531/article/details/118069591"><font color=Red>Qt ： d指针和q指针？</font></a></li><li><a href="http://go2study.xyz/?p=48"><font color=Red>Qt中使用Q指针和D指针 delete</font></a></li><li><a href="https://blog.csdn.net/a844651990/article/details/84502832">Qt源码之d指针分析（QObject，QObjectPrivate）</a></li><li><a href="https://blog.csdn.net/wangpengk7788/article/details/56496003">读QT5.7源码（七）QObjectData 和 QObjectPrivate</a></li></ul><h2 id="qt定时器">Qt定时器</h2><ul><li><a href="http://www.360doc.com/content/20/0919/11/64183406_936529372.shtml">Qt中定时器使用的两种方法</a></li><li><a href="https://zhuanlan.zhihu.com/p/25937664">Qt中定时任务实现的方式</a></li><li><a href="https://github.com/OldFrostDragon/JenkinsPlugin/blob/master/jenkinsjob.h">jenkinsjob.h</a></li></ul><h2 id="qdbus">qdbus</h2><ul><li><p><a href="https://dbus.freedesktop.org/doc/dbus-specification.html"><font color=Red>https://dbus.freedesktop.org/doc/dbus-specification.html</font></a></p></li><li><p><a href="https://blog.csdn.net/baidu_32237719/article/details/105749173"><font color=Red>D-Bus 详解：从编译到应用</font></a></p></li><li><p><a href="https://www.cnblogs.com/chendeqiang/p/12861670.html">QtDBus快速入门</a></p></li><li><p><a href="https://blog.csdn.net/zhaominyong/article/details/119103881">QT D-Bus 复杂参数(自定义)传递</a></p></li><li><p><a href="https://www.coder.work/article/6674986">dbus - 为 Qt D-Bus 内省(introspection)定义枚举自定义类型</a></p></li><li><p><a href="https://blog.csdn.net/shallon_luo/article/details/6153318">QT 4.7 DBUS Binding如何支持自定义数据类型的传输（一）</a></p></li><li><p><a href="https://blog.csdn.net/jiangwei0512/article/details/115150048">【Linux应用】D-BUS介绍</a></p></li><li><p><a href="https://thebigdoc.readthedocs.io/en/latest/dbus/system-dbus.html">D-Bus系列之权限配置文件</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30551963/article/details/96773993">dbus 消息和消息总线实例讲解-一</a></p></li><li><p><a href="https://blog.csdn.net/adlindary/article/details/80167840">基于GDBus技术的IPC通信编程详解(1)</a></p></li><li><p><a href="http://www.fmddlmyy.cn/text52.html">dbus实例讲解（二上）：消息和消息总线</a></p></li><li><p><a href="https://www.cnblogs.com/javalinux/p/15042929.html">dbus通信与接口介绍</a></p></li><li><p><a href="https://www.cnblogs.com/hzl6255/p/4096260.html"><font color=Red>DBus介绍</font></a></p></li><li><p><a href="https://blog.csdn.net/f110300641/article/details/106822511">DBus API的使用(讲的很清晰，底层概念，基本api)</a></p></li><li><p><a href="https://blog.csdn.net/czhzasui/article/details/81071383"><font color=Red>QtDBus总结</font></a></p></li><li><p><a href="https://blog.actorsfit.com/a?ID=00700-4d790509-19d2-4c83-a189-79b458826e1c"><font color=Red>QtDBus summary</font></a></p></li><li><p><a href="https://blog.csdn.net/shawzg/article/details/118528785">[Qt]获取DBus方法的调用者信息</a></p></li></ul><h3 id="dbus-unix-fd">dbus unix-fd</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/133756767">通过Unix套接字传递文件描述符</a></li><li><a href="https://m.656463.com/wenda/Qt56syQLocalServerhQLocalSocketc_254">Qt 5.6使用QLocalServer和QLocalSocket传递文件描述符(Qt 5.6 Passing File Descriptors with QLocalServer and QLocalSocket)</a></li></ul><h3 id="qdbus-cmake">qdbus cmake</h3><ul><li><p><a href="https://techbase.kde.org/Development/Tutorials/D-Bus/Creating_Interfaces">cmake Development/Tutorials/D-Bus/Creating Interfaces</a></p></li><li><p><a href="https://docs.w3cub.com/qt~5.15/qtdbus-cmake-qt5-generate-dbus-interface" class="uri">https://docs.w3cub.com/qt~5.15/qtdbus-cmake-qt5-generate-dbus-interface</a></p></li><li><p><a href="https://doc.qt.io/qt-5.12/qtdbus-cmake-qt5-generate-dbus-interface.html" class="uri">https://doc.qt.io/qt-5.12/qtdbus-cmake-qt5-generate-dbus-interface.html</a></p></li><li><p><a href="https://doc.qt.io/archives/qt-5.13/qtdbus-cmake-qt5-add-dbus-adaptor.html" class="uri">https://doc.qt.io/archives/qt-5.13/qtdbus-cmake-qt5-add-dbus-adaptor.html</a></p></li><li><p><a href="https://doc.qt.io/archives/qt-5.13/search-results.html?q=qt5_add_dbus_Interface" class="uri">https://doc.qt.io/archives/qt-5.13/search-results.html?q=qt5_add_dbus_Interface</a></p></li></ul><h2 id="qmake-cmake">qmake cmake</h2><ul><li><p><a href="https://blog.csdn.net/x356982611/article/details/71169940">qmake: could not exec '/usr/lib/x86_64-linux-gnu/qt4/bin/qmake'</a></p></li><li><p><a href="https://www.cnblogs.com/xiangism/p/4621108.html">qt的moc,uic,rcc命令的使用</a></p></li><li><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html" class="uri">https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html</a></p></li><li><p><a href="https://semlanik.github.io/qtprotobuf/group__generator.html#cmake_qtprotobuf_link_target" class="uri">https://semlanik.github.io/qtprotobuf/group__generator.html#cmake_qtprotobuf_link_target</a></p></li><li><p><a href="https://semlanik.github.io/qtprotobuf/clienttutorial.html" class="uri">https://semlanik.github.io/qtprotobuf/clienttutorial.html</a></p></li><li><p><a href="https://doc.qt.io/archives/qt-5.6/cmake-manual.html" class="uri">https://doc.qt.io/archives/qt-5.6/cmake-manual.html</a></p></li><li><p><a href="https://blog.csdn.net/a844651990/article/details/82593358">QtCreator构建Cmake工程详细说明</a></p></li><li><p><a href="https://blog.csdn.net/xiajianfeng147/article/details/106707902/">CMake编译Qt程序出现undefined reference to `vtable for’”错误的解决办法</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39743893/article/details/81225240">Qt中的动态链接库编程(Q_DECL_IMPORT、Q_DECL_EXPORT)</a></p></li><li><p><a href="https://blog.csdn.net/l1216766050/article/details/83783446">undefined reference to `vtable for’”问题的解决方法</a></p></li></ul><h2 id="qt日志">qt日志</h2><ul><li><p><a href="https://www.qedev.com/linux/339315.html">在Deepin 20.1系统中qDebug()没有输出的修复方案</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> QT_LOGGING_RULES=<span class="hljs-string">&quot;*.debug=true&quot;</span><br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/gongjianbo1992/article/details/107372453">Qt使用QLoggingCategory管理打印</a></p></li><li><p><a href="https://jaredtao.github.io/2019/04/30/%E7%8E%A9%E8%BD%ACQt(2)-%E8%87%AA%E5%88%B6%E7%AE%80%E6%98%93%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"><font color=Red>玩转Qt(2)-自制简易好看的日志系统</font></a></p></li><li><p><a href="https://blog.csdn.net/u011218356/article/details/103344231">Qt::Qt Log日志模块</a></p></li><li><p><a href="https://www.cnblogs.com/linuxAndMcu/p/14716532.html"><font color=Red>Qt 自定义日志类</font></a></p></li><li><p><a href="https://github.com/realwujing/qt-log" class="uri">https://github.com/realwujing/qt-log</a></p></li><li><p><a href="https://www.codenong.com/24012108/">关于qt：qDebug不显示__FILE <strong>，</strong> LINE__</a></p></li><li><p><a href="https://blog.csdn.net/liang19890820/article/details/51839233">Qt 之 qSetMessagePattern</a></p></li><li><p><a href="https://www.csdn.net/tags/NtzaAg3sOTUyNC1ibG9n.html">Qt的qDebug打印加颜色</a></p></li><li><p><a href="https://blog.csdn.net/qq_41972382/article/details/90311102">C/C++改变终端（cout ）(printf)输出不同颜色的字体（Linux）</a></p></li></ul><h2 id="qprocess">QProcess</h2><ul><li><a href="https://whatudone.github.io/2020/05/06/QProcess%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E8%BF%9B%E7%A8%8B/">QProcess调用外部进程-实时通知下载进度并通知下载失败或完成</a></li><li><a href="https://www.cnblogs.com/lsgxeva/p/12641707.html">QProcess快速实现外部程序调用</a></li><li><a href="https://blog.csdn.net/friendbkf/article/details/49932233">QProcess：进程通信之无名管道</a></li></ul><h2 id="进程通信">进程通信</h2><ul><li><a href="https://blog.csdn.net/fangye945a/article/details/106006819">进程通信(IPC)之QLocalSocket用法</a></li><li><a href="https://whereismyanswer.com/questions/16023533/how-to-make-sure-that-readyread-signals-from-qtcpsocket-cant-be-missed">How to make sure that readyRead() signals from QTcpSocket can't be missed?</a></li><li><a href="https://stackoverflow.com/questions/16023533/how-to-make-sure-that-readyread-signals-from-qtcpsocket-cant-be-missed" class="uri">https://stackoverflow.com/questions/16023533/how-to-make-sure-that-readyread-signals-from-qtcpsocket-cant-be-missed</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/README/"/>
    <url>/cpp/README/</url>
    
    <content type="html"><![CDATA[<h1 id="cpp-learning">cpp-learning</h1><ul><li><a href="https://mp.weixin.qq.com/s/PTglU70SGKrDsyE4QiKoAA">几张图片，告诉你 C++ 要学什么</a></li><li><a href="https://github.com/GrindGold/CppGuide">C/C++学习+面试指南</a></li><li><a href="https://github.com/huihut/interview">C/C++ 技术面试基础知识总结</a></li><li><a href="https://github.com/balloonwj/CppGuide">高性能服务器开发</a></li><li><a href="thread/README.md">C++11 thread 教程</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>automake</title>
    <link href="/cpp/automake/"/>
    <url>/cpp/automake/</url>
    
    <content type="html"><![CDATA[<h1 id="automake">automake</h1><ul><li><a href="https://www.cnblogs.com/seaspring/p/13905757.html">首先要了解为什么要有autoconf，automake这类工具</a></li><li><a href="https://blog.csdn.net/cnsword/article/details/7542696#commentBox">cmake与autoconf+automake的对比</a></li><li><a href="https://www.jianshu.com/p/17e777868d6b">Automake的使用</a></li><li><a href="https://www.jianshu.com/p/3f69197f9055">解剖automake和autoconf(autoreconf)</a></li><li><a href="https://www.cnblogs.com/silvermagic/p/7665868.html">Automake使用说明</a></li><li><a href="https://www.jianshu.com/p/2f5e586c3402">Makefile.am 规则和实例详解</a></li><li><a href="https://blog.csdn.net/vevenlcf/article/details/48134313">Makefile.am 语法_梦想专栏-CSDN博客_makefile.am</a></li><li><a href="https://blog.csdn.net/weixin_38503885/article/details/110931206">makefile.am_make与makefile的区别_makefile编写_weixin_38503885的博客-CSDN博客_makefile.am</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake</title>
    <link href="/cpp/cmake/"/>
    <url>/cpp/cmake/</url>
    
    <content type="html"><![CDATA[<h1 id="cmake">CMake</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j CFLAGS=<span class="hljs-string">&quot;-O0 -g&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j12 VERBOSE=1 CXX_FLAGS=<span class="hljs-string">&quot;<span class="hljs-variable">$CXX_FLAGS</span> -g -O3 -fPIC&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p><a href="https://cmake.org/cmake/help/v3.17/guide/tutorial/index.html#adding-system-introspection-step-5" class="uri">https://cmake.org/cmake/help/v3.17/guide/tutorial/index.html#adding-system-introspection-step-5</a></p></li><li><p><a href="https://docs.w3cub.com/cmake~3.19/command/target_link_directories" class="uri">https://docs.w3cub.com/cmake~3.19/command/target_link_directories</a></p></li><li><p><a href="https://www.cnblogs.com/yinheyi/p/14968494.html">cmake 常用指令入门指南</a></p></li><li><p><a href="https://www.cnblogs.com/ybqjymy/p/13409050.html"><font color=Red>超详细的CMake教程</font></a></p></li><li><p><a href="https://aiden-dong.github.io/2019/07/20/CMake%E6%95%99%E7%A8%8B%E4%B9%8BCMake%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BA%94%E7%94%A8/"><font color=Red>CMake 教程 | CMake 从入门到应用</font></a></p></li><li><p><a href="https://www.cnblogs.com/spmt/p/12632322.html"><font color=Red>text</font>CMake简明教程(ubuntu)</a></p></li><li><p><a href="https://elloop.github.io/tools/2016-04-10/learning-cmake-2-commands"><font color=Red>【使用CMake组织C++工程】2：CMake 常用命令和变量</font></a></p></li><li><p><a href="http://www.mianshigee.com/tutorial/CMake-Cookbook/content-chapter1-1.1-chinese.md"><font color=Red>CMake菜谱（CMake Cookbook中文版）</font></a></p></li><li><p><a href="https://www.bookstack.cn/read/CMake-Cookbook/README.md"><font color=Red>CMake菜谱（CMake Cookbook中文版）</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/92928820">使用CMake构建C++项目</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j VERBOSE=1<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.cnblogs.com/lsgxeva/p/9454443.html">CMake 手册详解</a></p></li><li><p><a href="https://blog.csdn.net/KYJL888/article/details/100938384">【学习CMake】 - 如何高效使用"cmake help" ?</a></p></li><li><p><a href="https://blog.csdn.net/afei__/article/details/81201039">CMakeLists.txt语法介绍与实例演练自定义编译选项</a></p></li><li><p><a href="https://blog.csdn.net/ajianyingxiaoqinghan/article/details/70230902">CMake学习笔记（二）——CMake语法</a></p></li><li><p><a href="https://blog.csdn.net/lianshaohua/article/details/107783811">CMakeList模板(二)：编译多个工程</a></p></li><li><p><a href="https://www.cnblogs.com/xl2432/p/11225276.html">CMakeLists.txt编写常用命令 - 星星,风,阳光 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.cnblogs.com/xl2432/p/11225276.html#1-set%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC">set追加变量的值</a></p></li><li><p><a href="https://blog.csdn.net/itworld123/article/details/123862402">cmake / cmake build 如何理解</a></p></li></ul><h2 id="find_package">find_package</h2><ul><li><a href="https://blog.csdn.net/zhanghm1995/article/details/105466372"><font color=Red>“轻松搞定CMake”系列之find_package用法详解</font></a></li><li><a href="https://www.jianshu.com/p/39fc5e548310"><font color=Red>深入理解CMake(3):find_package()的使用</font></a></li><li><a href="https://blog.csdn.net/weixin_43742643/article/details/113858915">[CMake] find_package 指定路径</a></li><li><a href="https://www.jianshu.com/p/243ff97bbbc6">cmake中find_package的查找路径</a></li><li><a href="https://www.jianshu.com/p/5dc0b1bc5b62"><font color=Red>深入理解CMake(5)：find_package寻找手动编译安装的Protobuf过程分析</font></a></li><li><a href="https://cloud.tencent.com/developer/ask/87956">CMake：如果你需要指定CMAKE_MODULE_PATH，find_package（）有什么用？</a></li></ul><h2 id="pkg_check_modules-pkg_search_module">pkg_check_modules pkg_search_module</h2><ul><li><a href="https://blog.csdn.net/feccc/article/details/107160668">CMAKE查找库：find_package和pkg_check_moduls的区别</a></li></ul><h2 id="pkg-config">pkg-config</h2><ul><li><a href="https://blog.csdn.net/zxcasd11/article/details/104010621">cmake 使用pkg-config配置第三方库和头文件</a></li><li><a href="https://blog.csdn.net/zhizhengguan/article/details/111826697">cmake：pkg_check_modules</a></li><li><a href="https://zhuanlan.zhihu.com/p/417285806">使用 pkg-config 让 C++ 工程编译配置更灵活</a></li></ul><h2 id="install">install</h2><ul><li><a href="https://blog.csdn.net/qq_38410730/article/details/102837401"><font color=Red>【CMake】cmake的install指令</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/102955723">CMake之install方法的使用</a></li></ul><h2 id="uninstall">uninstall</h2><ul><li><p><a href="https://blog.csdn.net/reasonyuanrobot/article/details/106732047">卸载 make install 编译安装的软件</a></p></li><li><p><a href="https://www.zhihu.com/question/21203756">linux里用cmake安装的软件要怎么卸载？</a></p></li><li><p><a href="https://blog.csdn.net/liujiayu2/article/details/50219377">cmake Debug模式和Release模式</a></p></li><li><p><a href="https://blog.csdn.net/qazw9600/article/details/115267688">自动化构建 - cmake - 构建目标类型 - Debug，Release，RelWithDebInfo，MinSizeRel</a></p></li><li><p><a href="https://www.cxyzjd.com/article/weixin_30706507/96058094">CMake向解决方案添加源文件兼头文件</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_ad0672d60102zaho.html">cmake中in/out-source编译</a></p></li></ul><h2 id="环境变量">环境变量</h2><ul><li><p><a href="https://www.kancloud.cn/itfanr/cmake-practice/82989">七、cmake 常用变量和常用环境变量</a></p></li><li><p><a href="https://blog.csdn.net/10km/article/details/50508184">cmake:在各级子项目(目录)之间共享变量</a></p></li><li><p><a href="https://blog.csdn.net/shawzg/article/details/108593010">查看CMake变量的默认值方法</a></p></li><li><p><a href="https://blog.csdn.net/wzj_110/article/details/116110014">cmake(十七)Cmake的foreach循环和while循环</a></p></li><li><p><a href="https://blog.csdn.net/z_h_s/article/details/50699905">CMake之CMakeLists.txt编写入门</a></p></li><li><p><a href="http://qianchenglong.github.io/2015/01/29/cmake-%E6%89%93%E5%8D%B0Include%E8%B7%AF%E5%BE%84%E5%88%97%E8%A1%A8/"><font color=Red>cmake-打印Include路径列表</font></a></p></li></ul><h2 id="可见性">可见性</h2><ul><li><p><a href="https://www.bookstack.cn/read/CMake-Cookbook/content-chapter1-1.8-chinese.md">PRIVATE INTERFACE PUBLIC</a></p></li><li><p><a href="https://leimao.github.io/blog/CMake-Public-Private-Interface/" class="uri">https://leimao.github.io/blog/CMake-Public-Private-Interface/</a></p></li><li><p><a href="https://ravenxrz.ink/archives/e40194d1.html">cmake 之 PUBLIC|PRIVATE|INTERFACE 关键字</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/82244559"><font color=Red>cmake：target_** 中的 PUBLIC，PRIVATE，INTERFACE</font></a></p></li><li><p><a href="https://its201.com/article/znsoft/119035578">target_link_libraries命令 PRIVATE|PUBLIC|INTERFACE的作用</a></p></li><li><p><a href="https://www.bookstack.cn/read/CMake-Cookbook/content-chapter7-7.7-chinese.md">CMake可以使用Graphviz图形可视化软件(http://www.graphviz.org )生成项目的依赖关系图:</a></p></li><li><p><a href="https://blog.csdn.net/qq_28584889/article/details/97758450">cmake：使用execute_process调用shell命令或脚本</a></p></li></ul><h2 id="测试">测试</h2><ul><li><a href="https://paul.pub/gtest-and-coverage/">C++语言的单元测试与代码覆盖率</a></li><li><a href="https://www.codeleading.com/article/93614362313/">Gtest集成Lcov代码覆盖率测试</a></li><li><a href="https://www.jianshu.com/p/2d3c2c44449a">使用 Google Test 测试框架</a></li><li><a href="https://liitdar.blog.csdn.net/article/details/85712973">GoogleTest测试框架介绍（一）</a></li><li><a href="https://blog.csdn.net/boy854456187/article/details/117165221">Ubuntu Google test 单元测试</a></li></ul><h2 id="cpack">cpack</h2><ul><li><a href="https://blog.csdn.net/rangfei/article/details/122817575">cmake(12)：使用cpack生成DEB二进制文件</a></li><li><a href="https://www.cnblogs.com/mxnote/articles/16816354.html">将工程使用CPack工具打包成为一个deb包</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake编译链接参数</title>
    <link href="/cpp/cmake%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0/"/>
    <url>/cpp/cmake%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cmake编译链接参数">cmake编译链接参数</h1><h2 id="cmake编译链接参数-1">cmake编译链接参数</h2><ul><li><p><a href="https://blog.51cto.com/u_15064646/3462077">cmake编译选项</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/513148985">GCC编译选项参数</a></p></li><li><p><a href="https://blog.51cto.com/u_15064646/3462077">添加-O0 -g，生成gdb的调试信息和不进行代码优化</a></p></li><li><p><a href="https://elloop.github.io/tools/2016-04-10/learning-cmake-2-commands">【使用CMake组织C++工程】2：调试包不优化</a></p></li><li><p><a href="https://blog.csdn.net/sandalphon4869/article/details/102503224">CMake解决c++11的phread库问题：undefined reference to `pthread_create’</a></p></li><li><p><a href="https://www.jianshu.com/p/10bf5d27dcfc">cmake编译缺失pthread_create等thread库解决方案</a></p></li><li><p><a href="http://blog.chinaunix.net/uid-69906223-id-5817313.html">gcc -lpthread和gcc -pthread的区别</a></p></li><li><p><a href="https://www.5axxw.com/questions/content/ratnvg">CMake: link options</a></p></li><li><p><a href="https://www.dovov.com/cmakecmakelists-txtldflags.html">CMake：如何在CMakeLists.txt中设置LDFLAGS？</a></p></li><li><p><a href="https://blog.csdn.net/dongjideyu/article/details/79267683">CMAKE 中　add_definitions的用法．</a></p></li><li><p><a href="https://blog.csdn.net/10km/article/details/51731959">cmake:设置编译选项的讲究(add_compile_options和CMAKE_CXX_FLAGS的区别)</a></p></li><li><p><a href="https://blog.csdn.net/fb_941219/article/details/88638503">ubuntu16.04cmake、gcc/g++版本更换</a></p></li></ul><h2 id="dynamic-code-analysis">Dynamic code analysis</h2><ul><li><a href="https://www.cnblogs.com/gladiatorplus/p/14437059.html">cmake 内存泄露检查asan</a></li><li><a href="https://www.jetbrains.com/help/clion/profiling-tools.html">动态代码分析 Clion</a></li><li><a href="https://blog.csdn.net/register_k/article/details/120319834">libasan使用和遇到的问题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gcc</title>
    <link href="/cpp/gcc/"/>
    <url>/cpp/gcc/</url>
    
    <content type="html"><![CDATA[<h1 id="gcc">gcc</h1><h2 id="gcc-1">gcc</h2><ul><li><p><a href="http://c.biancheng.net/view/679.html">GCC的组成部分以及使用到的软件</a></p></li><li><p><a href="http://c.biancheng.net/view/7936.html">gcc和g++是什么，有什么区别？</a></p></li><li><p><a href="https://docs.oracle.com/cd/E19205-01/820-1214/bkacs/index.html">使用 C++ 编译器选项</a></p></li><li><p><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html">GCC 参数详解</a></p></li><li><p><a href="https://blog.csdn.net/chosen0ne/article/details/7210946">linux下C include搜索的路径_娄振林专栏-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/bigfi/p/9487427.html">linux下C/C++编译时系统搜索 include 和 链接库 文件路径的指定</a></p></li><li><p><a href="https://blog.csdn.net/u014618114/article/details/103230906">gcc编译链接头文件和库文件</a></p></li><li><p><a href="https://www.jianshu.com/p/3eb25114576e">LINUX下默认搜索头文件及库文件的路径</a></p></li><li><p><a href="https://blog.csdn.net/zvvzxzko2006/article/details/110467542">gcc交叉编译时设置了"–sysroot"会产生哪些影响</a></p></li><li><p><a href="https://blog.csdn.net/qq_34269988/article/details/103064318">如何查看和修改gcc、g++默认include路径</a></p></li><li><p><a href="https://blog.51cto.com/u_13913090/2155979"><font color=Red>gcc的头文件、库文件默认搜索路径</font></a></p></li><li><p><a href="https://blog.csdn.net/wishfly/article/details/45694231"><font color=Red>gcc 生成动态库时-fpic选项是什么意思</font></a></p></li><li><p><a href="https://blog.csdn.net/bjrxyz/article/details/121146434">GCC编译静态库的-fPIC选项</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/28dTkwcYlowRzu58DB7MjA">Linux 程序编译过程详解</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42018112/article/details/82289971">C++编译链接过程详解</a></p></li><li><p><a href="https://zhidao.baidu.com/question/1512552100872530100.html"><font color=Red>C语言 如何在一个文件中调用另一个文件的函数 用头文件</font></a></p></li></ul><h2 id="编译优化">编译优化</h2><ul><li><a href="https://blog.csdn.net/qq_31108501/article/details/51842166">gcc -O0 -O1 -O2 -O3 四级优化选项及每级分别做什么优化</a></li><li><a href="https://blog.csdn.net/wuxing26jiayou/article/details/96132721">gcc编译优化-O0 -O1 -O2 -O3 -OS解析</a></li><li><a href="https://zhuanlan.zhihu.com/p/381490718">编译器常用的8种优化方法</a></li><li><a href="https://zhuanlan.zhihu.com/p/50812510">被知乎大佬嘲讽后的一个月，我重新研究了一下内联函数</a></li><li><a href="https://www.coder.work/article/176992">c - gcc -g0 并且没有 -g 选项</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gtk</title>
    <link href="/cpp/gtk/"/>
    <url>/cpp/gtk/</url>
    
    <content type="html"><![CDATA[<h1 id="gtk">gtk</h1><h2 id="glib">glib</h2><h2 id="httpszh.wikipedia.orgwikiglib"><a href="https://zh.wikipedia.org/wiki/GLib" class="uri">https://zh.wikipedia.org/wiki/GLib</a></h2><ul><li><a href="https://www.cnblogs.com/wangkangluo1/archive/2011/07/10/2102178.html">glib 简介</a></li><li><a href="https://docs.gtk.org/glib/func.build_filename.html">glib2.0说明文档</a></li><li><a href="https://blog.csdn.net/u013554213/article/details/97525522">【glib】标准化程序的命令行解析 GOptionEntry</a></li><li><a href="https://blog.csdn.net/magod/article/details/6086562">glib命令行解析库简单使用GOptionEntry 命令行参数</a></li><li><a href="https://people.gnome.org/~ebassi/docs/json-glib/json-glib-JSON-Object.html#json-object-get-member">json-glib说明文档</a></li><li><a href="https://blog.csdn.net/yanlinembed/article/details/49837655">GLib中的数据类型及操作</a></li></ul><h2 id="gio">gio</h2><ul><li><a href="https://docs.gtk.org/gio/">Gio – 2.0说明文档</a></li></ul><h2 id="gcancellable">GCancellable</h2><ul><li><p><a href="https://developer-old.gnome.org/gio/stable/GCancellable.html#g-cancellable-new" class="uri">https://developer-old.gnome.org/gio/stable/GCancellable.html#g-cancellable-new</a></p></li><li><p><a href="https://blog.csdn.net/andylauren/article/details/91046266">Glib学习（23） IO通道 IO Channels</a></p></li><li><p><a href="https://www.shangmayuan.com/a/12c9bf6074ec433b8853535e.html">在Linux下使用IO通道（IO Channels)</a></p></li></ul><h2 id="gobject">GObject</h2><ul><li><p><a href="https://docs.gtk.org/gobject/tutorial.html" class="uri">https://docs.gtk.org/gobject/tutorial.html</a></p></li><li><p><a href="http://garfileo.is-programmer.com/categories/6934/posts">GObject 学习笔记汇总</a></p></li><li><p><a href="https://docs.gtk.org/gobject/">GObject – 2.0说明文档</a></p></li><li><p><a href="https://www.cnblogs.com/silvermagic/p/9087883.html">Glib之GObject简介（翻译）</a></p></li><li><p><a href="https://www.cnblogs.com/silvermagic/p/9087893.html">Glib之GObject宏介绍</a></p></li><li><p><a href="https://eightplus.github.io/2019/08/30/2019-08-30-gobject-demo/">GObject 编程入门</a></p></li><li><p><a href="https://www.toutiao.com/article/7146852436760756750/">使用开源库 GObject 和 libsoup 提升 C 语言编程能力</a></p></li></ul><h2 id="jsongenerator">JsonGenerator</h2><ul><li><p><a href="https://developer-old.gnome.org/json-glib/stable/JsonGenerator.html#json-generator-set-root">JsonGenerator</a></p></li><li><p><a href="https://developer-old.gnome.org/json-glib/stable/JsonGenerator.html#json-generator-set-root">JsonGenerator说明文档</a></p></li><li><p><a href="http://blog.chinaunix.net/uid-199788-id-2420065.html">GKeyFile生成配置文件</a></p></li><li><p><a href="https://www.cnblogs.com/doscho/p/6269279.html">dracut 基本介绍</a></p></li><li><p><a href="https://blog.csdn.net/zhangna20151015/article/details/50401715">linux spec文档解析</a></p></li><li><p><a href="https://code.google.com/archive/p/gtk-doc-cn/">gtk-doc-cn</a></p></li><li><p><a href="https://www.cnblogs.com/happybirthdaytoyou/p/14213279.html">C语言实现面向对象方法学的GLib、GObject-初体验</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makefile</title>
    <link href="/cpp/makefile/"/>
    <url>/cpp/makefile/</url>
    
    <content type="html"><![CDATA[<h1 id="makefile">MakeFile</h1><ul><li><a href="https://blog.codekissyoung.com/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Make%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7"><font color=Red>GNU Make项目管理</font></a></li><li><a href="http://blog.hanschen.site/2016/08/17/makefile/">Makefile使用指南</a></li><li><a href="http://c.biancheng.net/makefile/"><font color=Red>Makefile教程：Makefile文件编写1天入门</font></a></li><li><a href="https://www.bookstack.cn/read/makefile-basic/16858cbb3e00b884.md"><font color=Red>Makefile 基础教程</font></a></li><li><a href="https://www.bookstack.cn/read/how-to-write-makefile/b473e56b6c52d350.md"><font color=Red>跟我一起写Makefile</font></a></li><li><a href="https://blog.csdn.net/zhaoyun_zzz/article/details/82466031">Makefile编译与链接选项及CFLAGS与LDFLAGS示例说明_zhaoyun_zzz的专栏-CSDN博客_ldflags</a></li><li><a href="https://blog.csdn.net/shenhuxi_yu/article/details/79788760">makefile中的CPPFLAGS LDFLAGS CFLAGS选项详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tars</title>
    <link href="/cpp/tars/"/>
    <url>/cpp/tars/</url>
    
    <content type="html"><![CDATA[<h1 id="tars">tars</h1><ul><li><p><a href="https://www.cnblogs.com/opsprobe/p/9126864.html">Ubuntu18.04下安装MySQL</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30845171/article/details/99554304">D04 Ubuntu16安装SQLAdvisor</a></p></li><li><p><a href="https://www.freesion.com/article/6862599453/">【TARS】UBUNTU下关于TAF框架的安装和C++环境的配置，以及DEMO实例</a></p></li><li><p><a href="https://tarscloud.github.io/TarsDocs/SUMMARY.html">TARS高性能、多语言的微服务治理框架</a></p></li><li><p><a href="https://tarscloud.github.io/TarsDocs/dev/tarscpp/tars-spec.html">参考 cmake 管理规范</a></p></li><li><p><a href="https://blog.csdn.net/m0_37973394/article/details/86591838">ubuntu中配置tars详细教程</a></p></li><li><p><a href="https://tars.tencent.com/base/help/TARS_quick_start_C++.html">TARS快速入门(c++)</a></p></li><li><p><a href="https://www.bookstack.cn/read/Tars-1.8/rumen-hello-world-1-tarscpp-kuai-su-ru-men.md">TarsCPP 快速入门</a></p></li><li><p><a href="https://blog.csdn.net/woshichenweixian/article/details/100628518">tars服务端(一)：server的启动流程</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30324103/article/details/113600518">mysql_real_connect出错_mysql_real_connect: SSL connection error: unknown error number【解决方法】...</a></p></li><li><p><a href="https://www.cnblogs.com/gaowengang/p/12470301.html">Thrift 的若干问题记录 - Anonymous596 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://thrift.apache.org/docs/install/debian.html">Apache Thrift - Debian/Ubuntu install</a></p></li><li><p><a href="https://www.osetc.com/en/how-to-install-boost-on-ubuntu-16-04-18-04-linux.html">How to Install Boost on Ubuntu 16.04/18.04 Linux - OSETC TECH</a></p></li><li><p><a href="https://blog.csdn.net/TARSFoundation/article/details/109456474">TarsCpp 组件之 MySQL 操作_TARSFoundation的博客-CSDN博客</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode-cmake</title>
    <link href="/cpp/vscode-cmake/"/>
    <url>/cpp/vscode-cmake/</url>
    
    <content type="html"><![CDATA[<h1 id="vscode-cmake">vscode-cmake</h1><ul><li><p><a href="https://blog.csdn.net/u013894860/article/details/97555901">VS code 调试Cmake 工程：</a></p></li><li><p><a href="https://code.visualstudio.com/docs/cpp/faq-cpp" class="uri">https://code.visualstudio.com/docs/cpp/faq-cpp</a></p></li><li><p><a href="https://github.com/MaskRay/ccls/wiki/Build" class="uri">https://github.com/MaskRay/ccls/wiki/Build</a></p></li><li><p><a href="https://blog.csdn.net/hb69222/article/details/117034317">VS Code中C/C++ 无法跳转到定义的解决办法</a></p></li><li><p><a href="https://www.cnblogs.com/cong-wang/p/15026530.html">vscode使用compile_commands.json</a></p></li><li><p><a href="https://edward852.github.io/post/%E7%94%9F%E6%88%90compile_commands.json%E6%96%87%E4%BB%B6/">生成compile_commands.json文件</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态库与动态库</title>
    <link href="/cpp/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <url>/cpp/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="静态库与动态库">静态库与动态库</h1><ul><li><p><a href="http://c.biancheng.net/view/8044.html">C/C++动态链接库的显式调用（动态调用）</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1344879">Linux下动态库(.so)和静态库(.a) 的区别</a></p></li><li><p><a href="https://blog.csdn.net/andylauren/article/details/78994209">linux动态库加载的秘密</a></p></li><li><p><a href="https://ee.ofweek.com/2022-03/ART-11000-2818-30554412.html">【图片+代码】：Linux动态链接过程中的【重定位】底层原理</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/6MPZ1oiOgMj5eY2WXJeZ-Q"><font color=Red>【图片+代码】：Linux 动态链接过程中的【重定位】底层原理</font></a></p></li><li><p><a href="https://blog.ideawand.com/2020/02/15/how-does-linux-shared-library-versioning-works/">一文读懂Linux下动态链接库版本管理及查找加载方式</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39609623/article/details/95043370">CMAKE-构建动态库_锥子A的博客-CSDN博客_cmake 动态库</a></p></li><li><p><a href="https://blog.csdn.net/a435262767/article/details/91379359">Linux下CMake生成和调用动态库_Liber-coder的博客-CSDN博客_cmake编译动态库</a></p></li><li><p><a href="https://www.toutiao.com/i6889283351983686158"><font color=Red>Linux库概念，动态库和静态库的制作，如何移植第三方库</font></a></p></li><li><p><a href="https://blog.csdn.net/yilonglucky/article/details/44778589">静态库Archive_yilonglucky-CSDN博客_archive库</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/dIrXsSCCtFXl2PWxhWohGg">Linux静态库与共享库基础知识</a></p></li><li><p><a href="https://blog.csdn.net/zhizhengguan/article/details/111713847?utm_source=app&amp;app_version=4.18.0"><font color=Red>cmake：add_library生成静态库和动态库</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/363981042">(避免踩坑@!)聊一聊动态链接库的小细节</a></p></li><li><p><a href="https://blog.csdn.net/qq_39584315/article/details/80311454?utm_source=app&amp;app_version=4.18.0">linux下生成静态库和动态库</a></p></li><li><p><a href="https://www.cnblogs.com/binbinjx/p/5626916.html">cmake 添加头文件目录，链接动态、静态库</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43742643/article/details/113816857">[CMake] 头文件路径 动态库路径</a></p></li><li><p><a href="https://blog.csdn.net/gx19862005/article/details/48528235">linux找不到动态链接库 .so文件的解决方法</a></p></li><li><p><a href="https://blog.csdn.net/hp_cpp/article/details/110401496?spm=1001.2014.3001.5501"><font color=Red>CMake 在Linux上编译生成动态库和静态库 </font></a></p></li><li><p><a href="https://blog.csdn.net/hp_cpp/article/details/110404651"><font color=Red>CMake 在Linux上使用动态库和静态库</font></a></p></li><li><p><a href="https://stackoverflow.com/questions/24648357/compiling-a-static-executable-with-cmake"><font color=Red>Compiling a static executable with CMake</font></a></p></li><li><p><a href="https://blog.51cto.com/u_15127661/3583020">如何使用cmake生成基于静态库的动态链接库</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/git/README/"/>
    <url>/git/README/</url>
    
    <content type="html"><![CDATA[<h1 id="git-learning">git-learning</h1><h2 id="git全局设置用户名跟邮箱">git全局设置用户名跟邮箱</h2><p>git全局设置用户名跟邮箱，基本操作一次以后很少再变化。</p><p>设置全局用户名，xxx替换为用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>设置全局用户邮箱，xxx替换为用户邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://segmentfault.com/a/1190000038802019">git全局设置用户名跟邮箱相关命令</a></li></ul><h2 id="修改git-默认编辑器为vim">修改git 默认编辑器为vim</h2><p>git默认编辑器为nano，不太常用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.editor vim<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.jianshu.com/p/86a7640705cd">修改Git默认编辑器</a></li></ul><h2 id="彻底替换https为ssh">彻底替换https为ssh</h2><p>设置git url https请求替换为ssh方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global url.<span class="hljs-string">&quot;git@github.com:&quot;</span>.insteadOf https://github.com/<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.jianshu.com/p/affe1af6781c">github项目如何快速git clone https</a></li></ul><h2 id="git设置ssh代理">git设置ssh代理</h2><p>类 UNIX 系统配置更改起来比较简单. 编辑 ~/.ssh/config 加入如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com *.github.com<br>  User git<br>  <span class="hljs-comment"># SOCKS代理</span><br>  ProxyCommand nc -v -x 127.0.0.1:7890 %h %p<br>  <span class="hljs-comment"># HTTPS代理</span><br>  ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=7890<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.donnadie.top/set-git-proxy">为 git 设置代理解决远程仓库无法连接问题</a></li></ul><h2 id="通过https-443端口建立ssh连接">通过HTTPS 443端口建立SSH连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T -p 443 git@ssh.github.com<br></code></pre></td></tr></table></figure><p>正常输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Hi realwujing! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure><p>说明可以通过HTTPS 443端口建立SSH连接。</p><p>编辑 ~/.ssh/config 加入如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com *.github.com<br>  HostName ssh.github.com <br>  User git<br>  Port 443<br>  <span class="hljs-comment"># IdentityFile &quot;~\.ssh\id_rsa&quot;</span><br>  <span class="hljs-comment"># SOCKS代理</span><br>  <span class="hljs-comment"># ProxyCommand nc -v -x 127.0.0.1:7890 %h %p</span><br>  <span class="hljs-comment"># HTTPS代理</span><br>  <span class="hljs-comment"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=7890</span><br></code></pre></td></tr></table></figure><p>正常输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi realwujing! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>如果输出异常，建议将上述<code>ProxyCommand</code>开头的内容取消注释，即使用代理且采用443端口，<code>github pull push</code>功能肯定能用。</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gerrit</title>
    <link href="/git/gerrit/"/>
    <url>/git/gerrit/</url>
    
    <content type="html"><![CDATA[<h1 id="gerrit">gerrit</h1><h2 id="提交模板">提交模板</h2><p>在 ~/ 目录下新建文件，并命名为.gitcommit_template 将以下内容写入文件当中：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">#commit type :fix（问题修复）、feat（功能开发）、style(风格修改)、refactor(重构)、docs（文档）、 chore（其他)、test(测试) + 简单描述. 默认fix,根据情况修改<br>fix: <br><br>#Describe you bug/feature,or other things<br>Description: <br><br># <br>Log: <br><br>#关联pms上的bug号，提交后，则会自动在pms对应bug信息页面添加备注，关联本次提交。若本次提交为修复bug相关，则请 取消注释<br>#Bug: <br><br>#尚不清楚干啥的 <br>#Issue: <br><br>#关联pms上的任务号，提交后，则会自动在pms对应任务信息页面添加备注，关联本次提交。若本次提交为任务相关，则请取消注释<br>#Task: <br></code></pre></td></tr></table></figure><p>在命令行执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global commit.template ~/.gitcommit_template<br></code></pre></td></tr></table></figure><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install git-review<br></code></pre></td></tr></table></figure><h2 id="推送">推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git review branch(当前分支) -r origin<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://wikidev.uniontech.com/Gerrit_%E6%8F%90%E4%BA%A4%E6%A8%A1%E6%9D%BF">Gerrit 提交模板</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github-pages</title>
    <link href="/git/github-pages/"/>
    <url>/git/github-pages/</url>
    
    <content type="html"><![CDATA[<h1 id="github-pages">github-pages</h1><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/" class="uri">https://fluid-dev.github.io/hexo-fluid-docs/start/</a></p><p><a href="https://zhuanlan.zhihu.com/p/405551874">[Hexo博客搭建]第4章Hexo图片显示问题-知乎(zhihu.com)</a></p><p><a href="https://segmentfault.com/a/1190000018402194">Hexo功能增强插件-西西弗苏- SegmentFault思否</a></p><p><a href="https://blog.csdn.net/Olivia_Vang/article/details/92976637">更换Hexo的网页图标/小图片Hexo change page favicon</a></p><p><a href="https://github.com/Cenergy/blog-dev/blob/dev/_config.fluid.yml">blog-dev/_config.fluid.yml at dev·Cenergy/blog-dev (github.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/134492757">Hexo生成永久文章链接-知乎(zhihu.com)</a></p><p><a href="https://github.com/YunYouJun/hexo-theme-yun/issues/60">升级主题后，文章会刷新更新日期，时间为刚才的部署时间</a></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid:一款Material Design风格的Hexo主题/ An elegant Material-Design theme for Hexo (github.com)</a></p><p><a href="https://github.com/LonlyPan/LonlyPan.github.io">LonlyPan/LonlyPan.github.io</a></p><p><a href="https://lonlypan.com/">LonlyPan个人站</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git教程</title>
    <link href="/git/git%E6%95%99%E7%A8%8B/"/>
    <url>/git/git%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="git教程">git教程</h1><h2 id="github.token">Github.token</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">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<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/purplego/article/details/78657521"><font color=Red>git client 配置以及连接GitHub、Bitbucket_purplego的博客-CSDN博客</font></a></li><li><a href="https://www.wdssmq.com/post/20201216004.html">【VSCode 笔记】Git： Host key verification failed</a></li><li><a href="https://www.jianshu.com/p/0503722f69af">[ github ] github clone private repo克隆私有项目详细-简书(jianshu.com)</a></li><li><a href="https://blog.csdn.net/purplego/article/details/78657521">git client 配置以及连接GitHub、Bitbucket</a></li><li><a href="https://www.jianshu.com/p/affe1af6781c">github项目如何快速git clone https</a></li></ul><h2 id="密码">密码</h2><ul><li><p><a href="https://www.cnblogs.com/qdlhj/p/13215158.html">GitLab使用手册配置Git永久记住密码，免去重复输入的烦恼 - 心向阳 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42050406/article/details/115251109">向gitlab提交代码时记住用户名和密码_胡桃夹夹子的博客-CSDN博客_gitlab记住密码</a></p></li><li><p><a href="https://www.donnadie.top/set-git-proxy"><font color=Red>为git设置代理解决远程仓库无法连接问题</font></a></p></li><li><p><a href="https://blog.csdn.net/yuzhiqiang_1993/article/details/127032178">github配置了公钥依旧提示git@github.com‘s password: Permission denied, please try again.的解决办法</a></p></li><li><p><a href="https://blog.csdn.net/syzdev/article/details/126921031">Git报错：git@github.com: Permission denied (publickey)</a></p></li></ul><h2 id="config">config</h2><ul><li><a href="https://www.maixj.net/ict/git-config-unset-21515">git config的删除命令 | 云上小悟 (maixj.net)</a></li></ul><h2 id="命令">命令</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3NTgyODQ1Nw==&amp;mid=2247522045&amp;idx=2&amp;sn=f97685dcac7470d9b8fc1990aba7a7a8&amp;chksm=fd1fee7bca68676db0e438c67294cf0975958f9c1fbf04caeb25d3cafd5b64ac18f4d1003b7a&amp;mpshare=1&amp;scene=1&amp;srcid=0319RvIZ2fucLHLShthVdegk&amp;sharer_sharetime=1648042404990&amp;sharer_shareid=2dfdf936388dba04865b3e883d5a3225&amp;version=3.1.12.6001&amp;platform=win#rd"><font color=Red>Git 不要只会 pull 和 push，试试这 5 条提高效率的命令</font></a></p></li><li><p><a href="https://juejin.cn/post/6844903746166587405">如何在大型项目中使用Git子模块开发</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/0g1RDnKaSw7WYPfcp_gmKw">Git 各指令的本质，真是通俗易懂啊 (qq.com)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247485544&amp;idx=1&amp;sn=afc9d9f72d811ec847fa64108d5c7412&amp;scene=21#wechat_redirect"><font color=Red>我用四个命令，总结了 Git 的所有套路</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_46087056/article/details/124741158"><font color=Red>git常用命令 1.分支开发 2.代码冲突处理</font></a></p></li></ul><h2 id="reset">reset</h2><ul><li><a href="https://www.runoob.com/git/git-reset.html">git reset 命令</a></li></ul><h2 id="commit">commit</h2><ul><li><p><a href="https://blog.csdn.net/keeplook/article/details/39324971">Git怎样合并最近两次commit</a></p></li><li><p><a href="https://www.jianshu.com/p/7d40838883af">对之前的commit 提交进行修改</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1730774"><font color=Red>Git 修改已提交 commit 的信息</font></a></p></li><li><p><a href="https://www.cnblogs.com/boshen-hzb/p/9764835.html"><font color=Red>git只合并某一个分支的某个commit</font></a></p></li><li><p><a href="https://blog.csdn.net/ybdesire/article/details/42145597"><font color=Red>Git合并特定commits 到另一个分支</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_32077121/article/details/111150662">git如何恢复本地删除的文件夹</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39580031/article/details/123826439"><font color=Red>git 回退一个文件的版本</font></a></p></li></ul><h2 id="head">head</h2><ul><li><a href="https://blog.csdn.net/raoxiaoya/article/details/110862360">git深入理解(二)：HEAD是什么</a></li><li><a href="https://geek-docs.com/git/git-cmds/git-head.html">Git – Head</a></li></ul><h2 id="statsh">statsh</h2><ul><li><a href="https://www.cnblogs.com/shoshana-kong/p/11194256.html">git stash详解</a></li></ul><h2 id="rebase-merge">rebase merge</h2><ul><li><p><a href="https://docs.github.com/cn/get-started/using-git/resolving-merge-conflicts-after-a-git-rebase">解决 Git 变基后的合并冲突</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin master rebase<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.jianshu.com/p/025aaa1a2c34">GIT使用 rebase 和 merge 的正确姿势（转）</a></p></li><li><p><a href="https://blog.csdn.net/textdemo123/article/details/107867211">Linux :关于git：您尚未完成合并(MERGE_HEAD存在)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/462530860">使用交互式 git rebase 工具压缩 Git 提交</a></p></li><li><p><a href="http://quibbler.cn/?thread-232.htm&amp;user=1"><font color=Red>git rebase调整commit之间顺序</font></a></p></li><li><p><a href="https://www.jianshu.com/p/f247827d60bb">git强制合并分支</a></p></li><li><p><a href="https://blog.csdn.net/junruitian/article/details/88361895">refusing to merge unrelated histories的解决方案（本地/远程）综合</a></p></li></ul><h2 id="pull">pull</h2><ul><li><a href="https://man7.org/linux/man-pages/man3/pthread_create.3.html">如何使用 Git Pull 覆盖本地文件</a></li><li><a href="https://mp.weixin.qq.com/s/3jxG4pdjSiCA1tgo5zau3g">Git 合并到底使用Merge还是Rebase</a></li></ul><h2 id="pull-request">pull request</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2017/07/pull_request.html">Pull Request 的命令行管理</a></li></ul><h2 id="push">push</h2><ul><li><p><a href="https://github.com/LeachZhou/blog/issues/11">Gitlab强制推送提示"You are not allowed to force push code to a protected branch on this project." · Issue #11 · LeachZhou/blog (github.com)</a></p></li><li><p><a href="https://www.cnblogs.com/zishu/p/9191815.html">Github远程推送一直Everything up-to-date - sinatJ - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30304375/article/details/99984494">submodule 子项目提交代码后无法push到远程仓库_三叔的负能量的博客-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/qq_45893999/article/details/106273214">error: failed to push some refs to如何解决_尘客-追梦的博客-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/D939030515/article/details/105490835"><font color=Red>git 仓库提交分支到另外一个仓库</font></a></p></li><li><p><a href="https://www.freesion.com/article/2366930198/">GIT 清除本地 REMOTES/ORIGIN/*</a></p></li><li><p><a href="https://www.itranslater.com/qa/details/2583713236583449600">git-警告：忽略损坏的ref refs / remotes / origin / HEAD</a></p></li></ul><h2 id="tag">tag</h2><ul><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE"><font color=Red>2.6 Git基础-打标签</font></a></li><li><a href="https://blog.csdn.net/QH_JAVA/article/details/77979622">git tag创建、远程推送、回退以及强推push -f</a></li></ul><h2 id="submodule">submodule</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43455581/article/details/120174578"><font color=Red>git中子模块/子仓库的使用</font></a></p></li><li><p><a href="https://knightyun.github.io/2021/03/21/git-submodule"><font color=Red>Git submodule 知识总结</font></a></p></li><li><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">7.11 Git工具-子模块</a></p></li><li><p><a href="https://www.jianshu.com/p/f8a55b972972/">git submodule 使用小结 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/e27a978ddb88">git submodule 的使用 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/nicksheng/p/6201711.html">Git Submodule管理项目子模块 - nicksheng - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/qq_38292379/article/details/124950163">git submodule update 游离分支 临时分支问题记录 解决办法</a></p></li><li><p><a href="https://www.cnblogs.com/hustcpp/p/13092625.html">git添加submodule以及更名</a></p></li><li><p><a href="https://blog.csdn.net/weixin_45115705/article/details/104303730">Git修改.Submodule文件url生效</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39673293/article/details/111786946">submodule切换分支_Git submodule-切换submodule的分支</a></p></li><li><p><a href="https://qa.1r1g.com/sf/ask/2815344661/">git submodule 分支是否与主项目的分支一起切换？</a></p><p>设置永久记住密码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置永久记住密码 </span><br><br>git config --global credential.helper store <br>git pull  <br><br><br><span class="hljs-comment"># 拉取所有子模块 </span><br><br>git submodule update --init --recursive <br><br><br><br><br>git submodule foreach git pull origin master <br><br><br><br><br>git submodule foreach git checkout master <br><br><br><br><br><span class="hljs-comment"># 取消永久记住密码 </span><br><br><span class="hljs-comment"># git config --global --unset credential.helper </span><br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://juejin.cn/post/6934107291621228558">Git详解10-Git子库：submodule与subtree</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/594835463">将git仓库从submodule转换为subtree</a></p></li><li><p><a href="https://www.cnblogs.com/anliven/p/13681894.html">Git - - subtree与submodule - Anliven -博客园(cnblogs.com)</a></p></li><li><p><a href="https://juejin.cn/post/6936459179049615397">Git SubTree使用</a></p></li></ul><h2 id="gitignore">.gitignore</h2><ul><li><a href="https://learnku.com/articles/18380">.gitignore 在已忽略文件夹中不忽略指定文件、文件夹... | Laravel China 社区 (learnku.com)</a></li></ul><h2 id="gitkeep">.gitkeep</h2><ul><li><a href="https://blog.csdn.net/fengchao2016/article/details/52769151">git提交空文件夹_fengchao2016的博客-CSDN博客_git空文件夹不能提交</a></li><li><a href="https://www.cnblogs.com/everfight/p/keep_empty_dir_in_git_repo.html">如何向git仓库提交空文件夹？.gitignore和.gitkeep配合 - everfight - 博客园 (cnblogs.com)</a></li></ul><h2 id="gerrit">gerrit</h2><ul><li><p><a href="https://www.jianshu.com/p/e1b466df12de">Gerrit - not clone with commit-msg hook</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git review dev -r origin<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git cherry-pick c6611ca831bb97ac646dbd22bbf9f5216741c09d<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/weixin_38419133/article/details/113600907">gerrit 将代码从一个分支合并到另外一个分支 Cherry Pick的使用</a></p></li><li><p><a href="https://www.cnblogs.com/111testing/p/9450530.html">gerrit 使用教程（一）</a></p></li><li><p><a href="https://blog.csdn.net/yangshujuan91/article/details/113741972">gerrit 缺少change-Id</a></p></li><li><p><a href="https://www.cnblogs.com/tsalita/p/16500429.html">VSCode_git&amp;svn 的冲突译文</a></p></li></ul><h2 id="github-action">Github Action</h2><ul><li><a href="https://www.it610.com/article/1527116916244676608.htm">通过 GitHub Actions 将 GitHub 仓库自动备份到 Gitee、GitLab</a></li><li><a href="https://stackoverflow.com/questions/66626814/github-action-error-process-completed-with-exit-code-1">bash - Github Action - Error: Process completed with exit code 1 - Stack Overflow</a></li><li><a href="https://github.com/orgs/community/discussions/26928"><font color=Red>Github actions git log only output one line</font></a></li></ul><h2 id="patch">patch</h2><ul><li><a href="https://www.toutiao.com/article/6652488964823319052">使用Git生成patch和应用patch，看完这一篇文章就全懂了</a></li><li><a href="https://blog.csdn.net/qq_30624591/article/details/89474571">git生成patch和打patch的操作命令</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/java/README/"/>
    <url>/java/README/</url>
    
    <content type="html"><![CDATA[<h1 id="javaporject">JavaPorject</h1>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>submodule</title>
    <link href="/git/submodule/"/>
    <url>/git/submodule/</url>
    
    <content type="html"><![CDATA[<h1 id="git-submodules">git submodules</h1><h2 id="更新-submodule">更新 submodule</h2><ul><li><p>自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><ol type="1"><li><p>方式1</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recurse-submodules https://github.com/realwujing/linux-learning.git<br></code></pre></td></tr></table></figure></p></li><li><p>方式2</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/realwujing/linux-learning.git<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ol></li><li><p>递归地抓取子模块的更改并更新当前仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><ol type="1"><li><p>方式1</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --recurse-submodules<br></code></pre></td></tr></table></figure></p></li><li><p>方式2</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ol></li></ul><h2 id="推送-submodule">推送 submodule</h2><ul><li><p>推送当前仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><ol type="1"><li><p>方式1</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --recurse-submodules=on-demand<br></code></pre></td></tr></table></figure></p></li><li><p>方式2(方式1报错情况下使用)</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule foreach --recursive <span class="hljs-string">&#x27;git push&#x27;</span> &amp;&amp; git push<br></code></pre></td></tr></table></figure></p></li></ol></li></ul><h2 id="更改submodule分支">更改submodule分支</h2><ul><li><p>更改submodule分支</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config -f .gitmodules submodule.assembly.branch main<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --remote<br></code></pre></td></tr></table></figure></p></li><li><p>在你拉取的提交中， 可能 .gitmodules 文件中记录的子模块的 URL 发生了改变。 比如，若子模块项目改变了它的托管平台，就会发生这种情况</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将新的 URL 复制到本地配置中</span><br>git submodule <span class="hljs-built_in">sync</span> --recursive<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从新 URL 更新子模块</span><br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="删除-submodule">删除 submodule</h2><ul><li><p>删除 submodule</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 卸载子模块</span><br>git submodule deinit [submodule_folder]<br><span class="hljs-comment"># 如果想移除子库的本地修改,可使用--force标签</span><br>git submodule deinit [submodule_folder] --force<br><br><br><span class="hljs-comment"># 删除文件夹</span><br>git <span class="hljs-built_in">rm</span> [submodule_folder]<br><br><span class="hljs-comment"># 提交代码</span><br>git commit -m <span class="hljs-string">&quot;delete submodule xxxxx&quot;</span><br><br></code></pre></td></tr></table></figure></p></li></ul><h2 id="more">More</h2><ul><li><a href="https://www.jianshu.com/p/f8a55b972972/">git submodule 使用小结</a></li><li><a href="https://www.cnblogs.com/hustcpp/p/13092625.html">git 添加submodule 以及更名</a></li><li><a href="https://blog.csdn.net/weixin_45115705/article/details/104303730">Git 修改.Submodule文件 url 生效</a></li><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">7.11 Git 工具 - 子模块</a></li><li><a href="https://blog.csdn.net/weixin_43455581/article/details/120174578">git中子模块/子仓库的使用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-learning</title>
    <link href="/java/java-learning/"/>
    <url>/java/java-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="java">Java</h1><ul><li><p><a href="https://snailclimb.gitee.io/javaguide/#/" class="uri">https://snailclimb.gitee.io/javaguide/#/</a></p></li><li><p><a href="https://github.com/Snailclimb/JavaGuide">JavaGuide</a></p></li><li><p><a href="https://github.com/CyC2018/CS-Notes">CyC2018/CS-Notes: 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计 (github.com)</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1584463">史上最全的Java命名规范[转] - 云+社区 - 腾讯云 (tencent.com)</a></p></li></ul><h2 id="java环境">Java环境</h2><ul><li><a href="https://www.cnblogs.com/luoli-/p/9247952.html">Ubuntu18.04安装jdk1.8</a></li><li><a href="https://blog.csdn.net/bestsongs/article/details/104905060">jdk1.8下载与安装教程（win10）超详细！</a></li><li><a href="https://blog.csdn.net/weixin_38168198/article/details/99906459">E: Unable to locate package openjdk-8-jdk 及java version 切换_weixin_38168198的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html">macOS所有版本JDK安装指南(with Homebrew) -质子-博客园(cnblogs.com)</a></li><li><a href="https://blog.csdn.net/sun8112133/article/details/79905401">Linux Ubuntu 下安装与卸载 JDK，亲测有效~_小异常的博客-CSDN博客_ubuntu卸载jdk</a></li><li><a href="https://dev1galaxy.org/viewtopic.php?id=649">[SOLVED] update-alternatives warning: broken link group? / Desktop and Multimedia / Dev1 Galaxy Forum</a></li><li><a href="https://zhuanlan.zhihu.com/p/92654421">Java升级那么快，多个版本如何灵活切换和管理？-知乎(zhihu.com)Java升级那么快，多个版本如何灵活切换和管理？-知乎(zhihu.com)</a></li></ul><h2 id="maven">maven</h2><ul><li><a href="https://www.linuxidc.com/Linux/2020-04/162861.htm">Maven常用命令详解_Linux教程_Linux公社-Linux系统门户网站 (linuxidc.com)</a></li><li><a href="https://blog.csdn.net/weixin_38936572/article/details/104938305">关于maven打包时的报错： Return code is: 501 , ReasonPhrase:HTTPS Required._爱吃猪蹄的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_29695701/article/details/90705181">Ubuntu安装maven_Learning-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_22041375/article/details/103491941">maven下载依赖时候忽略SSL证书校验_方方园园的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/longqizhanshen/article/details/107119808">2021最新 Maven之阿里云镜像仓库配置_longqizhanshen的博客-CSDN博客_maven阿里云镜像仓库</a></li><li><a href="https://blog.csdn.net/wushengjun753/article/details/114883662">java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty_小龙舟的工具书-CSDN博客</a></li><li><a href="https://www.cnblogs.com/huyuchengus/p/10987515.html">Maven 在 pom.xml 文件中配置 repositories 仓库 - huyuchengus - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/caiwenfeng_for_23/article/details/44514947">maven打包报错：Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.5:test_蚂蚁的专栏-CSDN博客</a></li><li><a href="https://www.hangge.com/blog/cache/detail_2844.html">使用Nexus搭建Maven私服教程（附：配置并使用私服教程） (hangge.com)</a></li><li><a href="https://blog.csdn.net/weixin_41806245/article/details/87812500">Nexus 3 Docker仓库（hosted、proxy、group）模式 讲解_xiliangMa的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/lijingjingchn/article/details/105510584">Maven deploy上传jar包到远程仓库_李京京的博客-CSDN博客_maven上传jar包到远程仓库</a></li><li><a href="https://mp.weixin.qq.com/s/TnpokzoiZGaGcIVJWFHw3w">悲剧！IDEA突然找不到类了？</a></li></ul><h2 id="spring-boot">spring-boot</h2><ul><li><a href="https://www.cnblogs.com/alltime/p/6729295.html">依赖注入的简单理解 - nowthink - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/weixin_53601359/article/details/114378460?utm_source=app&amp;app_version=4.13.0">Java常用注解(Annotation)详解汇总_布诺的博客-CSDN博客_java的注解</a></li><li><a href="http://c.biancheng.net/spring_boot/">Spring Boot框架入门教程（快速学习版） (biancheng.net)</a></li><li><a href="https://www.cnblogs.com/songxingzhu/p/9597927.html">使用SpringBoot的推荐项目目录结构 - 宋兴柱 - 博客园 (cnblogs.com)</a></li><li><a href="https://github.com/ityouknow/spring-boot-examples">ityouknow/spring-boot-examples: about learning Spring Boot via examples. Spring Boot 教程、技术栈示例代码，快速简单上手教程。 (github.com)</a></li><li><a href="https://github.com/dyc87112/SpringBoot-Learning">dyc87112/SpringBoot-Learning: Spring Boot基础教程，Spring Boot 2.x版本连载中！！！ (github.com)</a></li><li><a href="https://blog.didispace.com/java-lombok-how-to-use/">Java开发神器Lombok的使用与原理 | 程序猿DD (didispace.com)</a></li><li><a href="http://www.ityouknow.com/springboot/2017/05/09/spring-boot-deploy.html">Spring Boot(十二)：Spring Boot 如何测试打包部署 - 纯洁的微笑博客 (ityouknow.com)</a></li><li><a href="https://blog.didispace.com/spring-boot-learning-21-2-1/">Spring Boot 2.x基础教程：构建RESTful API与单元测试 | 程序猿DD (didispace.com)</a></li><li><a href="https://www.cnblogs.com/ASPNET2008/p/6511500.html">Spring Cache扩展：注解失效时间+主动刷新缓存 - min.jiang - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/hopeofthevillage/p/11427438.html">Mybatis的一级缓存和二级缓存的理解以及用法 - 全me村的希望 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/cxuanBlog/p/11333021.html">MyBatis 二级缓存全详解 - 程序员cxuan - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/xiaolyuh123/article/details/78819898">Spring Boot缓存实战 Redis 设置有效时间和自动刷新缓存-2_xiaolyuh的专栏-CSDN博客</a></li><li><a href="https://www.jb51.net/article/197772.htm">详解SpringBoot的三种缓存技术(Spring Cache、Layering Cache 框架、Alibaba JetCache 框架)_java_脚本之家 (jb51.net)</a></li><li><a href="https://blog.csdn.net/qq_45173404/article/details/108693030">SpringBoot配置文件&amp;YAML配置注入（详解）_欢迎来到 Baret~H 的博客-CSDN博客_springboot yml配置文件</a></li><li><a href="https://blog.csdn.net/weixin_36775115/article/details/79539811">SpringBoot配置-读取 .yml配置文件_总该长大了的博客-CSDN博客_spring读取yml配置文件</a></li><li><a href="https://www.cnblogs.com/hsbt2333/p/9347249.html">使用springboot + druid + mybatisplus完成多数据源配置 - 快乐在角落里 - 博客园 (cnblogs.com)</a></li><li><a href="https://mp.weixin.qq.com/s/M8N67DfWegiGEpwP02aJkQ">SpringCloud+SpringBoot+OAuth2+Spring Security+Redis实现的微服务统一认证授权 (qq.com)</a></li><li><a href="https://blog.csdn.net/qq_37933127/article/details/106248546">VS Code运行SpringBoot项目_陈灬大灬海-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s/BRRgcrphENx0iHSBljQtsA">用好Spring AOP，天降大锅从容应对！</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1266265125480448">使用AOP - 廖雪峰的官方网站 (liaoxuefeng.com)</a></li><li><a href="https://www.jianshu.com/p/421f7be8627c">SpringBoot+Mybatis配置多数据源及事务方案 - 简书 (jianshu.com)</a></li><li><a href="https://www.hangge.com/blog/cache/detail_2485.html">SpringBoot - 获取POST请求参数详解（附样例：表单数据、json、数组、对象） (hangge.com)</a></li><li><a href="https://blog.csdn.net/wang48430327/article/details/81064220">ApplicationContextAware使用_累死的青蛙-CSDN博客</a></li><li><span class="citation" data-cites="Configuration的使用">[spring4.0之二：@Configuration的使用 - duanxz - 博客园 (cnblogs.com)]</span>(https://www.cnblogs.com/duanxz/p/7493276.html)</li><li><a href="https://mp.weixin.qq.com/s/GprHnr0Y8vMIn5Pqujv3rw">金九银十到来，盘点今年截止八月的 80 篇原创文章列表，建议收藏慢慢看！ (qq.com)</a></li></ul><h2 id="动态crontab-quartz">动态crontab Quartz</h2><ul><li><a href="https://www.cnblogs.com/fandc/p/7277905.html">Java cron 任务执行表达式 - 开心就好也 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.matools.com/cron/">在线Cron表达式生成器 - 码工具 (matools.com)</a></li><li><a href="https://www.jb51.net/article/207667.htm">spring schedule配置多任务动态cron(增删启停)_java_脚本之家 (jb51.net)</a></li><li><a href="https://juejin.cn/post/6974659450260488200">利用Spring Boot轻松实现动态定时器开发！ (juejin.cn)</a></li><li><a href="https://blog.csdn.net/upxiaofeng/article/details/79415108">SpringBoot集成Quartz动态定时任务_upxiaofeng的专栏-CSDN博客_springboot集成quartz</a></li><li><a href="https://blog.csdn.net/weixin_40375601/article/details/109526971">springboot集成quartz，简版-通俗易懂_红桃∩-CSDN博客</a></li><li><a href="https://www.cnblogs.com/laoyeye/p/9352002.html">Quartz实现JAVA定时任务的动态配置 - 小卖铺的老爷爷 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/jpfss/p/10857077.html">SpringBoot整合Quartz实现定时任务 - 星朝 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/daxin/archive/2013/05/29/3105830.html">Quartz JobListener 任务监听器 - 大新博客 - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1640190">springboot整合quartz实现定时任务的动态修改，启动，暂停等操作 - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://github.com/EalenXie/SpringBoot-Quartz">EalenXie/SpringBoot-Quartz: SpringBoot整合Quartz作为调度中心使用完整实例 (github.com)</a></li><li><a href="https://www.cnblogs.com/ealenxie/p/9134602.html">SpringBoot整合Quartz作为调度中心完整实用例子 - EalenXie - 博客园 (cnblogs.com)</a></li><li><a href="https://github.com/nkcoder/quartz-explained">nkcoder/quartz-explained: 对定时任务调度框架quartz源码的阅读和注释(comments on quartz-core source) (github.com)</a></li><li><a href="http://ifeve.com/quartz-tutorial-using-quartz/">Quartz教程一：使用quartz | 并发编程网 – ifeve.com</a></li><li><a href="https://blog.csdn.net/u012907049/article/details/73801122">Spring Boot集成持久化Quartz定时任务管理和界面展示_天降风云的博客-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s/zJSPzcsFl72JNoqZpkH94A">SpringBoot 整合 Quartz 实现分布式调度 (qq.com)</a></li></ul><h2 id="mybatis">Mybatis</h2><ul><li><a href="http://c.biancheng.net/mybatis/">Java Mybatis框架入门教程</a></li><li><a href="http://c.biancheng.net/view/4309.html">第一个MyBatis程序 (biancheng.net)</a></li><li><a href="https://github.com/baomidou/awesome-mybatis-plus">baomidou/awesome-mybatis-plus:🎉A curated list of awesome things related to MyBatis-Plus (github.com)</a></li><li><a href="https://www.jb51.net/article/96242.htm">Mybatis Generator最完美配置文件详解(完整版)_java_脚本之家(jb51.net)</a></li><li><a href="https://github.com/zouzg/mybatis-generator-gui">zouzg/mybatis-generator-gui: mybatis-generator界面工具，让你生成代码更简单更快捷(github.com)</a></li><li><a href="https://blog.csdn.net/ftfy123/article/details/113763182">MyBatis Generator 超详细配置_ftfy123的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/liu649983697/article/details/113930493">mybatis-plus代码自动生成generator配置实现_liu649983697的专栏-CSDN博客</a></li><li><span class="citation" data-cites="MapperScan和">[Spring Boot的MyBatis注解：@MapperScan和@Mapper - MyBatis中文官网]</span>(http://www.mybatis.cn/archives/862.html)</li><li><a href="https://blog.csdn.net/mj_940620/article/details/110356785">springboot 配置多数据源（Aop+注解实现）_mj的博客-CSDN博客_springboot多数据源</a></li><li><a href="https://blog.csdn.net/chinawangfei/article/details/113618469">springboot整合mybatis-plus、druid连接池和多数据源配置_WorldMvp的专栏-CSDN博客_springboot整合mybatisplus多数据源</a></li><li><a href="https://mp.weixin.qq.com/s/EWiq8BS11FPKA4exKpOwdA">熟练掌握 MyBatis-Plus，这一篇就够了！ (qq.com)</a></li></ul><h2 id="设计模式">设计模式</h2><ul><li><a href="https://mp.weixin.qq.com/s/fnDvgOD7IKJ5ilVf3l3inA">23种设计模式的通俗解释，虽然有点污，但是秒懂</a></li><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式</a></li></ul><h2 id="java注解">Java注解</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/37701743">java注解-最通俗易懂的讲解</a></li><li><a href="https://www.runoob.com/w3cnote/java-annotation.html">Java注解（Annotation）</a></li></ul><h2 id="消息队列">消息队列</h2><h2 id="kafka">Kafka</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/37405836">Kafka简明教程 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/weixin_45366499/article/details/106943229">(1条消息) Kafka基本原理详解（超详细！）_蔡政洁的博客-CSDN博客_kafka</a></li><li><a href="https://www.jianshu.com/p/a036405f989c">Zookeeper在Kafka中的作用-简书(jianshu.com)</a></li><li><a href="https://support.huaweicloud.com/devg-kafka/kafka-python.html">Python_分布式消息服务 Kafka_开发指南_华为云 (huaweicloud.com)</a></li><li><a href="https://my.oschina.net/u/4395907/blog/3356363">kafka python 指定分区消费 与 offset - osc_3o8lxtf4的个人空间 - OSCHINA - 中文开源技术交流社区</a></li><li><a href="https://mp.weixin.qq.com/s/CfyfnGHcT0_ZpYis2wq7Dg" class="uri">https://mp.weixin.qq.com/s/CfyfnGHcT0_ZpYis2wq7Dg</a></li></ul><h2 id="rabbitmq">RabbitMQ</h2><ul><li><a href="https://www.jb51.net/os/Ubuntu/683325.html">Ubuntu 16.04 RabbitMq 安装与运行方法（安装篇）_Ubuntu/Debian_操作系统_脚本之家 (jb51.net)</a></li><li><a href="https://blog.csdn.net/u010134642/article/details/102525490">(1条消息) RabbitMQ 启动报错 Failed to check/redeclare auto-delete queue(s) access to vhost '/' refused for user_流浪的喵的博客-CSDN博客</a></li></ul><h2 id="elasticsearch">Elasticsearch</h2><ul><li><a href="https://blog.didispace.com/books/elasticsearch-definitive-guide-cn/010_Intro/05_What_is_it.html">是什么 · Elasticsearch 权威指南（中文版） (didispace.com)</a></li></ul><h2 id="spider-flow">spider-flow</h2><ul><li><a href="https://www.bookstack.cn/read/spiderflow-0.5.0/620e86c3c5a46c8b.md">使用教程 - 表达式语法 - 《spider-flow v0.5.0 使用手册》 - 书栈网 · BookStack</a></li><li><a href="https://www.spiderflow.org/">spider-flow (spiderflow.org)</a></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://blog.csdn.net/weixin_34344677/article/details/92073333">(3条消息) Logback不同业务日志写入不同文件_weixin_34344677的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/zeng1994/p/f9bff238b13a0bf8fb8bf88c41db7a34.html">SpringBoot+logback实现按业务输出日志到不同的文件 - zeng1994 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/white_ice/article/details/85065219?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control">springboot使用logback日志框架超详细教程_white_ice的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/gavincoder/p/10091757.html">logback配置文件-logback.xml详解 - 马非白即黑 - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1445599">springboot超级详细的日志配置(基于logback) - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://www.cnblogs.com/cb0327/p/5770794.html">logback 配置详解（二）——appender - 灰太郎^_^ - 博客园 (cnblogs.com)</a></li><li><a href="https://www.php.cn/java-article-406687.html">如何使用java代码编写logback配置-java教程-PHP中文网</a></li><li><a href="http://www.51gjie.com/javaweb/1113.html">RollingFileAppender详解 (51gjie.com)</a></li><li><a href="https://www.cnblogs.com/Hlingoes/p/13109918.html">java代码动态自定义logback日志Appender - Hlingoes - 博客园 (cnblogs.com)</a></li></ul><h2 id="datax">DataX</h2><ul><li><a href="https://blog.csdn.net/qq_39945938/article/details/117959051">Datax 源码打包报错与解决方法_终回首的博客-CSDN博客</a></li><li><a href="https://developer.aliyun.com/article/642896">【DataX】Java中集成DataX开发-阿里云开发者社区 (aliyun.com)</a></li><li><a href="https://www.jb51.net/article/168672.htm">关于通过java调用datax,返回任务执行的方法_java_脚本之家 (jb51.net)</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://www.cnblogs.com/xiaoniu-666/p/9491897.html">C++ 对象实例化（转）</a></li><li><a href="https://blog.csdn.net/sinat_38259539/article/details/71799078">Java基础之—反射（非常重要）_sinat_38259539的博客-CSDN博客_java反射</a></li><li><a href="https://www.xuxueli.com/xxl-job/">分布式任务调度平台XXL-JOB (xuxueli.com)</a></li><li><a href="https://www.jianshu.com/p/e2850153c6f0">Quartz 使用：Job、Trigger、Schedule - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_33667967/article/details/95602890">ubuntu16 jdk1.8 java new Date()获取的时间与服务器不一致_qq_33667967的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/L_it123/article/details/106845391">【已解决】com.mysql.jdbc.exceptions.jdbc4.CommunicationsExcepti：Communications link failure mysql连接报错_L_it123的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_44778151/article/details/116265825">springboot项目的.gitignore模板_Anjude的博客-CSDN博客</a></li><li><a href="http://www.seaxiang.com/blog/vsimp">vscode跳转到接口方法的实现类 (seaxiang.com)</a></li><li><a href="https://www.cnblogs.com/116970u/p/11408508.html">IntelliJ IDEA 接口类跳转到实现类及实现类跳转到接口 - 清晨的第一抹阳光 - 博客园 (cnblogs.com)</a></li><li><a href="https://geek-docs.com/vscode/vscode-tutorials/vs-code-definition-implementation-jump.html">VSCode 定义和实现间跳转|极客教程 (geek-docs.com)</a></li><li><a href="https://mp.weixin.qq.com/s/1rhVo2DG9zq5tt_RrpYaJw" class="uri">https://mp.weixin.qq.com/s/1rhVo2DG9zq5tt_RrpYaJw</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/k8s/README/"/>
    <url>/k8s/README/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s-learning">k8s-learning</h1><h2 id="k8s-集群部署">k8s 集群部署</h2><h2 id="kubectl-教程">kubectl 教程</h2>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/k8s/docker/"/>
    <url>/k8s/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker">docker</h1><h2 id="原理">原理</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/GAAJOoF6hCRY0CxfaTpfAg">Docker 夺命连环 15 问</a></p></li><li><p><a href="https://draveness.me/docker/">Docker 核心技术与实现原理</a></p></li><li><p><a href="https://www.cnblogs.com/michael9/p/13039700.html">一篇文章带你吃透 Docker 原理</a></p></li><li><p><a href="https://www.cnblogs.com/handwrit2000/p/12871493.html">docker 镜像分层原理</a></p></li><li><p><a href="http://dockone.io/article/1513">Docker五种存储驱动原理及应用场景和性能测试对比</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/EHgCOgXJfZ7OtV35qDzzsg">技术总监对Docker理解的太透彻了，几句话给程序员新人整的明明白白！</a></p></li><li><p><a href="https://blog.csdn.net/weixin_51484460/article/details/125041875">【云原生|实战入门】1：Docker、K8s简单实战与核心概念理解</a></p></li><li><p><a href="https://blog.csdn.net/u012385733/article/details/102565591">chroot，pivot_root和switch_root 区别</a></p></li><li><p><a href="https://www.cnblogs.com/valon/p/6869368.html">inode、chroot、pivot_root</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/101096040">pivot_root实现原理</a></p></li><li><p><a href="https://www.cnblogs.com/bianhao3321/p/6873511.html">PIVOT_ROOT命令的使用</a></p></li><li><p><a href="https://blog.51cto.com/jiangjqian/381778">chroot, exec, pivot_root</a></p></li><li><p><a href="https://www.bilibili.com/read/cv11533449/">自己写Docker_挂载busybox作为容器操作系统的rootfs</a></p></li><li><p><a href="https://www.toutiao.com/article/7195362738607424003">寻根究底，为什么Docker中的Alpine Linux镜像能这么小</a></p></li><li><p><a href="https://www.toutiao.com/article/7208512937982689831">【容器安全篇】原来root在容器里也不是万能的</a></p></li></ul><h2 id="基础">基础</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/82433360">Docker学习笔记</a></li><li><a href="https://www.cnblogs.com/lhns/p/13958249.html">ubuntu docker开启2375端口，支持远程访问</a></li><li><a href="https://blog.csdn.net/u014374009/article/details/114010841">docker出现GPG error: At least one invalid signature was encountered相关问题及解决方法</a></li><li><a href="https://m.php.cn/docker/486829.html">docker基础镜像有哪些</a></li></ul><h2 id="安装">安装</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">Docker Community Edition 镜像使用帮助</a></li><li><a href="https://docs.docker.com/engine/install/debian/">Install Docker Engine on Debian</a></li><li><a href="https://www.cnblogs.com/langkyeSir/p/14032801.html">Deepin v20 正式版安装 Docker</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker-ce<br>sudo groupadd docker            <span class="hljs-comment"># 有则不用创建</span><br>sudo usermod -aG docker <span class="hljs-variable">$USER</span>   <span class="hljs-comment"># USER 为加入 docker 组的用户</span><br>newgrp docker                   <span class="hljs-comment"># 刷新 docker 组</span><br>docker run hello-world          <span class="hljs-comment"># 测试无 root 权限能否使用 docker</span><br></code></pre></td></tr></table></figure><h3 id="docker源">docker源</h3><p>编辑 Docker 配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -s<br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt; /etc/docker/daemon.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;registry-mirrors&quot;: [</span><br><span class="hljs-string">        &quot;https://dockerproxy.com&quot;,</span><br><span class="hljs-string">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="hljs-string">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="hljs-string">        &quot;https://ccr.ccs.tencentyun.com&quot;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>重启 Docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><ul><li><a href="https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard">阿里云Docker镜像仓库</a></li><li><a href="https://blog.csdn.net/qq_44797987/article/details/112681224">Docker 配置国内源加速(2023/05/14)</a></li></ul><p>查看是否成功:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker info<br></code></pre></td></tr></table></figure><p>出现以下字段代表配置成功:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Registry Mirrors:<br>  https://dockerproxy.com/<br>  https://hub-mirror.c.163.com/<br>  https://mirror.baidubce.com/<br>  https://ccr.ccs.tencentyun.com/<br></code></pre></td></tr></table></figure><h2 id="dockerfile">DockerFile</h2><ul><li><p><a href="https://blog.csdn.net/tengchengbaba/article/details/83501697">DockerFile集成mysql，nginx，zookeeper，redis，tomcat为一个镜像</a></p></li><li><p><a href="http://wxnacy.com/2020/10/01/docker-source-not-found/">Docker build时提示source not found</a></p></li><li><p><a href="https://blog.csdn.net/tony1130/article/details/53170228">通过Dockerfile文件为linux images添加新用户</a></p></li><li><p><a href="https://blog.csdn.net/a12345676abc/article/details/84651477">docker环境变量设置</a></p></li><li><p><a href="https://www.cnblogs.com/erlou96/p/13884646.html">docker 容器服务脚本自启动</a></p></li><li><p><a href="https://jiayaoo3o.github.io/2019/06/29/docker%E5%AE%B9%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/">docker容器设置时区</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/tcv0zPDzfrFX_uvPPJ7lHw">构建 Docker 镜像的 N 个小技巧，运维工程师看过来，学到了~</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/vI5rs_4ukKhaPcT8EolahA">你在使用 Docker 吗？那不能错过这款 Linux</a></p></li></ul><h2 id="上下文路径">上下文路径</h2><ul><li><a href="https://www.runoob.com/docker/docker-dockerfile.html">Docker Dockerfile上下文路径</a></li><li><a href="https://blog.csdn.net/chenji4315/article/details/100623754">使用 Dockerfile 定制镜像 镜像构建上下文（Context）</a></li></ul><h2 id="命令补全">命令补全</h2><ul><li><a href="https://blog.csdn.net/Mr_chunping/article/details/122089360">解决ubuntu docker容器命令tab无法自动补全问题</a></li><li><a href="https://blog.csdn.net/qq_39680564/article/details/97026656">docker疑难杂症：docker命令Tab无法自动补全</a></li></ul><h2 id="commit">commit</h2><ul><li><a href="https://www.runoob.com/w3cnote/docker-use-container-create-image.html">Docker 使用容器来创建镜像</a></li><li><a href="https://blog.csdn.net/Aeve_imp/article/details/101531225">Docker 将容器打包成新镜像，将镜像打包成文件和加载镜像包</a></li></ul><h2 id="端口映射">端口映射</h2><ul><li><a href="https://www.cnblogs.com/kevingrace/p/9453987.html">Docker容器内部端口映射到外部宿主机端口-运维笔记</a></li><li><a href="https://mp.weixin.qq.com/s/zbbTNjcNNcJFGN9lbaqqPw">6 张图详解 Docker 容器网络配置</a></li><li><a href="https://www.toutiao.com/article/7174322723983098368">5 年工作经验，Docker 的几种网络模式都说不清，你敢信？</a></li><li><a href="https://mp.weixin.qq.com/s/ZN-84Z_NMdFF9pqWXQJk_A">不可错过！5 张图带你搞懂容器网络原理</a></li></ul><h2 id="磁盘清理">磁盘清理</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1581147">如何清理 Docker 占用的磁盘空间</a></li><li><a href="https://zhuanlan.zhihu.com/p/65938559">Docker容器动态添加端口</a></li><li><a href="https://blog.csdn.net/weixin_42271016/article/details/104786418">使用iptables为docker容器动态添加端口映射</a></li><li><a href="https://blog.csdn.net/weixin_42181917/article/details/107936753">docker容器启动后添加端口映射</a></li></ul><h2 id="docker-compose">Docker-compose</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43997548/article/details/122693332">docker-compose部署mysql</a></p></li><li><p><a href="https://www.pudn.com/news/62bc68c1f3cc394cf1dd7c3b.html">docker-compose配置mysql，密码无效问题修复已实践</a></p></li><li><p><a href="https://www.akersman.com/article/71">Docker mysql:5.7 root用户无法登录的问题</a></p></li><li><p><a href="https://www.stechies.com/error-1045-28000-access-denied-user-root-localhost/Error%201045%20(28000)%20access%20denied%20for%20user%20root%20localhost">Error 1045 (28000) access denied for user root localhost</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cbRW2jnq4pFiSaJ6KxI4Nw">为什么不建议你在 Docker 中跑 Mysql ?</a></p></li><li><p><a href="http://docs.lvrui.io/2017/02/19/docker-socket%E8%AE%BE%E7%BD%AE/">docker socket设置</a></p></li><li><p><a href="https://www.srcmini.com/50365.html">如何更改Docker sock文件的位置？</a></p></li><li><p><a href="https://developer.aliyun.com/article/768343">懂了！VMware/KVM/Docker原来是这么回事儿</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes</title>
    <link href="/k8s/kubernetes/"/>
    <url>/k8s/kubernetes/</url>
    
    <content type="html"><![CDATA[<h1 id="kubernetes">kubernetes</h1><ul><li><p><a href="https://kubernetes.io/zh-cn/docs/tutorials/kubernetes-basics/"><font color=Red>学习 Kubernetes 基础知识</font></a></p></li><li><p><a href="http://docs.kubernetes.org.cn/">Kubernetes中文社区|中文文档</a></p></li><li><p><a href="https://jimmysong.io/kubernetes-handbook/" class="uri">https://jimmysong.io/kubernetes-handbook/</a></p></li><li><p><a href="https://www.kubernetes.org.cn/kubernetes-pod">名词解释 Pods 在Kubernetes中，最小的管理元素不是一个个独立的容器，而是Pod</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43296313/article/details/121334485">k8s集群核心概念pod</a></p></li></ul><h2 id="教程">教程</h2><ul><li><a href="https://www.cnblogs.com/caodan01/category/2009111.html"><font color=Red>k8s系列教程</font></a></li><li><a href="https://www.cnblogs.com/caodan01/p/15102328.html">1kubernetes简介及架构图</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15102386.html">2kubeadm安装k8s</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15102902.html">kubernetes之安装集群图形化界面Dadhboard</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15104491.html">3二进制安装k8s</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15107971.html">4k8s之资源管理 ； yaml语言</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15120056.html">5kubernetes实战初入门</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15123078.html">6k8s之Pod结构、配置、生命周期、调度</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15133014.html">7k8s之Pod控制器详解</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15133112.html">8k8s之service和ingress详解</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15136177.html">9k8s之Endpoints、健康服务检查、高可用、搭建wordpress</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15136217.html">10k8s之数据持久化</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15137507.html">13基本存储、高级存储、存储配置</a></li><li><a href="https://www.cnblogs.com/caodan01/p/15137960.html">14k8s之StorageClass，ConfigMap，Secret</a></li></ul><h2 id="k8s集群安装教程">K8s集群安装教程</h2><ul><li><p><a href="https://github.com/realwujing/linux-learning/blob/master/k8s/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.md"><font color=Red>k8s集群安装教程</font></a></p></li><li><p><a href="https://blog.csdn.net/sinat_32582203/article/details/119795858">使用kubeadm初始化k8s集群的一些问题解决办法</a></p></li><li><p><a href="https://blog.csdn.net/qq_43762191/article/details/125567365">【问题解决】[kubelet-check] The HTTP call equal to ‘curl -sSL http://localhost:10248/healthz‘ failed wite</a></p></li><li><p><a href="https://blog.51cto.com/u_15502785/5167925">kubeadm初始化异常</a></p></li><li><p><a href="https://blog.csdn.net/weixin_46415378/article/details/124435362?spm=1001.2014.3001.5502">Kubernetes(二)——安装部署集群</a></p></li><li><p><a href="https://huangzhongde.cn/istio/Chapter2/Chapter2-7.html">2.7 安装网络插件 calico</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/lywYEHS_4Egv-Yp7NjBUlA">16 张图硬核讲解 Kubernetes 网络</a></p></li><li><p><a href="https://blog.csdn.net/qq_44306975/article/details/121603411">搭建k8s集群并安装kubeSphere</a></p></li><li><p><a href="https://www.cnblogs.com/linyouyi/p/10850904.html">kubernetes忘记token或者token过期怎么加入k8s集群</a></p></li></ul><h2 id="dashboard">dashboard</h2><ul><li><p><a href="https://blog.csdn.net/mshxuyi/article/details/108425487">K8S 安装 Dashboard</a></p></li><li><p><a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/">部署和访问 Kubernetes 仪表板（Dashboard）</a></p></li><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md"><font color=Red>Accessing Dashboard</font></a></p></li><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md" class="uri">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</a></p></li><li><p><a href="https://blog.csdn.net/wangkaizheng123/article/details/107492833"><font color=Red>k8s在Ubuntu上安装dashboard</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_34386723/article/details/106290681"><font color=Red>k8s忘记dashboard密码</font></a></p></li><li><p><a href="https://blog.csdn.net/zhangkaiadl/article/details/122125364"><font color=Red>Kubernetes Dashboard 生成token</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">- kubectl-nkubernetes-dashboard get secret $(kubectl-nkubernetes-dashboard getsa/admin-user -ojsonpath=<span class="hljs-string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o go-template=<span class="hljs-string">&quot;&#123;&#123;.data.token| base64decode&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure></p></li></ul><h2 id="notready">NotReady</h2><ul><li><p><a href="https://blog.csdn.net/w849593893/article/details/119883531">k8s master节点状态为 NotReady问题解决</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectlget secret -nkube-system |grepadmin|awk<span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br><br>kubectldescribe secret dashboard-admin-token-mqspz-nkube-system|grep<span class="hljs-string">&#x27;^token&#x27;</span>|awk<span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br><br>kubeadmjoin 10.20.52.86:6443 token pxdv83.8358nle1q7qwhhvp<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.toutiao.com/article/7120818388343079428">K8s 选 cgroupfs 还是 systemd？</a></p></li><li><p><a href="https://huangzhongde.cn/post/Kubernetes/Kubernetes_enable_Swap_support/">Kubernetes开启Swap支持</a></p></li></ul><h2 id="debian-10">Debian 10</h2><ul><li><a href="https://copyfuture.com/blogs-details/20210325174246270m">Debian10下的k8s快速部署（基于kubeadm）</a></li></ul><h2 id="kubectl">kubectl</h2><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-macos/">在 macOS 系统上安装和设置 kubectl</a></li><li><a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/cheatsheet/"><font color=Red>本页列举了常用的 “kubectl” 命令和标志 </font></a></li><li><a href="http://events.jianshu.io/p/e5bf55d2a695"><font color=Red>Kubectl 常用命令分类记录</font></a></li><li><a href="https://www.cnblogs.com/wengzhijie/p/11412523.html">kubectl describe命令详解</a></li><li><a href="https://blog.csdn.net/duanbaoke/article/details/119813814"><font color=Red>K8S中 yaml 文件详解（pod、deployment、service）</font></a></li><li><a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop">为Docker Desktop for Mac/Windows开启Kubernetes和Istio</a></li></ul><h2 id="master节点">master节点</h2><ul><li><a href="https://www.cnblogs.com/panw/p/16643652.html">k8s允许master节点参与调度的设置方法</a></li><li><a href="https://blog.csdn.net/omaidb/article/details/121930341">k8s节点调度</a></li></ul><h2 id="更新镜像">更新镜像</h2><ul><li><p><a href="https://www.likecs.com/show-305889366.html">kubectl 更新容器镜像</a></p></li><li><p><a href="https://blog.csdn.net/liumiaocn/article/details/73913597">Kubernetes之kubectl常用命令使用指南:1:创建和删除</a></p></li><li><p><a href="https://blog.csdn.net/zhengzaifeidelushang/article/details/122545990">K8s系列之：kubectl子命令详解set image</a></p></li><li><p><a href="https://blog.csdn.net/fuck487/article/details/102721725">kubernetes使用用户名和密码拉取docker镜像</a></p></li><li><p><a href="https://www.modb.pro/db/383273">如何在 K8S 集群范围使用 imagePullSecret？</a></p></li></ul><h2 id="minikube">minikube</h2><ul><li><p><a href="https://www.cnblogs.com/qa-freeroad/p/14182522.html">macOS安装minikube</a></p></li><li><p><a href="https://blog.csdn.net/qq_34146694/article/details/110955691">minikube 单机多节点</a></p></li><li><p><a href="https://xkcoding.com/2019/01/14/solve-mac-install-minikube-problem.html">解决 Mac 安装最新版 minikube 出现的问题</a></p></li><li><p><a href="https://minikube.sigs.k8s.io/docs/start/" class="uri">https://minikube.sigs.k8s.io/docs/start/</a></p></li><li><p><a href="https://blog.csdn.net/u010953609/article/details/121489147">Ubuntu 18.04/20.04 部署minikube</a></p></li><li><p><a href="https://blog.csdn.net/fish_study_csdn/article/details/120707928">Mac上k8s安装之minikube 安装与使用</a></p></li><li><p><a href="https://www.cnblogs.com/cocowool/p/minikube_setup_and_first_sample.html">Minikube体验</a></p></li><li><p><a href="https://blog.csdn.net/cheng_fu/article/details/109507796">Minikube 入门介绍</a></p></li><li><p><a href="https://www.linuxtechi.com/install-minikube-on-debian-10/" class="uri">https://www.linuxtechi.com/install-minikube-on-debian-10/</a></p></li><li><p><a href="https://medium.com/swlh/how-to-run-locally-built-docker-images-in-kubernetes-b28fbc32cc1d">How to Run Locally Built Docker Images in Kubernetes</a></p></li><li><p><a href="https://blog.51cto.com/u_14449327/4974873">【最全国内安装教程】通过minikube运行单节点Kubernetes集群</a></p></li><li><p><a href="https://github.com/AliyunContainerService/minikube/wiki" class="uri">https://github.com/AliyunContainerService/minikube/wiki</a></p></li></ul><h2 id="configmap">configmap</h2><ul><li><a href="https://blog.csdn.net/weixin_47415962/article/details/116003059">k8s中configmap挂载配置nginx.conf</a></li><li><a href="https://mdnice.com/writing/9758102aed3a4acf8807bf2d34c2ee34">实战：ConfigMap(可变应用配置管理)-2021.11.25</a></li></ul><h2 id="subpath">subPath</h2><ul><li><a href="https://www.cnblogs.com/gdut1425/p/13112176.html">【原创】Kubernetes-subPath的使用</a></li></ul><h2 id="secret">secret</h2><ul><li><a href="https://www.cnblogs.com/williamzheng/p/11464883.html">kubernetes secret和serviceaccount删除</a></li></ul><h2 id="存储">存储</h2><ul><li><a href="https://www.cnblogs.com/zhanglianghhh/p/13861817.html">Kubernetes K8S之存储PV-PVC详解</a></li><li><a href="https://www.toutiao.com/article/6922438959575040523/">k8s之PV、PVC、StorageClass详解</a></li><li><a href="https://www.jianshu.com/p/7de8d639aa09">kubernetes（k8s）PVC的使用</a></li><li><a href="https://blog.csdn.net/xiaoguangtouqiang/article/details/104053077">K8s中pv和pvc的使用</a></li><li><a href="https://www.toutiao.com/article/6922438959575040523">k8s之PV、PVC、StorageClass详解</a></li><li><a href="https://www.cnblogs.com/qlqwjy/p/15817294.html"><font color=Red>k8s持久化存储PV、PVC、StorageClass</font></a></li></ul><h2 id="yaml">yaml</h2><ul><li><a href="https://blog.csdn.net/u013798334/article/details/115160683">golang的yaml解析（使用“-”分隔的多文档解析）</a></li></ul><h2 id="calico">Calico</h2><ul><li><a href="https://www.cnblogs.com/abcdef/p/11651974.html">k8s pod访问不通外网问题排查</a></li><li><a href="http://%E3%80%8CKubernetes%E3%80%8D-%20%E5%B8%B8%E8%A7%81%20Calico%20%E9%97%AE%E9%A2%98%20@1.52.98.246/">https://blog.51cto.com/u_11101184/3134907</a></li><li><a href="https://www.unixcloudfusion.in/2022/02/solved-caliconode-is-not-ready-bird-is.html">[Solved] calico/node is not ready: BIRD is not ready: BGP not established (Calico 3.6 / k8s 1.14.1)</a></li><li><a href="https://mp.weixin.qq.com/s/M0BkXBMkNBECnmC6UBRDIg">图解 Kubernetes 容器网络发展</a></li></ul><h2 id="namespace">namespace</h2><ul><li><a href="https://www.toutiao.com/article/7106748671789826592">今天讲讲k8s中的namespace</a></li></ul><h2 id="path">path</h2><ul><li><a href="https://www.cnblogs.com/lizhaoxian/p/11544394.html">kubectl patch</a></li></ul><h2 id="服务实践">服务实践</h2><ul><li><p><a href="https://www.dandelioncloud.cn/article/details/1507208260900966401">k8s集群上部署mysql服务实践</a></p></li><li><p><a href="https://blog.csdn.net/wuchenlhy/article/details/124353338">k8s部署mysql</a></p></li><li><p><a href="https://blog.csdn.net/alwaysbefine/article/details/125633538">k8s集群安装部署单机MySQL（使用StorageClass作为后端存储）</a></p></li><li><p><a href="http://t.zoukankan.com/pluto-charon-p-14411780.html">k8s部署mysql数据持久化</a></p></li><li><p><a href="https://blog.csdn.net/koukouwuwu/article/details/118152375">解决k8s集群在节点运行kubectl出现的错误：The connection to the server localhost:8080 was refused - did you specify t</a></p></li><li><p><a href="https://blog.csdn.net/lisongyue123/article/details/109643218">kubectl命令出现错误“The connection to the server localhost:8080 was refused”</a></p></li><li><p><a href="https://www.toutiao.com/article/7204823884712985144">Kubernetes新版本不支持Docker，是真的吗？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Golang</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>namespace-cgroup</title>
    <link href="/k8s/namespace-cgroup/"/>
    <url>/k8s/namespace-cgroup/</url>
    
    <content type="html"><![CDATA[<h1 id="namespace-cgroup">namespace cgroup</h1><ul><li><p><a href="https://hyperj.net/2016/2016-11-23-linux-sandbox/">Linux沙箱技术</a></p></li><li><p><a href="https://atbug.com/sandboxed-container/">沙盒化容器：是容器还是虚拟机</a></p></li><li><p><a href="https://www.cnblogs.com/wjoyxt/p/9935098.html">Linux的Namespace与Cgroups介绍</a></p></li><li><p><a href="https://docs.flatpak.org/zh_CN/latest/sandbox-permissions.html">沙箱权限</a></p></li><li><p><a href="https://www.cnblogs.com/bakari/p/8560437.html">Docker 基础技术之 Linux namespace 详解</a></p></li><li><p><a href="https://blog.csdn.net/gatieme/article/details/51383322">Linux的命名空间详解Linux进程的管理与调度（二）</a></p></li><li><p><a href="https://www.toutiao.com/i6694554806003958284/">浅谈Cgroups</a></p></li><li><p><a href="https://www.cnblogs.com/menkeyi/p/10941843.html">LINUX CGROUP总结</a></p></li><li><p><a href="https://segmentfault.com/a/1190000006878392">Linux mount （第一部分）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000006899213">Linux mount （第二部分 - Shared subtrees）</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1531989">命名空间介绍之八：挂载命名空间和共享子树</a></p></li><li><p><a href="https://segmentfault.com/a/1190000009732550"><font color=Red>Linux Namespace和Cgroup</font></a></p></li><li><p><a href="https://www.cnblogs.com/sparkdev/p/9462838.html">Linux Namespace : User</a></p></li><li><p><a href="https://source.android.com/devices/architecture/vndk/linker-namespace?hl=zh_cn">链接器命名空间</a></p></li><li><p><a href="https://segmentfault.com/a/1190000009309276">走进docker系列：开篇</a></p></li><li><p><a href="https://www.toutiao.com/article/7106794699364745768">3分钟快速了解Docker的底层原理</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1531673">命名空间介绍之五：用户命名空间</a></p></li><li><p><a href="https://www.cnblogs.com/chendeqiang/p/14318770.html">LXC容器</a></p></li><li><p><a href="https://lequ7.com/guan-yu-docker-che-di-gao-dong-rong-qi-ji-shu-de-ji-shi-namespace-xia.html">关于docker:彻底搞懂容器技术的基石-namespace-下</a></p></li><li><p><a href="https://copyfuture.com/blogs-details/202112141432392239">徹底搞懂容器技術的基石：namespace（下）</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/434731896">一篇搞懂容器技术的基石： cgroup</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/443605569">搞懂容器技术的基石： namespace （上）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/CDEr3aM1MyxR_g5u_X0rGQ">使用eBPF LSM热修复Linux内核漏洞</a></p></li><li><p><a href="https://blog.csdn.net/xundh/article/details/106780266">Docker 学习笔记12 容器技术原理 User Namespace</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zVmwzZ5WC4cbp19CrAtFdA">探秘 Docker 容器化技术黑科技 Cgroups</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/9p8-qeIMvAPBwZBh4YEhTg">使用 Linux 网络虚拟化技术探究容器网络原理</a></p></li><li><p><a href="https://codeantenna.com/a/JHdL7Auz5n">LINUX系统安全_SANDBOX</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Fw4gE2d0hnRJX5iQfkStQA">内核是如何给容器中的进程分配CPU资源的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/BnYtkQO03MR8KnxRX7lWLg">从 500 行 C 代码全面解析 Linux 容器底层工作机制</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bpf</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/C%20%E5%AE%9E%E7%8E%B0%20C++%20%E7%B1%BB/README/"/>
    <url>/cpp/C%20%E5%AE%9E%E7%8E%B0%20C++%20%E7%B1%BB/README/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/onlyshi/article/details/81672279">C 语言实现面向对象编程_onlyshi的专栏-CSDN博客_c 面向对象</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>C 实现 C++ 类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/README/"/>
    <url>/cpp/C++%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/README/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tmhanks/article/details/89110833?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link">GDB查看C++对象布局_tmhanks的博客-CSDN博客</a></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gams">GDB查看对象如下：<br>(gdb) <span class="hljs-keyword">set</span> print <span class="hljs-comment">object on</span><br>(gdb) <span class="hljs-keyword">set</span> <span class="hljs-comment">print vtbl on</span><br>(gdb) <span class="hljs-keyword">set</span> <span class="hljs-comment">print pretty on</span><br>((gdb) p <span class="hljs-comment">base</span><br>$7 = (Base) &#123;<br>_vptr.Base <span class="hljs-comment">= 0x403a50 &lt;vtable for Base+16&gt;,</span><br>m_base <span class="hljs-comment">= 0,</span><br>static <span class="hljs-comment">m_tmp = 1</span><br>&#125;<br>(gdb) info <span class="hljs-comment">vtbl base</span><br>vtable <span class="hljs-comment">for</span> ‘<span class="hljs-comment">Base</span>’ <span class="hljs-comment">@ 0x403a50 (subobject @ 0x7fffffffdf60):</span><br>[0]: 0x402830 <span class="hljs-comment">Base::</span>~<span class="hljs-comment">Base()</span><br>[1]: 0x402930 <span class="hljs-comment">Base::</span>~<span class="hljs-comment">Base()</span><br>[2]: 0x402ae0 <span class="hljs-comment">&lt;Base::print() const&gt;</span><br>————————————————<br>版权声明：本文为CSDN博主「流水之川」的原创文章，遵循CC <span class="hljs-comment">4.0 BY-SA</span>版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/tmhanks/article/details/89110833</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>C++对象的内存布局</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/README/"/>
    <url>/cpp/thread/README/</url>
    
    <content type="html"><![CDATA[<h1 id="pthread与stdthread">pthread与std::thread</h1><h2 id="pthread"><a href="pthread">pthread</a></h2><h2 id="stdthread"><a href="thread">std::thread</a></h2>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/valgrind/README/"/>
    <url>/cpp/valgrind/README/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/75416381">内存泄漏检测工具valgrind神器</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>valgrind</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群安装教程</title>
    <link href="/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s集群安装教程">k8s集群安装教程</h1><h2 id="masternode节点安装">master、node节点安装</h2><ol type="1"><li><p>切换到root用户</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su -<br></code></pre></td></tr></table></figure></p></li><li><p>配置host</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">cat &lt;&lt; EOF &gt;&gt; /etc/hosts<br>192.169.1.210 k8s-master<br>192.169.1.211 k8s-node1<br>192.169.1.212 k8s-node2<br>EOF<br></code></pre></td></tr></table></figure></p></li><li><p>修改主机名 每台主机都要修改</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hostnamectl set-hostname k8s-master<br>hostnamectl set-hostname k8s-node1<br>hostnamectl set-hostname k8s-node2<br></code></pre></td></tr></table></figure></p></li><li><p>关闭swap分区 每台主机都要关闭</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时关闭</span><br>swapoff -a<br><span class="hljs-comment"># 永久关闭(老版本)</span><br>sed -i <span class="hljs-string">&#x27;/swap/s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab<br><span class="hljs-comment"># 永久关闭(新版本)</span><br>只需要编辑 /etc/fstab 文件，不要注释掉 swap 那一行<br>而是在其后面默认的挂载选项 defaults 后面加上 noauto 变成 defaults,noauto。<br><br><span class="hljs-built_in">cat</span> /etc/fstab<br><span class="hljs-comment"># 查看是否注释</span><br></code></pre></td></tr></table></figure></p><ul><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.swap.html">https://www.freedesktop.org/software/systemd/man/systemd.swap.html</a></li><li><a href="https://cnzhx.net/blog/disable-swap-in-opensuse-tumbleweed/">openSUSE Tumbleweed 中禁用 SWAP</a></li></ul></li><li><p>安装docker</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">参考清华Docker Community Edition 镜像使用帮助安装docker</a></li></ul></li><li><p>修改docker Cgroup驱动</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF&gt; /etc/docker/daemon.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure></p></li><li><p>安装k8s</p><ul><li><p><a href="https://developer.aliyun.com/mirror/kubernetes?spm=a2c6h.13651102.0.0.73bf1b11EI1d2X">添加阿里云 Kubernetes 镜像仓库</a></p></li><li><p><a href="https://blog.csdn.net/u012069313/article/details/125561711">【Kubernetes系列】K8s由1.24.1降级为1.23.8</a></p></li><li><p><a href="https://www.51cto.com/article/707507.html">Kubernetes 1.24 将结束对dockershim 的支持</a></p></li><li><p><a href="https://kubernetes.io/zh-cn/blog/2022/04/07/upcoming-changes-in-kubernetes-1-24/">Kubernetes 1.24 的删除和弃用</a></p></li></ul><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install -y kubelet=1.23.8-00 kubeadm=1.23.8-00 kubectl=1.23.8-00<br></code></pre></td></tr></table></figure></p></li><li><p>设置kubectl命令补全</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install bash-completion<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;source /usr/share/bash-completion/bash_completion&#x27;</span> &gt;&gt;~/.bashrc<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;source &lt;(kubectl completion bash)&#x27;</span> &gt;&gt;~/.bashrc<br></code></pre></td></tr></table></figure></p></li><li><p>初始化k8s-master节点</p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">–apiserver-advertise-address 192.168.2.248 填写你自己k8s-master的IP地址<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm init \<br>--apiserver-advertise-address 192.168.2.248 \<br>--image-repository registry.aliyuncs.com/google_containers \<br>--pod-network-cidr=10.244.0.0/16 \<br>--service-cidr=10.1.0.0/16<br></code></pre></td></tr></table></figure></p></li><li><p>拷贝 kubectl 使用的连接 k8s 认证文件到默认路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export KUBECONFIG=$HOME/.kube/config&#x27;</span> &gt;&gt;~/.bashrc<br></code></pre></td></tr></table></figure><ul><li>初始化成功之后记录以下信息，添加node节点时使用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm <span class="hljs-built_in">join</span> 192.169.1.210:6443 --token s2zrot.578bgfdqcr44aivw \<br>--discovery-token-ca-cert-hash sha256:a4b764099ac50a152d8d9a7640c16380297bae8c7ffafd6e3ca76144bfde9f6c<br></code></pre></td></tr></table></figure></li><li><p>安装Pod网络插件 calico</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://docs.projectcalico.org/v3.18/manifests/calico.yaml<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/w849593893/article/details/119883531">k8s master节点状态为 NotReady问题解决</a></li></ul></li><li><p>添加node节点</p><ul><li>以下操作在Node节点上执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su -<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm <span class="hljs-built_in">join</span> 192.169.1.210:6443 --token s2zrot.578bgfdqcr44aivw \<br>--discovery-token-ca-cert-hash sha256:a4b764099ac50a152d8d9a7640c16380297bae8c7ffafd6e3ca76144bfde9f6c<br></code></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/linyouyi/p/10850904.html">kubernetes忘记token或者token过期怎么加入k8s集群</a></li></ul></li></ol><h2 id="k8s-dashboard">k8s dashboard</h2><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/">部署和访问 Kubernetes 仪表板（Dashboard）</a></li></ul><ol type="1"><li><p>部署 Dashboard UI</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml<br></code></pre></td></tr></table></figure></p><ul><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md">https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md</a></p></li><li><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</a></p></li></ul></li><li><p>更改ClusterIP为NodePort</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n kubernetes-dashboard edit service kubernetes-dashboard<br></code></pre></td></tr></table></figure></p></li><li><p>创建配置文件 dashboard-adminuser.yaml</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/realwujing/k8s-learning/blob/dff12f0c9f2cf74ee13e0aa44babbd2786279bf2/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/dashboard-adminuser.yaml<br></code></pre></td></tr></table></figure></p><p>具体参考：</p><ul><li><a href="https://blog.csdn.net/qq_41538097/article/details/125561769">k8s入门：kubernetes-dashboard 安装</a></li></ul></li><li><p>执行</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f dashboard-adminuser.yaml<br></code></pre></td></tr></table></figure></p></li><li><p>k8s忘记dashboard密码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n kubernetes-dashboard get secret<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl describe secret admin-user-token-76rq7 -n kubernetes-dashboard<br></code></pre></td></tr></table></figure></p><p>也可通过下方一行命令获取token：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure></p></li><li><p>获取 kubernetes-dashboard 对外暴露端口</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get svc --all-namespaces<br></code></pre></td></tr></table></figure></p></li><li><p>访问k8s dashboard</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://192.169.1.210:32188<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://www.jianshu.com/p/1719a27137e3">Chrome您的连接不是私密连接解决办法</a></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">thisisunsafe<br></code></pre></td></tr></table></figure></p></li></ol><h2 id="kubeadm-reset">kubeadm reset</h2><ul><li><a href="https://sandeepnkulkarni.wordpress.com/2020/07/11/reset-kubernetes-cluster-using-kubeadm/">Reset Kubernetes Cluster using kubeadm</a></li></ul><h2 id="master节点">master节点</h2><ul><li><a href="https://www.cnblogs.com/panw/p/16643652.html">k8s允许master节点参与调度的设置方法</a></li><li><a href="https://blog.csdn.net/omaidb/article/details/121930341">k8s节点调度</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
      <category>k8s集群部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>HTML</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/k8s/linglong/README/"/>
    <url>/k8s/linglong/README/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s部署玲珑服务">k8s部署玲珑服务</h1><h2 id="创建namespace">创建namespace</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create ns linglong<br></code></pre></td></tr></table></figure><h2 id="在kubernetes集群如何支持私有镜像">在Kubernetes集群如何支持私有镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create secret docker-registry hub-deepin-token --docker-server=hub.deepin.com \<br>--docker-username=ut004487 --docker-password=Wujing2988. -n linglong<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl patch serviceaccount default -n linglong -p <span class="hljs-string">&#x27;&#123;&quot;imagePullSecrets&quot;: [&#123;&quot;name&quot;: &quot;hub-deepin-token&quot;&#125;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="linglong-homepage">linglong-homepage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t hub.deepin.com/wuhan_v23_linglong/linglong-homepage:develop-snipe .<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -it -p 18080:80/tcp hub.deepin.com/wuhan_v23_linglong/linglong-homepage:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create -n linglong deployment linglong-homepage --image=hub.deepin.com/wuhan_v23_linglong/linglong-homepage:develop-snipe<br></code></pre></td></tr></table></figure><!-- <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get deployments.apps linglong-homepage -o yaml &gt; linglong-homepage.yaml<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl delete -f linglong-homepage.yaml<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim linglong-homepage.yaml 将 namespace 从 default改为 linglong<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-homepage.yaml<br>``` --&gt;<br><br>- 使用 18080 端口提供服务，连接到容器的 80 端口<br><br>```bash<br>kubectl expose -n linglong deployment linglong-homepage --<span class="hljs-built_in">type</span>=NodePort --port=18080 --target-port=80<br></code></pre></td></tr></table></figure><h2 id="linglong-webstore">linglong-webstore</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t hub.deepin.com/wuhan_v23_linglong/linglong-webstore:develop-snipe .<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -it  -p 18081:80/tcp hub.deepin.com/wuhan_v23_linglong/linglong-webstore:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create -n linglong deployment linglong-webstore --image=hub.deepin.com/wuhan_v23_linglong/linglong-webstore:develop-snipe<br></code></pre></td></tr></table></figure><!-- ```bashkubectl get deployments.apps linglong-webstore -o yaml > linglong-webstore.yaml<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>```bash<br>kubectl delete -f linglong-webstore.yaml<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim linglong-webstore.yaml 将 namespace 从 default改为 linglong<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-webstore.yaml<br>``` --&gt;<br><br>- 使用 18081 端口提供服务，连接到容器的 80 端口<br><br>```bash<br>kubectl expose -n linglong deployment linglong-webstore --<span class="hljs-built_in">type</span>=NodePort --port=18081 --target-port=80<br></code></pre></td></tr></table></figure><h2 id="linglong-server">linglong-server</h2><ul><li>创建configmap</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create configmap config.yaml --from-file=config.yaml -n linglong<br></code></pre></td></tr></table></figure><ul><li>挂载config.yaml文件到pod中</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">具体教程参考linglong-server.yaml<br></code></pre></td></tr></table></figure><ul><li>创建pv</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-server-pv.yaml<br></code></pre></td></tr></table></figure><ul><li>创建pvc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-server-pvc.yaml<br></code></pre></td></tr></table></figure><ul><li>挂载pvc到pod中</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">具体教程参考linglong-server.yaml<br></code></pre></td></tr></table></figure><ul><li>linglong-server部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe .<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -it  -p 18888:8888/tcp hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create -n linglong deployment linglong-server --image=hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get deployments.apps linglong-server -o yaml &gt; linglong-server.yaml<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl delete -f linglong-server.yaml<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim linglong-server.yaml 更改volumeMounts、volumes节点，挂载linglong-server-pvc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f linglong-server.yaml<br></code></pre></td></tr></table></figure><ul><li>使用 18888 端口提供服务，连接到容器的 8888 端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl expose -n linglong deployment linglong-server --<span class="hljs-built_in">type</span>=NodePort --port=18888 --target-port=8888<br></code></pre></td></tr></table></figure><ul><li>更新镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n linglong <span class="hljs-built_in">set</span> image deployment linglong-server linglong-server=hub.deepin.com/wuhan_v23_linglong/linglong-server:develop-snipe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n linglong rollout restart deployment linglong-server<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
      <category>linglong</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/protobuf/protobuf_example/README/"/>
    <url>/cpp/protobuf/protobuf_example/README/</url>
    
    <content type="html"><![CDATA[<p>参考链接： <a href="https://blog.csdn.net/fengfengdiandia/article/details/86688520">https://blog.csdn.net/fengfengdiandia/article/details/86688520</a></p><p><a href="https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html">https://cmake.org/cmake/help/v3.5/module/FindProtobuf.html</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>protobuf</category>
      
      <category>protobuf_example</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/dbus/README/"/>
    <url>/cpp/qt-learning/dbus/README/</url>
    
    <content type="html"><![CDATA[<h1 id="service实现">service实现</h1><h2 id="方式一创建服务并注册对象建立到session-bus的连接">方式一、创建服务并注册对象，建立到session bus的连接</h2><p>启动程序后，在命令行打开qdbusviewer，查看session bus。 双击Method方法会调用该方法。</p><p>代码位于目录service下。</p><h2 id="方式二使用adapter注册object推荐方式">方式二、使用Adapter注册Object（推荐方式）</h2><p>可以直接把test类注册为消息总线上的一个Object，但QT4不推荐。QT4推荐使用Adapter来注册Object。 大多数情况下，可能只需要把自定义的类里的方法有选择的发布到消息总线上，使用Adapter可以很方便的实现选择性发布。 生成Adapter类的流程如下： 使用工具 qdbuscpp2xml从test.h生成XML文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qdbuscpp2xml -M test<span class="hljs-selector-class">.h</span> -o com<span class="hljs-selector-class">.scorpio</span><span class="hljs-selector-class">.test</span>.xml<br></code></pre></td></tr></table></figure><p>编辑com.scorpio.test.xml，选择需要发布的method，不需要发布的删除。 使用工具qdbusxml2cpp从XML文件生成继承自QDBusInterface的类</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qdbusxml2cpp com<span class="hljs-selector-class">.scorpio</span><span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.xml</span> -<span class="hljs-selector-tag">i</span> test<span class="hljs-selector-class">.h</span> -<span class="hljs-selector-tag">a</span> valueAdaptor<br></code></pre></td></tr></table></figure><p>生成两个文件：valueAdaptor.cpp和valueAdaptor.h</p><p>代码位于目录adaptor下，建议先阅读该目录下的README.md。</p><h1 id="控制台访问service实现">控制台访问service实现</h1><h2 id="方式一通过qdbusmessage访问service">方式一、通过QDBusMessage访问Service</h2><h2 id="方式二通过qdbusinterface-访问service">方式二、通过QDBusInterface 访问Service</h2><h2 id="方式三从d-bus-xml自动生成proxy类调用proxy类访问service">方式三、从D-Bus XML自动生成Proxy类，调用Proxy类访问Service</h2><p>代码位于目录proxy下，建议先阅读该目录下的README.md。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">/data/opt/Qt5.6.3/5.6.3/gcc_64/lib/cmake/Qt5DBus/Qt5DBusMacros.cmake:87:function(QT5_GENERATE_DBUS_INTERFACE _header) # _customName OPTIONS -some -options )<br><br>/data/opt/Qt5.6.3/5.6.3/Src/qtbase/src/dbus/Qt5DBusMacros.cmake:87:function(QT5_GENERATE_DBUS_INTERFACE _header) # _customName OPTIONS -some -options )<br><br>/data/opt/Qt5.6.3/5.6.3/Src/qtbase/tests/auto/cmake/test_dbus_module/CMakeLists.txt:22:qt5_generate_dbus_interface(<br>    <br>/data/opt/Qt5.6.3/5.6.3/Src/qtdoc/doc/src/development/cmake-manual.qdoc:249:    row li qt5_generate_dbus_interface( header [interfacename] OPTIONS ...)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>dbus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/qprocess_wget/README/"/>
    <url>/cpp/qt-learning/qprocess_wget/README/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ostree --repo=/deepin/linglong/repo/repo-test refs --delete com.qq.weixin.work.deepin/4.0.0.6007/x86_64 &amp;&amp; ostree --repo=/deepin/linglong/repo/repo-test prune --refs-only<br><br>ostree --repo=/deepin/linglong/repo/repo-test pull --mirror repo:com.qq.weixin.work.deepin/4.0.0.6007/x86_64<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>qprocess_wget</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/thread/README/"/>
    <url>/cpp/thread/thread/README/</url>
    
    <content type="html"><![CDATA[<h1 id="stdthread">std::thread</h1><h2 id="stdthread-hello_world"><a href="hello_world">std::thread hello_world</a></h2>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/dbus/proxy/README/"/>
    <url>/cpp/qt-learning/dbus/proxy/README/</url>
    
    <content type="html"><![CDATA[<h1 id="使用工具qdbuscpp2xml从object.h生成xml文件">使用工具qdbuscpp2xml从object.h生成XML文件</h1><p>qdbuscpp2xml -M ../qdbus/test.h -o com.scorpio.test.xml</p><h1 id="使用工具qdbusxml2cpp从xml文件生成继承自qdbusinterface的类">使用工具qdbusxml2cpp从XML文件生成继承自QDBusInterface的类</h1><p>qdbusxml2cpp com.scorpio.test.xml -p valueInterface # 生成两个文件：valueInterface.cpp和valueInterface.h</p><h2 id="运行proxy.sh执行上述命令">运行proxy.sh执行上述命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./proxy.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>dbus</category>
      
      <category>proxy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/qt-learning/dbus/struct/README/"/>
    <url>/cpp/qt-learning/dbus/struct/README/</url>
    
    <content type="html"><![CDATA[<h2 id="deepin下qt-qdebug输出到终端">deepin下qt qDebug()输出到终端</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">QT_LOGGING_RULES</span>=<span class="hljs-string">&quot;*.debug=true&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>qt-learning</category>
      
      <category>dbus</category>
      
      <category>struct</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/pthread/ThreadPool/README/"/>
    <url>/cpp/thread/pthread/ThreadPool/README/</url>
    
    <content type="html"><![CDATA[<p>https://www.cnblogs.com/oloroso/p/5881863.html</p><p>https://blog.csdn.net/MOU_IT/article/details/88712090</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
      <category>pthread</category>
      
      <category>ThreadPool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/pthread/sync/README/"/>
    <url>/cpp/thread/pthread/sync/README/</url>
    
    <content type="html"><![CDATA[<!-- * @Author: wujing * @Date: 2021-02-24 00:15:46 * @LastEditTime: 2021-02-24 00:17:33 * @LastEditors: wujing * @Description:  * @FilePath: /code/CPlusPlusProject/pthread/sync/README.md * @可以输入预定的版权声明、个性签名、空行等--><p><a href="https://www.cnblogs.com/yinbiao/p/11190336.html#:~:text=%E3%80%90Linux%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%201%20PTHREAD_MUTEX_NOMAL%3A%E6%A0%87%E5%87%86%E4%BA%92%E6%96%A5%E9%94%81%EF%BC%8C%E7%AC%AC%E4%B8%80%20...%202%20PTHREAD_MUTEX_RECURSIVE%3A%E9%80%92%E5%BD%92%E4%BA%92%E6%96%A5,...%203%20PTHREAD_MUTEX_ERRORCHECK%3A%E6%A3%80%E6%9F%A5%E4%BA%92%20...%204%20PTHREAD_MUTEX_DEFAULT%3A%E9%BB%98%E8%AE%A4%E4%BA%92%E6%96%A5%E9%94%81%EF%BC%8C%20">【Linux】多线程同步的四种方式</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
      <category>pthread</category>
      
      <category>sync</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/cpp/thread/thread/hello_world/README/"/>
    <url>/cpp/thread/thread/hello_world/README/</url>
    
    <content type="html"><![CDATA[<h1 id="stdthread-hello-world">std::thread "Hello world"</h1><p>下面是一个最简单的使用 std::thread 类的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> <span class="hljs-comment">// std::cout</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span>   <span class="hljs-comment">// std::thread</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thread_task</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello thread&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">(thread_task)</span></span>;<br>    t.<span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">all:hello_world</span><br><br>CC=g++<br>CPPFLAGS=-Wall -std=c++11 -ggdb<br>LDFLAGS=-pthread<br><br><span class="hljs-section">hello_world:hello_world.o</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(LDFLAGS)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><br><span class="hljs-section">hello_world.o:hello_world.cpp</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CPPFLAGS)</span> -o <span class="hljs-variable">$@</span> -c <span class="hljs-variable">$^</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:</span><br>clean<br><br><span class="hljs-section">clean:</span><br>rm hello_world.o hello_world<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/haippy/p/3235560.html">C++11 并发指南一(C++11 多线程初探)</a></p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>thread</category>
      
      <category>hello_world</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nano</title>
    <link href="/markdown/nano/"/>
    <url>/markdown/nano/</url>
    
    <content type="html"><![CDATA[<h1 id="nano">nano</h1><p><a href="https://p3terx.com/archives/linux-nano-tutorial.html">nano 使用教程 - Linux 中适合新手的文本编辑器</a></p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uml</title>
    <link href="/markdown/uml/"/>
    <url>/markdown/uml/</url>
    
    <content type="html"><![CDATA[<h1 id="uml">uml</h1><ul><li><a href="https://blog.csdn.net/fly_zxy/article/details/80911942#commentBox">UML时序图(Sequence Diagram)学习笔记</a></li><li><a href="http://www.woshipm.com/ucd/607593.html">快速学习时序图：时序图简介、画法及实例</a></li><li><a href="https://www.cnblogs.com/54chensongxia/p/13236965.html">程序员必备画图技能之——时序图</a></li></ul><h2 id="plantuml">PlantUML</h2><ul><li><a href="https://mp.weixin.qq.com/s/zhj5txc3W7svWtg0JNTDMQ">用代码画时序图！YYDS</a></li><li><a href="https://www.jianshu.com/p/4f86146e0811">PlantUML画类图、流程图、时序图使用详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex</title>
    <link href="/markdown/latex/"/>
    <url>/markdown/latex/</url>
    
    <content type="html"><![CDATA[<h1 id="latex">latex</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/451420916">Ubuntu20.04下 VsCode + LaTeX 的使用</a></li><li><a href="https://linuxconfig.org/how-to-install-latex-on-ubuntu-20-04-focal-fossa-linux">How to install LaTex on Ubuntu 20.04 Focal Fossa Linux</a></li><li><a href="https://www.latexstudio.net/archives/9377.html">LaTeX新人教程，30分钟从完全陌生到基本入门[转载]</a></li><li><a href="https://zhuanlan.zhihu.com/p/518143774">Latex使用心得</a></li><li><a href="https://blog.csdn.net/haoxue2011/article/details/103404401">ubuntu安装自定义的latex包</a></li><li><a href="https://blog.csdn.net/qq_37556330/article/details/106190148">LaTeX 宏包（usepackage)</a></li><li><a href="https://blog.csdn.net/ly18846826264/article/details/104951667">LaTeX入门｜(2)定制专属模板</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>doxygen</title>
    <link href="/markdown/doxygen/"/>
    <url>/markdown/doxygen/</url>
    
    <content type="html"><![CDATA[<h1 id="doxygen">doxygen</h1><h2 id="doxygen生成接口文档">doxygen生成接口文档</h2><ul><li><a href="https://www.jianshu.com/p/9464eca6aefe">Doxygen简明注释语法</a></li><li><a href="https://blog.csdn.net/qq_41204464/article/details/102458103">Doxygen 注释语法和使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/122523174">Doxygen中文文档</a></li><li><a href="https://github.com/realwujing/qt-log/blob/6e14c794a66944739d0eb6494f2cb96448833933/README.md"><font color=Red>Doxygen生成pdf接口文档</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/100223113">Doxygen快速入门</a></li><li><a href="https://blog.csdn.net/jinking01/article/details/102809414"><font color=Red>ubuntu 下使用doxygen为C/C++工程生成pdf版的API</font></a></li><li><a href="https://blog.csdn.net/yunjingguang/article/details/28266115">linux下的doxygen的使用</a></li></ul><h2 id="doxygen生成函数调用关系图">doxygen生成函数调用关系图</h2><ul><li><a href="https://blog.csdn.net/weixin_38184741/article/details/106598647">Tools：使用Doxygen生成函数调用关系</a></li><li><a href="https://blog.csdn.net/zhonglinliu/article/details/78604397">Ubuntu系统使用Doxygen生成文档</a></li><li><a href="https://blog.csdn.net/qq_41748900/article/details/99688506">ubuntu16.04使用doxygen（带生成文档的方法）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown</title>
    <link href="/markdown/markdown/"/>
    <url>/markdown/markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="markdown">markdown</h2><ul><li><p><a href="https://markdown.com.cn/"><font color=Red>Markdown 官方教程</font></a></p></li><li><p><a href="https://www.jianshu.com/p/c2b75ff24c33"><font color=Red>Markdown代码块支持的语言</font></a></p></li><li><p><a href="https://www.jianshu.com/p/e74eb43960a1"><font color=Red>Markdown数学公式语法</font></a></p></li><li><p><a href="https://www.zybuluo.com/codeep/note/163962"><font color=Red>Cmd Markdown 公式指导手册</font></a></p></li><li><p><a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn"><font color=Red>markdown latex公式</font></a></p></li><li><p><a href="https://code.z01.com/doc/mdflow.html">MarkDown流程图全指导</a></p></li><li><p><a href="https://nanova.me/2020/05/30/plantuml/">当 Markdown 遇上 UML</a></p></li><li><p><a href="https://blog.csdn.net/wads23456/article/details/107932583">【Markdown高级技巧】写出高大上的流程图、时序图、类图</a></p></li><li><p><a href="https://blog.csdn.net/kan2016/article/details/107507809"><font color=Red>在VS Code中使用 Picgo + jsDelivr + Github搭建高速稳定图床</font></a></p></li></ul><h2 id="gitbook">gitbook</h2><ul><li><p><a href="https://jiangminggithub.github.io/gitbook/">gitbook详细教程</a></p></li><li><p><a href="https://segmentfault.com/a/1190000019806829">gitbook常用的插件</a></p></li><li><p><a href="https://jiangminggithub.github.io/gitbook/chapter-plugins/15-auto-scroll-table.html">gitbook auto-scroll-table 自动表格过长滚动条</a></p></li><li><p><a href="https://topsale.gitbooks.io/gitbook/content/" class="uri">https://topsale.gitbooks.io/gitbook/content/</a></p></li><li><p><a href="https://www.cnblogs.com/weikunpeng/p/15604911.html">主要记录GitBook的安装配置以及一些插件信息</a></p></li><li><p><a href="https://www.toutiao.com/article/6681133500910797319">gitbook 入门教程之主题插件</a></p></li></ul><h2 id="read-the-docs">Read the Docs</h2><ul><li><a href="https://blog.csdn.net/lu_embedded/article/details/109006380"><font color=Red>Read the Docs 从懵逼到入门</font></a></li><li><a href="https://www.jianshu.com/p/8aae1c1453ae">使用ReadtheDocs托管技术文档</a></li><li><a href="https://www.xncoding.com/2017/01/22/fullstack/readthedoc.html">使用ReadtheDocs托管文档</a></li><li><a href="https://www.toutiao.com/article/6817379045882200589">如何制作一本在线的电子书或 Python 文档供其他人远程访问</a></li></ul><h2 id="vuepress">VuePress</h2><ul><li><a href="https://segmentfault.com/a/1190000017055963">VuePress搭建个人技术文档网站教程</a></li><li><a href="https://vuepress.vuejs.org/zh/">VuePress官方教程</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/235">一篇带你用 VuePress + Github Pages 搭建博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins</title>
    <link href="/jenkins/jenkins/"/>
    <url>/jenkins/jenkins/</url>
    
    <content type="html"><![CDATA[<h1 id="jenkins">jenkins</h1><h2 id="jenkins安装">Jenkins安装</h2><ul><li><p><a href="https://www.jenkins.io/doc/book/installing/" class="uri">https://www.jenkins.io/doc/book/installing/</a></p></li><li><p><a href="https://www.modb.pro/db/399180">k8s 部署jenkins</a></p></li><li><p><a href="https://segmentfault.com/a/1190000040469278">在 k8s 中安装 jenkins 并配置实现 CI/CD</a></p></li><li><p><a href="https://www.cnblogs.com/code-craftsman/p/11792635.html">在k8s上安装Jenkins及常见问题</a></p></li><li><p><a href="https://blog.51cto.com/meiling/2509470">Jenkins修改显示语言为中文</a></p></li><li><p><a href="https://blog.51cto.com/u_15127596/3832309">jenkins转换显示语言为中文简体（jenkins汉化）</a></p></li><li><p><a href="https://wiki.eryajf.net/pages/831.html#_1-%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD%E3%80%82">配置gitlab提交代码Jenkins自动构建</a></p></li><li><p><a href="http://t.zoukankan.com/kaerxifa-p-11090824.html">配置github的pull request触发jenkins自动构建</a></p></li><li><p><a href="http://t.zoukankan.com/kaerxifa-p-11090824.html">GitHub pull request时Jenkins自动构建教程</a></p></li></ul><h2 id="github-action">GitHub action</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></li><li><a href="https://docs.github.com/cn/actions/using-github-hosted-runners/about-github-hosted-runners">关于 GitHub 托管的运行器-支持的运行器和硬件资源</a></li><li><a href="https://juejin.cn/post/6960126908180725773">针不戳！GitHub Actions 入坑指南</a></li><li><a href="https://blog.51cto.com/u_15273875/2917416">GitHub Actions入门教程：自动化部署静态博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>k8s</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svn</title>
    <link href="/svn/svn/"/>
    <url>/svn/svn/</url>
    
    <content type="html"><![CDATA[<h1 id="svn">svn</h1><ul><li><a href="https://blog.csdn.net/freeking101/article/details/81080164">Linux SVN命令详解</a></li><li><a href="https://www.cnblogs.com/jaspersong/p/9277720.html">Linux下常用svn命令</a></li><li><a href="https://www.cnblogs.com/136asdxxl/p/7410947.html">svn命令行使用总结</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn co svn://58.49.133.142:58726/trunk<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn co svn://192.168.9.92/trunk<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">svn://58.49.133.142:58726/trunk/Server_new/trunk/CommWebServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/CommWebServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/IndustryChainMachineWriteServer/python/industry_chain_machine_write_server<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/IndustryChainMachineWriteServer/C++/IndustryChainMachineWriteServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/Common<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Quote_Proj <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/ShNumChangeServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/CallauctionServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/DtNorthBoundCapitalServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Thoth<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/Common<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/ImpalaSqlLib<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/UniIdServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/JTHongKongStockServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/CommWebServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/StockConditionSelector<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/data-sync-client<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/data-sync-server<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/server/data_sync_tool/data-sync-file<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/QuoteServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/MarginTradeServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/RiskAnalysisServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/2BProject/yuanda/server/NotifyProxyServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/Server_new/trunk/ImpalaSqlLib_ubuntu16<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://192.168.9.92/trunk/AI_Project/trunk/Tools/ValueElasticityServer<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn username wujing password wujing co svn://58.49.133.142:58726/trunk/Server_new/trunk/IdlProxyServer<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>svn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go</title>
    <link href="/go/go/"/>
    <url>/go/go/</url>
    
    <content type="html"><![CDATA[<h1 id="go">go</h1><h2 id="go-基础">Go 基础</h2><ul><li><p><a href="https://go.dev/doc/install" class="uri">https://go.dev/doc/install</a></p></li><li><p><a href="https://juejin.cn/post/6844903952144826375">Ubuntu go升级</a></p></li><li><p><a href="https://www.topgoer.com/">go语言中文文档</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/375530785">go build命令详解</a></p></li></ul><h2 id="mod">mod</h2><ul><li><a href="https://www.liwenzhou.com/posts/Go/import_local_package_in_go_module/">如何使用go module导入本地包</a></li><li><a href="https://blog.csdn.net/weixin_43874301/article/details/120632571">Go语言GO111MODULE设置</a></li><li><a href="https://blog.csdn.net/weixin_44676081/article/details/107279746">报错package xxx is not in GOROOT or GOPATH 或者 cannot find package “xxx“ in any of</a></li></ul><h2 id="interface">interface</h2><ul><li><a href="https://www.cnblogs.com/huiyichanmian/p/12800867.html">想要判断空接口的值，可以使用类型断言</a></li></ul><h2 id="协程">协程</h2><ul><li><a href="https://www.cnblogs.com/secondtonone1/p/11803961.html">图解Go协程调度原理，小白都能理解 - 恋恋风辰 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/Survivalist/p/11527949.html"><font color=Red>一文读懂什么是进程、线程、协程</font></a></li></ul><h2 id="gin">gin</h2><ul><li><a href="https://eddycjy.gitbook.io/golang/di-3-ke-gin/log"><font color=Red>写写代码，喝喝茶，搞搞 Go</font></a></li><li><a href="https://blog.csdn.net/u014209205/article/details/81205062">POST、DELETE、PUT、GET的含义及区别</a></li><li><a href="https://www.cnblogs.com/liuzhongchao/p/9244516.html">Gin实战：Gin+Mysql简单的Restful风格的API</a></li><li><a href="https://xxjwxc.github.io/post/ginrpc/">go gin grpc 参数自动绑定工具.</a></li><li><a href="https://geektutu.com/post/quick-go-gin.html">Go Gin 简明教程</a></li><li><a href="https://blog.csdn.net/LitongZero/article/details/109274761">Gin增删改查demo</a></li><li><a href="https://blog.csdn.net/qq_32447301/article/details/108721254">go gin增删改查上传文件下载文件</a></li><li><a href="https://github.com/hairichuhe/nideshop-admin">nideshop-admin 基于gin+gorm+vue搭建的nideshop后台管理系统</a></li><li><a href="https://blog.csdn.net/weixin_43931792/article/details/98765719">go项目配置多开发环境 gin框架</a></li></ul><h2 id="gorm">gorm</h2><ul><li><a href="https://blog.csdn.net/yoyogu/article/details/109318626">go语言gorm基本使用</a></li><li><a href="https://gorm.io/zh_CN/docs/conventions.html"><font color=Red>GORM 指南</font></a></li><li><a href="https://blog.csdn.net/GsZhuiGui/article/details/107649848">关于 gorm AutoMigrate 不自动创建字段的解决方案</a></li><li><a href="https://blog.csdn.net/duxing_langzi/article/details/115521414">Golang持久化框架 gorm 创建表时 auto_increment 不生效问题</a></li><li><a href="https://www.lmonkey.com/t/XAL231jBR">GORM 中文文档_4.4. 数据库迁移</a></li><li><a href="https://learnku.com/docs/gorm/v2/v2_release_note/9756">GORM 2.0 发布说明</a></li></ul><h2 id="redis缓存">redis缓存</h2><ul><li><a href="https://eddycjy.gitbook.io/golang/di-3-ke-gin/application-redis">3.13 优化你的应用结构和实现Redis缓存</a></li><li><a href="https://www.cyhone.com/articles/gin-cache/">一个 Gin 缓存中间件的设计与实现</a></li><li><a href="https://juejin.cn/post/6945098965457043470">Gin 集成 go-redis 模块、操作 redis ｜ Go 主题月</a></li><li><a href="https://www.51cto.com/article/700690.html">面试官：你可以写一个通用的Redis缓存”装饰器“么？</a></li><li><a href="https://blog.csdn.net/weixin_43881017/article/details/111366309">go语言web开发系列之八:gin框架中用go-redis缓存数据</a></li><li><a href="https://blog.csdn.net/weixin_42544051/article/details/106562845">go语言缓存穿透、缓存击穿、缓存雪崩区别和解决方案</a></li><li><a href="https://www.cnblogs.com/xunux/p/5717122.html">redis 间断性耗时长问题解决</a></li><li><a href="https://www.cnblogs.com/cxy2020/p/13748658.html">面试官：大key和大value的危害，如何处理？</a></li><li><a href="https://www.cnblogs.com/liliuguang/p/15990542.html">redis变慢查询</a></li><li><a href="https://blog.csdn.net/weixin_34502341/article/details/113580056">redis 查看key是否存在_Redis为什么变慢了？</a></li><li><a href="https://blog.csdn.net/attack_breast/article/details/113929953">Redis变慢原因</a></li><li><a href="https://blog.csdn.net/qq_26482855/article/details/120511806">Redis 慢查询详解slowlog</a></li></ul><h2 id="上传下载">上传下载</h2><ul><li><p><a href="https://www.cnblogs.com/linkstar/p/10429984.html">无敌简单快速的文件服务器sgfs</a></p></li><li><p><a href="https://sjqzhang.gitee.io/go-fastdfs/QA.html" class="uri">https://sjqzhang.gitee.io/go-fastdfs/QA.html</a></p></li><li><p><a href="https://github.com/sjqzhang/go-fastdfs" class="uri">https://github.com/sjqzhang/go-fastdfs</a></p></li><li><p><a href="https://www.kancloud.cn/adapa/golang/1116834">Golang原生Web开发入门到微服务-扩展:分块上传</a></p></li><li><p><a href="https://www.cnblogs.com/tomtellyou/p/15155366.html">golang FastHttp 使用</a></p></li><li><p><a href="https://www.kancloud.cn/shuangdeyu/gin_book/949420">单文件上传</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42681695/article/details/106579169">golang实现http表单大文件流式上传服务端代码</a></p></li><li><p><a href="https://learnku.com/articles/23559/two-schemes-for-reading-golang-super-large-files">Golang 超大文件读取的两个方案</a></p></li><li><p><a href="https://studygolang.com/articles/7389">golang写服务端程序，作为文件上传与下载的服务器。配合HTML5以网页作为用户页面</a></p></li><li><p><a href="https://tonybai.com/2021/01/16/upload-and-download-file-using-multipart-form-over-http/">使用multipart/form-data实现文件的上传与下载</a></p></li><li><p><a href="https://chunlife.top/2019/04/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98%E4%B9%8B%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0%EF%BC%88%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%EF%BC%89/">服务器上传下载问题之分块上传（断点续传）</a></p></li><li><p><a href="https://blog.csdn.net/u011327801/article/details/101365018">3、gin 静态文件服务</a></p></li><li><p><a href="https://blog.csdn.net/bigwhite20xx/article/details/112792041">一文搞懂如何利用multipart/form-data实现文件的上传与下载</a></p></li><li><p><a href="https://help.aliyun.com/document_detail/32144.htm?spm=a2c4g.11186623.0.0.401f24cbVPHe9f#concept-32144-zh">本文介绍对象存储OSS的Go SDK各种使用场景下的示例代码。</a></p></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://juejin.cn/post/6844903896922456071">[系列] Gin框架 - 使用 Logrus 进行日志记录</a></li><li><a href="https://codeantenna.com/a/Ux6JIA4WSo">Gin添加基于logrus的日志组件</a></li><li><a href="http://www.lsdcloud.com/go/middleware/logrus.html#_6-%E5%B0%86%E6%97%A5%E5%BF%97%E4%BF%9D%E5%AD%98%E5%88%B0%E6%96%87%E4%BB%B6">6 将日志保存到文件</a></li><li><a href="https://blog.csdn.net/xiaobo5264063/article/details/120711908">37go语言学习之日志配置logrus</a></li><li><a href="https://cloud.tencent.com/developer/article/1830707">logrus自定义日志输出格式</a></li><li><a href="https://github.com/uber-go/zap" class="uri">https://github.com/uber-go/zap</a></li></ul><h2 id="序列化">序列化</h2><ul><li><p><a href="https://blog.csdn.net/zxy_666/article/details/80173288">Go的json解析：Marshal与Unmarshal</a></p></li><li><p>代码生成</p></li><li><p><a href="https://mholt.github.io/json-to-go/"><font color=Red>https://mholt.github.io/json-to-go/</font></a></p></li><li><p><a href="https://mholt.github.io/curl-to-go/"><font color=Red>https://mholt.github.io/curl-to-go/</font></a></p></li></ul><h2 id="shell">shell</h2><ul><li><a href="https://www.jianshu.com/p/dd8a113b02a3">Go语言调用Shell与可执行文件</a></li><li><a href="https://blog.csdn.net/YMY_mine/article/details/101068865">golang 执行linux命令 &amp;获取命令执行返回码，命令pid，执行结果(逐行输出)</a></li><li><a href="https://blog.csdn.net/whatday/article/details/109277998">golang exec.Command 执行命令用法实例</a></li><li><a href="https://www.helloworld.net/p/nYp4Sg1iwvI4J">GO定时任务CRON执行不成功？看一下这篇文章就明白了</a></li></ul><h2 id="debug">debug</h2><ul><li><a href="https://segmentfault.com/a/1190000018671207">VS Code 断点调试golang</a></li><li><a href="https://blog.csdn.net/xmcy001122/article/details/105665732">golang-进程崩溃后如何输出错误日志？core dump</a></li></ul><h2 id="swag">swag</h2><ul><li><a href="https://www.bookstack.cn/read/gin-EDDYCJY-blog/golang-gin-2018-03-18-Gin%E5%AE%9E%E8%B7%B5-%E8%BF%9E%E8%BD%BD%E5%85%AB-%E4%B8%BA%E5%AE%83%E5%8A%A0%E4%B8%8ASwagger.md">Golang Gin 实践-连载八-为它加上Swagger.md</a></li><li><a href="https://blog.csdn.net/qq_42873554/article/details/118797414">go swag常用注释</a></li><li><a href="https://ieevee.com/tech/2018/04/19/go-swag.html">使用swaggo自动生成Restful API文档</a></li><li><a href="https://pkg.go.dev/github.com/swaggo/swag/example/basic/api#Upload"><font color=Red>swag-api - pkg.dev</font></a></li><li><a href="https://www.topgoer.com/%E5%85%B6%E4%BB%96/Swagger.html">Swaggo</a></li><li><a href="https://blog.csdn.net/qq_45100706/article/details/115481714">gin-swagger的安装使用（注释参数说明）</a></li></ul><h2 id="文件">文件</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/80403583">go：获取文件的名称、前缀、后缀</a></li></ul><h2 id="elf">elf</h2><ul><li><p><a href="https://www.hitzhangjie.pro/debugger101.io/7-headto-sym-debugger/6-gopkg-debug/1-elf.html">pkg debug/elf 应用</a></p></li><li><p><a href="http://www.verydoc.net/go/00003845.html">type Header64（查看源代码）</a></p></li><li><p><a href="https://go.dev/src/debug/elf/file.go" class="uri">https://go.dev/src/debug/elf/file.go</a></p></li><li><p><a href="https://www.dazhuanlan.com/xtghdnui/topics/1847414">后端 第五日：readelf 开发过程之疑难排解</a></p></li></ul><h2 id="压力测试">压力测试</h2><ul><li><a href="https://blog.csdn.net/lirui8412973/article/details/100582177">QPS、TPS、PV、UV、GMV、IP、RPS含义简单说明</a></li><li><a href="https://www.cnblogs.com/lyc88/articles/11319559.html">QPS、TPS、PV、UV、GMV、IP、RPS 是什么鬼</a></li><li><a href="https://www.cnblogs.com/yangxiayi1987/p/14840191.html">服务端压测指标评估</a></li><li><a href="https://testerhome.com/topics/17068">性能测试工具 wrk,ab,locust,Jmeter 压测结果比较</a></li><li><a href="https://cloud.tencent.com/developer/article/1509809">go实现的压测工具【单台机器100w连接压测实战】</a></li><li><a href="https://cloud.tencent.com/developer/article/1537695">优化nginx-ingress-controller并发性能</a></li></ul><h2 id="性能优化">性能优化</h2><ul><li><a href="https://blog.csdn.net/weixin_37717557/article/details/108684433">Golang pprof 性能分析与火焰图</a></li><li><a href="http://liumurong.org/2019/12/gin_pprof/">Gin框架中使用pprof</a></li><li><a href="https://segmentfault.com/a/1190000016412013">Golang 大杀器之性能剖析 PProf</a></li><li><a href="https://github.com/gin-contrib/pprof" class="uri">https://github.com/gin-contrib/pprof</a></li></ul><h2 id="编译">编译</h2><ul><li><a href="https://lanshiqin.com/92119e60/">Golang交叉编译各平台的可执行二进制程序</a></li><li><a href="https://blog.csdn.net/cyq6239075/article/details/103911098">go build 命令参数详解</a></li></ul><h2 id="安全">安全</h2><ul><li><p><a href="https://www.roboform.com/cn/password-generator">随机密码生成器</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/NVPuFAjt34_jhFqW2tG7MQ">10 种保证接口数据安全的方案！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/oRTdMjqZf59cjAqR72g4aA">全网最全的权限系统设计方案（图解）</a></p></li><li><p><a href="https://www.jb51.net/article/247194.htm">详解如何在Go语言中调用C源代码</a></p></li></ul><h2 id="其他">其他</h2><ul><li><p><a href="https://githubmemory.com/repo/justjanne/powerline-go/issues/272" class="uri">https://githubmemory.com/repo/justjanne/powerline-go/issues/272</a></p></li><li><p><a href="https://golangrepo.com/repo/utkusen-urlhunter-go-web-applications" class="uri">https://golangrepo.com/repo/utkusen-urlhunter-go-web-applications</a></p></li><li><p><a href="https://www.shuzhiduo.com/A/6pdDN0eXJw/">Go项目开源规范</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/eU9lMmomNHDrLZw4eV31Xw">新来的 CTO 规定所有接口都用 post 请求...</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Golang</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx</title>
    <link href="/nginx/nginx/"/>
    <url>/nginx/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="nginx">nginx</h1><h2 id="基础">基础</h2><ul><li><a href="https://xuexb.github.io/learn-nginx/guide/">Nginx 入门教程</a></li><li><a href="https://juejin.cn/post/6844903983622914062">写给后端的Nginx初级入门教程:实战篇</a></li><li><a href="https://github.com/dunwu/nginx-tutorial">Nginx 极简教程</a></li><li><a href="https://www.cnblogs.com/akxmhd/p/15411347.html"><font color=Red>Nginx常用基本命令</font></a></li></ul><h2 id="conf">conf</h2><ul><li><a href="http://t.zoukankan.com/fps2tao-p-9958009.html">增加nginx虚拟主机配置文件(conf.d)</a></li></ul><h2 id="静态文件服务器">静态文件服务器</h2><ul><li><a href="https://blog.csdn.net/qq_42684504/article/details/111246006">Nginx搭建文件下载服务器</a></li><li><a href="https://www.cnblogs.com/foxhappy/p/14541313.html">Nginx配置静态文件服务从入门到精通</a></li><li><a href="https://www.freesion.com/article/2812996615/">NGINX访问静态资源报404错误的坑</a></li><li><a href="https://www.cnblogs.com/XY-Heruo/p/14708905.html">nginx搭建静态文件下载服务器</a></li><li><a href="https://aiopsclub.com/nginx/nginx_static_file/">Nginx系列之nginx静态文件服务</a></li><li><a href="https://blog.51cto.com/afterdawn/2410872">最简单的配置nginx.conf使之成为静态文件下载服务器</a></li><li><a href="https://blog.csdn.net/zhuchunyan_aijia/article/details/53033228">nginx作为下载文件服务器</a></li></ul><h2 id="ip">ip</h2><ul><li><a href="https://www.cnblogs.com/pejsidney/p/11131714.html">nginx 获取源IP 获取经过N层Nginx转发的访问来源真实IP</a></li></ul><h2 id="waf">waf</h2><ul><li><a href="https://www.toutiao.com/article/7021314879449465377">ngx_waf：一款高大全的 Nginx 网站防火墙模块</a></li></ul><h2 id="section">499</h2><ul><li><a href="https://juejin.cn/post/6867050579139493896">HTTP 499 问题处理方法合集</a></li><li><a href="https://blog.csdn.net/yanyan42/article/details/119762449">http 状态码499</a></li></ul><h2 id="section-1">504</h2><ul><li><a href="https://www.cnblogs.com/mr-rocker/p/8855924.html">Nginx报504 gateway timeout错误的解决方法</a></li><li><a href="https://blog.csdn.net/u012164509/article/details/112652712">nginx 解决504超时问题</a></li></ul><h2 id="其它">其它</h2><ul><li><a href="https://www.cnblogs.com/niyueling/p/11573240.html"><font color=Red>Nginx面试基础必会</font></a></li><li><a href="https://developer.aliyun.com/article/771312">强大！Nginx 配置在线一键生成“神器”</a></li><li><a href="https://www.jianshu.com/p/0e13dab6e1eb">nginx目录遍历漏洞</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript</title>
    <link href="/javascript/javascript/"/>
    <url>/javascript/javascript/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript">javascript</h1><h2 id="node-npm">node npm</h2><p>安装nodejs管理工具nvm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash<br></code></pre></td></tr></table></figure><p>刷新环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>安装nodejs版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install v18.18.2<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/u012762641/article/details/106050625">Linux下安装多个版本nodejs并切换使用</a></li><li><a href="https://www.myfreax.com/how-to-install-node-js-on-debian-10/">如何在Debian 10 Linux上安装Node.js和npm</a></li><li><a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html">使用 nvm 管理不同版本的 node 与 npm</a></li></ul><h2 id="import-export">Import export</h2><ul><li><a href="https://blog.csdn.net/harry5508/article/details/84025146">认识Vue 的 export、export default、import</a></li></ul><h2 id="vue">Vue</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/installation.html">介绍 - Vue.js</a></li><li><a href="https://juejin.cn/post/6844903683860201486">比官方文档更易懂的Vue.js教程！包你学会！</a></li><li><a href="https://www.runoob.com/vue2/vue-tutorial.html">Vue.js 教程</a></li><li><a href="https://www.runoob.com/w3cnote/vue-js-quickstart.html">Vue.js 入门教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started">开始使用 Vue</a></li></ul><h2 id="生命周期">生命周期</h2><ul><li><a href="https://blog.csdn.net/m0_37911124/article/details/123481146">11、Vue的生命周期</a></li><li><a href="https://juejin.cn/post/6874855535234170887">Vue生命周期详解</a></li></ul><h2 id="axios">axios</h2><ul><li><a href="https://www.jianshu.com/p/a48eed3831da">05 Vue3 使用Axios请求后端服务</a></li><li><a href="https://www.runoob.com/vue3/vue3-ajax-axios.html">Vue3 Ajax(axios)</a></li></ul><h2 id="跨域">跨域</h2><ul><li><a href="https://segmentfault.com/a/1190000040583348">vue解决跨域方法</a></li><li><a href="https://www.jianshu.com/p/c3f92a904696">Vue跨域解决方法</a></li><li><a href="https://vue3js.cn/interview/vue/cors.html#%E4%BA%8C%E3%80%81%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">面试官：Vue项目中你是如何解决跨域的呢？</a></li><li><a href="https://blog.csdn.net/moshowgame/article/details/107285660">解决Axios跨域问题（Axios跨域问题解决方案）</a></li><li><a href="https://www.jianshu.com/p/4e6dac726c54"><font color=Red>vueaxios实现跨域请求</font></a></li><li><a href="https://blog.csdn.net/James_liPeng/article/details/86151073"><font color=Red>Vue2.0使用Axios实现跨域访问（解决跨域问题）</font></a></li><li><a href="https://blog.csdn.net/qq_38409994/article/details/105724827"><font color=Red>vue2-Axios解决跨域访问</font></a></li></ul><h2 id="vue3">Vue3</h2><ul><li><a href="https://blog.csdn.net/wsjzzcbq/article/details/123003859">vue3 setup 使用教程</a></li><li><a href="https://blog.csdn.net/m0_67401055/article/details/123433455">vue3 setup语法糖 详细使用说明</a></li><li><a href="https://www.cnblogs.com/-pdd/p/16003658.html">Vue3中setup语法糖学习</a></li><li><a href="https://segmentfault.com/a/1190000041849882">Vue3.2 setup语法糖总结</a></li><li><a href="https://juejin.cn/post/7078865301856583717">Vue3拒绝写return，用setup语法糖,让写Vue3更畅快</a></li></ul><h2 id="环境变量">环境变量</h2><ul><li><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F">模式和环境变量</a></li><li><a href="https://www.cnblogs.com/guojikun/p/15160737.html">vue cli中的env详解</a></li><li><a href="https://juejin.cn/post/6844903859878363149"># 【vue基础篇】一看就懂的vue环境变量配置</a></li><li><a href="https://www.jianshu.com/p/e40709390301">vue_cli3中axios封装、配置不同开发环境变量</a></li></ul><h2 id="调试">调试</h2><ul><li><p><a href="https://segmentfault.com/a/1190000038156565">在VS Code 中调试Vue.js</a></p></li><li><p>vitepress</p></li><li><p><a href="https://vitepress.vuejs.org/guide/getting-started.html" class="uri">https://vitepress.vuejs.org/guide/getting-started.html</a></p></li><li><p><a href="https://www.imaegoo.com/2021/hello-vitepress/">体验 VitePress：文档编译还能这么快！</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
      <tag>Vue</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/javascript/my-project/README/"/>
    <url>/javascript/my-project/README/</url>
    
    <content type="html"><![CDATA[<h1 id="test">test</h1><blockquote><p>A Vue.js project</p></blockquote><h2 id="build-setup">Build Setup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># install dependencies</span><br>npm install<br><br><span class="hljs-comment"># serve with hot reload at localhost:8080</span><br>npm run dev<br><br><span class="hljs-comment"># build for production with minification</span><br>npm run build<br><br><span class="hljs-comment"># build for production and view the bundle analyzer report</span><br>npm run build --report<br><br><span class="hljs-comment"># run unit tests</span><br>npm run unit<br><br><span class="hljs-comment"># run e2e tests</span><br>npm run e2e<br><br><span class="hljs-comment"># run all tests</span><br>npm <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>For a detailed explanation on how things work, check out the <a href="http://vuejs-templates.github.io/webpack/">guide</a> and <a href="http://vuejs.github.io/vue-loader">docs for vue-loader</a>.</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
      <category>my-project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/javascript/todolist/README/"/>
    <url>/javascript/todolist/README/</url>
    
    <content type="html"><![CDATA[<h1 id="todolist">todolist</h1><blockquote><p>A Vue.js project</p></blockquote><h2 id="build-setup">Build Setup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># install dependencies</span><br>npm install<br><br><span class="hljs-comment"># serve with hot reload at localhost:8080</span><br>npm run dev<br><br><span class="hljs-comment"># build for production with minification</span><br>npm run build<br><br><span class="hljs-comment"># build for production and view the bundle analyzer report</span><br>npm run build --report<br><br><span class="hljs-comment"># run unit tests</span><br>npm run unit<br><br><span class="hljs-comment"># run e2e tests</span><br>npm run e2e<br><br><span class="hljs-comment"># run all tests</span><br>npm <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>For a detailed explanation on how things work, check out the <a href="http://vuejs-templates.github.io/webpack/">guide</a> and <a href="http://vuejs.github.io/vue-loader">docs for vue-loader</a>.</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
      <category>todolist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/redis/redis/"/>
    <url>/redis/redis/</url>
    
    <content type="html"><![CDATA[<h1 id="redis">Redis</h1><ul><li><a href="https://www.cnblogs.com/jasontec/p/9699242.html">Redis常见面试题</a></li><li><a href="https://www.cnblogs.com/telwanggs/p/10642382.html">redis面试必问</a></li><li><a href="https://www.jianshu.com/p/06ab9daf921d">Redis哨兵（Sentinel）模式</a></li><li><a href="https://blog.csdn.net/JustDI0209/article/details/118972665">开发技术-批量删除redis数据的4种方法_JustDI0209的博客-CSDN博客</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql教程</title>
    <link href="/sql/mysql%E6%95%99%E7%A8%8B/"/>
    <url>/sql/mysql%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql教程">mysql教程</h1><h2 id="mysql安装">Mysql安装</h2><ul><li><a href="https://www.runoob.com/linux/mysql-install-setup.html">MySQL安装配置</a></li><li><a href="https://www.cyberciti.biz/faq/install-mysql-server-8-on-ubuntu-20-04-lts-linux/">如何在Ubuntu 20.04 LTS Linux上安装MySQL服务器</a></li><li><a href="https://blog.csdn.net/weixin_44129085/article/details/104481986"><font color=Red>Ubuntu 18.04 64位安装MySQL8.0</font></a></li><li><a href="https://www.cnblogs.com/opsprobe/p/9126864.html">Ubuntu18.04下安装MySQL</a></li><li><a href="https://blog.csdn.net/lduzhenlin/article/details/113243476">ubuntu20.04安装mysql8.0</a></li><li><a href="https://blog.csdn.net/YM_1111/article/details/107555383"><font color=Red>Ubuntu20.04安装Mysql（亲测有效，一定要按步骤来）</font></a></li><li><a href="https://www.bbsmax.com/A/qVdeLMAb5P/">在 Ubuntu 18.0-10上安装 MySQL8</a></li><li><a href="https://dev.mysql.com/downloads/repo/apt/"><font color=Red>mysql官方apt仓库源</font></a></li></ul><h2 id="mariadb">Mariadb</h2><ul><li><a href="https://www.cnblogs.com/sunxiuwen/p/9818620.html"><font color=Red>MariaDB数据库管理系统是MySQL的一个分支</font></a></li><li><a href="https://blog.csdn.net/dongdong9223/article/details/86645690">弹指神通MariaDB——MariaDB与MySQL各版本的区别</a></li><li><a href="https://blog.csdn.net/shenliang1985/article/details/105727187">MariaDB窗口函数row_number、rank介绍</a></li></ul><h2 id="安装后初始化">安装后初始化</h2><ul><li><a href="https://www.cnblogs.com/centos2017/p/7896779.html">Mysql初始化及密码管理</a></li><li><a href="https://mal-suen.github.io/2018/05/27/MySQL%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4mysql_secure_installation/">MySQL安全设置命令mysql_secure_installation</a></li><li><a href="https://blog.csdn.net/alwaysbefine/article/details/108679423">mysql安全初始化脚本的免交互执行mysql_secure_installation</a></li></ul><h2 id="创建用户并授权">创建用户并授权</h2><ul><li><a href="https://blog.csdn.net/qpzkobe/article/details/102833458">MySQL5.7创建用户并授权_qpzkobe的博客-CSDN博客_mysql5.7 创建用户</a></li><li><a href="https://blog.csdn.net/hellokandy/article/details/80493564">MySQL 创建用户并设置所有权限_HelloKandy的博客-CSDN博客_mysql给用户所有权限</a></li><li><a href="https://blog.csdn.net/qq_23859799/article/details/85862821"><font color=Red>mysql8.0数据库添加用户和授权</font></a></li></ul><h2 id="修改密码">修改密码</h2><ul><li><a href="https://www.cnblogs.com/xiaotengyi/p/5458731.html">mysql 5.7修改密码 - Still water run deep - 博客园 (cnblogs.com)</a></li></ul><h2 id="忘记密码">忘记密码</h2><ul><li><a href="https://blog.51cto.com/u_15162069/2742245"><font color=Red>CentOS忘记mariadb/mysql root密码解决办法</font></a></li></ul><h2 id="远程连接">远程连接</h2><ul><li><a href="https://blog.csdn.net/lyj_null/article/details/90201325">mysql5.7开启root用户远程连接_lyj_null的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/freewsf/p/11980721.html">Centos7 查看Mysql配置文件 - freewsf - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/h996666/article/details/80921913">MySQL8.0允许外部访问</a></li></ul><h2 id="启动失败">启动失败</h2><ul><li><a href="https://www.cnblogs.com/cnwcl/p/13805643.html">mysql启动失败：su: warning: cannot change directory to /nonexistent: No such file or directory</a></li></ul><h2 id="mysql存储位置">mysql存储位置</h2><ul><li><a href="https://shawn-nie.github.io/2019/03/12/MySQL%E6%9B%B4%E6%8D%A2%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E7%9A%84%E6%96%B9%E6%B3%95/">MySQL更换数据存储路径的方法</a></li><li><a href="https://blog.csdn.net/weixin_42407739/article/details/113891104">docker mysql 存储位置_Docker mysql 把数据存储在本地目录</a></li></ul><h2 id="navicat">Navicat</h2><ul><li><a href="https://www.cnblogs.com/librarookie/p/15109941.html">Navicat 激活教程2021（Linux）</a></li><li><a href="https://blog.csdn.net/Copy_nzy/article/details/122782150">linux（Ubuntu）下Navicat的激活与无限试用</a></li><li><a href="https://dbeaver.io/download/" class="uri">https://dbeaver.io/download/</a></li></ul><h2 id="mysql教程-1">Mysql教程</h2><ul><li><a href="https://www.cnblogs.com/-wenli/p/11171826.html">Mysql面试题</a></li><li><a href="https://www.jianshu.com/p/4bb9f78b4f6d">Mysql四种常见数据库引擎</a></li><li><a href="https://blog.csdn.net/hao65103940/article/details/89032538">BTree和B+Tree详解</a></li></ul><h2 id="范式">范式</h2><ul><li><a href="https://blog.csdn.net/douunderstand/article/details/70159540">MySQL（4）第一范式第二范式第三范式BC范式</a></li></ul><h2 id="执行顺序">执行顺序</h2><ul><li><a href="https://mp.weixin.qq.com/s/e7j5a2d7HRBYg1L_HdLurw">SQL查询是从Select开始的吗？</a></li><li><a href="https://www.toutiao.com/article/7180907006297932326">这里有8种专坑同事的SQL写法，保证性能降低100倍，想来试试吗？</a></li></ul><h2 id="分组加行号">分组加行号</h2><ul><li><a href="https://www.cnblogs.com/kongxianghao/p/7371674.html">mysql分组加行号</a></li><li><a href="https://www.cnblogs.com/rollenholt/p/3776923.html">MySQL的语句执行顺序</a></li><li><a href="https://www.cnblogs.com/rhythmK/p/4806905.html">mysql显示行号，以及分组排序</a></li><li><a href="https://blog.csdn.net/zgbzbl/article/details/107573258">『MySQL』MySQL分组后添加行号_zgbzbl的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_30013585/article/details/118177490">mysql 分组给行号_realwujing的博客-CSDN博客</a></li></ul><h2 id="行转列">行转列</h2><ul><li><a href="https://blog.csdn.net/liuchaoxuan/article/details/80560739">MySQL实现行转列SQL</a></li><li><a href="https://www.cnblogs.com/chenduzizhong/p/9590741.html">MySQL case when用法</a></li></ul><h2 id="group-by">group by</h2><ul><li><a href="https://www.cnblogs.com/rainman/archive/2013/05/01/3053703.html">SQL中Group By的使用</a></li><li><a href="https://blog.csdn.net/qq403580298/article/details/90756352">MySQL对group by原理和理解</a></li><li><a href="https://www.cnblogs.com/pcheng/p/5939646.html">MySQL中union和order by一起使用的方法- PC君-博客园</a></li></ul><h2 id="分页">分页</h2><ul><li><a href="https://blog.csdn.net/bandaoyu/article/details/89844673">【mySQL】mysql 分页查询</a></li><li><a href="https://www.iteye.com/blog/qimo601-1634748">1、Mysql的limit用法</a></li></ul><h2 id="exist-in">exist in</h2><ul><li><a href="https://www.cnblogs.com/qlqwjy/p/8598091.html">MySQL中EXISTS的用法</a></li><li><a href="https://www.cnblogs.com/emilyyoucan/p/7833769.html">SQL语句中exists和in的区别</a></li></ul><h2 id="join">join</h2><ul><li><a href="https://www.runoob.com/w3cnote/sql-join-the-different-of-on-and-where.html">SQL JOIN 中 on 与 where 的区别</a></li></ul><h2 id="索引">索引</h2><ul><li><a href="https://www.cnblogs.com/zz-tt/p/6609828.html">MySQL 添加索引，删除索引及其用法 - 手心里的海 - 博客园 (cnblogs.com)</a></li></ul><h2 id="约束">约束</h2><ul><li><a href="https://blog.csdn.net/yumushui/article/details/38960619">MySQL中添加唯一约束和联合唯一约束_yumushui的专栏-CSDN博客_mysql添加唯一约束</a></li></ul><h2 id="优化">优化</h2><ul><li><a href="https://www.cnblogs.com/sunsky303/p/14206746.html">如何优化mysql的范围查询 - sunsky303 - 博客园 (cnblogs.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/104267505">MySQL慢查询优化之多范围查询优化 - 知乎 (zhihu.com)</a></li></ul><h2 id="时间类型">时间类型</h2><ul><li><a href="https://blog.csdn.net/gxy_2016/article/details/53436865">MySQL 日期类型及默认设置_gxy_2016的博客-CSDN博客</a></li></ul><h2 id="b树">B+树</h2><ul><li><a href="https://mp.weixin.qq.com/s/7JkLNt7Fhkx7d_ifv290iA">图解：什么是B+树？（汇总篇）</a></li></ul><h2 id="正则表达式">正则表达式</h2><ul><li><a href="https://www.php.cn/mysql-tutorials-414339.html">MySQL如何使用正则表达式？（代码示例）-mysql教程-PHP中文网</a></li></ul><h2 id="python">python</h2><ul><li><a href="https://blog.csdn.net/cnctcom/article/details/78805251">python操作MySQL数据库使用＂insert into ... on duplicate key update＂报错问题</a></li><li><a href="https://zhuanlan.zhihu.com/p/72606604">Python-封装数据库连接（impala） - 知乎 (zhihu.com)</a></li></ul><h2 id="数据库同步">数据库同步</h2><ul><li><p><a href="https://m.php.cn/article/418834.html"><font color=Red>mysql怎么导出数据库？</font></a></p></li><li><p><a href="https://pein0119.github.io/2014/10/22/MySQL%E7%BB%88%E7%AB%AF%E6%89%A7%E8%A1%8CSQL%E6%96%87%E4%BB%B6/"><font color=Red>MySQL终端执行SQL文件</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7153640695385932324/">一文了解MySQL Binlog</a></p></li><li><p><a href="https://www.toutiao.com/article/7153641138942198308/">基于Binlog的MySQL主从复制</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/TjF8stG8UhBm_TZAaChbTA"><font color=Red>MySQL 最朴素的监控方式！用完爱不释手</font></a></p></li><li><p><a href="https://juejin.cn/post/6844904088539234312">基于Canal和Kafka实现MySQL的Binlog近实时同步 (juejin.cn)</a></p></li><li><p><a href="https://www.cnblogs.com/laoqing/p/11359224.html">大数据时代，数据实时同步解决方案的思考—最全的数据同步总结 - 张永清 - 博客园 (cnblogs.com)</a></p></li></ul><h2 id="其它">其它</h2><ul><li><p><a href="https://www.cnblogs.com/xuliuzai/p/10840080.html">MySQL通过SHOW TABLE STATUS查看库中所有表的具体信息 - 东山絮柳仔 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://blog.csdn.net/qq_42884482/article/details/100150177">关系模型中的三类完整性约束：实体完整性、参照完整性和用户定义完整性</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/50448594">通俗数据库设计（3）逻辑结构设计</a></p></li><li><p><a href="https://blog.csdn.net/qq_15037231/article/details/62049599">合并分ER图产生的冲突</a></p></li><li><p><a href="https://www.cnblogs.com/Lencamo/p/15510482.html">数据库之关系代数</a></p></li><li><p><a href="https://www.jianshu.com/p/d140a4df382c">数据库——关系代数运算</a></p></li></ul><h2 id="kudu-ubuntu16">Kudu ubuntu16</h2><ul><li><p><a href="https://github.com/cloudera/hs2client" class="uri">https://github.com/cloudera/hs2client</a></p></li><li><p><a href="https://blog.csdn.net/tangsl388/article/details/81984335">ubuntu 16.04部署安装kudu_小田坎儿-CSDN博客</a></p></li><li><p><a href="http://archive.cloudera.com/kudu/ubuntu/xenial/amd64/kudu/">archive.cloudera.com/kudu/ubuntu/xenial/amd64/kudu/</a></p></li><li><p><a href="https://blog.csdn.net/penker_zhao/article/details/107485417">大数据学习整理篇（三）Ubuntu 16.04 Server版安装Kudu,Impala,Spark 2.3.4,以及Scala语言使用Spark RDD访问HBase_astra_zhao的专栏-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/bin330720911/article/details/79993671">Impala基础语法（一）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cL4WgbZ8iHrS9hM0fM1kqQ">微信为什么使用SQLite保存聊天记录？</a></p></li></ul><h2 id="碎片化">碎片化</h2><ul><li><p><a href="https://www.51cto.com/article/263105.html">Oracle数据库碎片如何整理</a></p></li><li><p><a href="https://www.51cto.com/article/704241.html">碎片化的数据库世界，你了解几分？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/MY79ghMK5wEwuCUrfYaSRQ">ULID - 一种比UUID更好的方案</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/fnAop2zJnyZRuUZCPgvzrg">面试官问：select......for update会锁表还是锁行？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python</title>
    <link href="/python/python/"/>
    <url>/python/python/</url>
    
    <content type="html"><![CDATA[<h1 id="python">python</h1><h2 id="anaconda">anaconda</h2><ul><li><p><a href="https://blog.csdn.net/qq_36338754/article/details/96430294">Anaconda python3.6版本安装_华仔的博客-CSDN博客_anaconda python3.6</a></p></li><li><p><code>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.2.0-Linux-x86_64.sh</code></p></li><li><p><a href="https://www.cnblogs.com/zhaopanpan/p/9383350.html">pipreqs查找python项目依赖并生成requirements.txt - 一抹浅笑 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/129866307">python使用清华源进行pip安装的方法（最方便，不用换源只需一行代码）</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43667077/article/details/106521015">【2020-06】3个Anaconda国内开源镜像站</a></p></li><li><p><a href="https://blog.csdn.net/liuYinXinAll/article/details/90042947">Python使用清华大学镜像源</a></p></li><li><p><a href="https://www.cnblogs.com/believepd/p/10423094.html">pipreqs（找当前项目依赖的包）</a></p></li><li><p><a href="https://www.cnblogs.com/songzhixue/p/11296720.html">python国内镜像源</a></p></li><li><p><a href="https://blog.csdn.net/weixin_40922744/article/details/109866687">Ubuntu中conda的安装及常用命令</a></p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.mirrors.ustc.edu.cn/simple/<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://blog.csdn.net/pansaky/article/details/90710751">python 日志 logging模块(详细解析)_pansaky的博客-CSDN博客</a></li><li><a href="https://pypi.org/project/loguru/">loguru · PyPI</a></li><li><a href="https://www.cnblogs.com/yyds/p/6901864.html">Python之日志处理（logging模块） - 云游道士 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/qq_41767116/article/details/113734410">python logging模块打印log到指定文件_Lucky小黄人的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_38641985/article/details/81672283">python logging 日志 通过修饰器获取错误信息_桜-CSDN博客</a></li><li><a href="https://blog.csdn.net/pansaky/article/details/90710751">python日志logging模块(详细解析)</a></li><li><a href="https://blog.csdn.net/lvmengzou/article/details/118307249">Python + logging 输出到屏幕，将log日志写入文件_lvmengzou的专栏-CSDN博客</a></li><li><a href="https://blog.csdn.net/Jason_WangYing/article/details/114155112">loguru如何创建两个不同的日志文件_Jason_WangYing的博客-CSDN博客</a></li></ul><h2 id="爬虫">爬虫</h2><ul><li><p><a href="https://www.cnblogs.com/nmsghgnv/p/12369656.html">scrapy框架中多个spider,tiems,pipelines的使用及运行方法</a></p></li><li><p><a href="https://www.cnblogs.com/jackzz/p/10774517.html">Scrapy：配置日志</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43958804/article/details/88308992">python 爬虫面试整理</a></p></li><li><p><a href="https://github.com/realReid/LHB.git" class="uri">https://github.com/realReid/LHB.git</a></p></li><li><p><a href="https://www.zhihu.com/question/56148271">xpath 如何选取某个节点但是排除掉某个子节点？ - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/78571606">Python爬虫实战(一) 用Python爬取百度百科 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/6a0dbb4e246a">Xpath 详解 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/Neeo/articles/11520952.html">Python - urllib - 听雨危楼 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/c8f896d668d6">[Python]requests使用代理 - 简书 (jianshu.com)</a></p></li></ul><h2 id="python-mysql">python mysql</h2><ul><li><a href="https://www.cnblogs.com/jiangxiaobo/p/12786205.html">python3 实现mysql数据库连接池 - jiangxiaobo - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/c-x-a/p/9045646.html">pymysql 线程安全pymysqlpool - 公众号python学习开发 - 博客园 (cnblogs.com)</a></li><li><a href="http://www.zzvips.com/article/117347.html">Python MySQL数据库连接池组件pymysqlpool详解_Python_脚本之家 (zzvips.com)</a></li><li><a href="http://www.manongjc.com/detail/5-mnpaewuzaaewzpm.html">Python MySQL数据库连接池组件pymysqlpool详解 - 码农教程 (manongjc.com)</a></li><li><a href="https://blog.csdn.net/wait_2030/article/details/90266211">MySQL插入数据时自动添加创建时间（create_time）和修改时间（update_time）_wait_2030的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/feiquan/p/11350374.html">Python 使用 PyMysql、DBUtils 创建连接池，提升性能 - feiquan - 博客园 (cnblogs.com)</a></li></ul><h2 id="pandas">pandas</h2><ul><li><a href="https://blog.csdn.net/weixin_51098806/article/details/115265280">python如何转换dataframe列的类型astype()方法（超级详细）_爱代码的小哥的博客-CSDN博客</a></li><li><a href="https://www.jianshu.com/p/3d797335f467">pandas从mysql读写数据 - 简书 (jianshu.com)</a></li><li><a href="https://www.cnblogs.com/onemorepoint/p/9404753.html">pandas 数据类型转换 - 多一点 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/ls13552912394/article/details/79349809">在pandas中遍历DataFrame行_ls13552912394的博客-CSDN博客_dataframe遍历行</a></li><li><a href="https://www.cnblogs.com/wqbin/p/11775812.html">pandas df 遍历行方法 - wqbin - 博客园 (cnblogs.com)</a></li><li><a href="https://www.jb51.net/article/209858.htm">python基于Pandas读写MySQL数据库_python_脚本之家 (jb51.net)</a></li><li><a href="https://www.jianshu.com/p/72274ccb647a">Pandas 中 SettingwithCopyWarning 的原理和解决方案 - 简书 (jianshu.com)</a></li><li><a href="https://www.jianshu.com/p/732858f89a00">python pandas &gt;loc、iloc用法 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/qq_42711381/article/details/90451301">(3条消息) Pandas - A value is trying to be set on a copy of a slice from a DataFrame_NFII-CSDN博客</a></li><li><a href="https://blog.csdn.net/curry3030/article/details/100533296">(3条消息) 处理pandas出现warning: “A value is trying to be set on a copy of a slice from a DataFrame.”_curry3030的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/yudajiangshan/article/details/112402130">python pandas Dataframe增加一列遇到A value is trying to be set on a copy of a slice from a DataFrame._yudajiangshan的博客-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s/BNMj5VL3QW6Qjg6WoKqCXA">收藏学习：100个Pandas常用的函数</a></li></ul><h2 id="机器学习">机器学习</h2><ul><li><p><a href="http://www.feiguyunai.com/">Python技术交流与分享</a></p></li><li><p><a href="https://github.com/Kunal-Varma/GPT3-Demos" class="uri">https://github.com/Kunal-Varma/GPT3-Demos</a></p></li><li><p><a href="https://mofanpy.com/">莫烦python</a></p></li><li><p><a href="https://github.com/fighting41love/funNLP">NLP民工的乐园:几乎最全的中文NLP资源库</a></p></li><li><p><a href="https://github.com/apachecn/apachecn-dl-zh">ApacheCN深度学习译文集</a></p></li><li><p><a href="https://pytorch.apachecn.org/docs/1.7/">PyTorch中文官方教程1.7</a></p></li><li><p><a href="https://blog.csdn.net/Yellow_python/article/details/81021142">Python+gensim-文本相似度分析（小白进）</a></p></li><li><p><a href="https://www.cnblogs.com/tornadomeet/p/3395593.html">机器学习&amp;数据挖掘笔记_16（常见面试之机器学习算法思想简单梳理）</a></p></li><li><p><a href="https://blog.csdn.net/jiaoyangwm/article/details/79805939">机器学习笔试面试超详细总结（一）</a></p></li></ul><h2 id="其他">其他</h2><ul><li><a href="http://c.biancheng.net/view/4552.html">Python实例方法、静态方法和类方法详解（包含区别和用法） (biancheng.net)</a></li><li><a href="https://www.cnblogs.com/finer/p/12846475.html">110道python面试题</a></li><li><a href="https://blog.csdn.net/sinat_38682860/article/details/94763641">吐血总结！50道Python面试题集锦（附答案）</a></li><li><a href="https://zhuanlan.zhihu.com/p/87524388">【进阶Python】第六讲：单例模式的妙用 - 知乎 (zhihu.com)</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328525009056">函数式编程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></li><li><a href="https://blog.51cto.com/u_15127500/3822046">ubuntu 上的python安装包位置</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cargo教程</title>
    <link href="/rust/cargo%E6%95%99%E7%A8%8B/"/>
    <url>/rust/cargo%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="cargo教程">cargo教程</h1><ul><li><p><a href="https://cargo.budshome.com/index.html#cargo-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3">Cargo 中文文档</a></p></li><li><p><a href="https://learnku.com/docs/cargo-book/2018">Cargo 教程</a></p></li><li><p><a href="https://cxx.rs/build/cmake.html" class="uri">https://cxx.rs/build/cmake.html</a></p></li><li><p><a href="https://github.com/XiangpengHao/cxx-cmake-example" class="uri">https://github.com/XiangpengHao/cxx-cmake-example</a></p></li><li><p><a href="https://www.jianshu.com/p/95884d1d04aa">Rust 调用C/C++</a></p></li><li><p><a href="https://github.com/ZhangHanDong/tao-of-rust-codes">《Rust编程之道》随书源码</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/algorithm/algorithm/"/>
    <url>/algorithm/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="algorithm">algorithm</h1><ul><li><a href="https://github.com/krahets/hello-algo"><font color=Red>https://github.com/krahets/hello-algo</font></a></li><li><a href="https://www.hello-algo.com/"><font color=Red>《 Hello 算法 》</font></a></li></ul><h2 id="数据结构">数据结构</h2><ul><li><a href="https://blog.csdn.net/weixin_39943442/article/details/112662181">代码面试需要知道的8种数据结构(附面试题及答案链接)</a></li><li><a href="https://mp.weixin.qq.com/s/ujXOtCA8og8Cyq59O_zuaw">嵌入式软件常见的 8 种数据结构</a></li><li><a href="https://blog.csdn.net/u014532217/article/details/79118023">数据结构-各种树的定义</a></li><li><a href="https://www.jianshu.com/p/b597aa97c9de">二叉树、平衡二叉树、红黑树、B树、B+树与B*树 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/sinat_34072381/article/details/107197754">红黑树、B树和B+树</a></li><li><a href="https://developer.aliyun.com/article/38345">二叉树学习笔记之B树、B+树、B*树</a></li><li><a href="https://cloud.tencent.com/developer/article/1769988"><font color=Red>LeetCode0：学习算法必备知识：时间复杂度与空间复杂度的计算</font></a></li><li><a href="http://c.biancheng.net/algorithm/">算法入门教程（多语言实现）</a></li><li><a href="https://blog.csdn.net/weixin_44162361/article/details/115819742">双链表——双链表的定义及其基本操作（初始化、头插法尾插法建表、插入、查找、删除、判空等）</a></li><li><a href="https://mp.weixin.qq.com/s/hGrTUmM1zusPZZ0nA9aaNw">前缀树算法模板秒杀 5 道算法题</a></li></ul><h2 id="堆栈">堆栈</h2><ul><li><a href="https://www.cnblogs.com/nycsde/p/13772560.html">一分钟带你读懂什么是堆？ - 码农田小齐 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/speedme/article/details/22943191/">操作系统中堆和栈的区别_SpeedMe的博客-CSDN博客</a></li></ul><h2 id="遍历">遍历</h2><ul><li><a href="https://blog.csdn.net/u013834525/article/details/80421684">二叉树前序遍历、中序遍历、后序遍历、层序遍历的直观理解_白夜行的狼-CSDN博客_中序遍历</a></li><li><a href="https://www.jianshu.com/p/456af5480cee">二叉树遍历(先序、中序、后序) - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/My_Jobs/article/details/43451187"><font color=Red>二叉树遍历（前序、中序、后序、层次遍历、深度优先、广度优先）</font></a></li><li><a href="https://www.jianshu.com/p/b086986969e6">DFS（深度优先搜索）和BFS(广度优先搜索)</a></li></ul><h2 id="刷题">刷题</h2><ul><li><p><a href="http://c.biancheng.net/algorithm/what-is-algorithm.html">算法入门教程（多语言实现）</a></p></li><li><p><a href="https://labuladong.gitee.io/algo/"><font color=Red>labuladong的算法小抄 :: labuladong的算法小抄 (gitee.io)</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/sT6_sHuptgwg9A4KxQfGSg">labuladong 公众号文章目录</a></p></li><li><p><a href="https://labuladong.gitee.io/algo/2/19/22/"><font color=Red>我们千万不要跳进递归的细节里，你的脑袋才能压几个栈呀。</font></a></p></li><li><p><a href="https://labuladong.gitee.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/#%E4%BB%A5%E6%A0%91%E7%9A%84%E8%A7%86%E8%A7%92%E7%9C%8B%E5%8A%A8%E5%BD%92-%E5%9B%9E%E6%BA%AF-dfs%E7%AE%97%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB"><font color=Red>以树的视角看动归/回溯/DFS算法的区别和联系</font></a></p></li><li><p><a href="https://labuladong.gitbook.io/algo/">开篇词 - labuladong 的算法小抄 (gitbook.io)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/AWsL7G89RtaHyHjRPNJENA">labuladong的算法小抄：列表形式目录(qq.com)</a></p></li><li><p><a href="https://github.com/soulmachine/leetcode">soulmachine/leetcode: LeetCode题解，151道题完整版 (github.com)</a></p></li><li><p><a href="https://github.com/doocs/leetcode">doocs/leetcode:😏LeetCode solutions in any programming language | 多种编程语言实现 LeetCode、《剑指 Offer（第 2 版）》、《程序员面试金典（第 6 版）》题解 (github.com)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uOubir_nLzQtp_fWHL73JA"><font color=Red>「刷题外挂 V2.4」稳定版使用手册</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7167302615553065511/">图解一致性哈希算法，看这一篇就够了</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zL-n7zq0Zyhf-l_GQil2dg">一致性哈希算法设计题，栽了</a></p></li><li><p><a href="https://www.toutiao.com/article/7209275067782464040">布隆过滤器(Bloom Filter)的设计和实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/4vHfaNnn1OpWQJcsssWWdQ">必知必会位运算技巧手册</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/deepin/kms/README/"/>
    <url>/linux/deepin/kms/README/</url>
    
    <content type="html"><![CDATA[<h1 id="deepin专业版激活">deepin专业版激活</h1><h2 id="ac认证">1. ac认证</h2><p><a href="http://ac.uniontehc.com">上网认证系统</a></p><h2 id="激活">2. 激活</h2><p>方式一：</p><pre><code class="hljs"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">设置 -&gt; 系统信息 -&gt; 关于本机 -&gt; 激活 -&gt; 设置 -&gt; 自定义<br>kms::// kms.uniontech.com:8900:nqYvXZXdNPKNn335<br></code></pre></td></tr></table></figure></code></pre><p>方式二：</p><pre><code class="hljs"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uos-activator-cmd -s --kms kms.uniontech.com:8900:Vlc1cGIyNTBaV05v<br></code></pre></td></tr></table></figure></code></pre>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>deepin</category>
      
      <category>kms</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flatpak</title>
    <link href="/linux/package/flatpak/"/>
    <url>/linux/package/flatpak/</url>
    
    <content type="html"><![CDATA[<h1 id="flatpak">flatpak</h1><h2 id="demo1">demo1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">flatpak install com.belmoussaoui.Decoder <br><br><span class="hljs-comment">#  默认过滤规则进入沙箱</span><br>flatpak run --devel  --<span class="hljs-built_in">command</span>=bash com.belmoussaoui.Decoder <br><br><span class="hljs-comment"># 发送测试命令 需要换成自己的demo服务，然后启动服务，预期结果dbus调用被拦截</span><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.deepin.linglong.AppManager /com/deepin/linglong/PackageManager com.deepin.linglong.PackageManager.<span class="hljs-built_in">test</span> string:<span class="hljs-string">&quot;org.deepin.demo&quot;</span> <br><br><span class="hljs-comment"># 退出沙箱</span><br><span class="hljs-built_in">exit</span>  <br><br><span class="hljs-comment"># 设置过滤规则允许调用test，进入沙箱</span><br>flatpak run  --devel --<span class="hljs-built_in">command</span>=bash --talk-name=com.deepin.linglong.AppManager com.belmoussaoui.Decoder  <br><br><span class="hljs-comment"># 预期结果dbus调用成功</span><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.deepin.linglong.AppManager /com/deepin/linglong/PackageManager com.deepin.linglong.PackageManager.<span class="hljs-built_in">test</span> string:<span class="hljs-string">&quot;org.deepin.demo&quot;</span> <br></code></pre></td></tr></table></figure><h2 id="demo2">demo2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">flatpak install com.belmoussaoui.Decoder  <br><br><span class="hljs-comment"># 默认过滤规则进入沙箱  </span><br>flatpak run --devel  --<span class="hljs-built_in">command</span>=bash com.belmoussaoui.Decoder  <br><br><span class="hljs-comment"># 发送测试命令 需要换成自己的demo服务，然后启动服务，预期结果dbus调用被拦截  </span><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.scorpio.test /test/objects com.scorpio.test.value.book <br><br><span class="hljs-comment"># 退出沙箱</span><br><br><span class="hljs-built_in">exit</span><br><br><span class="hljs-comment"># 设置过滤规则允许调用test，进入沙箱</span><br>flatpak run  --devel --<span class="hljs-built_in">command</span>=bash --talk-name=com.scorpio.test com.belmoussaoui.Decoder <br><br><span class="hljs-comment"># 预期结果dbus调用成功  </span><br><br>dbus-send --session --<span class="hljs-built_in">type</span>=method_call --print-reply --dest=com.scorpio.test /test/objects com.scorpio.test.value.book <br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">Flatpak原理-ostree <br><br>xdg-dbus-proxy - D-Bus proxy <br><br>Figure 7. Example of successful EXTERNAL authentication with successful negotiation of Unix FD passing <br><br>           C: AUTH EXTERNAL 31303030 <br><br>S: OK 1234deadbeef<br>             <br><br>C: NEGOTIATE_UNIX_FD<br>             <br><br>S: AGREE_UNIX_FD<br>             <br><br>C: BEGIN<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://stackoverflow.com/questions/35813093/creating-a-local-socket-in-a-custom-location-with-qt">https://stackoverflow.com/questions/35813093/creating-a-local-socket-in-a-custom-location-with-qt</a></li><li><a href="https://stackoverflow.com/questions/7753713/c-qt-write-to-unix-socket?rq=1">https://stackoverflow.com/questions/7753713/c-qt-write-to-unix-socket?rq=1</a></li><li><a href="https://stackoverflow.com/questions/52400159/reading-from-a-unix-domain-socket-qlocalsocket-on-qt">https://stackoverflow.com/questions/52400159/reading-from-a-unix-domain-socket-qlocalsocket-on-qt</a></li><li><a href="https://stackoverflow.com/questions/42085259/qt5-is-there-a-way-to-make-qlocalserver-listen-to-abstract-unix-socket">https://stackoverflow.com/questions/42085259/qt5-is-there-a-way-to-make-qlocalserver-listen-to-abstract-unix-socket</a></li><li><a href="https://codereview.qt-project.org/c/qt/qtbase/+/330032">https://codereview.qt-project.org/c/qt/qtbase/+/330032</a></li><li><a href="https://www.cnblogs.com/xiangtingshen/p/11063583.html">https://www.cnblogs.com/xiangtingshen/p/11063583.html</a></li><li><a href="https://dbus.freedesktop.org/doc/dbus-specification.html">https://dbus.freedesktop.org/doc/dbus-specification.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包管理</title>
    <link href="/linux/package/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/linux/package/%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="包管理">包管理</h1><h2 id="软件源">软件源</h2><ul><li><a href="https://pkgs.org/">https://pkgs.org/</a></li><li><a href="https://www.jianshu.com/p/84d07a78cd0f">Ubuntu的软件源格式详解</a></li><li><a href="http://mirrors.ustc.edu.cn/"><font color=Red>中国科学技术大学开源软件镜像</font></a></li><li><a href="http://mirrors.ustc.edu.cn/help/">USTC Mirror Help—USTC Mirror Help文档</a></li><li><a href="https://developer.aliyun.com/mirror/?spm=a2c6h.12873639.J_5404914170.29.2feb6235F6x30d">阿里云官方镜像站</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">Debian 镜像使用帮助-清华大学开源软件镜像站</a></li><li><a href="https://packages.debian.org/zh-cn/">Debian 搜索软件包</a></li><li><a href="https://www.debian.org/mirror/list"><font color=Red>Debian 全球镜像站</font></a></li><li><a href="https://packages.debian.org/bullseye/netselect-apt">netselect-apt 用于选择快速 Debian 镜像的速度测试器</a></li><li><a href="https://wiki.ubuntu.com/Debug%20Symbol%20Packages"><font color=Red>Ubuntu Debug Symbol Packages</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1637887">（转载）ubuntu 安装 dbgsym (debug-info)</a></li><li><a href="https://zhuanlan.zhihu.com/p/608493042">修复 Ubuntu 中的 “Key is stored in legacy trusted.gpg keyring” 问题 | Linux 中国</a></li></ul><h2 id="内核调试包">内核调试包</h2><ul><li><a href="https://github.com/gatieme/LDD-LinuxDeviceDrivers/blob/master/study/debug/tools/systemtap/01-install/README.md">Linux内核调试的方式以及工具集锦</a></li><li><a href="https://access.redhat.com/solutions/9907">如何下载或安装 RHEL 系统的内核调试信息包？</a></li><li><a href="https://blog.csdn.net/ZCShouCSDN/article/details/128188958"><font color=Red>Linux 之十八 Ubuntu 22.04 配置内核版本、GRUB 引导、远程桌面、包后缀（-dev、-dbg等）</font></a></li><li><a href="https://github.com/Mellanox/nv_peer_memory/issues/77">dpkg-buildpackage error</a></li></ul><h2 id="驱动">驱动</h2><ul><li><a href="https://packages.debian.org/bullseye/firmware-iwlwifi">软件包：firmware-iwlwifi（20210315-3） [non-free]</a></li><li><a href="https://linuxconfig.org/how-to-install-the-latest-amd-drivers-on-debian-10-buster">How to Install the Latest AMD Drivers on Debian 10 Buster</a></li></ul><h2 id="apt-dpkg-yum-rpm-brew">apt dpkg yum rpm brew</h2><ul><li><a href="https://mp.weixin.qq.com/s/4XXl-dcbH0eUqYcHwZYKxg"><font color=Red>五种常见 Linux 系统安装包管理工具中文使用指南</font></a></li><li><a href="https://mp.weixin.qq.com/s/c826iDRMNx2XLuT7qMKpyA">Linux基础-包管理工具yum和apt对比</a></li></ul><h2 id="debian">debian</h2><ul><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch02.zh-cn.html#_basic_package_management_operations_with_the_commandline">第 2 章 Debian 软件包管理</a></p></li><li><p><a href="https://www.toutiao.com/article/7190217952308757053/">apt remove和apt purge:有什么区别？</a></p></li><li><p><a href="https://www.cnblogs.com/thespace/p/12445252.html">apt update，apt upgrade和apt dist-upgrade的区别</a></p></li><li><p><a href="https://www.learndiary.com/2021/04/debian-deepin-upgrade/">sudo apt full-upgrade（也可以用 sudo apt dist-upgrade ，据我所知，它们效果是一样的）</a></p></li><li><p><a href="https://askubuntu.com/questions/81585/what-is-dist-upgrade-and-why-does-it-upgrade-more-than-upgrade">What is "dist-upgrade" and why does it upgrade more than "upgrade"?</a></p></li><li><p><a href="https://www.toutiao.com/article/7209575948562334247">dpkg常用命令总结</a></p></li><li><p><a href="https://blog.csdn.net/linuxvfast/article/details/117701825">Ubuntu系统下deb包的解压、打包、安装、卸载及常用命令</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1579495"><font color=Red>Debian软件包常用管理命令整理</font></a></p></li><li><p><a href="https://www.runoob.com/linux/linux-comm-apt.html">Linux apt命令</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44596606/article/details/87654398"><font color=Red>apt dpkg常用命令汇总</font></a></p></li><li><p><a href="https://blog.csdn.net/rookie_wei/article/details/122409853"><font color=Red>apt-cache madison与apt-cache search</font></a></p></li><li><p><a href="https://www.uc23.net/command/256.html">apt-cache (搜索软件包和软件包名称)</a></p></li><li><p><a href="https://linux.cn/article-12987-1.html">如何在基于 Ubuntu 或 Debian 的 Linux 发行版中查看一个软件包的依赖</a></p></li><li><p><a href="https://blog.csdn.net/weixin_51867896/article/details/121883910">列出ubuntu软件管理工具apt的一些用法(自由总结)</a></p></li><li><p><a href="https://blog.csdn.net/penglijiang/article/details/8553677">ubuntu 中软件重新安装卸载等操作_penglijiang的专栏-CSDN博客</a></p></li><li><p><a href="https://www.jianshu.com/p/a205f7a44b45">ubuntu No module named 'apt_pkg' - 简书 (jianshu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/presleyren/p/11011129.html">Ubuntu Error: No module named 'apt_pkg' 怎么办？ - ￣□￣ - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/6432015c52a6">Linux软件安装管理之——dpkg与apt-*详解</a></p></li><li><p><a href="https://blog.csdn.net/get_set/article/details/51276609">Ubuntu apt-get彻底卸载软件包_刘康的专栏-CSDN博客_apt 卸载</a></p></li><li><p><a href="https://www.cnblogs.com/EasonJim/p/7144017.html">Ubuntu通过apt-get安装指定版本和查询指定软件有多少个版本</a></p></li><li><p><a href="https://www.jianshu.com/p/9fd19418cf83">Ubuntu使用apt-file解决库或者文件缺失依赖</a></p></li><li><p><a href="https://www.cnblogs.com/kelamoyujuzhen/p/9728260.html">/etc/apt/sources.list 和 /etc/apt/sources.list.d</a></p></li></ul><h3 id="apt-代理">apt 代理</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/629584549">如何为 APT 命令设置代理 | Linux 中国</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt; /etc/apt/apt.conf.d/proxy.conf</span><br><span class="hljs-string">Acquire::http::Proxy &quot;http://127.0.0.1:7890&quot;;</span><br><span class="hljs-string">Acquire::https::Proxy &quot;http://127.0.0.1:7890&quot;;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure></p></li></ul><h3 id="gpg-error">GPG error</h3><ul><li><p><a href="https://faq.fydeos.com/recipes/solve-apt-get-gpg-error/">Linux（测试版）刷新软件包列表遇到 GPG 错误的解决方法</a></p></li><li><p><a href="http://www.cppblog.com/zhangyq/archive/2021/03/13/217627.html">debian更新清华源 GPG 错误：由于没有公钥，无法验证下列签名</a></p></li><li><p><a href="https://www.freesion.com/article/4440566650/">UBUNTU配置APT国内源</a></p></li><li><p><a href="https://www.cnblogs.com/saysmy/p/10390277.html">apt-get软件包管理命令 和 apt-key命令</a></p></li><li><p><a href="https://blog.csdn.net/e891377/article/details/108032882"><font color=Red>查看Deepin版本与Debian版本</font></a></p></li></ul><h2 id="centos">centos</h2><ul><li><a href="https://www.iplayio.cn/post/33066">CentOS8的DNF软件管理包教程：dnf如何安装/更新/删除软件包和软件包组</a></li><li><a href="https://blog.csdn.net/peng2hui1314/article/details/123930942">Centos 8 使用 yum 报错 Error: Cannot prepare internal mirrorlist: No URLs in mirrorlist</a></li><li><a href="https://blog.csdn.net/wykqh/article/details/123004620"><font color=Red>CentOS Linux 8 - AppStream 错误：为仓库 ‘appstream‘ 下载元数据失败 : Cannot prepare internal mirrorlist: No URLs</font></a></li><li><a href="https://www.myfreax.com/how-to-check-your-centos-version/">如何检查CentOS 版本</a></li><li><a href="https://linux.cn/article-12161-1.html">DNF 和 Yum 的区别，为什么 Yum 会被 DNF 取代？</a></li></ul><h2 id="macos">macos</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew / Linuxbrew镜像使用帮助</a></li><li><a href="https://blog.csdn.net/tzjvon/article/details/79648825">brew更换国内镜像源_tzjvon的博客-CSDN博客_brew更换镜像</a></li><li><a href="https://www.it1352.com/2270246.html">为什么brew安装需要sudo访问?</a></li></ul><h2 id="deb打包">deb打包</h2><ul><li><p><a href="https://docs.deepin.org/info/%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/%E9%80%82%E9%85%8D%E8%AE%A4%E8%AF%81/%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/%E6%BA%90%E7%A0%81%E6%89%93%E5%8C%85%E4%B8%BAdeb">源码打包为deb</a></p></li><li><p><a href="https://www.debian.org/doc/manuals/debmake-doc/">Debian 维护者指南</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39759247/article/details/125923234">deb编包笔记</a></p></li><li><p><a href="https://blog.csdn.net/dztaopao/article/details/9239399">deb包制作中control文件说明</a></p></li><li><p><a href="https://blog.csdn.net/yingyingququ/article/details/108848019">deb包安装/卸载/升级时，preinst, postinst, prerm, postrm的执行顺序</a></p></li><li><p><a href="https://www.ubuntukylin.com/news/1713-cn.html">干货分享 - Debian包的潜规则（脚本篇）</a></p></li><li><p><a href="https://github.com/realwujing/linux-learning/blob/master/deb/pbuilder%E6%95%99%E7%A8%8B.md"><font color=Red>pbuilder教程</font></a></p></li><li><p><a href="https://codeantenna.com/a/ZW9Zd5bFYi"><font color=Red>pbuilder编译构建工具分析</font></a></p></li><li><p><a href="https://www.cnblogs.com/zszmhd/p/3628446.html">pbuilder编译构建工具分析</a></p></li><li><p><a href="https://www.aftermath.cn//2022/03/06/debian-pbuilder/">debian pbuilder使用</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dh_make --createorig -sy <br>dpkg-source -b . <br>sudo pbuilder --build  --logfile log.txt --basetgz /var/cache/pbuilder/base.tgz --allow-untrusted --hookdir /var/cache/pbuilder/hooks   --debbuildopts -sa --use-network <span class="hljs-built_in">yes</span> --aptcache <span class="hljs-string">&quot;&quot;</span> --buildresult . *.dsc <br></code></pre></td></tr></table></figure></p></li></ul><h3 id="二进制软件包打包为deb">二进制软件包打包为deb</h3><ul><li><a href="https://docs.deepin.org/info/%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/%E9%80%82%E9%85%8D%E8%AE%A4%E8%AF%81/%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%89%93%E5%8C%85%E4%B8%BAdeb">二进制软件包打包为deb</a></li></ul><h3 id="desktop-文件">desktop 文件</h3><ul><li><a href="https://linux.cn/article-9199-1.html">为你的 Linux 应用创建 .desktop 文件</a></li><li><a href="https://blog.csdn.net/hebbely/article/details/102459754">Linux下 创建启动器（.Desktop文件)</a></li></ul><h2 id="rpm打包">rpm打包</h2><ul><li><a href="https://yanyixing.github.io/2018/09/25/rpm-mock/">通过mock来构建rpm包</a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124527338">从零开始构建 RPM 包</a></li></ul><h2 id="构建镜像">构建镜像</h2><ul><li><a href="https://github.com/realwujing/isobuilder">https://github.com/realwujing/isobuilder</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://blog.csdn.net/longma666666/article/details/81701802">dpkg-deb (子进程)：解压缩归档成员：lzma 错误：压缩数据已损坏</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>debmake</title>
    <link href="/linux/package/deb/debmake/"/>
    <url>/linux/package/deb/debmake/</url>
    
    <content type="html"><![CDATA[<h1 id="宿主机上打包deb教程">宿主机上打包deb教程</h1><ol type="1"><li><p>安装环境</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install dh-make<br></code></pre></td></tr></table></figure></p><p>根据debbian/control安装依赖：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linglong-repo<br>sudo apt build-dep .    <span class="hljs-comment"># 使用.报错时，可以将.替换成debian/control中的Source字段</span><br><span class="hljs-built_in">cd</span> ..<br></code></pre></td></tr></table></figure></p></li><li><p>根据版本号创建符合dh_make规范的<package>-<version>格式</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> linglong-repo linglong-repo-0.0.1<br></code></pre></td></tr></table></figure></p></li><li><p>dh_make生成debian模板文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linglong-repo-0.0.1<br>dh_make --createorig -sy<br></code></pre></td></tr></table></figure></p></li><li><p>dkpg-source生成构建源代码包</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg-source -b .<br></code></pre></td></tr></table></figure></p></li><li><p>crotrol文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">Source: linglong-repo   <span class="hljs-comment"># 源码名</span><br>Section: unknown<br>Priority: optional<br>Maintainer: yuanqiliang &lt;yuanqiliang@uniontech.com&gt;    <span class="hljs-comment"># 维护者</span><br>Build-Depends: debhelper (&gt;= 11), ostree, libostree-dev    <span class="hljs-comment"># 编译依赖</span><br>Standards-Version: 4.1.3<br>Homepage: https://linglong.dev<br><span class="hljs-comment">#Vcs-Browser: https://salsa.debian.org/debian/linglong-repo</span><br><span class="hljs-comment">#Vcs-Git: https://salsa.debian.org/debian/linglong-repo.git</span><br><br>Package: ll-repo-cli    <span class="hljs-comment"># deb包名，多个的话拆分，见下方ll-repo-server</span><br>Architecture: any<br>Depends: <span class="hljs-variable">$&#123;shlibs:Depends&#125;</span>, <span class="hljs-variable">$&#123;misc:Depends&#125;</span><br>Description: ll-repo-cli    <span class="hljs-comment"># 简介</span><br> ll-repo-cli    <span class="hljs-comment"># 稍微详细一点的简介</span><br><br>Package: ll-repo-server<br>Architecture: any<br>Depends: <span class="hljs-variable">$&#123;shlibs:Depends&#125;</span>, <span class="hljs-variable">$&#123;misc:Depends&#125;</span><br>Description: ll-repo-server<br> ll-repo-server<br></code></pre></td></tr></table></figure></p></li><li><p>rules文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/make -f</span><br><br>%:<br>    dh <span class="hljs-variable">$@</span><br><br>override_dh_shlibdeps:<br>    dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info<br><br>override_dh_auto_test:<br></code></pre></td></tr></table></figure></p></li><li><p>makefile</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHELL=/bin/bash<br><br>PREFIX = /usr   <span class="hljs-comment"># 模拟安装此包到debian/tmp目录下的相对路径前缀</span><br><br>all: build    <span class="hljs-comment"># all要放前面</span><br><br>install-swag:<br>    go install github.com/swaggo/swag/cmd/swag@v1.8.4<br><br>swag-doc: install-swag<br>    swag init --parseDependency --parseInternal -d cmd/ll-repo-server<br><br>build-vendor:<br>    go mod tidy<br>    go mod vendor<br><br>build: build-vendor<br>    CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ./bin/ll-repo-server -v ./cmd/ll-repo-server<br>    CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ./bin/ll-repo-cli    -v ./cmd/ll-repo-cli<br><br>run: build<br>    ./ll-repo-server<br><br>cli-run: build<br>    ./ll-repo-cli<br><br>docker:<br>    docker build \<br>        -t linglong-server:latest \<br>        -f Dockerfile .<br>        <br>install:    <span class="hljs-comment"># 安装命令</span><br>    install -Dm0755 bin/ll-repo-cli <span class="hljs-variable">$&#123;DESTDIR&#125;</span>/<span class="hljs-variable">$&#123;PREFIX&#125;</span>/bin/ll-repo-cli<br>    install -Dm0755 bin/ll-repo-server <span class="hljs-variable">$&#123;DESTDIR&#125;</span>/<span class="hljs-variable">$&#123;PREFIX&#125;</span>/bin/ll-repo-server<br><br>clean:<br>    <span class="hljs-built_in">rm</span> -rf bin vendor<br><br>.PHONY: docker install <span class="hljs-built_in">help</span> swag-doc<br></code></pre></td></tr></table></figure></p></li><li><p>ll-repo-cli.install文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">usr/bin/ll-repo-cli    <span class="hljs-comment"># ll-repo-cli 安装到系统/usr/bin/ll-repo-cli</span><br></code></pre></td></tr></table></figure></p><p>拆分步骤7中的install安装命令，将ll-repo-cli安装需要的内容剥离。</p></li><li><p>ll-repo-server.install文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">usr/bin/ll-repo-server    <span class="hljs-comment"># ll-repo-server 安装到系统/usr/bin/ll-repo-server</span><br></code></pre></td></tr></table></figure></p><p>拆分步骤7中的install安装命令，将ll-repo-server安装需要的内容剥离。</p><p>制作单个deb包无需步骤8、9。</p></li><li><p>changelog文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">linglong-repo (0.0.1-1) unstable; urgency=medium<br><br>* Initial release (Closes: #nnnn)  &lt;nnnn is the bug number of your ITP&gt;<br><br>-- unknown &lt;wujing@wujing-PC&gt;  Fri, 14 Oct 2022 17:36:33 +0800<br></code></pre></td></tr></table></figure></li><li><p>编译制作deb包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><br><span class="hljs-built_in">set</span> -x<br><br>dh_clean    <span class="hljs-comment"># 调用makefile中的clean命令</span><br><span class="hljs-built_in">rm</span> ../linglong-repo_0.0.1*.dsc ../linglong-repo_0.0.1*.xz -rf    <span class="hljs-comment"># 删除 dpkg-source -b . dh_make --createorig -sy 命令生成的源码压缩包</span><br>dh_make --createorig -sy    <span class="hljs-comment"># 生成debian目录</span><br>dpkg-source -b .    <span class="hljs-comment"># 生成构建源代码包</span><br>dpkg-buildpackage -uc -us    <span class="hljs-comment"># 编译制作deb包</span><br></code></pre></td></tr></table></figure></li></ol><p>命令与上方有所重复，写成shell脚本，只是为了提高效率。</p><ul><li><a href="https://www.debian.org/doc/manuals/debmake-doc/ch04.zh-cn.html#packaging-tarball">https://www.debian.org/doc/manuals/debmake-doc/ch04.zh-cn.html#packaging-tarball</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>deb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pbuilder教程</title>
    <link href="/linux/package/deb/pbuilder%E6%95%99%E7%A8%8B/"/>
    <url>/linux/package/deb/pbuilder%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="pbuilder教程">pbuilder教程</h1><ol type="1"><li><p>安装环境</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install pbuilder debootstrap devscripts dh-make<br></code></pre></td></tr></table></figure></p></li><li><p>pbuilder配置 以下路径任选其一</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">/etc/pbuilderrc<br>/root/.pbuilderrc<br></code></pre></td></tr></table></figure></p><p>将以下内容写入上述配置文件，上述路径任选其一即可，以uos v20 专业版为例：</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">MIRRORSITE=http://pools.uniontech.com/desktop-professional<br>DEBOOTSTRAPOPTS=(<br>    &#x27;--variant=buildd&#x27;<br>)<br></code></pre></td></tr></table></figure></p></li><li><p>创建pbuilder基础环境</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pbuilder create --distribution eagle --debootstrapopts --no-check-gpg<br></code></pre></td></tr></table></figure></p><p>如果报错如下： E: No such script: /usr/share/debootstrap/scripts/eagle E: debootstrap failed E: debootstrap.log not present W: Aborting with an error</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/debootstrap/scripts/<br><span class="hljs-built_in">cp</span> sid eagle<br></code></pre></td></tr></table></figure></p><p>需要额外添加仓库源可以<code>login</code>后添加<code>apt</code>仓库源：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pbuilder login --basetgz /var/cache/pbuilder/base.tgz --save-after-login<br></code></pre></td></tr></table></figure></p></li><li><p>下载源码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;http://ut004487@gerrit.uniontech.com/a/linglong&quot;</span><br><span class="hljs-built_in">cd</span> linglong<br>git checkout develop/snipe<br></code></pre></td></tr></table></figure></p><p>查看changelog版本号</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> debian/changelog<br></code></pre></td></tr></table></figure></p><p>版本号信息如下:</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">linglong (1.3.1-1) unstable; urgency=medium<br><br>    * fixed some bug.<br><br>    -- liujianqiang &lt;liujianqiang@uniontech.com&gt;  Wed, 27 Apr 2022 15:12:16 +0800<br><br>    linglong (1.3.0-1) unstable; urgency=medium<br><br>    * 1. fix link library failed when using cmake.<br>    * 2. fix adjust dependency checkout directory.<br></code></pre></td></tr></table></figure></p><p>根据版本号创建符合dh_make规范的<code>&lt;package&gt;-&lt;version&gt;</code>格式</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br><span class="hljs-built_in">cp</span> -r linglong linglong-1.3.1<br></code></pre></td></tr></table></figure></p></li><li><p>dh_make生成debian模板文件</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linglong-1.3.1<br>dh_make --createorig -sy<br></code></pre></td></tr></table></figure></p></li><li><p>dkpg-source生成构建源代码包</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg-source -b .<br></code></pre></td></tr></table></figure></p></li><li><p>使用pbuilder构建deb包</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br>sudo pbuilder --build  --logfile log.txt --basetgz /var/cache/pbuilder/base.tgz --allow-untrusted --hookdir /var/cache/pbuilder/hooks --use-network <span class="hljs-built_in">yes</span> --aptcache <span class="hljs-string">&quot;&quot;</span> --buildresult . --debbuildopts -sa *.dsc<br></code></pre></td></tr></table></figure></p></li></ol><h2 id="more">More</h2><p><a href="https://www.debian.org/doc/manuals/maint-guide/index.zh-cn.html">Debian 软件包制作流程</a> <a href="https://www.cnblogs.com/zszmhd/p/3628446.html">pbuilder编译构建工具分析</a> <a href="https://www.aftermath.cn//2022/03/06/debian-pbuilder/">debian pbuilder使用</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>deb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rpm-ostree compose tree</title>
    <link href="/linux/package/rpm-ostree/rpm-ostree%20compose%20tree/"/>
    <url>/linux/package/rpm-ostree/rpm-ostree%20compose%20tree/</url>
    
    <content type="html"><![CDATA[<h1 id="rpm-ostree-compose-tree">rpm-ostree compose tree</h1><p>基于Fedora-Workstation-Live-x86_64-28-1.1</p><p>rpm-ostree compose tree 用在server上。</p><p>https://pagure.io/fedora-atomic/tree/master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo /home/wujing/code/rpm-ostree/rpm-ostree compose tree --ex-unified-core --cachedir=cache --repo=/srv/centos-atomic/build-repo sig-atomic-buildscripts/centos-atomic-host.json<br></code></pre></td></tr></table></figure><p>VS Code 下以 root 用户调试程序</p><p>CentOS下sudo免密配置</p><p>https://vault.centos.org/7.0.1406/os/x86_64/RPM-GPG-KEY-CentOS-7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/pki/rpm-gpg<br>wget https://vault.centos.org/7.0.1406/os/x86_64/RPM-GPG-KEY-CentOS-7<br></code></pre></td></tr></table></figure><p>"args": ["compose", "tree", "--ex-unified-core", "--cachedir=/srv/centos-atomic/cache", "--repo=/srv/centos-atomic/build-repo", "/srv/centos-atomic/sig-atomic-buildscripts/centos-atomic-host.json"],</p><p>http://yum.baseurl.org/api/yum/yum/depsolve.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ostree_repo_prepare_transaction<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>rpm-ostree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rpm-ostree</title>
    <link href="/linux/package/rpm-ostree/rpm-ostree/"/>
    <url>/linux/package/rpm-ostree/rpm-ostree/</url>
    
    <content type="html"><![CDATA[<p># rpm-ostree</p><h2 id="官网">官网</h2><ul><li><p><a href="https://rpm-ostree.readthedocs.io/en/stable" class="uri">https://rpm-ostree.readthedocs.io/en/stable</a></p></li><li><p><a href="https://coreos.github.io/rpm-ostree/" class="uri">https://coreos.github.io/rpm-ostree/</a></p></li></ul><p>## 源码</p><ul><li><p><a href="https://github.com/coreos/rpm-ostree" class="uri">https://github.com/coreos/rpm-ostree</a></p></li><li><p><a href="https://lazka.github.io/pgi-docs/OSTree-1.0/mapping.html" class="uri">https://lazka.github.io/pgi-docs/OSTree-1.0/mapping.html</a></p></li><li><p><a href="https://lazka.github.io/pgi-docs/OSTree-1.0/index.html" class="uri">https://lazka.github.io/pgi-docs/OSTree-1.0/index.html</a></p></li><li><p><a href="https://ostreedev.github.io/ostree/reference/ostree-Root-partition-mount-point.html#ostree-sysroot-query-deployments-for" class="uri">https://ostreedev.github.io/ostree/reference/ostree-Root-partition-mount-point.html#ostree-sysroot-query-deployments-for</a></p></li><li><p><a href="https://ostreedev.github.io/ostree/reference/reference.html#api-index-full" class="uri">https://ostreedev.github.io/ostree/reference/reference.html#api-index-full</a></p></li><li><p><a href="https://support.huaweicloud.com/productdesc-cdn/cdn_01_0067.html">内容分发网络 CDN-文件下载加速</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43902588/article/details/108998894">OpenShift 4 - Fedora CoreOS (6) - 用rpm-ostree安装软件、升级回滚CoreOS_多恩斯基的博客-CSDN博客</a>  </p></li><li><p><a href="https://zdyxry.github.io/2021/05/22/OSTree-%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/">OSTree 背景介绍 | Yiran's Blog (zdyxry.github.io)</a></p></li><li><p><a href="https://blog.csdn.net/halcyonbaby/article/details/43500231">os-level版本控制工具_追寻神迹-CSDN博客_ostree</a></p></li><li><p><a href="https://blog.csdn.net/cumo3681/article/details/107416567">atomic_在Atomic Host上运行容器的10个任务_cumo3681的博客-CSDN博客</a></p></li><li><p><a href="https://www.ywnz.com/linuxxw/5534.html">为你详细介绍Fedora Silverblue版本，包括常见问题解答</a></p></li><li><p><a href="https://www.mankier.com/1/rpm-ostree">rpm-ostree - Man Page</a></p></li><li><p><a href="https://blog.csdn.net/cumo3681/article/details/107416567">atomic_在Atomic Host上运行容器的10个任务_cumo3681的博客-CSDN博客</a></p></li><li><p><a href="https://docs.fedoraproject.org/zh_Hans/fedora-silverblue/technical-information/">Silverblue 文件系统组织结构</a>  </p></li><li><p><a href="https://blog.csdn.net/ZLK1214/article/details/113727039">【解决办法】升级Fedora33后，屏幕分辨率无法随着VMware窗口大小的改变而改变，设置里面也没有1920x1080分辨率的选项</a></p></li><li><p><a href="https://blog.csdn.net/lsg9012/article/details/106117895">关于编译安装提示No package ** found时可能需配置pkg-config</a></p></li><li><p><a href="https://www.jianshu.com/p/17e777868d6b">Automake的使用</a></p></li><li><p><a href="https://www.jianshu.com/p/3f69197f9055">解剖automake和autoconf(autoreconf)</a></p></li><li><p><a href="https://pkgs.org/download/pkgconfig(polkit-gobject-1)">Pkgconfig(polkit-gobject-1) Download (RPM) (pkgs.org)</a></p></li><li><p><a href="https://blog.csdn.net/kongshuai19900505/article/details/79104442">autotools自动编译系列之三---autogen.sh实例</a></p></li><li><p><a href="https://blog.csdn.net/asbhunan129/article/details/88109632">Linux工具之autogen.sh</a></p></li><li><p><a href="https://stepfunc.io/blog/bindings/" class="uri">https://stepfunc.io/blog/bindings/</a></p></li><li><p><a href="https://cxx.rs/" class="uri">https://cxx.rs/</a></p></li><li><p><a href="https://plantuml.com/zh/" class="uri">https://plantuml.com/zh/</a></p></li><li><p><a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000" class="uri">http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000</a></p></li><li><p><a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/27/" class="uri">https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/27/</a></p></li></ul><table><thead><tr class="header"><th style="text-align: left;"> </th><th style="text-align: left;"> </th><th style="text-align: left;">解决问题</th><th style="text-align: left;">存在问题</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">软件分发</td><td style="text-align: left;">包管理器(RPM)</td><td style="text-align: left;">指定软件分发标准 元数据存储包版本、大小、说明... 安装、卸载、升级、校验... 将源代码打包成二进制软件包 自动查找依赖</td><td style="text-align: left;">RPM 大部分只能更新，不能回滚 依赖关系管理，对系统的基础包依赖导致系统更新困难 不同的发行版之间切换几乎不可能 使用RPM部署复杂应用困难 RPM 编写规则不友好</td></tr><tr class="even"><td style="text-align: left;">应用解决方式</td><td style="text-align: left;">SCLs(Software Collections)</td><td style="text-align: left;">不需要修改 RPM 本身（修改 spec 文件） 不会覆盖修改系统文件，/opt/rh/root （不影响系统更新） 可以依赖其他 SCL 允许同时存在多个版本，可按需卸载</td><td style="text-align: left;">依赖发行版（RHEL，CentOS，Fedora...）不同的发行版之间切换几乎不可能 使用RPM部署复杂应用困难 RPM 编写规则不友好</td></tr><tr class="odd"><td style="text-align: left;"> </td><td style="text-align: left;">Container</td><td style="text-align: left;">不会覆盖修改系统文件，container image 不依赖特定发行版 允许同时存在多个版本 container image</td><td style="text-align: left;">container 生命周期管理， Kubernetes 安全问题，大部分 container image 都存在各种 CVE(漏洞)</td></tr><tr class="even"><td style="text-align: left;">操作系统解决方式</td><td style="text-align: left;">OS 安装方式</td><td style="text-align: left;">不同的 Linux 发行版有不同的安装器进行安装： Redhat - Anaconda Ubuntu - Preseed Photon - photon-os-installer</td><td style="text-align: left;">所有应用都运行在 Container 中，Host OS(宿主机)仍可能安装部分软件，比如 Debug、硬件驱动等。 存在问题： 更新依赖问题 回滚困难 随着软件包增多，测试成本增加</td></tr><tr class="odd"><td style="text-align: left;"> </td><td style="text-align: left;">Active-backup(主动备份)</td><td style="text-align: left;">原子更新 目标版本（状态）明确</td><td style="text-align: left;">分区固定，需要衡量根分区大小 需要多个 rootfs 对应分区，浪费空间 需要重启生效 每次下载完整的 rootfs ，升级动作耗时长</td></tr><tr class="even"><td style="text-align: left;"> </td><td style="text-align: left;">rpm-ostree(OSTree)</td><td style="text-align: left;">基于 OSTree "git for OS" 原子升级，支持回滚 允许在多个 rootfs 之间切换 不可变文件系统 使用 RPM 构建 rootfs Package Layer ： 支持通过 rpm-ostree install 安装 RPM 原子更新 单一 repo 存储多个 rootfs 增量更新</td><td style="text-align: left;">需要重启生效 文件系统只读(除 /var 和 /etc)</td></tr></tbody></table><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20230419214153.png" alt="" /><figcaption>rpm-ostree分支</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">git checkout e6a65b80dfd380bd994cf7851c6ff28e992ab2f8<br><br>ostree cat REF info.json --repo repo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>rpm-ostree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rpm-ostree安装教程</title>
    <link href="/linux/package/rpm-ostree/rpm-ostree%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/linux/package/rpm-ostree/rpm-ostree%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="rpm-ostree安装教程">rpm-ostree安装教程</h1><p>Rpm-ostree通过autogen.sh自动生成makefile文件，点击下方链接了解autogen.sh。</p><p>Linux工具之autogen.sh</p><p>autotools自动编译系列之三---autogen.sh实例</p><h2 id="进入rpm-ostree代码目录下">1. 进入rpm-ostree代码目录下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> rpm-ostree<br></code></pre></td></tr></table></figure><h2 id="执行脚本autogen.sh">2. 执行脚本autogen.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install autoconf libtool automake<br>./autogen.sh<br></code></pre></td></tr></table></figure><h2 id="configure-error-package-requirements-gio-unix-2.0-were-not-met">3、configure: error: Package requirements (gio-unix-2.0) were not met:</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Package &#x27;gio-unix-2.0&#x27;, required by &#x27;virtual:world&#x27;, not found<br></code></pre></td></tr></table></figure><p>https://centos.pkgs.org/8/centos-baseos-x86_64/glib2-devel-2.56.4-10.el8_4.1.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install glib2-devel<br></code></pre></td></tr></table></figure><h2 id="package-json-glib-1.0-required-by-virtualworld-not-found">4. Package 'json-glib-1.0', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-appstream-x86_64/json-glib-devel-1.4.4-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install json-glib-devel<br></code></pre></td></tr></table></figure><h2 id="package-ostree-1-required-by-virtualworld-not-found">5. Package 'ostree-1', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/raven-extras-x86_64/ostree-libs-2021.2-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://pkgs.dyn.su/el8/extras/x86_64/ostree-libs-2021.2-1.el8.x86_64.rpm<br>dnf install ostree-libs-2021.2-1.el8.x86_64.rpm<br></code></pre></td></tr></table></figure><p>https://centos.pkgs.org/8/raven-extras-x86_64/ostree-devel-2021.2-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://pkgs.dyn.su/el8/extras/x86_64/ostree-devel-2021.2-1.el8.x86_64.rpm<br>dnf install ostree-devel-2021.2-1.el8.x86_64.rpm<br></code></pre></td></tr></table></figure><h2 id="package-rpm-required-by-virtualworld-not-found">6. Package 'rpm', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-baseos-x86_64/rpm-devel-4.14.3-14.el8_4.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install rpm-devel<br></code></pre></td></tr></table></figure><h2 id="package-polkit-gobject-1-required-by-virtualworld-not-found">7. Package 'polkit-gobject-1', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-baseos-x86_64/polkit-devel-0.115-11.el8_4.1.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install polkit-devel<br></code></pre></td></tr></table></figure><h2 id="package-libarchive-required-by-virtualworld-not-found">8. Package 'libarchive', required by 'virtual:world', not found</h2><p>https://centos.pkgs.org/8/centos-powertools-x86_64/libarchive-devel-3.3.3-1.el8.x86_64.rpm.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf --enablerepo=powertools install libarchive-devel<br></code></pre></td></tr></table></figure><h2 id="configure-error-cargo-is-required-for---enable-rust">9. configure: error: cargo is required for --enable-rust</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install rust cargo<br></code></pre></td></tr></table></figure><h2 id="config.status-error-in-rootcoderpm-ostree">10. config.status: error: in `/root/code/rpm-ostree':</h2><p>config.status: error: Something went wrong bootstrapping makefile fragments for automatic dependency tracking. Try re-running configure with the '--disable-dependency-tracking' option to at least be able to build the package (albeit without support for automatic dependency tracking).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./autogen.sh --disable-dependency-tracking<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>package</category>
      
      <category>rpm-ostree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>book</title>
    <link href="/linux/kernel/books/book/"/>
    <url>/linux/kernel/books/book/</url>
    
    <content type="html"><![CDATA[<h1 id="电子书">电子书</h1><ul><li><p><a href="https://xie.infoq.cn/article/207aab244ae44b9fc5c71a059">推荐一个 GitHub 的开源电子书仓库，值得收藏</a></p></li><li><p><a href="https://www.bookstack.cn/">书栈网·BookStack_程序员IT互联网开源编程书籍免费阅读与下载，取之于猿用之于猿！</a></p></li><li><p><a href="https://awesome-programming-books.github.io/">经典技术书籍PDF文件，涵盖：编程语言、计算机系统、网络协议、数据库、代码艺术、设计模式、算法与数据结构、系统架构、微服务、测试、程序员职业修炼等相关书籍。</a></p></li><li><p><a href="https://www.manongbook.com/linux/681.html">Linux多线程服务端编程：使用muduo C++网络库pdf电子书下载-码农书籍网 (manongbook.com)</a></p></li><li><p><a href="https://www.manongbook.com/linux/278.html">Linux高性能服务器编程pdf电子书下载-码农书籍网 (manongbook.com)</a></p></li><li><p><a href="https://www.manongbook.com/linux/689.html">UNIX环境高级编程（第3版）pdf电子书下载-码农书籍网 (manongbook.com)</a></p></li><li><p><a href="https://www.jb51.net/books/">计算机免费书籍,电子书,pdf电子书,电子书籍,网络书籍,电脑书籍下载,编程书籍,编程电子书下载 - 脚本之家 (jb51.net)</a></p></li><li><p><a href="http://chenshuo.com/book/">Linux 多线程服务端编程：使用 muduo C++ 网络库 (chenshuo.com)</a></p></li><li><p><a href="file:///C:/Users/wujing/OneDrive/code/book/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8muduo+C++%E7%BD%91%E7%BB%9C%E5%BA%93.pdf">Linux多线程服务端编程：使用muduo+C++网络库.pdf</a></p></li><li><p><a href="https://awesome-programming-books.github.io/linux/UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E7%AC%AC%E4%B8%89%E7%89%88).pdf"><font color=Red>UNIX环境高级编程(第三版).pdf</font></a></p></li></ul><h2 id="计算机考研">计算机考研</h2><ul><li><a href="https://blog.csdn.net/weixin_47312141/article/details/108910173">2021 天勤率辉计算机考研（附408）</a></li><li><a href="https://blog.csdn.net/qq_42724075/article/details/115498431">2022考研王道天勤PDF（数据结构、操作系统、计算机网络、计算机组成原理）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>books</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qemu</title>
    <link href="/linux/kernel/qemu/qemu/"/>
    <url>/linux/kernel/qemu/qemu/</url>
    
    <content type="html"><![CDATA[<h1 id="qemu">qemu</h1><ul><li><a href="https://www.cnblogs.com/LoyenWang/category/1828942.html"><font color=Red>Linux虚拟化</font></a></li></ul><h2 id="虚拟机">虚拟机</h2><ul><li><p><a href="http://c.biancheng.net/view/3842.html">服务器虚拟化组件有哪些？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/FVyzPVwwQ85AC4jlVZvF4g">ubuntu18.04上搭建KVM虚拟机环境超完整过程</a></p></li><li><p><a href="https://linux.how2shout.com/how-to-install-and-configure-kvm-on-debian-11-bullseye-linux/"><font color=Red>How to Install and Configure KVM on Debian 11 Bullseye Linux</font></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install virt-manager -y<br>sudo virsh net-list --all<br>sudo virsh net-start default<br>sudo virsh net-autostart default<br></code></pre></td></tr></table></figure><p>uos20-1060 arm64建议通过下方命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libvirt0 libvirt-daemon qemu virt-manager bridge-utils libvirt-clients python-libvirt qemu-efi uml-utilities virtinst qemu-system libvirt-daemon-system<br>sudo virsh net-list --all<br>sudo virsh net-start default<br>sudo virsh net-autostart default<br></code></pre></td></tr></table></figure></li><li><p><a href="https://stc214.github.io/posts/2021%E5%B9%B42%E6%9C%886%E6%97%A512/">如何从主机粘贴到KVM客户机？</a></p></li><li><p><a href="https://www.linuxsecrets.com/3883-copy-n-paste-in-kvm">Copy n Paste in (KVM) Kernel-based Virtual Machine</a></p></li><li><p><a href="https://blog.csdn.net/guoyinzhao/article/details/109642824">解决kvm安装Ubuntu虚机远程桌面无法复制粘贴问题</a></p></li><li><p><a href="https://blog.csdn.net/fcdm_/article/details/122150246">解决deepin虚拟机系统时间不正确的问题</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install systemd-timesyncd<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/u014389734/article/details/107481852">如何用命令行模式启动VMWare虚拟机</a></p></li><li><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/17/com.vmware.ws.using.doc/GUID-1F5B1F14-A586-4A56-83FA-2E7D8333D5CA.html">在 Linux 主机上安装 Workstation Pro</a></p></li><li><p><a href="https://waydo.xyz/soft/linux/ubuntu-vmware-workstation/">在Ubuntu 20.04上安装VMWare Workstation</a></p></li><li><p><a href="https://linux.cn/article-14444-1.html">用 archinstall 自动化脚本安装 Arch Linux</a></p></li><li><p><a href="https://blog.csdn.net/love906897406/article/details/126109464">Arch Linux图文安装教程（2022.08.01）</a></p></li><li><p><a href="https://blog.csdn.net/jianghu0755/article/details/129776841">KVM虚拟化解决方案系列之KVM管理工具-libvirt介绍篇</a></p></li></ul><h3 id="mac-osx">Mac OSX</h3><ul><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448"><font color=Red>使用Qemu在Mac上安装虚拟机</font></a></li><li><a href="https://www.arthurkoziel.com/qemu-ubuntu-20-04/">使用QEMU在macOS上创建Ubuntu 20.04桌面虚拟机</a></li><li><a href="https://www.arthurkoziel.com/running-virt-manager-and-libvirt-on-macos/">Running virt-manager and libvirt on macOS</a></li><li><a href="https://blog.csdn.net/weixin_30883777/article/details/95729678">Mac安装Linux的KVM管理工具virt-manager</a></li><li><a href="https://github.com/jeffreywildman/homebrew-virt-manager">homebrew-virt-manager</a></li><li><a href="https://blog.csdn.net/nbin_newby/article/details/120307866">macOS系统和mac装Windows系统开启虚拟化</a></li><li><a href="https://blog.csdn.net/MissMango0820/article/details/127398047">macOS | nvram boot-args的作用及设置方式</a></li><li><a href="https://github.com/kholia/OSX-KVM">GitHub - kholia/OSX-KVM: Run macOS on QEMU/KVM. With OpenCore + Big Sur + Monterey + Ventura support now! Only commercial (paid) support is available now to avoid spammy issues. No Mac system is required.</a></li><li><a href="https://zhuanlan.zhihu.com/p/399857241">Linux kernel debug on macOS 搭建可视化内核debug环境</a></li></ul><h2 id="qemu-1">qemu</h2><ul><li><p><a href="https://tinychen.com/20200405-centos-create-kvm-vm/">CentOS创建KVM虚拟机-在Edit→Preferences里面开启XML文件编辑功能</a></p></li><li><p><a href="https://blog.csdn.net/YuZhiHui_No1/article/details/53909925"><font color=Red>libvirt的virsh命令和qemu参数转换</font></a></p></li><li><p><a href="https://www.qemu.org/docs/master/system/invocation.html" class="uri">https://www.qemu.org/docs/master/system/invocation.html</a></p></li><li><p><a href="https://wiki.archlinuxcn.org/wiki/QEMU">QEMU (简体中文)</a></p></li><li><p><a href="https://www.toutiao.com/article/7194721406406787623">QEMU-KVM基本原理</a></p></li><li><p><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893"><font color=Red>Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/NsdNFhoP0QwjfhsQIeRWeQ"><font color=Red>虚拟化技术 — 硬件辅助的虚拟化技术</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/sn-TTwldA81uFuVn5NBMhg"><font color=Red>虚拟化技术 — QEMU-KVM 基于内核的虚拟机</font></a></p></li><li><p><a href="https://blog.csdn.net/lingshengxiyou/article/details/128665491">libvirt and QEMU 基础篇</a></p></li><li><p><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel/qemu"><font color=Red>https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel/qemu</font></a></p></li><li><p><a href="https://blog.csdn.net/onlylove_/category_11607029.html"><font color=Red>Linux内核调试</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/518032838">如何退出 QEMU 退出快捷键：Ctrl + a，然后按 x 键。</a></p></li></ul><h3 id="qemu-monitor">qemu monitor</h3><ul><li><a href="https://www.qemu.org/docs/master/system/monitor.html">QEMU Monitor</a></li><li><a href="https://blog.csdn.net/qq_43523618/article/details/106278245">QEMU monitor控制台使用详解</a></li></ul><h3 id="网络">网络</h3><ul><li><a href="https://blog.csdn.net/m0_43406494/article/details/124827927"><font color=Red>QEMU用户模式网络</font></a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/"><font color=Red>QEMU 网络配置</font></a></li><li><a href="https://blog.csdn.net/OnlyLove_/article/details/124536607"><font color=Red>Linux 内核调试 七：qemu网络配置</font></a></li><li><a href="https://www.jb51.net/article/97216.htm"><font color=Red>详解QEMU网络配置的方法</font></a></li><li><a href="https://mp.weixin.qq.com/s/aFOcuyypU1KdcdOecs8DdQ">详解：VirtIO Networking 虚拟网络设备实现架构</a></li><li><a href="https://mp.weixin.qq.com/s/oEDuaFs7DQM3zMCIx_CiFA">虚拟化技术 — Libvirt 异构虚拟化管理组件</a></li></ul><h2 id="x86_64下qemu虚拟x86_64">x86_64下qemu虚拟x86_64</h2><ul><li><p><a href="https://howardlau.me/programming/debugging-linux-kernel-with-vscode-qemu.html"><font color=Red>使用 VSCode + qemu 搭建 Linux 内核调试环境</font></a></p></li><li><p><a href="https://www.cnblogs.com/harmful-chan/p/12994693.html">Linux内核源码远程调试（3.16.84）</a></p></li><li><p><a href="https://blog.csdn.net/Breeze_CAT/article/details/123787636">[kernel]linux内核基础:版本、源码、编译与调试</a></p></li><li><p><a href="https://blog.csdn.net/rlk8888/article/details/122396219">[首发][Ubuntu]VSCode搭建Linux Kernel单步调试IDE环境</a></p></li><li><p><a href="https://blog.csdn.net/eydwyz/article/details/114019532"><font color=Red>使用VSCode + qemu搭建Linux内核调试环境</font></a></p></li><li><p><a href="https://bbs.huaweicloud.com/blogs/348654"><font color=Red>利用QEMU+GDB搭建Linux内核调试环境</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/KzFFkJHLzbNFixiELMjNWg">Linux内核调试方法</a></p></li><li><p><a href="https://www.cnblogs.com/fengyc/p/6114648.html"><font color=Red>基于 debootstrap 和 busybox 构建 mini ubuntu</font></a></p></li><li><p><a href="https://manpages.ubuntu.com/manpages/xenial/en/man1/debirf.1.html">https://manpages.ubuntu.com/manpages/xenial/en/man1/debirf.1.html</a></p></li><li><p><a href="https://www.jianshu.com/p/b4bae215e278">QEMU 实验（三）：根文件系统构建 (基于 Busybox)</a></p></li><li><p><a href="https://www.yisu.com/zixun/503146.html">怎么用QEMU搭建Linux kernel开发调试环境</a></p></li><li><p><a href="https://blog.csdn.net/birencs/article/details/126666827">嵌入式开发模拟器：qemu使用，仿真多种方式启动内核kernel (超详细，tftp/nfs等方式)</a></p></li><li><p><a href="https://www.bbsmax.com/A/WpdK7VrodV/">使用qemu模拟调试内核和debian根文件系统</a></p></li><li><p><a href="https://www.freesion.com/article/2442234327/">QEMU 文件系统制作：自己制作根目录和应用程序 + BUSYBOX</a></p></li><li><p><a href="https://wiki.ubuntu.com/ARM/RootfsFromScratch/QemuDebootstrap">QemuDebootstrap</a></p></li><li><p><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589"><font color=Red>内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</font></a></p></li><li><p><a href="https://blog.51cto.com/u_13731941/5399257"><font color=Red>使用 debootstrap 制作 ARM64 rootfs.cpio</font></a></p></li><li><p><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html"><font color=Red>debootstrap 制作根文件系统</font></a></p></li><li><p><a href="https://blog.csdn.net/xunknown/article/details/124521135">使用Buildroot + QEMU构建和运行Linux</a></p></li><li><p><a href="https://blog.csdn.net/xingkong0/article/details/100586485">制作基于beaglebonebalck的rootfs使用buildroot</a></p></li><li><p><a href="https://blog.csdn.net/qq_34160841/article/details/104891169">ubuntu下qemu使用：图文详解</a></p></li><li><p><a href="https://www.toutiao.com/article/7086755948068487687">QEMU调试Linux内核环境搭建</a></p></li><li><p><a href="https://www.toutiao.com/article/7182563085466108471">一文分析Linux虚拟化KVM-Qemu（概念篇）</a></p></li><li><p><a href="https://blog.csdn.net/kingtj/article/details/82952783"><font color=Red>qemu: usb存储设备仿真</font></a></p></li><li><p><a href="https://www.51cto.com/article/708013.html">如何在 Linux 中导出和导入 KVM 虚拟机</a></p></li><li><p><a href="https://blog.csdn.net/qq_40598297/article/details/121084904"><font color=Red>ARMv8架构下修改Linux内核并打开kvm硬件虚拟化支持（平台Firefly-rk3568）</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_41957544/article/details/105769697"><font color=Red>制作一个grub虚拟启动盘，在qemu下调试</font></a></p></li><li><p><a href="https://cdn.kernel.org/pub/linux/kernel/people/will/docs/qemu/qemu-arm64-howto.html">Running a full system stack under QEMUarm64</a></p></li><li><p><a href="https://www.cnblogs.com/bigsissy/p/11134802.html">qemu模拟vexpress开发板</a></p></li><li><p><a href="https://blog.csdn.net/aggresss/article/details/54946438"><font color=Red>第四期 QEMU调试Linux内核实验 《虚拟机就是开发板》</font></a></p></li></ul><h2 id="arm64下qemu虚拟arm64">arm64下qemu虚拟arm64</h2><ul><li><a href="https://blog.csdn.net/sinat_34833447/article/details/109765004">ARM平台检测是否支持虚拟化的几种常见方法</a></li><li><a href="https://www.txisfine.cn/archives/a0d5fa12">X86_64 环境下使用 QEMU 虚拟机安装 ARM 版 EulerOS 小记</a></li><li><a href="https://blog.csdn.net/Oliverlyn/article/details/105178832">利用qemu-system-aarch64调试Linux内核（arm64）</a></li><li><a href="https://zhuanlan.zhihu.com/p/345232459">QEMU搭建arm64 Linux调试环境</a></li></ul><h2 id="x86_64下qemu虚拟arm64">x86_64下qemu虚拟arm64</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/510289859">VSCode+GDB+Qemu调试ARM64 linux内核</a></li><li><a href="https://blog.csdn.net/fell_sky/article/details/119818112">编译arm64内核</a></li><li><a href="https://blog.csdn.net/shanruo/article/details/80474338">交叉编译arm64内核</a></li><li><a href="https://blog.csdn.net/ludaoyi88/article/details/115633849">交叉编译环境下对linux内核编译</a></li><li><a href="https://blog.csdn.net/jinking01/article/details/129580621">交叉编译linux内核并使用qemu运行</a></li></ul><h2 id="buildroot">buildroot</h2><ul><li><p><a href="https://blog.csdn.net/xunknown/article/details/124521135">使用Buildroot + QEMU构建和运行Linux</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/426026299">最新Buildroot2021.08.1搭建qemu环境</a></p></li><li><p><a href="https://blog.csdn.net/leacock1991/article/details/113730672"><font color=Red>从0开始使用QEMU模拟ARM开发环境之buildroot构建linux根文件系统</font></a></p></li><li><p><a href="https://blog.csdn.net/lsg19920625/article/details/130837469">Buildroot 切换到国内源</a></p></li><li><p><a href="https://buildroot.org/downloads/manual/manual.html"><font color=Red>The Buildroot user manual</font></a></p></li><li><p><a href="https://github.com/systemd/systemd/issues/20694">error: 'ARPHRD_MCTP' undeclared (first use in this function)#20694</a></p></li><li><p><a href="https://github.com/systemd/systemd/pull/20695/commits/67cd626399b0d02882ee00716c8bd31ba764c862">basic/linux: Sync if_arp.h with Linux 5.14 #20695</a></p></li><li><p>buildroot/board/qemu/aarch64-virt/readme.txt</p><p>qemu_aarch64_virt_defconfig：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append <span class="hljs-string">&quot;rootwait root=/dev/vda console=ttyAMA0&quot;</span> -netdev user,<span class="hljs-built_in">id</span>=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext4,<span class="hljs-keyword">if</span>=none,format=raw,<span class="hljs-built_in">id</span>=hd0 -device virtio-blk-device,drive=hd0<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="loongarch">loongarch</h2><ul><li><a href="https://blog.csdn.net/faxiang1230/article/details/120907896">龙芯虚拟化使用手册</a></li></ul><h2 id="显示虚拟化">显示虚拟化</h2><ul><li><a href="https://blog.csdn.net/tugouxp/article/details/134487575">QEMU显示虚拟化的几种选项</a></li></ul><h2 id="book">book</h2><ul><li><a href="https://github.com/yifengyou/learn-kvm">QEMU KVM学习笔记</a></li><li><a href="http://www.downcc.com/soft/317578.html">kvm虚拟化技术：实战与原理解析.pdf</a></li><li><a href="https://weread.qq.com/web/bookDetail/ec132be07263ffc1ec1dc10">QEMU/KVM源码解析与应用-李强编著-微信读书</a></li></ul><h2 id="more">More</h2><ul><li><a href="https://blog.csdn.net/Flora_xuan1993/article/details/89205922">Wine 开发者指导/架构概览</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件系统</title>
    <link href="/linux/kernel/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/linux/kernel/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="文件系统">文件系统</h1><ul><li><a href="https://mp.weixin.qq.com/s/d7xEBw_1-pVobuUEtuo4Ng">Linux存储软件栈到底有多复杂，存储软件栈全景概览</a></li></ul><h2 id="文件系统-1">文件系统</h2><ul><li><p><a href="https://www.toutiao.com/article/7255663767042966051"><font color=Red>快速了解操作系统的文件系统设计</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7153169952030818824">Linux文件系统、磁盘I/O是怎么工作的</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/PlFbtG0DBmGq-u1Syvjt0A">操作系统：文件系统的实现</a></p></li><li><p><a href="https://blog.csdn.net/jinking01/article/details/90669534"><font color=Red>linux的VFS详解</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247491770&amp;idx=1&amp;sn=cfaae8e44c49f9c82f0dc5b79d6c6f26&amp;chksm=f96b924ece1c1b58cacdebea43a7dfbf8f9a653504a813526c3fe7168f7fcf80e9886072c6c8&amp;scene=178&amp;cur_album_id=1502410824114569216#rd"><font color=Red>Linux虚拟文件系统四大对象：超级块、inode、dentry、file之间关系</font></a></p></li><li><p><a href="https://www.jxhs.me/2021/04/07/Linux%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"><font color=Red>Linux虚拟文件系统 _</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7199175341137592869">Linux-0.11 文件系统inode.c详解</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/PlFbtG0DBmGq-u1Syvjt0A">操作系统：文件系统的实现</a></p></li><li><p><a href="https://www.runoob.com/linux/linux-system-contents.html">Linux系统目录结构</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1791275">Linux根文件系统（rootfs原理详解）</a></p></li><li><p><a href="https://www.cnblogs.com/wipan/p/9269505.html">Initramfs 原理和实践</a></p></li><li><p><a href="https://blog.csdn.net/m0_38096844/article/details/97786761">busybox制作initramfs以及切换rootfs</a></p></li><li><p><a href="https://developer.aliyun.com/article/243822">linux中的rootfs/initrd/ramfs/initramfs</a></p></li><li><p><a href="https://www.toutiao.com/article/6702007158621340163/">一篇文章理解Linux操作系统中的块设备</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/8vg2-ADaFe4feepI7jCLCg"><font color=Red>存储基础 —— 磁盘 IO 为什么总叫你对齐？</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_40989769/article/details/127616352"><font color=Red>300行代码带你实现一个Linux文件系统</font></a></p></li></ul><h3 id="ext4">ext4</h3><ul><li><a href="https://blog.csdn.net/SweeNeil/article/details/88948646">Linux挂载ext4根文件系统为journal模式</a></li></ul><h2 id="proc">proc</h2><ul><li><a href="https://zh.wikipedia.org/wiki/Procfs">procfs 是 进程 文件系统 (file system) 的缩写</a></li><li><a href="https://www.cnblogs.com/cute/archive/2011/04/20/2022280.html">深入理解linux系统下proc文件系统内容</a></li><li><a href="https://blog.csdn.net/qq_34934140/article/details/121120348">Linux内存管理 smaps讲解</a></li></ul><h2 id="overlayfs">overlayfs</h2><ul><li><a href="https://blog.csdn.net/feelabclihu/article/details/120793237"><font color=Red>Linux overlayfs文件系统介绍</font></a></li><li><a href="https://blog.frognew.com/2021/07/relearning-container-32.html">重学容器32: 理解容器文件系统OverlayFS</a></li><li><a href="https://zhuanlan.zhihu.com/p/473970436">Overlayfs文件系统简介</a></li><li><a href="https://blog.csdn.net/luckyapple1028/article/details/77916194">深入理解overlayfs（一）：初识</a></li><li><a href="https://www.cnblogs.com/handwrit2000/p/12871493.html">docker 镜像分层原理</a></li><li><a href="https://www.jianshu.com/p/abc5524ac18c">Linux fuse用户态文件系统及其libfuse</a></li><li><a href="https://blog.51cto.com/u_15015138/2557244">吴锦华/明鑫: 用户态文件系统(FUSE)框架分析和实战</a></li><li><a href="https://www.cnblogs.com/sky-heaven/p/14326532.html">使用Squashfs和Overlayfs提高嵌入式Linux文件系统可靠性【转】</a></li></ul><h2 id="fuse">fuse</h2><ul><li><a href="https://www.zido.site/blog/2021-11-27-filesystem-in-user-space/">用户态文件系统详解</a></li><li><a href="https://xie.infoq.cn/article/38bc0476d6f5cd2bb9cf668f2">自制文件系统 —— 1 什么文件系统</a></li><li><a href="https://xie.infoq.cn/article/655c0893ed150ff65f2b7a16f">自制文件系统 —— 02 开发者的福音，FUSE 文件系统</a></li><li><a href="https://blog.csdn.net/kongxinsun/article/details/79587305">Android Fuse and Runtime Permissions</a></li><li><a href="https://c4pr1c3.github.io/cuc-mis/chap0x06/main.html">第六章 安卓系统访问控制策略与机制</a></li><li><a href="https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn">Android 中的权限</a></li><li><a href="https://my.oschina.net/u/4258425/blog/3234424">Android 操作权限大全(已归纳分类)</a></li><li><a href="https://source.android.com/devices/storage/fuse-passthrough">FUSE Passthrough</a></li><li><a href="https://www.cnblogs.com/chengmo/archive/2010/10/25/1857775.html">linux /dev常见特殊设备介绍与应用[loop,null,zero,full,random]</a></li></ul><h2 id="文件描述符">文件描述符</h2><ul><li><a href="https://blog.csdn.net/yushuaigee/article/details/107883964">彻底弄懂 Linux 下的文件描述符（fd）_yushuaigee的博客-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247486354&amp;idx=2&amp;sn=9147d5ad7c61d61dd9450dd4f084c37e&amp;chksm=f9687966ce1ff070a4e9950b5bf08f357496385002152d53090f073031f8b5eafd2043c86b0e&amp;scene=178&amp;cur_album_id=1502410824114569216#rd">手把手教Linux驱动4-进程、文件描述符、file、inode关系详解</a></li><li><a href="https://blog.csdn.net/llkkcc13/article/details/98508861">linux进程间描述符的传递（sendmsg和recvmsg）</a></li><li><a href="http://c.biancheng.net/view/3066.html">Linux文件描述符到底是什么？</a></li><li><a href="https://m.php.cn/article/491720.html">linux fd是什么</a></li><li><a href="https://www.toutiao.com/article/6912612534642065933/">Linux文件系统的四大对象</a></li><li><a href="https://blog.csdn.net/genzld/article/details/86564821">查看Linux最大文件描述符数</a></li><li><a href="https://blog.csdn.net/zhuxiaoping54532/article/details/107331565">Linux 文件操作：同一进程、线程打开同一个文件</a></li><li><a href="https://blog.csdn.net/weixin_47397155/article/details/123356806">文件细节操作简述（LInux应用编程篇）</a></li><li><a href="https://blog.csdn.net/shengnan89/article/details/124318111">Linux应用编程之多次打开同一个文件</a></li></ul><h2 id="fat">fat</h2><ul><li><a href="https://www.kernel.org/doc/html/latest/filesystems/vfat.html">https://www.kernel.org/doc/html/latest/filesystems/vfat.html</a></li><li><a href="https://softsolder.com/2018/01/31/vfat-time-zone-offset-correction/">VFAT Time Zone Offset Correction</a></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/WXWorkCapture_16945050891600.png" alt="" /><figcaption>sudo mount -t vfat -o tz=UTC,time_offset=$((8*60)) /dev/sdb4 /media/uos/7879-F3D4</figcaption></figure><h2 id="nfs">NFS</h2><ul><li><p><a href="https://www.cnblogs.com/lizhuming/p/13946107.html"><font color=Red>【linux】挂载NFS网络文件系统教程</font></a></p></li><li><p><a href="https://blog.51cto.com/atong/1343950"><font color=Red>NFS原理详解 原创</font></a></p></li><li><p><a href="https://blog.51cto.com/u_15127687/4569026">挂载NFS网络文件系统教程</a></p></li><li><p><a href="https://www.myfreax.com/how-to-mount-an-nfs-share-in-linux/">如何在Linux中挂载NFS共享</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1720669">Centos7安装配置NFS服务和挂载教程(推荐)</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mount -t nfs 10.20.64.70:/storage/linglong linglong-10.20.64.70<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="nas">NAS</h2><ul><li><a href="http://www.92nas.com/forum.php?mod=viewthread&amp;tid=352">NAS常见的访问协议SMB、NFS、FTP、WebDav、DLNA</a></li><li><a href="https://www.bufeishi.cn/37456.html">nas常用协议有哪些？</a></li></ul><h2 id="disk">disk</h2><ul><li><a href="https://www.toutiao.com/article/7210784993738736139">linux之分区与挂载</a></li><li><a href="https://www.toutiao.com/article/7167549285146444323/"><font color=Red>Linux为啥文件删除了，df看到磁盘还是100%</font></a></li><li><a href="https://blog.csdn.net/u010867294/article/details/78107280">Ubuntu Linux 永久挂载(mount)分区</a></li><li><a href="https://mp.weixin.qq.com/s/Q9xkgDGvz_70WwD0N7ivJg">Linux 磁盘空间被吃掉了？这样排查不背锅！</a></li><li><a href="https://mp.weixin.qq.com/s/vAkvlM6ntP7tKWA9UsoRDA"><font color=Red>5 款可替代 du 命令的工具！</font></a></li><li><a href="https://dev.yorhel.nl/ncdu">NCurses Disk Usage磁盘空间</a></li><li><a href="https://www.cnblogs.com/iconfig/p/4863063.html">Linux中查看各文件夹大小命令：du -h max-depth=1 - comb - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/qq_29798135/article/details/80307553">linux查看文件大小信息,df -h和du -sh查询命令查询结果不一样_99@小程-CSDN博客</a></li><li><a href="https://www.toutiao.com/article/7103363207997260292">Linux中可以随时扩容的逻辑卷</a></li><li><a href="https://www.junmajinlong.com/linux/lvm/">LVM(Logical Volume Manager)可以让分区变得弹性，可以随时随地的扩大和缩小分区大小</a></li><li><a href="https://blog.csdn.net/JangBingYang/article/details/129407736">deepin系统维护（系统扩容）deepin live</a></li><li><a href="https://www.ventoy.net/cn/index.html">新一代多系统启动U盘解决方案</a></li><li><a href="https://zhuanlan.zhihu.com/p/361447843">新一代多系统启动U盘 Ventoy 使用指南</a></li></ul><h2 id="启动盘">启动盘</h2><ul><li><a href="https://linux.cn/article-15052-1.html">U 盘启动盘创建工具 Rufus 在 Linux 上不能使用？这里有 6 个替代品</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>systemd</title>
    <link href="/linux/kernel/systemd/"/>
    <url>/linux/kernel/systemd/</url>
    
    <content type="html"><![CDATA[<h1 id="systemd">systemd</h1><ul><li><p><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html"><font color=Red>Systemd 入门教程：命令篇</font></a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html"><font color=Red>Systemd 入门教程：实战篇</font></a></p></li><li><p><a href="https://blog.csdn.net/wentian901218/article/details/117811137">＜systemd问题定位手段＞</a></p><p>systemd日志输出到串口控制台：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemd.log_level=debug systemd.log_target=console console=ttyS0,115200<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="配置文件编写">配置文件编写</h2><ul><li><p><a href="https://www.junmajinlong.com/linux/systemd/service_1/"><font color=Red>systemd服务配置文件编写(1)</font></a></p></li><li><p><a href="https://www.junmajinlong.com/linux/systemd/service_2/"><font color=Red>systemd service之：服务配置文件编写(2)-使用target组合多个服务</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/1aYloTgM5c4riS0KVWKNdA">Linux 使用 Systemd 管理进程服务，划重点~</a></p></li><li><p><a href="https://www.cnblogs.com/cxyc005/p/13323116.html">systemctl管理的active(exited)状态说明</a></p></li><li><p><a href="https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/User_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"><font color=Red>systemd 用户级别</font></a></p></li></ul><h2 id="日志">日志</h2><ul><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch03.zh-cn.html#_the_system_message"><font color=Red>表 3.5. 典型的 journalctl 命令片段列表</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/410995772"><font color=Red>Linux系统查看日志命令journalctl的一些用法</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7200566974173151802">如何使用 journalctl 查看和分析 systemd 日志（附实例）</a></p></li><li><p><a href="https://www.jianshu.com/p/3b11a2b7c746">rsyslog服务及Linux系统日志简介</a></p></li><li><p><a href="https://kifarunix.com/enable-rsyslog-logging-on-debian-12/">Enable Rsyslog Logging on Debian 12</a></p></li><li><p><a href="https://blog.csdn.net/qq_45225437/article/details/104294044">Linux系统中的日志管理——journal、rsyslog、timedatectl、时间同步</a></p></li></ul><h2 id="swap">swap</h2><ul><li><a href="https://developer.aliyun.com/article/597885">永久关闭linux swap</a></li><li><a href="https://blog.51cto.com/6923450605400/735323">关闭SWAP分区</a></li><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.swap.html">systemd.swap — Swap unit configuration</a></li><li><a href="https://cnzhx.net/blog/disable-swap-in-opensuse-tumbleweed/">openSUSE Tumbleweed 中禁用 SWAP</a></li><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.swap.html">openSUSE Tumbleweed 中禁用 SWAP</a></li></ul><h2 id="reload">reload</h2><ul><li><a href="https://www.cnblogs.com/usmile/p/13065594.html">Linux Systemd 详细介绍: Unit、Unit File、Systemctl、Target</a></li><li><a href="https://www.cnblogs.com/sparkdev/p/8472711.html">linux systemctl 命令</a></li></ul><h2 id="启动顺序">启动顺序</h2><ul><li><p><a href="https://blog.csdn.net/qq_31442743/article/details/118571723"><font color=Red>systemd服务启动顺序分析工具</font></a></p></li><li><p><a href="https://blog.csdn.net/rikeyone/article/details/108097837">systemd启动流程分析</a></p></li><li><p><a href="https://www.jinbuguo.com/systemd/systemd-analyze.html"><font color=Red>输出单元间的依赖关系图</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install graphviz<br>systemd-analyze dot <span class="hljs-string">&quot;lightdm.service&quot;</span> | dot -Tsvg &gt; systemd.svg<br></code></pre></td></tr></table></figure></p></li></ul><h2 id="非图形界面">非图形界面</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/344347732">ubuntu不启动图形界面</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://wiki.archlinux.org/title/XDG_Autostart">XDG Autostart</a></li></ul><h3 id="chkconfig">chkconfig</h3><ul><li><a href="https://www.cnblogs.com/airdot/p/9688530.html">ubuntu-18.04设置开机启动脚本</a></li><li><a href="https://www.cnblogs.com/Areas/p/13439000.html">Linux Ubuntu 20.04 —添加开机启动(服务/脚本)</a></li><li><a href="https://www.cnblogs.com/dongruiha/p/9941667.html">Ubuntu安装sysv-rc-conf配置开机启动服务</a></li><li><a href="https://www.cnblogs.com/zfying/archive/2013/03/12/2955710.html">centos开机启动项设置命令：chkconfig</a></li></ul><h4 id="service">service</h4><ul><li><a href="https://www.jianshu.com/p/ffe6990570d9">Linux中的systemctl和service</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>network</title>
    <link href="/linux/kernel/network/"/>
    <url>/linux/kernel/network/</url>
    
    <content type="html"><![CDATA[<h1 id="network">network</h1><ul><li><a href="https://mp.weixin.qq.com/s/SVscsnpOAtsZ6IBk34AYug">通俗理解数据中心CPU和GPU之后的第三颗关键芯片“DPU”</a></li></ul><h2 id="计算机网络">计算机网络</h2><ul><li><p><a href="https://www.cnblogs.com/wuwuyong/p/12198928.html">计算机网络常见面试题</a></p></li><li><p><a href="https://www.cnblogs.com/inception6-lxc/p/9152691.html">计算机网络常见面试题</a></p></li><li><p><a href="https://www.toutiao.com/article/7194724931555607100">字节一面：“为什么网络要分层？每一层的职责、包含哪些协议？”</a></p></li><li><p><a href="https://github.com/balloonwj/CppGuide">高性能服务器开发</a></p><ul><li><a href="https://balloonwj.github.io/cpp-guide-web/">在线阅读站点1：https://balloonwj.github.io/cpp-guide-web/</a></li><li><a href="http://balloonwj.gitee.io/cpp-guide-web/">在线阅读站点2：http://balloonwj.gitee.io/cpp-guide-web/</a></li><li><a href="http://101.37.25.166/blog/">备份站点：http://101.37.25.166/blog/</a></li></ul></li></ul><h2 id="socket">socket</h2><ul><li><a href="http://m.biancheng.net/socket/">socket编程入门：1天玩转socket通信技术（非常详细）</a></li><li><a href="http://m.biancheng.net/view/2349.html">socket缓冲区以及阻塞模式</a></li><li><a href="https://blog.csdn.net/summer_fish/article/details/121740570"><font color=Red>Socket缓冲区</font></a></li><li><a href="https://zhuanlan.zhihu.com/p/486140420">Ubuntu 设置Socket缓冲区大小</a></li><li><a href="https://os.51cto.com/article/682138.html"><font color=Red>Linux fd 系列 — socket fd 是什么？</font></a></li><li><a href="https://mp.weixin.qq.com/s/6fxS9GDdKOIkKASiz0e07Q">Linux内核 | socket底层的来龙去脉</a></li><li><a href="https://mp.weixin.qq.com/s/0eomyTaKWVeJbryIEdo1ug">如何学习 Linux 内核网络协议栈</a></li></ul><h3 id="netlink">Netlink</h3><ul><li><a href="https://mp.weixin.qq.com/s/CMWxPcJzoN6TlDypaB4kXA">Linux用户空间与内核空间通信(Netlink通信机制)</a></li><li><a href="https://mp.weixin.qq.com/s/odS7qoVGrtOgSt99o5hw0g">深入了解Linux netlink机制：实现高性能网络通信</a></li></ul><h2 id="select">select</h2><ul><li><a href="https://www.cnblogs.com/skyfsm/p/7079458.html">Linux编程之select</a></li></ul><h2 id="epoll">epoll</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/rpk0QmNfNiUoUH1fuDUpuA">Linux 高性能服务 epoll 的本质，真的不简单（含实例源码）</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/63179839"><font color=Red>如果这篇文章说不清epoll的本质，那就过来掐死我吧！ （1） - 知乎 (zhihu.com)</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/64138532">如果这篇文章说不清epoll的本质，那就过来掐死我吧！ （2） - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/64746509">如果这篇文章说不清epoll的本质，那就过来掐死我吧！ （3） - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://blog.csdn.net/songchuwang1868/article/details/89877739">Epoll的本质（内部实现原理）</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1636224">epoll LT 模式和 ET 模式详解（文末赠书） - 云+社区 - 腾讯云 (tencent.com)</a></p></li><li><p><a href="https://www.cnblogs.com/lojunren/p/3856290.html">Linux下的I/O复用与epoll详解</a></p></li><li><p><a href="https://blog.csdn.net/wendy_keeping/article/details/76577770">epoll源码剖析_wendy_keeping的博客-CSDN博客</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/tu7ovS2xO6ju-H5gB8TNCw">盘点Linux Epoll那些致命弱点</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1005481">大话 Select、Poll、Epoll - 云+社区 - 腾讯云 (tencent.com)</a></p></li></ul><h2 id="libevent">libevent</h2><ul><li><p><a href="https://www.bookstack.cn/read/libevent/450ef2232c710e15.md">Libevent深入浅出-《Libevent深入浅出》-书栈网·BookStack</a></p></li><li><p><a href="https://www.bookstack.cn/read/libevent/450ef2232c710e15.md">Libevent深入浅出· libevent深入浅出- Gitbooks</a></p></li><li><p><a href="https://blog.csdn.net/none123java321/article/details/113134499">libevent深入浅出_none123java321的博客-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/lfsblack/p/5498556.html">libevent源码深度剖析</a></p></li><li><p><a href="https://blog.csdn.net/Lemon_tea666/article/details/92637297">详解libevent网络库（一）-框架的搭建</a></p></li><li><p><a href="https://blog.csdn.net/Lemon_tea666/article/details/92797520">详解libevent网络库（二）-即时聊天通讯</a></p></li><li><p><a href="https://blog.csdn.net/y396397735/article/details/50684558">Linux网络编程 socketpair的使用</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/73u2kO43gGp0BCHncQO0ng">一文讲懂什么是vlan、三层交换机、网关、DNS、子网掩码、MAC地址</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247501617&amp;idx=2&amp;sn=460849b920d167dba10f7c4ad1fd927a&amp;chksm=f96bb5c5ce1c3cd30bdfe24e10b07d227d45c1d1e9cb64eeabae977eb62f7203618740a88b5e&amp;scene=178&amp;cur_album_id=1598710257097179137#rd">46张图带你了解网络传输、WIFI、以太网协议和网络寻址</a></p></li><li><p><a href="https://bbs.huaweicloud.com/blogs/147408">解析：单播、广播和组播的区别</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/2znyxjMUqpH9qjqCqTd69g">「linux」Socket缓存是如何影响TCP性能的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/6uuL-oq5FCIMTER1M9Dnmg">Linux 网络性能的 15 个优化建议！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cqmZX32TK50e7Ix_Uz_HoA">虾皮二面：既然有 HTTP 协议，为什么还要有 RPC?</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cqmZX32TK50e7Ix_Uz_HoA">虾皮二面：既然有 HTTP 协议，为什么还要有 RPC?</a></p></li></ul><h2 id="io模型">IO模型</h2><ul><li><a href="https://www.jianshu.com/p/486b0965c296">聊聊Linux 五种IO模型</a></li><li><a href="https://cloud.tencent.com/developer/article/1901999">深入理解Linux I/O系统</a></li><li><a href="http://www.daileinote.com/computer/linux_sys/10">linux文件io缓冲</a></li><li><a href="https://mp.weixin.qq.com/s/0aC4z2yl3n6kQ2PTt-aPNw">Linux 实现原理 — I/O 处理流程与优化手段</a></li><li><a href="https://blog.csdn.net/chenxiyuehh/article/details/90577631">【Linux】—— Linux下的文件缓冲区</a></li><li><a href="https://www.cnblogs.com/eason-liu/p/8053558.html">[基础]同步消息和异步消息传递的区别？</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;mid=2247485708&amp;idx=1&amp;sn=d7c8bec26de6ddcaaff49eac0766dc87&amp;source=41#wechat_redirect">终于明白了，一文彻底理解I/O多路复用</a></li><li><a href="https://mp.weixin.qq.com/s/uJLw9tCUANNhWlFAIZfDIA">这次答应我，一举拿下I/O多路复用！</a></li></ul><h2 id="reactor">reactor</h2><ul><li><p><a href="https://www.toutiao.com/article/7171814310321291810/"><font color=Red>一文图解高性能网络架构：Reactor和Proactor</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7196173859631219238"><font color=Red>​网络 IO 演变发展过程和模型介绍</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/kyEYNLtpsLZHK9n3j1pO0w">3000字|程序员应如何理解Reactor模式？</a></p></li><li><p><a href="https://www.jianshu.com/p/188ef8462100">Reactor模式详解＋源码实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Z07Hc9SRfGz6n8XhFHGVyA">高并发高性能服务器是如何实现的</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/xARtnqFQmi-Hzw01m__KQA">从小白到高手，你需要理解同步与异步(内含10张图)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTYzODM4Mw==&amp;mid=2247485706&amp;idx=1&amp;sn=bc5d6e4bf9ee5dccef520e5b2051d943&amp;source=41#wechat_redirect">读取文件时，程序经历了什么？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/AqTcVaxElxgwVjCPcxAFDA">Mac 地址会重复吗？Mac 地址也会耗尽吗？</a></p></li><li><p><a href="https://www.toutiao.com/article/7204305085835346467">要理解网络，其实不就是理解这三张表吗</a></p></li><li><p><a href="https://www.toutiao.com/article/7166152475840561704/">为什么要使用 TCP keepalive？C/C++代码实现TCP keepalive</a></p></li><li><p><a href="https://www.toutiao.com/article/7191463571258343948/">一文读懂物联网MQTT协议之基础特性篇</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Qafa3nE_vTzdl1jGTiUaMw">为什么HTTPS是安全的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/siG1XMxQnduBWdY-hvQO8g">刚插上网线，电脑怎么知道自己的IP是什么？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/f19jaSwKA0oTE87yAfyb2w">一张图了解八种流行的网络协议</a></p></li></ul><h2 id="phy">phy</h2><ul><li><a href="https://mp.weixin.qq.com/s/jcolfo4bvKPS-eRdeCkRCg">Linux 实现原理 — 网卡驱动程序初始化流程</a></li><li><a href="https://blog.csdn.net/qq_40715266/article/details/124095801">PHY芯片快速深度理解（持续更新中……）</a></li><li><a href="https://mp.weixin.qq.com/s/VQWEkycARPQ2pCpDxx_Rnw">【网络驱动】ifconfig up 后内核网络驱动做了什么？</a></li></ul><h2 id="扫描工具">扫描工具</h2><ul><li><a href="https://mp.weixin.qq.com/s/HnerPmV34KWKLADVsEx5gA">【工具更新】内网大杀器Fscan</a></li></ul><h2 id="内网穿透">内网穿透</h2><ul><li><a href="https://www.toutiao.com/article/7317562665730097704/">内网穿透详解</a></li></ul><h2 id="抓包">抓包</h2><ul><li><p><a href="https://blog.csdn.net/github_40044758/article/details/111290919">wireshark过滤http包</a></p></li><li><p><a href="https://cn.linux-console.net/?p=8295"><font color=Red>如何在 Linux 上使用 Wireshark 过滤器</font></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http.host==<span class="hljs-string">&quot;www.baidu.com&quot;</span><br></code></pre></td></tr></table></figure><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/20240117135816.png" alt="" /><figcaption>http.host=="www.baidu.com"</figcaption></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>Java</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程管理</title>
    <link href="/linux/kernel/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/linux/kernel/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="进程管理">进程管理</h1><h2 id="elf">ELF</h2><ul><li><a href="https://www.cnblogs.com/qscfyuk/p/11697816.html">linux下的ELF格式分析</a></li><li><a href="https://blog.codekissyoung.com/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83"><font color=Red>程序运行环境</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1449872">认识目标文件结构 - 云+社区 - 腾讯云 (tencent.com)</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247491839&amp;idx=1&amp;sn=e9a229184f158759c6648eed708d9598&amp;chksm=f96b920bce1c1b1d8546e659e195575a6014643f48cfe21cedc7b6108f655cfdca7580cfd02d&amp;scene=21#wechat_redirect"><font color=Red>扒一扒ELF文件</font></a></li><li><a href="https://blog.csdn.net/xj178926426/article/details/72825630#commentBox">Linux ELF文件格式分析</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzAwODYyNQ==&amp;mid=2247485059&amp;idx=1&amp;sn=057760b7cbe9a37d4312ec74dcb8a196&amp;scene=21#wechat_redirect">Linux系统中编译、链接的基石-ELF文件：扒开它的层层外衣，从字节码的粒度来探索</a></li></ul><h3 id="elf加载">ELF加载</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/287863861">ELF文件加载过程</a></p></li><li><p><a href="https://blog.csdn.net/gatieme/article/details/51628257">ELF文件的加载过程(load_elf_binary函数详解)Linux进程的管理与调度（十三）</a></p></li><li><p><a href="https://www.toutiao.com/article/7199638660437082639/"><font color=Red>Linux 可执行文件程序载入和执行过程</font></a></p></li><li><p><a href="https://blog.csdn.net/faxiang1230/article/details/105647915/">linux下ELF的加载运行</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1758586">Linux 修改 ELF 解决 glibc 兼容性问题</a></p></li></ul><h3 id="重定位">重定位</h3><ul><li><a href="https://blog.csdn.net/u011987514/article/details/67716639">浅析ELF中的GOT与PLT</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzAwODYyNQ==&amp;mid=2247487353&amp;idx=1&amp;sn=533701348cbdf80ed48aee2195312d92&amp;scene=21#wechat_redirect">【图片+代码】：GCC 链接过程中的【重定位】过程分析</a></li><li><a href="https://mp.weixin.qq.com/s/Lz3AAZcAk5_Z3HiOMsFlNA">【图片+代码】：Linux 动态链接过程中的【重定位】底层原理</a></li></ul><h2 id="上下文切换">上下文切换</h2><ul><li><a href="https://www.toutiao.com/article/7140527671716364837/">怒啃 24 小时，终于搞懂linux系统上下文切换</a></li><li><a href="https://mp.weixin.qq.com/s/tMdaAiMcvmkRTHHkTikOAg">Linux操作系统通过实战理解CPU上下文切换</a></li><li><a href="https://mp.weixin.qq.com/s/ZlPV-wG0ZH17gdU16LBuYQ"><font color=Red>聊聊Linux中CPU上下文切换</font></a></li></ul><h2 id="进程与线程">进程与线程</h2><ul><li><a href="https://mp.weixin.qq.com/s/zUph16tTNMXy9pQY2LKsiA">为什么进程地址空间中包括操作系统？</a></li><li><a href="https://mp.weixin.qq.com/s/JXLga8Csn1zOQq1XuDPg7Q"><font color=Red>聊聊Linux中线程和进程的联系与区别！</font></a></li><li><a href="https://www.jianshu.com/p/691d02380312">浅析Linux下的task_struct结构体</a></li><li><a href="https://blog.csdn.net/weixin_38371073/article/details/114376410">linux内核task_struct源码分析与解析(整合配图）</a></li><li><a href="https://mp.weixin.qq.com/s/8KoBR7awh_nZ-VAxVVVxhA">Linux进程描述符task_struct结构体详解</a></li><li><a href="https://www.toutiao.com/article/7195179429876728335">从进程和线程的创建过程来看进程和线程的区别</a></li><li><a href="https://mp.weixin.qq.com/s/f3ExtCuwwRvcpD4QGVFsMA"><font color=Red>一个进程最多可以创建多少个线程？</font></a></li><li><a href="https://mp.weixin.qq.com/s/V15vD-4zmMj8nzpiip7pNg"><font color=Red>Linux进程管理：深入task_ struct字段</font></a></li><li><a href="https://blog.csdn.net/zhybiancheng/article/details/120312400">【Linux】进程详解一：进程概念</a></li></ul><h3 id="fork">fork</h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;mid=2247501947&amp;idx=1&amp;sn=cb94f53c75d674d30fb4903778c74c08&amp;chksm=c2c5b2d6f5b23bc027d9652d3e9949e55fd3b101beb87f6f80dd77d8233c0b51bede73edad46&amp;cur_album_id=2123743679373688834&amp;scene=189#wechat_redirect"><font color=Red>一个新进程的诞生 完结撒花！！！</font></a></li><li><a href="https://blog.csdn.net/xy010902100449/article/details/44851453"><font color=Red>【进程管理】fork之后子进程到底复制了父进程什么？</font></a></li><li><a href="https://mp.weixin.qq.com/s/uf_mJZpirL8kjBzPEy9aRw"><font color=Red>深入理解Linux中进程控制</font></a></li><li><a href="https://www.cnblogs.com/bastard/archive/2012/08/31/2664896.html">linux中fork（）函数详解（原创！！实例讲解）</a></li><li><a href="https://www.toutiao.com/article/7133100878235632158/">超详细的Linux进程控制精讲</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247503375&amp;idx=1&amp;sn=1ef245dd250d7004f9363a81e79d9f1d&amp;chksm=f96bbcfbce1c35edb5ff68f5f0dfcd58859dd5d2f8a68f1e013c2d97ecb29bf978cc5445f030&amp;mpshare=1&amp;scene=1&amp;srcid=0328qTcSaP6kykSE1yEjcA07&amp;sharer_sharetime=1648479204839&amp;sharer_shareid=2dfdf936388dba04865b3e883d5a3225&amp;version=3.1.12.6001&amp;platform=win#rd"><font color=Red>Linux 进程编程入门 fork vfork</font></a></li></ul><h3 id="内核线程">内核线程</h3><ul><li><a href="https://mp.weixin.qq.com/s/E9SbPDDFs_NkMuuSACUq3w">Linux实现原理—进程、线程、内核线程、轻量级进程、协程</a></li><li><a href="https://blog.csdn.net/u012489236/article/details/117407673">进程管理(十二)--内核线程</a></li><li><a href="https://blog.csdn.net/u012489236/article/details/115433296">进程管理(二)----线程的基本概念</a></li></ul><h4 id="kernel_thread">kernel_thread</h4><ul><li><a href="https://mp.weixin.qq.com/s/gWqMJ9n66YBEnCd8Zq8NTQ">Linux进程管理之如何创建和销毁进程</a></li></ul><h3 id="session和进程组">session和进程组</h3><p>在 Unix 操作系统中，进程组标识符（PGID，Process Group Identifier）和会话标识符（SID，Session Identifier）是用于组织和管理进程的两个不同的标识符。它们的主要区别在于它们所关联的层次结构和范围。</p><p>进程组标识符（PGID）：</p><ul><li>定义： 进程组是一个或多个进程的集合，每个进程组都有一个唯一的进程组标识符（PGID）。</li><li>关系： 进程组用于将一组相关的进程组织在一起。这些进程可以共享一些控制终端，以便它们可以在终端上进行协同工作。</li><li>创建： 使用系统调用 setpgid 可以创建新的进程组。</li></ul><p>会话标识符（SID）：</p><ul><li>定义： 一个会话是一个或多个进程组的集合，每个会话都有一个唯一的会话标识符（SID）。</li><li>关系： 会话是更高层次的组织单位，它包含一个或多个进程组。一个会话通常对应于一个用户登录到系统的会话，但也可以通过 setsid 系统调用创建一个新的会话。</li><li>创建： 使用系统调用 setsid 可以创建新的会话。</li></ul><p>总结来说，PGID 主要用于将进程组内的进程进行组织，使它们可以在同一终端上进行协同工作。而 SID 更高层次，它是一个会话的标识符，一个会话可以包含多个进程组，通常对应于用户登录会话。在创建新会话时，一个进程会成为新会话的首进程，并且新的会话会包含一个新的进程组。</p><ul><li><a href="https://segmentfault.com/a/1190000009152815">Linux session和进程组概述</a></li></ul><h3 id="内核栈">内核栈</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/296750228"><font color=Red>linux进程内核栈</font></a></li><li><a href="https://mp.weixin.qq.com/s/QCGJNUC71OTd11bSO_Oiew">Linux 中的各种栈：进程栈 线程栈 内核栈 中断栈</a></li></ul><h3 id="进程调度">进程调度</h3><ul><li><a href="https://www.toutiao.com/article/7171812794948649511">一文读懂进程调度算法</a></li><li><a href="https://mp.weixin.qq.com/s/yPovZdsDhzm0hiUdlrKdjg"><font color=Red>图解｜Linux 组调度</font></a></li><li><a href="https://mp.weixin.qq.com/s/1fi1swe1Mjljb6S0_1bJSw">图解Linux内核调度系统</a></li><li><a href="https://mp.weixin.qq.com/s/ZOE7hqtF9G521L5bQjdHeQ">Linux进程调度：进程调度类与调度策略</a></li><li><a href="https://zhuanlan.zhihu.com/p/460055814">玩转Linux内核进程调度，这一篇就够(所有的知识点)</a></li><li><a href="https://www.cnblogs.com/LoyenWang/category/1640172.html"><font color=Red>Linux进程调度</font></a><ul><li><a href="https://www.cnblogs.com/LoyenWang/p/12249106.html">【原创】（一）Linux进程调度器-基础</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/12316660.html">【原创】（二）Linux进程调度器-CPU负载</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/12386281.html">【原创】（三）Linux进程调度器-进程切换</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/12459000.html">【原创】（四）Linux进程调度-组调度及带宽控制</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/12495319.html">【原创】（五）Linux进程调度-CFS调度器</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/12584345.html">【原创】（六）Linux进程调度-实时调度器</a></li></ul></li></ul><h4 id="进程状态">进程状态</h4><ul><li><a href="https://cloud.tencent.com/developer/article/1568077">Linux系统之进程状态</a></li><li><a href="https://blog.csdn.net/flyingleo1981/article/details/7739490">ps -aux出来的stat结果Ss,Sl,SN~~ 进程状态</a></li></ul><h5 id="僵尸进程">僵尸进程</h5><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247495796&amp;idx=1&amp;sn=5491512e674f56d5192a95d7094c3e62&amp;chksm=f96b8280ce1c0b965626468d03144bc497332e204b7ec6b54bd6bb1ea0d226bcc21bc1a580e9&amp;scene=178&amp;cur_album_id=1507350615537025026#rd">linux后台开发中避免僵尸进程的方法总结</a></li><li><a href="https://mp.weixin.qq.com/s/dVh6C-B02vy8O3QIrkDoCA"><font color=Red>Linux干货 | 进程编程基础知识总结</font></a></li></ul><h5 id="孤儿进程">孤儿进程</h5><ul><li><a href="https://cloud.tencent.com/developer/article/1497217">父进程退出时如何确保子进程退出？</a></li></ul><h3 id="文件描述符">文件描述符</h3><ul><li><a href="https://blog.csdn.net/Function_Dou/article/details/89893888">进程最大打开文件描述符个数</a></li><li><a href="https://www.163.com/dy/article/FSEENEN90531I6Y1.html"><font color=Red>3 种方法教你在 Linux 中修改打开文件数量限制</font></a></li><li><a href="https://blog.csdn.net/Erice_s/article/details/111300790">Linux中的soft和hard limit</a></li></ul><h3 id="信号">信号</h3><ul><li><a href="https://mp.weixin.qq.com/s/RQY-bomyExVjR-wqeE9ZUw">你真的懂Linux线程和信号的关系吗？</a></li></ul><h3 id="进程间通信">进程间通信</h3><ul><li><a href="https://mp.weixin.qq.com/s/EBusgftExPFrmr19CJHjZA">多进程编程知识汇总，附代码例子！</a></li><li><a href="https://mp.weixin.qq.com/s/tdzvElDwpt3kVyklVdYtig">原来＼进程间通信／是这么回事......</a></li><li><a href="https://www.cnblogs.com/fortunely/p/14648146.html">Linux进程通信 - 无名管道与有名管道</a></li><li><a href="https://byronhe.com/post/2020/03/03/abstract-unix-socket-single-instance/">用 abstract unix socket 实现进程单实例运行</a></li><li><a href="https://blog.csdn.net/weixin_40763897/article/details/87545788">进程间通信——重定向、描述符表</a></li><li><a href="https://www.toutiao.com/article/7137131866540376610">Linux管道到底能有多快？</a></li><li><a href="https://blog.csdn.net/zhiyuan2021/article/details/107991971"><font color=Red>信号量函数（semget、semop、semctl）及其范例</font></a></li></ul><h3 id="互斥技术">互斥技术</h3><ul><li><p><a href="https://offlinelog.top/?p=404">Linux内核中的各种锁：信号量/互斥锁/读写锁/原子锁/自旋锁/内存屏障等</a></p></li><li><p><a href="https://www.cnblogs.com/aaronLinux/p/5904479.html">[内核同步]浅析Linux内核同步机制 - aaronGao - 博客园 (cnblogs.com)</a></p></li></ul><h4 id="percpu变量">percpu变量</h4><ul><li><p><a href="https://zhuanlan.zhihu.com/p/340985476">一张图看懂linux内核中percpu变量的实现 KING.YT</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1769514">一张图看懂linux内核中percpu变量的实现</a></p></li><li><p><a href="https://github.com/realwujing/realwujing.github.io/blob/main/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eper_cpu%E5%8F%98%E9%87%8Fcurrent_task%E8%8E%B7%E5%8F%96task_struct.md"><font color=Red>amd64下基于per_cpu变量current_task获取task_struct</font></a></p><p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">p ((struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[0] + 0x15d00)))-&gt;comm<br></code></pre></td></tr></table></figure></p></li></ul><h4 id="信号量">信号量</h4><ul><li><a href="https://www.toutiao.com/article/7159838260959740457/">深入讲解读写信号量（上）</a></li><li><a href="https://www.toutiao.com/article/7159867610317390372">深入讲解读写信号量（下）</a></li></ul><h4 id="mutex">mutex</h4><ul><li><a href="https://www.vxbus.com/post/linux/linux-kernel-source-code-data-structure-mutex.html">带你走进Linux内核源码中最常见的数据结构之「mutex」</a></li><li><a href="https://zhuanlan.zhihu.com/p/364130923">linux同步机制 - mutex lock</a></li></ul><h4 id="rcu">RCU</h4><ul><li><a href="https://www.toutiao.com/article/6978007709220291111"><font color=Red>「linux」深入理解RCU核心原理</font></a></li></ul><h4 id="死锁检测">死锁检测</h4><ul><li><a href="https://blog.csdn.net/Ivan804638781/article/details/100740857">【开发工具】【lockdep】Linux内核死锁检测工具（lockdep）的使用</a></li><li><a href="https://www.cnblogs.com/arnoldlu/p/8580387.html"><font color=Red>Linux死锁检测-Lockdep</font></a></li><li><a href="https://mp.weixin.qq.com/s/e_WmGvBdh7ouycz41PVijw">Real-Time进程会导致系统lockup吗</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存管理</title>
    <link href="/linux/kernel/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/linux/kernel/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内存管理">内存管理</h1><ul><li><a href="https://mp.weixin.qq.com/s/_RUTm6AZQT3GMQ61k8HQDQ">[务必收藏] Linux用户空间和内核空间所有15种内存分配方法总结</a></li><li><a href="https://blog.csdn.net/u012489236/article/details/108838504">linux内存管理笔记(三十）----进程虚拟地址</a></li><li><a href="https://blog.csdn.net/FF_programming/article/details/120963212">task_struct 结构，mm_struct 结构， vm_area_struct 结构</a></li><li><a href="https://blog.csdn.net/Windgs_YF/article/details/114587330">linux内核编程之二：vm_area_struct结构体</a></li><li><a href="https://mp.weixin.qq.com/s/wREZkRCaFcCTy9Mtk3xCGQ">内核页表共享</a></li><li><a href="https://www.cnblogs.com/LoyenWang/category/1533753.html"><font color=Red>随笔分类 - Linux内存管理</font></a></li><li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;__biz=Mzg2MzU3Mjc3Ng==&amp;scene=1&amp;album_id=2559805446807928833&amp;count=3#wechat_redirect"><font color=Red>聊聊Linux内核</font></a><ul><li><p><a href="https://mp.weixin.qq.com/s/SLQXuEGHIFoHI-_w9nVMJg">从 Linux 内核角度探秘 JDK NIO 文件读写本质</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zAh1yD5IfwuoYdrZ1tGf5Q">聊聊Netty那些事儿之从内核角度看IO模型</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uWadcBxEgctnrgyu32T8sQ"><font color=Red>一步一图带你深入理解 Linux 虚拟内存管理</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Cn-oX0W5DrI2PivaWLDpPw"><font color=Red>一步一图带你深入理解 Linux 物理内存管理</font></a></p><p>4.4 NUMA 节点中的内存规整与回收</p><p>内存可以说是计算机系统中最为宝贵的资源了，再怎么多也不够用，当系统运行时间长了之后，难免会遇到内存紧张的时候，这时候就需要内核将那些不经常使用的内存页面回收起来，或者将那些可以迁移的页面进行内存规整，从而可以腾出连续的物理内存页面供内核分配。</p><p>内核会为每个 NUMA 节点分配一个 kswapd 进程用于回收不经常使用的页面，还会为每个 NUMA 节点分配一个 kcompactd 进程用于内存的规整避免内存碎片。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pglist_data</span> &#123;</span><br>        .........<br>    <span class="hljs-comment">// 页面回收进程</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">kswapd</span>;</span><br>    <span class="hljs-type">wait_queue_head_t</span> kswapd_wait;<br>    <span class="hljs-comment">// 内存规整进程</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">kcompactd</span>;</span><br>    <span class="hljs-type">wait_queue_head_t</span> kcompactd_wait;<br><br>        ..........<br>&#125; <span class="hljs-type">pg_data_t</span>;<br></code></pre></td></tr></table></figure><p>NUMA 节点描述符 struct pglist_data 结构中的 struct task_struct *kswapd 属性用于指向内核为 NUMA 节点分配的 kswapd 进程。</p><p>kswapd_wait 用于 kswapd 进程周期性回收页面时使用到的等待队列。</p><p>同理 struct task_struct *kcompactd 用于指向内核为 NUMA 节点分配的 kcompactd 进程。</p><p>kcompactd_wait 用于 kcompactd 进程周期性规整内存时使用到的等待队列。</p><p>5.3 水位线的计算</p><p>通常情况下 WMARK_LOW 的值是 WMARK_MIN 的 1.25 倍，WMARK_HIGH 的值是 WMARK_LOW 的 1.5 倍。而 WMARK_MIN 的数值就是由这个内核参数 min_free_kbytes 来决定的。</p><p>5.5 setup_per_zone_wmarks 计算水位线</p><p>为了避免内核的直接内存回收 direct reclaim 阻塞进程影响系统的性能，所以我们需要尽量保持内存区域中的剩余内存容量尽量在 WMARK_MIN 水位线之上，但是有一些极端情况，比如突然遇到网络流量增大，需要短时间内申请大量的内存来存放网络请求数据，此时 kswapd 回收内存的速度可能赶不上内存分配的速度，从而造成直接内存回收 direct reclaim，影响系统性能。</p><p>在内存分配过程中，剩余内存容量处于 WMARK_MIN 与 WMARK_LOW 水位线之间会唤醒 kswapd 进程来回收内存，直到内存容量恢复到 WMARK_HIGH 水位线之上。</p><p>剩余内存容量低于 WMARK_MIN 水位线时就会触发直接内存回收 direct reclaim。</p><p>而剩余内存容量高于 WMARK_LOW 水位线又不会唤醒 kswapd 进程，因此 kswapd 进程活动的关键范围在 WMARK_MIN 与 WMARK_LOW 之间，而为了应对这种突发的网络流量暴增，我们需要保证 kswapd 进程活动的范围大一些，这样内核就能够时刻进行内存回收使得剩余内存容量较长时间的保持在 WMARK_HIGH 水位线之上。</p><p>这样一来就要求 WMARK_MIN 与 WMARK_LOW 水位线之间的间距不能太小，因为 WMARK_LOW 水位线之上就不会唤醒 kswapd 进程了。</p><p>因此内核引入了 /proc/sys/vm/watermark_scale_factor 参数来调节水位线之间的间距。该内核参数默认值为 10，最大值为 3000。</p></li><li><p><a href="https://mp.weixin.qq.com/s/llZXDRG99NUXoMyIAf00ig">深入理解 Linux 物理内存分配全链路实现</a></p><p>4.3 retry</p><p>内核也不会直接开始 OOM，而是进入到重试流程，在重试流程开始之前内核需要调用 should_reclaim_retry 判断是否应该进行重试，重试标准：</p><p>如果内核已经重试了 MAX_RECLAIM_RETRIES (16) 次仍然失败，则放弃重试执行后续 OOM。</p><p>如果内核将所有可选内存区域中的所有可回收页面全部回收之后，仍然无法满足内存的分配，那么放弃重试执行后续 OOM。</p><p>如果 should_reclaim_retry = false，后面会进一步判断是否应该进行 direct_compact 的重试。</p></li><li><p><a href="https://mp.weixin.qq.com/s/e28oT6vE7cOD5M8pukn_jw">深度剖析 Linux 伙伴系统的设计与实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/yHF5xBm5yMXDAHmE_noeCg"><font color=Red>（图片清晰版）细节拉满，80 张图带你一步一步推演 slab 内存池的设计与实现</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/CcPUAeHY0i2XAVerAWCmLA">从内核源码看 slab 内存池的创建初始化流程</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/bNAQmzeBLx2HObSNySmB-Q">深入理解 slab cache 内存分配全链路实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/dHLqT6KtAPZWzq_SmQZVFA"><font color=Red>深度解析 slab 内存池回收内存以及销毁全流程</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/atHXeXxx0L63w99RW7bMHg">深度解读 Linux 内核级通用内存池 —— kmalloc 体系</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/FzTBx32ABR0Vtpq50pwNSA">一步一图带你构建 Linux 页表体系 —— 详解虚拟内存如何与物理内存进行映射</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/AUsgFOaePwVsPozC3F6Wjw">从内核世界透视 mmap 内存映射的本质（原理篇）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/BY3OZ6rkYYyQil_webt7Xg">从内核世界透视 mmap 内存映射的本质（源码实现篇）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zyLSQehjr0zQ5WemjMqluw"><font color=Red>一文聊透 Linux 缺页异常的处理 —— 图解 Page Faults</font></a></p></li></ul></li><li><a href="https://mp.weixin.qq.com/s/i7DzYKVZZ_4C4NmIPK1gFg">linux内核-内存统计</a></li><li><a href="https://mp.weixin.qq.com/s/kKPsZKh8q5PyAS1z4F4CCw"><font color=Red>linux内存浅析3-内存的监控</font></a></li></ul><h2 id="分段与分页">分段与分页</h2><ul><li><a href="https://blog.csdn.net/cl_linux/article/details/80328608"><font color=Red>Linux进程地址空间和进程的内存分布</font></a></li><li><a href="https://mp.weixin.qq.com/s/qqGk1LBVDWpQP89RlLboGQ"><font color=Red>写给新手的MMU工作原理</font></a></li><li><a href="https://mp.weixin.qq.com/s/Vv2t-xHi9L20uGga3rjeBA">详细讲解MMU——为什么嵌入式linux没他不行？</a></li><li><a href="https://mp.weixin.qq.com/s/Q9sUNGFGrswuRYadfL2aiw">存储管理 -地址空间与重定位</a></li><li><a href="https://zhuanlan.zhihu.com/p/90004914">逻辑地址、线性地址、物理地址区别</a></li><li><a href="https://www.zhihu.com/question/420128789">Linux内存管理中，代码段和数据段映射成的线性地址重叠，不会冲突吗？</a></li><li><a href="https://zhuanlan.zhihu.com/p/324210723">x86段寄存器和分段机制</a></li><li><a href="https://mp.weixin.qq.com/s/q2wU9IbX54t_GAuc9V5r7A"><font color=Red>第九回 | Intel 内存管理两板斧：分段与分页</font></a></li><li><a href="https://www.toutiao.com/article/7188065325198524961">从根儿上理解linux虚拟内存</a></li><li><a href="https://segmentfault.com/a/1190000008125006">Linux内存管理</a></li></ul><h3 id="缺页异常">缺页异常</h3><ul><li><a href="https://mp.weixin.qq.com/s/RPS_QernHHgBBKBlFJksHA"><font color=Red>这是你了解的空指针吗？</font></a></li><li><a href="https://mp.weixin.qq.com/s/zyLSQehjr0zQ5WemjMqluw"><font color=Red>一文聊透 Linux 缺页异常的处理 —— 图解 Page Faults</font></a></li></ul><h2 id="内核空间">内核空间</h2><ul><li><a href="https://www.toutiao.com/article/6658437313359512072">Linux用户空间与内核空间（理解高端内存）</a></li><li><a href="https://blog.csdn.net/huaerbushi521/article/details/118610996"><font color=Red>内核空间:kmalloc vmalloc 用户空间:malloc ptmalloc</font></a></li><li><a href="https://mp.weixin.qq.com/s/HaYn0EoHKdY5psi3MHDpdg">详解Linux内存管理之vmalloc原理及源码实现</a></li><li><a href="https://mp.weixin.qq.com/s/ts9-sl2xQcG3nWvkNsuGeg">万字整理，肝翻Linux内存管理所有知识点</a></li><li><a href="https://mp.weixin.qq.com/s/OQVClhh7J-u2Cui27jF7cg"><font color=Red>五万字|深入理解Linux内存管理</font></a></li><li><a href="https://mp.weixin.qq.com/s/5qk6VYlyEKrNFNEY7fiqvQ">Linux 实现原理 — 内存分配算法</a></li><li><a href="https://mp.weixin.qq.com/s/kNHys4p2sXFV6wwV7VDFqQ">CMA技术原理分析</a></li><li><a href="https://www.toutiao.com/article/7132761153645888004/">面试题：Linux是如何避免内存碎片的</a></li><li><a href="https://www.toutiao.com/article/7132381214107353632/">Linux内存管理：NUMA技术详解（非一致内存访问架构）</a></li><li><a href="https://mp.weixin.qq.com/s/xLZRygjfjZwibmEyD7o-WA"><font color=Red>Linux中内存管理详解</font></a></li></ul><h3 id="slub">slub</h3><ul><li><a href="https://blog.csdn.net/u012489236/article/details/107966849">linux内存管理笔记(二十七）----slub分配器概述</a></li><li><a href="https://mp.weixin.qq.com/s/yHF5xBm5yMXDAHmE_noeCg"><font color=Red>（图片清晰版）细节拉满，80 张图带你一步一步推演 slab 内存池的设计与实现</font></a></li><li><a href="https://mp.weixin.qq.com/s/dHLqT6KtAPZWzq_SmQZVFA"><font color=Red>深度解析 slab 内存池回收内存以及销毁全流程</font></a></li></ul><h3 id="overcommit_memory">overcommit_memory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_memory<br></code></pre></td></tr></table></figure><p>输出的值有以下几种可能：</p><ul><li>0 – Heuristic overcommit handling. 这是缺省值，它允许overcommit，但过于明目张胆的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存。Heuristic的意思是“试 探式的”，内核利用某种算法猜测你的内存申请是否合理，它认为不合理就会拒绝overcommit。</li><li>1 – Always overcommit. 允许overcommit，对内存申请来者不拒。内核执行无内存过量使用处理。使用这个设置会增大内存超载的可能性，但也可以增强大量使用内存任务的性能。</li><li>2 – Don’t overcommit. 禁止overcommit。 内存拒绝等于或者大于总可用 swap 大小以及overcommit_ratio 指定的物理 RAM 比例的内存请求。如果希望减小内存过度使用的风险，这个设置就是最好的。</li></ul><h4 id="overcommit_ratio">overcommit_ratio</h4><p>overcommit_ratio、overcommit_kbytes在overcommit_memory=2时才有用，overcommit_kbytes非0时，overcommit_ratio无效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_ratio<br></code></pre></td></tr></table></figure><h4 id="overcommit_kbytes">overcommit_kbytes</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_kbytes<br></code></pre></td></tr></table></figure><h4 id="当前机器overcommit_memory配置">当前机器overcommit_memory配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_memory<br>0<br><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_ratio<br>50<br><span class="hljs-built_in">cat</span> /proc/sys/vm/overcommit_kbytes<br>0<br></code></pre></td></tr></table></figure><p>单次申请的内存大小不能超过以下值，否则本次申请就会失败。</p><p>free memory + free swap + pagecache的大小 + SLAB</p><p>Linux对大部分申请内存的请求都回复"yes"，以便能跑更多更大的程序。因为申请内存后，并不会马上使用内存。这种技术叫做Overcommit。当linux发现内存不足时，会发生OOM killer(OOM=out-of-memory)。它会选择杀死一些进程(用户态进程，不是内核线程)，以便释放内存。</p><p>当oom-killer发生时，linux会选择杀死哪些进程？选择进程的函数是oom_badness函数(在mm/oom_kill.c中)，该函数会计算每个进程的点数(0~1000)。点数越高，这个进程越有可能被杀死。每个进程的点数跟oom_score_adj有关，而且oom_score_adj可以被设置(-1000最低，1000最高)。</p><ul><li><a href="https://mp.weixin.qq.com/s/BY3OZ6rkYYyQil_webt7Xg">从内核世界透视 mmap 内存映射的本质（源码实现篇）</a></li><li><a href="https://zhangzhuo.ltd/articles/2021/08/10/1628565705959.html"><font color=Red>内存不足：OOM</font></a></li><li><a href="https://blog.csdn.net/xsxb_yl/article/details/121412094"><font color=Red>内存分配策略：overcommit_memory</font></a></li><li><a href="https://blog.csdn.net/zyqash/article/details/122860393">Overcommitting Memory （过度使用内存）</a></li></ul><h3 id="oom">OOM</h3><h4 id="min_free_kbytes">min_free_kbytes</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/vm/min_free_kbytes<br>67584<br></code></pre></td></tr></table></figure><p>当剩余内存容量低于 WMARK_MIN 会触发下方操作：</p><ul><li>直接内存回收</li><li>直接内存规整</li><li>产生 OOM</li></ul><p>内核也不会直接开始 OOM，而是进入到重试流程，在重试流程开始之前内核需要调用 should_reclaim_retry 判断是否应该进行重试，重试标准：</p><p>如果内核已经重试了 MAX_RECLAIM_RETRIES (16) 次仍然失败，则放弃重试执行后续 OOM。</p><p>如果内核将所有可选内存区域中的所有可回收页面全部回收之后，仍然无法满足内存的分配，那么放弃重试执行后续 OOM。</p><p>当前free memory等于112.5MB，在 WMARK_MIN 之上，故不会触发 OOM。</p><ul><li><a href="https://www.toutiao.com/article/7250472767483773455">深入了解Linux OOM Killer：一次可怕的内核事件</a></li><li><a href="https://mp.weixin.qq.com/s/I-LidNcK1vGm3fca20Tofw">细说｜Linux Out Of Memory机制</a></li><li><a href="https://www.cnblogs.com/duanxz/p/10185946.html">Linux进程被杀掉（OOM killer），查看系统日志</a></li><li><a href="https://www.toutiao.com/article/6936920990001676812/">Linux OOM是怎么回事儿</a></li></ul><h2 id="用户空间">用户空间</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/5p8zXhrhddNBxy20-fBnHw"><font color=Red>一文读懂Linux内存分配策略</font></a></p></li><li><p><a href="https://www.cnblogs.com/diegodu/p/9230280.html">Linux进程分配内存的两种方式brk() 和mmap()</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/7-qM_-AqG6-Zey58g0ysPg"><font color=Red>深入理解Linux内存子系统</font></a></p></li></ul><h3 id="mmap">mmap</h3><ul><li><a href="https://blog.csdn.net/dongzhongshu/article/details/2048619">linux-mmap函数的介绍</a></li><li><a href="https://mp.weixin.qq.com/s/S41vjVMK4QHR_2qfazsznA">这样理解mmap，挺有意思！</a></li><li><a href="https://www.toutiao.com/article/7148032464730997279/">虚拟内存 &amp; I/O &amp; 零拷贝总结</a></li><li><a href="https://mp.weixin.qq.com/s/0mjI6guTETi0WmuaUHpxAg">一文读懂计算机内核态、用户态和零拷贝技术</a></li></ul><h3 id="malloc">malloc</h3><ul><li><p><a href="https://www.toutiao.com/article/7144253310382440960/">「linux」如何实现一个malloc</a></p></li><li><p><a href="https://www.toutiao.com/article/7143515497621897769/">glibc malloc源码分析</a></p></li><li><p><a href="https://www.toutiao.com/article/7138673151717753357/">glibc内存管理那些事儿</a></p></li><li><p><a href="https://www.toutiao.com/article/7136170096816423465/">malloc底层原理剖析——ptmalloc内存池</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/m-fu3LvZJNvXkjlWpTkkuQ">深入理解 glibc malloc：内存分配器实现原理</a></p></li><li><p><a href="https://blog.csdn.net/u011334536/article/details/106150555">malloc(): memory corruption 解决方案</a></p></li></ul><h2 id="buffercache">Buffer、Cache</h2><ul><li><p><a href="https://www.toutiao.com/article/7097031826853708322/?app=news_article&amp;timestamp=1657673413&amp;use_new_style=1&amp;req_id=20220713085013010204050085051F5097&amp;group_id=7097031826853708322&amp;share_token=E52D4F54-EFFF-45EB-81AE-4DDDDC89DF6A&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_ios&amp;utm_campaign=client_share&amp;wxshare_count=1&amp;source=m_redirect"><font color=Red>Linux 内存中的缓冲区（Buffer）与缓存（Cache）</font></a></p></li><li><p><a href="https://blog.51cto.com/u_14286115/5194187">Cache和Buffer的区别</a></p></li><li><p><a href="https://www.junmajinlong.com/coding/buffer_cache/">彻底搞懂Buffer和Cache的区别</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/JyZN7TG02JkcemAHWbDUVA"><font color=Red>Linux 内存中的 Cache 真的能被回收么?</font></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches<br></code></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/tugouxp/article/details/119077395">page cache和buffer cache之间的关系以及验证</a></p></li><li><p><a href="https://www.toutiao.com/article/7309863686699549220/"><font color=Red>处理Page Cache缓存会影响系统性能？是真的吗？</font></a></p></li></ul><h2 id="内存池">内存池</h2><ul><li><p><a href="https://www.toutiao.com/article/7125330979035906568/">带你用纯C实现一个内存池（图文结合）</a></p></li><li><p><a href="https://www.toutiao.com/article/7145002269132571172/">「项目实战」高并发内存池的实现</a></p></li><li><p><a href="https://www.toutiao.com/article/7220429772361548344/">C++ 使用deque来实现内存池</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/z6MSHiiZ-D2OLf1KTWxgAg">在 4G 内存的机器上，申请 8G 内存会怎么样？</a></p></li></ul><h2 id="内存检测">内存检测</h2><ul><li><a href="https://www.toutiao.com/article/6824011491897770500/">Linux内核私闯进程地址空间并修改进程内存</a></li></ul><h3 id="内核虚拟空间">内核虚拟空间</h3><ul><li><a href="https://www.cnblogs.com/arnoldlu/p/8568090.html"><font color=Red>Linux内存管理 (22)内存检测技术(slub_debug/kmemleak/kasan)</font></a></li></ul><p>Linux常见的内存访问错误有：</p><ul><li>越界访问(out of bounds)</li><li>访问已经释放的内存(use after free)</li><li>重复释放</li><li>内存泄露(memory leak)</li><li>栈溢出(stack overflow)</li></ul><p>不同的工具有不同的侧重点，本章主要从slub_debug、kmemleak、kasan三个工具介绍。</p><p>kmemleak侧重于内存泄露问题发现。</p><p>slub_debug和kasan有一定的重复，部分slub_debug问题需要借助slabinfo去发现；kasan更快，所有问题独立上报，缺点是需要高版本GCC支持(gcc 4.9.2 or gcc 5.0)。</p><h4 id="测试环境准备">测试环境准备</h4><p>更新内核版本到Kernel v4.4，然后编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/arnoldlu/linux.git -b running_kernel_4.4<br><br><span class="hljs-built_in">export</span> ARCH=arm64<br><br><span class="hljs-built_in">export</span> CROSS_COMPILE=aarch64-linux-gnu-<br><br>make defconfig<br><br>make bzImage -j4 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-<br></code></pre></td></tr></table></figure><h4 id="slub_debug">slub_debug</h4><p>关键词：Red Zone、Padding、Object Layout。</p><p>Linux内核中，小块内存大量使用slab/slub分配器，slub_debug提供了内存检测小功能。</p><p>内存中比较容易出错的地方有：</p><ul><li>访问已经释放的内存</li><li>越界访问</li><li>重复释放内存</li></ul><p>关于slub_debug的两篇文章：《<a href="http://www.wowotech.net/memory_management/426.html">图解slub</a>》《<a href="http://www.wowotech.net/memory_management/427.html">SLUB DEBUG原理</a>》</p><h5 id="编译支持slub_debug内核">编译支持slub_debug内核</h5><p>首先需要打开General setup -&gt; Enable SLUB debugging support，然后再选择Kernel hacking -&gt; Memory Debugging -&gt; SLUB debugging on by default。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_SLUB=y<br><br>CONFIG_SLUB_DEBUG=y<br><br>CONFIG_SLUB_DEBUG_ON=y<br><br>CONFIG_SLUB_STATS=y<br></code></pre></td></tr></table></figure><h5 id="测试环境slabinfoslub.ko">测试环境：slabinfo、slub.ko</h5><p>通过slub.ko模拟内存异常访问，有些可以直接显示，有些需要通过slabinfo -v来查看。</p><p>在tools/vm目录下，执行如下命令，生成可执行文件slabinfo。放入_install目录，打包到zImage中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make slabinfo CFLAGS=-static ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-<br></code></pre></td></tr></table></figure><p>将编译好的slabinfo放入sbin。</p><p>下面三个测试代码：https://github.com/arnoldlu/linux/tree/running_kernel_4.4/test_code/slub_debug</p><p>在test_code/slub_debug目录下执行make.sh，将slub.ko/slub2.ko/slub3.ko放入data。</p><h5 id="进行测试">进行测试</h5><p>启动QEMU：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -machine virt -cpu cortex-a57 -machine <span class="hljs-built_in">type</span>=virt -smp 2 -m 2048 -kernel <span class="hljs-built_in">arch</span>/arm64/boot/Image --append <span class="hljs-string">&quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8 slub_debug=UFPZ&quot;</span> -nographic<br></code></pre></td></tr></table></figure><p>F：在free的时候会执行检查。</p><p>Z：表示Red Zone的意思。</p><p>P：是Poison的意思。</p><p>U：会记录slab的使用者信息，如果打开，会会显示分配释放对象的栈回溯。</p><p>在slub_debug打开SLAB_STORE_USER选项后，可以清晰地看到问题点的backtrace。</p><h5 id="测试结果">测试结果</h5><p>内存越界访问包括Redzone overwritten和Object padding overwritten。</p><p>重复释放对应Object already free。访问已释放内存为Posion overwritten。</p><h6 id="redzone-overwritten">Redzone overwritten</h6><p>执行insmod data/slub.ko，使用slabinfo -v查看结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">create_slub_error</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  buf = kmalloc(<span class="hljs-number">32</span>, GFP_KERNEL);<br>  <span class="hljs-keyword">if</span>(buf) &#123;<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0x55</span>, <span class="hljs-number">80</span>);-----------------------------------虽然分配<span class="hljs-number">32</span>字节，但是对应分配了<span class="hljs-number">64</span>字节。所以设置为<span class="hljs-number">80</span>字节访问触发异常。从buf开始的<span class="hljs-number">80</span>个字节仍然被初始化成功。<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然kmalloc申请了32字节的slab缓冲区，但是内核分配的是kmalloc-64。所以memset 36字节不会报错，将36改成大于64即可。</p><p>一个slub Debug输出包括四大部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c">=============================================================================<br><br>BUG kmalloc<span class="hljs-number">-64</span> (Tainted: G O ): Redzone overwritten------------------------------------------------------------<span class="hljs-number">-1.</span> 问题描述：slab名称-kmalloc<span class="hljs-number">-64</span>，什么错误-Redzone overwritten。<br>-----------------------------------------------------------------------------<br><br>Disabling lock debugging due to kernel taint<br>INFO: <span class="hljs-number">0xeddb3640</span><span class="hljs-number">-0xeddb3643</span>. First byte <span class="hljs-number">0x55</span> instead of <span class="hljs-number">0xcc</span>-----------------------------------------------<span class="hljs-number">-1.1</span> 问题起始和结束地址，这里一共<span class="hljs-number">4</span>字节。<br>INFO: Allocated in <span class="hljs-number">0x55555555</span> age=<span class="hljs-number">1766</span> cpu=<span class="hljs-number">0</span> pid=<span class="hljs-number">771</span>--------------------------------------------------------<span class="hljs-number">-1.2</span> slab的分配栈回溯<br><span class="hljs-number">0x55555555</span><br><span class="hljs-number">0xbf002014</span><br>do_one_initcall+<span class="hljs-number">0x90</span>/<span class="hljs-number">0x1d8</span><br>do_init_module+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x38c</span><br>load_module+<span class="hljs-number">0x1bac</span>/<span class="hljs-number">0x1e94</span><br>SyS_init_module+<span class="hljs-number">0x14c</span>/<span class="hljs-number">0x15c</span><br>ret_fast_syscall+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x3c</span><br>INFO: Freed in do_one_initcall+<span class="hljs-number">0x78</span>/<span class="hljs-number">0x1d8</span> age=<span class="hljs-number">1766</span> cpu=<span class="hljs-number">0</span> pid=<span class="hljs-number">771</span>----------------------------------------<span class="hljs-number">-1.3</span> slab的释放栈回溯<br>do_one_initcall+<span class="hljs-number">0x78</span>/<span class="hljs-number">0x1d8</span><br>do_init_module+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x38c</span><br>load_module+<span class="hljs-number">0x1bac</span>/<span class="hljs-number">0x1e94</span><br>SyS_init_module+<span class="hljs-number">0x14c</span>/<span class="hljs-number">0x15c</span><br>ret_fast_syscall+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x3c</span><br>INFO: Slab <span class="hljs-number">0xefdb5660</span> objects=<span class="hljs-number">16</span> used=<span class="hljs-number">14</span> fp=<span class="hljs-number">0xeddb3700</span> flags=<span class="hljs-number">0x0081</span>----------------------------------<span class="hljs-number">-1.4</span> slab的地址，以及其它信息。<br>INFO: Object <span class="hljs-number">0xeddb3600</span> @offset=<span class="hljs-number">1536</span> fp=<span class="hljs-number">0x55555555</span>----------------------------------------------------------<span class="hljs-number">-1.5</span> 当前Object起始，及相关信息<br><br>Bytes b4 eddb35f0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ-----------<span class="hljs-number">-2.</span> 问题slab对象内容。<span class="hljs-number">2.1</span> 打印问题slab对象内容之前一些字节。<br>Object eddb3600: <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> UUUUUUUUUUUUUUUU--------<span class="hljs-number">-2.2</span> slab对象内容，全部为<span class="hljs-number">0x55</span>。<br>Object eddb3610: <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> UUUUUUUUUUUUUUUU<br>Object eddb3620: <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> UUUUUUUUUUUUUUUU<br>Object eddb3630: <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> UUUUUUUUUUUUUUUU<br>Redzone eddb3640: <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> UUUU---------------------------------------------------------------------------------<span class="hljs-number">-2.3</span> Redzone内容，问题出在这里。<br>Padding eddb36e8: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ-----------<span class="hljs-number">-2.4</span> Padding内容，为了对象对齐而补充。<br>Padding eddb36f8: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZ<br>CPU: <span class="hljs-number">2</span> PID: <span class="hljs-number">773</span> Comm: slabinfo Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">93</span>-------------------------------------------------------<span class="hljs-number">-3.</span> 检查问题点的栈打印，这里是由于slabinfo找出来的。<br>Hardware name: ARM-Versatile Express<br>[&lt;c0016588&gt;] (unwind_backtrace) from [&lt;c0013070&gt;] (show_stack+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x14</span>)<br>[&lt;c0013070&gt;] (show_stack) from [&lt;c0244130&gt;] (dump_stack+<span class="hljs-number">0x78</span>/<span class="hljs-number">0x88</span>)<br>[&lt;c0244130&gt;] (dump_stack) from [&lt;c00e1874&gt;] (check_bytes_and_report+<span class="hljs-number">0xd0</span>/<span class="hljs-number">0x10c</span>)<br>[&lt;c00e1874&gt;] (check_bytes_and_report) from [&lt;c00e1a14&gt;] (check_object+<span class="hljs-number">0x164</span>/<span class="hljs-number">0x234</span>)<br>[&lt;c00e1a14&gt;] (check_object) from [&lt;c00e29bc&gt;] (validate_slab_slab+<span class="hljs-number">0x198</span>/<span class="hljs-number">0x1bc</span>)<br>[&lt;c00e29bc&gt;] (validate_slab_slab) from [&lt;c00e578c&gt;] (validate_store+<span class="hljs-number">0xac</span>/<span class="hljs-number">0x190</span>)<br>[&lt;c00e578c&gt;] (validate_store) from [&lt;c0146780&gt;] (kernfs_fop_write+<span class="hljs-number">0xb8</span>/<span class="hljs-number">0x1b4</span>)<br>[&lt;c0146780&gt;] (kernfs_fop_write) from [&lt;c00ebfc4&gt;] (__vfs_write+<span class="hljs-number">0x1c</span>/<span class="hljs-number">0xd8</span>)<br>[&lt;c00ebfc4&gt;] (__vfs_write) from [&lt;c00ec808&gt;] (vfs_write+<span class="hljs-number">0x90</span>/<span class="hljs-number">0x170</span>)<br>[&lt;c00ec808&gt;] (vfs_write) from [&lt;c00ed008&gt;] (SyS_write+<span class="hljs-number">0x3c</span>/<span class="hljs-number">0x90</span>)<br>[&lt;c00ed008&gt;] (SyS_write) from [&lt;c000f3c0&gt;] (ret_fast_syscall+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x3c</span>)<br>FIX kmalloc<span class="hljs-number">-64</span>: Restoring <span class="hljs-number">0xeddb3640</span><span class="hljs-number">-0xeddb3643</span>=<span class="hljs-number">0xcc</span>---------------------------------------------------------<span class="hljs-number">-4.</span> 问题点是如何被解决的，此处恢复<span class="hljs-number">4</span>个字节为<span class="hljs-number">0xcc</span>。<br></code></pre></td></tr></table></figure><h6 id="object-padding-overwritten">Object padding overwritten</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">create_slub_error</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">int</span> i;<br><br>  buf = kmalloc(<span class="hljs-number">32</span>, GFP_KERNEL);<br>  <span class="hljs-keyword">if</span>(buf) &#123;<br>    buf[<span class="hljs-number">-1</span>] = <span class="hljs-number">0x55</span>;------------------------------------------------------------------------向左越界访问<br>    kfree(buf);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行insmod data/slub4.ko，结果如下。</p><p>这里的越界访问和之前有点不一样的是，这里向左越界。覆盖到了Padding区域。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c">al: slub error test init<br>=============================================================================<br>BUG kmalloc<span class="hljs-number">-128</span> (Tainted: G O ): Object padding overwritten------------------------------------------------------覆盖到Padding区域<br>-----------------------------------------------------------------------------<br><br>Disabling lock debugging due to kernel taint<br>INFO: <span class="hljs-number">0xffff80007767e9ff</span><span class="hljs-number">-0xffff80007767e9ff</span>. First byte <span class="hljs-number">0x55</span> instead of <span class="hljs-number">0x5a</span><br>INFO: Allocated in call_usermodehelper_setup+<span class="hljs-number">0x44</span>/<span class="hljs-number">0xb8</span> age=<span class="hljs-number">1</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">789</span><br>alloc_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x188</span><br>___slab_alloc.constprop<span class="hljs-number">.30</span>+<span class="hljs-number">0x3f8</span>/<span class="hljs-number">0x440</span><br>__slab_alloc.isra<span class="hljs-number">.27</span>.constprop<span class="hljs-number">.29</span>+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x38</span><br>kmem_cache_alloc+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x260</span><br>call_usermodehelper_setup+<span class="hljs-number">0x44</span>/<span class="hljs-number">0xb8</span><br>/ # kobject_uevent_env+<span class="hljs-number">0x494</span>/<span class="hljs-number">0x500</span><br>kobject_uevent+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x18</span><br>load_module+<span class="hljs-number">0x18cc</span>/<span class="hljs-number">0x1d78</span><br>SyS_init_module+<span class="hljs-number">0x150</span>/<span class="hljs-number">0x178</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Slab <span class="hljs-number">0xffff7bffc2dd9f80</span> objects=<span class="hljs-number">16</span> used=<span class="hljs-number">9</span> fp=<span class="hljs-number">0xffff80007767ea00</span> flags=<span class="hljs-number">0x4081</span><br>INFO: Object <span class="hljs-number">0xffff80007767e800</span> @offset=<span class="hljs-number">2048</span> fp=<span class="hljs-number">0xffff80007767ea00</span><br><br>Bytes b4 ffff80007767e7f0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Object ffff80007767e800: <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">08</span> e8 <span class="hljs-number">67</span> <span class="hljs-number">77</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff ..........gw....<br>Object ffff80007767e810: <span class="hljs-number">08</span> e8 <span class="hljs-number">67</span> <span class="hljs-number">77</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff f8 <span class="hljs-number">83</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff ..gw............<br>Object ffff80007767e820: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">6</span>e aa <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff .........n......<br>Object ffff80007767e830: <span class="hljs-number">00</span> <span class="hljs-number">23</span> <span class="hljs-number">67</span> <span class="hljs-number">78</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff <span class="hljs-number">18</span> <span class="hljs-number">23</span> <span class="hljs-number">67</span> <span class="hljs-number">78</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff .<span class="hljs-meta">#gx.....#gx....</span><br>Object ffff80007767e840: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff80007767e850: b8 <span class="hljs-number">8</span>e <span class="hljs-number">32</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff <span class="hljs-number">00</span> <span class="hljs-number">23</span> <span class="hljs-number">67</span> <span class="hljs-number">78</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff .<span class="hljs-number">.2</span>......<span class="hljs-meta">#gx....</span><br>Object ffff80007767e860: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff80007767e870: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Redzone ffff80007767e880: cc cc cc cc cc cc cc cc ........<br>Padding ffff80007767e9c0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff80007767e9d0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff80007767e9e0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff80007767e9f0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">55</span> ZZZZZZZZZZZZZZZU<br>CPU: <span class="hljs-number">0</span> PID: <span class="hljs-number">790</span> Comm: mdev Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">116</span><br>Hardware name: linux,dummy-virt (DT)<br>Call trace:<br>[&lt;ffff800000089738&gt;] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x108</span><br>[&lt;ffff800000089854&gt;] show_stack+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x20</span><br>[&lt;ffff8000003253c4&gt;] dump_stack+<span class="hljs-number">0x94</span>/<span class="hljs-number">0xd0</span><br>[&lt;ffff800000196460&gt;] print_trailer+<span class="hljs-number">0x128</span>/<span class="hljs-number">0x1b8</span><br>[&lt;ffff800000196848&gt;] check_bytes_and_report+<span class="hljs-number">0xd8</span>/<span class="hljs-number">0x118</span><br>[&lt;ffff800000196928&gt;] check_object+<span class="hljs-number">0xa0</span>/<span class="hljs-number">0x240</span><br>[&lt;ffff8000001987e0&gt;] free_debug_processing+<span class="hljs-number">0x128</span>/<span class="hljs-number">0x380</span><br>[&lt;ffff80000019a1cc&gt;] __slab_free+<span class="hljs-number">0x344</span>/<span class="hljs-number">0x4a0</span><br>[&lt;ffff80000019ab94&gt;] kfree+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x220</span><br>[&lt;ffff8000000c8278&gt;] umh_complete+<span class="hljs-number">0x58</span>/<span class="hljs-number">0x68</span><br>[&lt;ffff8000000c83d8&gt;] call_usermodehelper_exec_async+<span class="hljs-number">0x150</span>/<span class="hljs-number">0x170</span><br>[&lt;ffff800000085c50&gt;] ret_from_fork+<span class="hljs-number">0x10</span>/<span class="hljs-number">0x40</span><br>FIX kmalloc<span class="hljs-number">-128</span>: Restoring <span class="hljs-number">0xffff80007767e9ff</span><span class="hljs-number">-0xffff80007767e9ff</span>=<span class="hljs-number">0x5a</span>---------------------------------------------------------问题处理是将对应字节恢复为<span class="hljs-number">0x5a</span>。<br></code></pre></td></tr></table></figure><h6 id="object-already-free">Object already free</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">create_slub_error</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  buf = kmalloc(<span class="hljs-number">32</span>, GFP_KERNEL);<br>  <span class="hljs-keyword">if</span>(buf) &#123;<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0x55</span>, <span class="hljs-number">32</span>);<br>    kfree(buf);<br>    printk(<span class="hljs-string">&quot;al: Object already freed&quot;</span>);<br>    kfree(buf);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内核中free执行流程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">kfree<br>  -&gt;slab_free<br>    -&gt;__slab_free<br>      -&gt;kmem_cache_debug<br>        -&gt;free_debug_processing         -&gt;on_freelist<br></code></pre></td></tr></table></figure><p>执行insmod data/slub2.ko，结果如下。</p><p>重复释放，是对同一个对象连续释放了多次。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c">al: slub error test init<br>al: Object already freed<br>=============================================================================<br>BUG kmalloc<span class="hljs-number">-128</span> (Tainted: G B O ): Object already <span class="hljs-built_in">free</span>------------------------------------------------------------------在<span class="hljs-number">64</span>位系统，<span class="hljs-number">32</span>字节的kmalloc变成了kmalloc<span class="hljs-number">-128</span>，问题类型是：Object already <span class="hljs-built_in">free</span>，也即重复释放。<br>-----------------------------------------------------------------------------<br><br>INFO: Allocated in create_slub_error+<span class="hljs-number">0x20</span>/<span class="hljs-number">0x80</span> [slub2] age=<span class="hljs-number">0</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">791</span>------------------------------------内存分配点栈回溯<br>alloc_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x188</span><br>___slab_alloc.constprop<span class="hljs-number">.30</span>+<span class="hljs-number">0x3f8</span>/<span class="hljs-number">0x440</span><br>__slab_alloc.isra<span class="hljs-number">.27</span>.constprop<span class="hljs-number">.29</span>+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x38</span><br>kmem_cache_alloc+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x260</span><br>create_slub_error+<span class="hljs-number">0x20</span>/<span class="hljs-number">0x80</span> [slub2]<br>my_test_init+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x28</span> [slub2]<br>do_one_initcall+<span class="hljs-number">0x90</span>/<span class="hljs-number">0x1a0</span><br>do_init_module+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x1cc</span><br>load_module+<span class="hljs-number">0x18dc</span>/<span class="hljs-number">0x1d78</span><br>SyS_init_module+<span class="hljs-number">0x150</span>/<span class="hljs-number">0x178</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Freed in create_slub_error+<span class="hljs-number">0x50</span>/<span class="hljs-number">0x80</span> [slub2] age=<span class="hljs-number">0</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">791</span>------------------------------------------内存释放点栈回溯<br>free_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x380</span><br>__slab_free+<span class="hljs-number">0x344</span>/<span class="hljs-number">0x4a0</span><br>kfree+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x220</span><br>create_slub_error+<span class="hljs-number">0x50</span>/<span class="hljs-number">0x80</span> [slub2]<br>my_test_init+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x28</span> [slub2]<br>do_one_initcall+<span class="hljs-number">0x90</span>/<span class="hljs-number">0x1a0</span><br>do_init_module+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x1cc</span><br>load_module+<span class="hljs-number">0x18dc</span>/<span class="hljs-number">0x1d78</span><br>SyS_init_module+<span class="hljs-number">0x150</span>/<span class="hljs-number">0x178</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Slab <span class="hljs-number">0xffff7bffc2dda800</span> objects=<span class="hljs-number">16</span> used=<span class="hljs-number">7</span> fp=<span class="hljs-number">0xffff8000776a0800</span> flags=<span class="hljs-number">0x4081</span><br>INFO: Object <span class="hljs-number">0xffff8000776a0800</span> @offset=<span class="hljs-number">2048</span> fp=<span class="hljs-number">0xffff8000776a0a00</span><br><br>Bytes b4 ffff8000776a07f0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Object ffff8000776a0800: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk-----------------内存内容打印，供<span class="hljs-number">128</span>字节。<br>Object ffff8000776a0810: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff8000776a0820: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff8000776a0830: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff8000776a0840: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff8000776a0850: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff8000776a0860: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff8000776a0870: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> a5 kkkkkkkkkkkkkkk.<br>Redzone ffff8000776a0880: bb bb bb bb bb bb bb bb ........<br>Padding ffff8000776a09c0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff8000776a09d0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff8000776a09e0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff8000776a09f0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>CPU: <span class="hljs-number">1</span> PID: <span class="hljs-number">791</span> Comm: insmod Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">116</span>--------------------------------------------------------------此处问题在insmod就发现了，所以检查出问题的进程就是insmod。<br>Hardware name: linux,dummy-virt (DT)<br>Call trace:<br>[&lt;ffff800000089738&gt;] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x108</span><br>[&lt;ffff800000089854&gt;] show_stack+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x20</span><br>[&lt;ffff8000003253c4&gt;] dump_stack+<span class="hljs-number">0x94</span>/<span class="hljs-number">0xd0</span><br>[&lt;ffff800000196460&gt;] print_trailer+<span class="hljs-number">0x128</span>/<span class="hljs-number">0x1b8</span><br>[&lt;ffff800000198954&gt;] free_debug_processing+<span class="hljs-number">0x29c</span>/<span class="hljs-number">0x380</span><br>[&lt;ffff80000019a1cc&gt;] __slab_free+<span class="hljs-number">0x344</span>/<span class="hljs-number">0x4a0</span><br>[&lt;ffff80000019ab94&gt;] kfree+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x220</span><br>[&lt;ffff7ffffc008060&gt;] create_slub_error+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x80</span> [slub2]<br>[&lt;ffff7ffffc00a014&gt;] my_test_init+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x28</span> [slub2]<br>[&lt;ffff800000082930&gt;] do_one_initcall+<span class="hljs-number">0x90</span>/<span class="hljs-number">0x1a0</span><br>[&lt;ffff80000014647c&gt;] do_init_module+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x1cc</span><br>[&lt;ffff800000120704&gt;] load_module+<span class="hljs-number">0x18dc</span>/<span class="hljs-number">0x1d78</span><br>[&lt;ffff800000120cf0&gt;] SyS_init_module+<span class="hljs-number">0x150</span>/<span class="hljs-number">0x178</span><br>[&lt;ffff800000085cb0&gt;] el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>FIX kmalloc<span class="hljs-number">-128</span>: Object at <span class="hljs-number">0xffff8000776a0800</span> not freed------------------------------------------------------------------处理的结果是，此处slab 对象是没有被释放。<br></code></pre></td></tr></table></figure><h6 id="poison-overwritten">Poison overwritten</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">create_slub_error</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  buf = kmalloc(<span class="hljs-number">32</span>, GFP_KERNEL);-----------------------此时的buf内容都是<span class="hljs-number">0x6B</span><br>  <span class="hljs-keyword">if</span>(buf) &#123;<br>    kfree(buf);<br>    printk(<span class="hljs-string">&quot;al: Access after free&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0x55</span>, <span class="hljs-number">32</span>);-----------------------------虽然被释放，但是<span class="hljs-built_in">memset</span>仍然生效了变成了<span class="hljs-number">0x55</span>。<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行insmod data/slub3.ko ，使用slabinfo -v查看结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c">=============================================================================<br><br>BUG kmalloc<span class="hljs-number">-128</span> (Tainted: G B O ): Poison overwritten----------------------------------------------slab名称为kmalloc<span class="hljs-number">-64</span>，问题类型是：Poison overwritten，即访问已释放内存。<br>-----------------------------------------------------------------------------<br><br> <br><br>INFO: <span class="hljs-number">0xffff800077692800</span><span class="hljs-number">-0xffff80007769281f</span>. First byte <span class="hljs-number">0x55</span> instead of <span class="hljs-number">0x6b</span><br>INFO: Allocated in create_slub_error+<span class="hljs-number">0x28</span>/<span class="hljs-number">0xf0</span> [slub3] age=<span class="hljs-number">1089</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">793</span>----------分配点的栈回溯<br>alloc_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x188</span><br>___slab_alloc.constprop<span class="hljs-number">.30</span>+<span class="hljs-number">0x3f8</span>/<span class="hljs-number">0x440</span><br>__slab_alloc.isra<span class="hljs-number">.27</span>.constprop<span class="hljs-number">.29</span>+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x38</span><br>kmem_cache_alloc+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x260</span><br>create_slub_error+<span class="hljs-number">0x28</span>/<span class="hljs-number">0xf0</span> [slub3]<br><span class="hljs-number">0xffff7ffffc00e014</span><br>do_one_initcall+<span class="hljs-number">0x90</span>/<span class="hljs-number">0x1a0</span><br>do_init_module+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x1cc</span><br>load_module+<span class="hljs-number">0x18dc</span>/<span class="hljs-number">0x1d78</span><br>SyS_init_module+<span class="hljs-number">0x150</span>/<span class="hljs-number">0x178</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Freed in create_slub_error+<span class="hljs-number">0x80</span>/<span class="hljs-number">0xf0</span> [slub3] age=<span class="hljs-number">1089</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">793</span>--------------释放点的栈回溯<br>free_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x380</span><br>__slab_free+<span class="hljs-number">0x344</span>/<span class="hljs-number">0x4a0</span><br>kfree+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x220</span><br>create_slub_error+<span class="hljs-number">0x80</span>/<span class="hljs-number">0xf0</span> [slub3]<br><span class="hljs-number">0xffff7ffffc00e014</span><br>do_one_initcall+<span class="hljs-number">0x90</span>/<span class="hljs-number">0x1a0</span><br>do_init_module+<span class="hljs-number">0x60</span>/<span class="hljs-number">0x1cc</span><br>load_module+<span class="hljs-number">0x18dc</span>/<span class="hljs-number">0x1d78</span><br>SyS_init_module+<span class="hljs-number">0x150</span>/<span class="hljs-number">0x178</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Slab <span class="hljs-number">0xffff7bffc2dda480</span> objects=<span class="hljs-number">16</span> used=<span class="hljs-number">16</span> fp=<span class="hljs-number">0</span>x (null) flags=<span class="hljs-number">0x4080</span><br>INFO: Object <span class="hljs-number">0xffff800077692800</span> @offset=<span class="hljs-number">2048</span> fp=<span class="hljs-number">0xffff800077692400</span><br><br> <br><br>Bytes b4 ffff8000776927f0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Object ffff800077692800: <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> UUUUUUUUUUUUUUUU--------前<span class="hljs-number">32</span>字节仍然被修改成功。<br>Object ffff800077692810: <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> UUUUUUUUUUUUUUUU<br>Object ffff800077692820: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff800077692830: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff800077692840: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff800077692850: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff800077692860: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> kkkkkkkkkkkkkkkk<br>Object ffff800077692870: <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> <span class="hljs-number">6b</span> a5 kkkkkkkkkkkkkkk.<br>Redzone ffff800077692880: bb bb bb bb bb bb bb bb ........<br>Padding ffff8000776929c0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff8000776929d0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff8000776929e0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>Padding ffff8000776929f0: <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a <span class="hljs-number">5</span>a ZZZZZZZZZZZZZZZZ<br>CPU: <span class="hljs-number">0</span> PID: <span class="hljs-number">795</span> Comm: slabinfo Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">116</span><br>Hardware name: linux,dummy-virt (DT)<br>Call trace:<br>[&lt;ffff800000089738&gt;] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x108</span><br>[&lt;ffff800000089854&gt;] show_stack+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x20</span><br>[&lt;ffff8000003253c4&gt;] dump_stack+<span class="hljs-number">0x94</span>/<span class="hljs-number">0xd0</span><br>[&lt;ffff800000196460&gt;] print_trailer+<span class="hljs-number">0x128</span>/<span class="hljs-number">0x1b8</span><br>[&lt;ffff800000196848&gt;] check_bytes_and_report+<span class="hljs-number">0xd8</span>/<span class="hljs-number">0x118</span><br>[&lt;ffff800000196a54&gt;] check_object+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x240</span><br>[&lt;ffff800000197920&gt;] alloc_debug_processing+<span class="hljs-number">0x108</span>/<span class="hljs-number">0x188</span><br>[&lt;ffff800000199670&gt;] ___slab_alloc.constprop<span class="hljs-number">.30</span>+<span class="hljs-number">0x3f8</span>/<span class="hljs-number">0x440</span><br>[&lt;ffff8000001996dc&gt;] __slab_alloc.isra<span class="hljs-number">.27</span>.constprop<span class="hljs-number">.29</span>+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x38</span><br>[&lt;ffff8000001998dc&gt;] kmem_cache_alloc+<span class="hljs-number">0x1ec</span>/<span class="hljs-number">0x260</span><br>[&lt;ffff8000001d42fc&gt;] seq_open+<span class="hljs-number">0x34</span>/<span class="hljs-number">0x90</span><br>[&lt;ffff80000022059c&gt;] kernfs_fop_open+<span class="hljs-number">0x194</span>/<span class="hljs-number">0x370</span><br>[&lt;ffff8000001afb04&gt;] do_dentry_open+<span class="hljs-number">0x214</span>/<span class="hljs-number">0x318</span><br>[&lt;ffff8000001b0dc8&gt;] vfs_open+<span class="hljs-number">0x58</span>/<span class="hljs-number">0x68</span><br>[&lt;ffff8000001bf338&gt;] path_openat+<span class="hljs-number">0x460</span>/<span class="hljs-number">0xdf0</span><br>[&lt;ffff8000001c0ff0&gt;] do_filp_open+<span class="hljs-number">0x60</span>/<span class="hljs-number">0xe0</span><br>[&lt;ffff8000001b117c&gt;] do_sys_open+<span class="hljs-number">0x12c</span>/<span class="hljs-number">0x218</span><br>[&lt;ffff8000001fd53c&gt;] compat_SyS_open+<span class="hljs-number">0x1c</span>/<span class="hljs-number">0x28</span><br>[&lt;ffff800000085cb0&gt;] el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>FIX kmalloc<span class="hljs-number">-128</span>: Restoring <span class="hljs-number">0xffff800077692800</span><span class="hljs-number">-0xffff80007769281f</span>=<span class="hljs-number">0x6b</span><br><br> <br><br>FIX kmalloc<span class="hljs-number">-128</span>: Marking all objects used<br>SLUB: kmalloc<span class="hljs-number">-128</span> <span class="hljs-number">210</span> slabs counted but counter=<span class="hljs-number">211</span><br>slabinfo (<span class="hljs-number">795</span>) used greatest <span class="hljs-built_in">stack</span> depth: <span class="hljs-number">12976</span> bytes left<br></code></pre></td></tr></table></figure><h5 id="slub-memkeak">slub-memkeak</h5><ul><li><p><a href="https://zhuanlan.zhihu.com/p/341356576">slab申请释放和追踪</a></p></li><li><p><a href="https://blog.csdn.net/bin_linux96/article/details/79496803">内存泄露调试分析(一)</a></p></li><li><p><a href="https://blog.csdn.net/Ivan804638781/article/details/112884838">【内存管理】【slab】/sys/kernel/slab/＜slab name＞/trace解析</a></p></li><li><p><a href="https://blog.csdn.net/monkeyzh123/article/details/119840691"><font color=Red>SLAB内存泄露分析实践</font></a></p></li><li><p><a href="https://blog.arstercz.com/what-to-do-when-linux-slab-memory-leak/"><font color=Red>发生 SLAB 内存泄漏该怎么办</font></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /sys/kernel/slab/amdgpu_fence/<br><span class="hljs-built_in">echo</span> 1 &gt; trace  &amp;&amp; <span class="hljs-built_in">sleep</span> 10 &amp;&amp; <span class="hljs-built_in">echo</span> 0 &gt; trace<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> alloc_calls <br>    173 amdgpu_fence_emit+0x38/0x168 [amdgpu] age=104/13966/19586 pid=41-279 cpus=0-2<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> free_calls <br>    117 &lt;not-available&gt; age=4294919470 pid=0 cpus=0<br>    56 amdgpu_fence_free+0x30/0x38 [amdgpu] age=169/10203/25074 pid=0-1419 cpus=0-2<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /var/log/kern.log<br><br>2024-01-10 13:39:15 wujing-PC kernel: [  166.228864] Hardware name: BXC BM6J80/TBD, BIOS KL4.23.TF.N.021.210510.R 05/10/21 15:33:37<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.237115] Call trace:<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.239550]  dump_backtrace+0x0/0x190<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.243200]  show_stack+0x14/0x20<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.246503]  dump_stack+0xa8/0xcc<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.249806]  free_debug_processing+0x19c/0x3a0<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.254237]  __slab_free+0x230/0x3f8<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.257801]  kmem_cache_free+0x200/0x220<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.261801]  amdgpu_fence_free+0x30/0x38 [amdgpu]<br><br>2024-01-10 13:39:15 wujing-PC kernel: [  166.266493]  rcu_process_callbacks+0x2d8/0x500<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.270925]  __do_softirq+0x110/0x2e8<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.274576]  irq_exit+0x9c/0xb8<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.277706]  __handle_domain_irq+0x64/0xb8<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.281790]  gic_handle_irq+0x7c/0x178<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.285526]  el1_irq+0xb0/0x140<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.288656]  arch_cpu_idle+0x2c/0x1b0<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.292305]  do_idle+0x1d4/0x238<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.295521]  cpu_startup_entry+0x24/0x28<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.299432]  secondary_start_kernel+0x158/0x168<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.304153] TRACE amdgpu_fence free 0x000000004f170f7a inuse=6 fp=0x00000000ef60c3a4<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.311886] Object 000000004f170f7a: 00 00 00 00 6b 6b 6b 6b 38 b9 e2 00 00 00 ff ff  ....kkkk8.......<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.321180] Object 00000000de513b7f: b0 7c d3 7e 20 80 ff ff f8 41 cc 00 00 00 ff ff  .|.~ ....A......<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.330473] Object 00000000dca91573: 60 aa db 87 20 80 ff ff 60 aa db 87 20 80 ff ff  `... ...`... ...<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.339767] Object 00000000cc2e4487: 04 4d 68 dc 20 80 ff ff 00 00 00 00 00 00 00 00  .Mh. ...........<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.349060] Object 00000000befbbd4b: 89 02 00 00 6b 6b 6b 6b 07 00 00 00 00 00 00 00  ....kkkk........<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.358353] Object 00000000a4cce3a9: d2 8a c4 b0 24 00 00 00 00 00 00 00 6b 6b 6b 6b  ....$.......kkkk<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.367646] Object 00000000e8ae45cf: 98 4c 68 dc 20 80 ff ff                          .Lh. ...<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.376247] CPU: 2 PID: 21 Comm: ksoftirqd/2 Kdump: loaded Tainted: G           O      4.19.0-arm64-desktop-tyy-5819-ext4-slub-debug-kmemleak <span class="hljs-comment">#5819</span><br>2024-01-10 13:39:15 wujing-PC kernel: [  166.389448] Hardware name: BXC BM6J80/TBD, BIOS KL4.23.TF.N.021.210510.R 05/10/21 15:33:37<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.397699] Call trace:<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.400136]  dump_backtrace+0x0/0x190<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.403786]  show_stack+0x14/0x20<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.407089]  dump_stack+0xa8/0xcc<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.410393]  free_debug_processing+0x19c/0x3a0<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.414824]  __slab_free+0x230/0x3f8<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.418387]  kmem_cache_free+0x200/0x220<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.422410]  amdgpu_fence_free+0x30/0x38 [amdgpu]<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.427103]  rcu_process_callbacks+0x2d8/0x500<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.431535]  __do_softirq+0x110/0x2e8<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.435186]  run_ksoftirqd+0x30/0x40<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.438751]  smpboot_thread_fn+0x160/0x1a8<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.442835]  kthread+0x128/0x130<br>2024-01-10 13:39:15 wujing-PC kernel: [  166.446052]  ret_from_fork+0x10/0x18<br></code></pre></td></tr></table></figure></li></ul><h4 id="kmemleak">kmemleak</h4><ul><li><a href="https://mp.weixin.qq.com/s/fTBOd-lYViFNX0fV61mQyg">细说｜Linux内存泄漏检测实现原理与实现</a></li></ul><p>kmemleak是内核提供的一种检测内存泄露工具，启动一个内核线程扫描内存，并打印发现新的未引用对象数量。</p><h5 id="支持kmemleak内核选项">支持kmemleak内核选项</h5><p>要使用kmemlieak，需要打开如下内核选项。</p><p>Kernel hacking-&gt;Memory Debugging-&gt;Kernel memory leak detector：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">CONFIG_HAVE_DEBUG_KMEMLEAK=y<br>CONFIG_DEBUG_KMEMLEAK=y<br>CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE=400<br><span class="hljs-comment"># CONFIG_DEBUG_KMEMLEAK_TEST is not set</span><br>CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF=y---------或者关闭此选项，则不需要在命令行添加kmemleak=on。<br></code></pre></td></tr></table></figure><h5 id="构造测试环境">构造测试环境</h5><p>同时还需要在内核启动命令行中添加kmemleak=on。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -machine virt -cpu cortex-a57 -machine <span class="hljs-built_in">type</span>=virt -smp 2 -m 2048 -kernel <span class="hljs-built_in">arch</span>/arm64/boot/Image --append <span class="hljs-string">&quot;rdinit=/linuxrc console=ttyAMA0 loglevel=8 kmemleak=on&quot;</span> -nographic<br></code></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">char</span> *buf;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_kmemleak</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  buf = kmalloc(<span class="hljs-number">120</span>, GFP_KERNEL);<br>  buf = vmalloc(<span class="hljs-number">4096</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="进行测试-1">进行测试</h5><p>进行kmemleak测试之前，需要写入scan触发扫描操作。</p><p>然后通过读kmemlean节点读取相关信息。</p><ul><li>打开kmemlean扫描功能：echo scan &gt; sys/kernel/debug/kmemleak</li><li>加载问题module：insmod data/kmemleak.ko</li><li>等待问题发现：kmemleak: 2 new suspected memory leaks (see /sys/kernel/debug/kmemleak)</li><li>查看kmemleak结果：cat /sys/kernel/debug/kmemleak</li></ul><h5 id="分析测试结果">分析测试结果</h5><p>每处泄露，都标出泄露地址和大小；相关进程信息；内存内容dump；栈回溯。</p><p>kmemleak会提示内存泄露可疑对象的具体栈调用信息、可疑对象的大小、使用哪个函数分配、二进制打印。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">unreferenced object <span class="hljs-number">0xede22dc0</span> (size <span class="hljs-number">128</span>):-------------------------------------第一处可疑泄露<span class="hljs-number">128</span>字节<br>  comm <span class="hljs-string">&quot;insmod&quot;</span>, pid <span class="hljs-number">765</span>, jiffies <span class="hljs-number">4294941257</span> (age <span class="hljs-number">104.920</span>s)--------------------相关进程信息<br>  hex <span class="hljs-title function_">dump</span> <span class="hljs-params">(first <span class="hljs-number">32</span> bytes)</span>:---------------------------------------------------二进制打印<br>    6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk<br>    6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk<br>  backtrace:-------------------------------------------------------------------栈回溯<br>    [&lt;bf002014&gt;] 0xbf002014<br>    [&lt;c000973c&gt;] do_one_initcall+0x90/0x1d8<br>    [&lt;c00a71f4&gt;] do_init_module+0x60/0x38c<br>    [&lt;c0086898&gt;] load_module+0x1bac/0x1e94<br>    [&lt;c0086ccc&gt;] SyS_init_module+0x14c/0x15c<br>    [&lt;c000f3c0&gt;] ret_fast_syscall+0x0/0x3c<br>    [&lt;ffffffff&gt;] 0xffffffff<br>unreferenced object 0<span class="hljs-title function_">xf12ba000</span> <span class="hljs-params">(size <span class="hljs-number">4096</span>)</span>:<br>  comm &quot;insmod&quot;, pid 765, jiffies 4294941257 <span class="hljs-params">(age <span class="hljs-number">104.920</span>s)</span><br>  hex <span class="hljs-title function_">dump</span> <span class="hljs-params">(first <span class="hljs-number">32</span> bytes)</span>:<br>    d8 21 00 00 02 18 00 00 e4 21 00 00 02 18 00 00  .!.......!......<br>    46 22 00 00 02 18 00 00 52 22 00 00 02 18 00 00  F&quot;......R&quot;......<br>  backtrace:<br>    [&lt;c00d77c8&gt;] vmalloc+0x2c/0x34<br>    [&lt;bf002014&gt;] 0xbf002014<br>    [&lt;c000973c&gt;] do_one_initcall+0x90/0x1d8<br>    [&lt;c00a71f4&gt;] do_init_module+0x60/0x38c<br>    [&lt;c0086898&gt;] load_module+0x1bac/0x1e94<br>    [&lt;c0086ccc&gt;] SyS_init_module+0x14c/0x15c<br>    [&lt;c000f3c0&gt;] ret_fast_syscall+0x0/0x3c<br>    [&lt;ffffffff&gt;] 0xffffffff<br></code></pre></td></tr></table></figure><h4 id="kasan">kasan</h4><ul><li><a href="https://mp.weixin.qq.com/s/VoxZEXnGQNzIx8STBcQzkQ">内核并发消杀器（KCSAN）技术分析</a></li></ul><p>相关文档阅读：《<a href="https://www.ibm.com/developerworks/cn/linux/1608_tengr_kasan/index.html">Kasan - Linux 内核的内存检测工具</a>》《<a href="http://www.wowotech.net/memory_management/424.html">KASAN实现原理</a>》。</p><p>kasan暂不支持32位ARM，支持ARM64和X86。</p><p>kasan是一个动态检查内存错误的工具，可以检查内存越界访问、使用已释放内存、重复释放以及栈溢出。</p><h5 id="使能kasan">使能kasan</h5><p>使用kasan，必须打开CONFIG_KASAN。</p><p>Kernel hacking-&gt;Memory debugging-&gt;KASan: runtime memory debugger</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">CONFIG_SLUB_DEBUG=y <span class="hljs-comment"># 有些版本要求先开启 SLUB 分配器的调试配置宏 CONFIG_SLUB_DEBUG，才能看到 KASAN 的配置菜单项。最新版本已经不需要了，但是建议开启，因为可以打印更多有用的信息。</span><br>CONFIG_HAVE_ARCH_KASAN=y<br>CONFIG_KASAN=y<br><span class="hljs-comment"># CONFIG_KASAN_OUTLINE is not set</span><br>CONFIG_KASAN_INLINE=y<br>CONFIG_TEST_KASAN=m<br>CONFIG_STACKTRACE=y <span class="hljs-comment"># 为了更好地缺陷检查和报告</span><br></code></pre></td></tr></table></figure><h5 id="代码分析">代码分析</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">kasan_report<br><br>  -&gt;kasan_report_error<br><br>    -&gt;print_error_description<br><br>    -&gt;print_address_description<br><br>    -&gt;print_shadow_for_address<br></code></pre></td></tr></table></figure><h5 id="测试用及分析">测试用及分析</h5><p>kasan提供了一个测试程序test_kacan.c，将其编译成模块，加载到内核。可以模拟很多内存错误场景。</p><p>kasan可以检测到越界访问、访问已释放内存、重复释放等类型错误，其中重复释放借助于slub_debug。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">insmod data/kasan.ko<br></code></pre></td></tr></table></figure><p>越界访问包括slab越界、栈越界、全局变量越界；访问已释放内存use-after-free；重复释放可以被slub_debug识别。</p><h6 id="slab-out-of-bounds">slab-out-of-bounds</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> noinline <span class="hljs-type">void</span> __init <span class="hljs-title function_">kmalloc_oob_right</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">size_t</span> size = <span class="hljs-number">123</span>;<br><br>    pr_info(<span class="hljs-string">&quot;out-of-bounds to right\n&quot;</span>);<br>    ptr = kmalloc(size, GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!ptr) &#123;<br>        pr_err(<span class="hljs-string">&quot;Allocation failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ptr[size] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>    kfree(ptr);<br>&#125;<br></code></pre></td></tr></table></figure><p>此种错误类型是对slab的越界访问，包括左侧、右侧、扩大、缩小后越界访问。除了数组赋值，还包括memset、指针访问等等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c">al: kasan error test init<br>kasan test: kmalloc_oob_right out-of-bounds to right<br>==================================================================<br>BUG: KASAN: slab-out-of-bounds in kmalloc_oob_right+<span class="hljs-number">0xa4</span>/<span class="hljs-number">0xe0</span> [kasan] at addr ffff800066539c7b----------------错误类型是slab-out-of-bounds，在kmalloc_oob_right中产生。<br>Write of size <span class="hljs-number">1</span> by task insmod/<span class="hljs-number">788</span><br>=============================================================================<br>BUG kmalloc<span class="hljs-number">-128</span> (Tainted: G O ): kasan: bad access detected-------------------------------------------------------------------slab非法非法访问<br>-----------------------------------------------------------------------------<br><br>Disabling lock debugging due to kernel taint<br>INFO: Allocated in kmalloc_oob_right+<span class="hljs-number">0x54</span>/<span class="hljs-number">0xe0</span> [kasan] age=<span class="hljs-number">0</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">788</span>--------------------------------------------问题点kmalloc_oob_right的栈回溯<br>alloc_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x188</span><br>___slab_alloc.constprop<span class="hljs-number">.30</span>+<span class="hljs-number">0x3f8</span>/<span class="hljs-number">0x440</span><br>__slab_alloc.isra<span class="hljs-number">.27</span>.constprop<span class="hljs-number">.29</span>+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x38</span><br>kmem_cache_alloc+<span class="hljs-number">0x220</span>/<span class="hljs-number">0x280</span><br>kmalloc_oob_right+<span class="hljs-number">0x54</span>/<span class="hljs-number">0xe0</span> [kasan]<br>kmalloc_tests_init+<span class="hljs-number">0x18</span>/<span class="hljs-number">0x70</span> [kasan]<br>do_one_initcall+<span class="hljs-number">0x11c</span>/<span class="hljs-number">0x310</span><br>do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Freed in do_one_initcall+<span class="hljs-number">0x10c</span>/<span class="hljs-number">0x310</span> age=<span class="hljs-number">0</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">788</span><br>free_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x368</span><br>__slab_free+<span class="hljs-number">0x344</span>/<span class="hljs-number">0x4a0</span><br>kfree+<span class="hljs-number">0x21c</span>/<span class="hljs-number">0x250</span><br>do_one_initcall+<span class="hljs-number">0x10c</span>/<span class="hljs-number">0x310</span><br>do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Slab <span class="hljs-number">0xffff7bffc2994e00</span> objects=<span class="hljs-number">16</span> used=<span class="hljs-number">2</span> fp=<span class="hljs-number">0xffff800066539e00</span> flags=<span class="hljs-number">0x4080</span><br>INFO: Object <span class="hljs-number">0xffff800066539c00</span> @offset=<span class="hljs-number">7168</span> fp=<span class="hljs-number">0xffff800066538200</span><br><br>Bytes b4 ffff800066539bf0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................------------------------------内存dump<br>Object ffff800066539c00: <span class="hljs-number">00</span> <span class="hljs-number">82</span> <span class="hljs-number">53</span> <span class="hljs-number">66</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff <span class="hljs-number">74</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">73</span> <span class="hljs-number">5f</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e ..Sf....tests_in<br>Object ffff800066539c10: <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">20</span> <span class="hljs-number">5b</span> <span class="hljs-number">6b</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">61</span> <span class="hljs-number">6</span>e <span class="hljs-number">5</span>d <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> it [kasan]......<br>Object ffff800066539c20: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539c30: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539c40: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539c50: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539c60: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539c70: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539db0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539dc0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539dd0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539de0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539df0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>CPU: <span class="hljs-number">1</span> PID: <span class="hljs-number">788</span> Comm: insmod Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">108</span>------------------------------------------------------------------打印此<span class="hljs-built_in">log</span>消息的栈回溯<br>Hardware name: linux,dummy-virt (DT)<br>Call trace:<br>[&lt;ffff80000008e938&gt;] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x270</span><br>[&lt;ffff80000008ebbc&gt;] show_stack+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x20</span><br>[&lt;ffff800000735bb0&gt;] dump_stack+<span class="hljs-number">0x100</span>/<span class="hljs-number">0x188</span><br>[&lt;ffff800000318f60&gt;] print_trailer+<span class="hljs-number">0xf8</span>/<span class="hljs-number">0x160</span><br>[&lt;ffff80000031ea8c&gt;] object_err+<span class="hljs-number">0x3c</span>/<span class="hljs-number">0x50</span><br>[&lt;ffff8000003209a0&gt;] kasan_report_error+<span class="hljs-number">0x240</span>/<span class="hljs-number">0x558</span><br>[&lt;ffff800000320e90&gt;] __asan_report_store1_noabort+<span class="hljs-number">0x48</span>/<span class="hljs-number">0x50</span><br>[&lt;ffff7ffffc008324&gt;] kmalloc_oob_right+<span class="hljs-number">0xa4</span>/<span class="hljs-number">0xe0</span> [kasan]<br>[&lt;ffff7ffffc009070&gt;] kmalloc_tests_init+<span class="hljs-number">0x18</span>/<span class="hljs-number">0x70</span> [kasan]<br>[&lt;ffff80000008309c&gt;] do_one_initcall+<span class="hljs-number">0x11c</span>/<span class="hljs-number">0x310</span><br>[&lt;ffff8000002648c4&gt;] do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>[&lt;ffff800000206724&gt;] load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>[&lt;ffff800000207dc0&gt;] SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>[&lt;ffff800000086cb0&gt;] el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>Memory state around the buggy address:<br>ffff800066539b00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>ffff800066539b80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>&gt;ffff800066539c00: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span><br>^<br>ffff800066539c80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>ffff800066539d00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>==================================================================<br></code></pre></td></tr></table></figure><h6 id="user-after-free">user-after-free</h6><p>user-after-free是释放后使用的意思。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> noinline <span class="hljs-type">void</span> __init <span class="hljs-title function_">kmalloc_uaf</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *ptr;<br>    <span class="hljs-type">size_t</span> size = <span class="hljs-number">10</span>;<br><br>    pr_info(<span class="hljs-string">&quot;use-after-free\n&quot;</span>);<br>    ptr = kmalloc(size, GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!ptr) &#123;<br>        pr_err(<span class="hljs-string">&quot;Allocation failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    kfree(ptr);<br>    *(ptr + <span class="hljs-number">8</span>) = <span class="hljs-string">&#x27;x&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c">kasan test: kmalloc_uaf use-after-<span class="hljs-built_in">free</span><br>==================================================================<br>BUG: KASAN: use-after-<span class="hljs-built_in">free</span> in kmalloc_uaf+<span class="hljs-number">0xac</span>/<span class="hljs-number">0xe0</span> [kasan] at addr ffff800066539e08<br>Write of size <span class="hljs-number">1</span> by task insmod/<span class="hljs-number">788</span><br>=============================================================================<br>BUG kmalloc<span class="hljs-number">-128</span> (Tainted: G B O ): kasan: bad access detected<br>-----------------------------------------------------------------------------<br><br>INFO: Allocated in kmalloc_uaf+<span class="hljs-number">0x54</span>/<span class="hljs-number">0xe0</span> [kasan] age=<span class="hljs-number">0</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">788</span><br>alloc_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x188</span><br>___slab_alloc.constprop<span class="hljs-number">.30</span>+<span class="hljs-number">0x3f8</span>/<span class="hljs-number">0x440</span><br>__slab_alloc.isra<span class="hljs-number">.27</span>.constprop<span class="hljs-number">.29</span>+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x38</span><br>kmem_cache_alloc+<span class="hljs-number">0x220</span>/<span class="hljs-number">0x280</span><br>kmalloc_uaf+<span class="hljs-number">0x54</span>/<span class="hljs-number">0xe0</span> [kasan]<br>kmalloc_tests_init+<span class="hljs-number">0x48</span>/<span class="hljs-number">0x70</span> [kasan]<br>do_one_initcall+<span class="hljs-number">0x11c</span>/<span class="hljs-number">0x310</span><br>do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Freed in kmalloc_uaf+<span class="hljs-number">0x84</span>/<span class="hljs-number">0xe0</span> [kasan] age=<span class="hljs-number">0</span> cpu=<span class="hljs-number">1</span> pid=<span class="hljs-number">788</span><br>free_debug_processing+<span class="hljs-number">0x17c</span>/<span class="hljs-number">0x368</span><br>__slab_free+<span class="hljs-number">0x344</span>/<span class="hljs-number">0x4a0</span><br>kfree+<span class="hljs-number">0x21c</span>/<span class="hljs-number">0x250</span><br>kmalloc_uaf+<span class="hljs-number">0x84</span>/<span class="hljs-number">0xe0</span> [kasan]<br>kmalloc_tests_init+<span class="hljs-number">0x48</span>/<span class="hljs-number">0x70</span> [kasan]<br>do_one_initcall+<span class="hljs-number">0x11c</span>/<span class="hljs-number">0x310</span><br>do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>INFO: Slab <span class="hljs-number">0xffff7bffc2994e00</span> objects=<span class="hljs-number">16</span> used=<span class="hljs-number">1</span> fp=<span class="hljs-number">0xffff800066539e00</span> flags=<span class="hljs-number">0x4080</span><br>INFO: Object <span class="hljs-number">0xffff800066539e00</span> @offset=<span class="hljs-number">7680</span> fp=<span class="hljs-number">0xffff800066539800</span><br><br>Bytes b4 ffff800066539df0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539e00: <span class="hljs-number">00</span> <span class="hljs-number">98</span> <span class="hljs-number">53</span> <span class="hljs-number">66</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ..Sf............<br>Object ffff800066539e10: <span class="hljs-number">00</span> <span class="hljs-number">9</span>e <span class="hljs-number">53</span> <span class="hljs-number">66</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff d0 <span class="hljs-number">51</span> <span class="hljs-number">12</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff ..Sf.....Q......<br>Object ffff800066539e20: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> e0 <span class="hljs-number">14</span> <span class="hljs-number">6</span>d <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff ..........m.....<br>Object ffff800066539e30: <span class="hljs-number">00</span> <span class="hljs-number">69</span> a3 <span class="hljs-number">66</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff <span class="hljs-number">18</span> <span class="hljs-number">69</span> a3 <span class="hljs-number">66</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff .i.f.....i.f....<br>Object ffff800066539e40: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539e50: <span class="hljs-number">30</span> da <span class="hljs-number">73</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff <span class="hljs-number">00</span> <span class="hljs-number">69</span> a3 <span class="hljs-number">66</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff ff <span class="hljs-number">0.</span>s......i.f....<br>Object ffff800066539e60: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Object ffff800066539e70: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539fb0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539fc0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539fd0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539fe0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>Padding ffff800066539ff0: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ................<br>CPU: <span class="hljs-number">1</span> PID: <span class="hljs-number">788</span> Comm: insmod Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">108</span><br>Hardware name: linux,dummy-virt (DT)<br>Call trace:<br>[&lt;ffff80000008e938&gt;] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x270</span><br>[&lt;ffff80000008ebbc&gt;] show_stack+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x20</span><br>[&lt;ffff800000735bb0&gt;] dump_stack+<span class="hljs-number">0x100</span>/<span class="hljs-number">0x188</span><br>[&lt;ffff800000318f60&gt;] print_trailer+<span class="hljs-number">0xf8</span>/<span class="hljs-number">0x160</span><br>[&lt;ffff80000031ea8c&gt;] object_err+<span class="hljs-number">0x3c</span>/<span class="hljs-number">0x50</span><br>[&lt;ffff8000003209a0&gt;] kasan_report_error+<span class="hljs-number">0x240</span>/<span class="hljs-number">0x558</span><br>[&lt;ffff800000320e90&gt;] __asan_report_store1_noabort+<span class="hljs-number">0x48</span>/<span class="hljs-number">0x50</span><br>[&lt;ffff7ffffc00874c&gt;] kmalloc_uaf+<span class="hljs-number">0xac</span>/<span class="hljs-number">0xe0</span> [kasan]<br>[&lt;ffff7ffffc0090a0&gt;] kmalloc_tests_init+<span class="hljs-number">0x48</span>/<span class="hljs-number">0x70</span> [kasan]<br>[&lt;ffff80000008309c&gt;] do_one_initcall+<span class="hljs-number">0x11c</span>/<span class="hljs-number">0x310</span><br>[&lt;ffff8000002648c4&gt;] do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>[&lt;ffff800000206724&gt;] load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>[&lt;ffff800000207dc0&gt;] SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>[&lt;ffff800000086cb0&gt;] el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>Memory state around the buggy address:<br>ffff800066539d00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>ffff800066539d80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>&gt;ffff800066539e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb<br>^<br>ffff800066539e80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>ffff800066539f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc<br>==================================================================<br></code></pre></td></tr></table></figure><h6 id="stack-out-of-bounds">stack-out-of-bounds</h6><p>栈越界访问是函数中数组越界，在实际工程中经常出现，问题难以发现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> noinline <span class="hljs-type">void</span> __init <span class="hljs-title function_">kasan_stack_oob</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> stack_array[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> *p = &amp;stack_array[ARRAY_SIZE(stack_array) + i];<br><br>    pr_info(<span class="hljs-string">&quot;out-of-bounds on stack\n&quot;</span>);<br>    *(<span class="hljs-keyword">volatile</span> <span class="hljs-type">char</span> *)p;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">kasan test: kasan_stack_oob out-of-bounds on <span class="hljs-built_in">stack</span><br>==================================================================<br>BUG: KASAN: <span class="hljs-built_in">stack</span>-out-of-bounds in kasan_stack_oob+<span class="hljs-number">0xa8</span>/<span class="hljs-number">0xf0</span> [kasan] at addr ffff800066acb95a<br>Read of size <span class="hljs-number">1</span> by task insmod/<span class="hljs-number">788</span><br>page:ffff7bffc29ab2c0 count:<span class="hljs-number">0</span> mapcount:<span class="hljs-number">0</span> mapping: (null) index:<span class="hljs-number">0x0</span><br>flags: <span class="hljs-number">0x0</span>()<br>page dumped because: kasan: bad access detected<br>CPU: <span class="hljs-number">1</span> PID: <span class="hljs-number">788</span> Comm: insmod Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">108</span><br>Hardware name: linux,dummy-virt (DT)<br>Call trace:<br>[&lt;ffff80000008e938&gt;] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x270</span><br>[&lt;ffff80000008ebbc&gt;] show_stack+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x20</span><br>[&lt;ffff800000735bb0&gt;] dump_stack+<span class="hljs-number">0x100</span>/<span class="hljs-number">0x188</span><br>[&lt;ffff800000320c90&gt;] kasan_report_error+<span class="hljs-number">0x530</span>/<span class="hljs-number">0x558</span><br>[&lt;ffff800000320d00&gt;] __asan_report_load1_noabort+<span class="hljs-number">0x48</span>/<span class="hljs-number">0x50</span><br>[&lt;ffff7ffffc0080a8&gt;] kasan_stack_oob+<span class="hljs-number">0xa8</span>/<span class="hljs-number">0xf0</span> [kasan]<br>[&lt;ffff7ffffc0090b0&gt;] kmalloc_tests_init+<span class="hljs-number">0x58</span>/<span class="hljs-number">0x70</span> [kasan]<br>[&lt;ffff80000008309c&gt;] do_one_initcall+<span class="hljs-number">0x11c</span>/<span class="hljs-number">0x310</span><br>[&lt;ffff8000002648c4&gt;] do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>[&lt;ffff800000206724&gt;] load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>[&lt;ffff800000207dc0&gt;] SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>[&lt;ffff800000086cb0&gt;] el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>Memory state around the buggy address:<br>ffff800066acb800: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>ffff800066acb880: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> f1 f1<br>&gt;ffff800066acb900: f1 f1 <span class="hljs-number">04</span> f4 f4 f4 f2 f2 f2 f2 <span class="hljs-number">00</span> <span class="hljs-number">02</span> f4 f4 f3 f3<br>^<br>ffff800066acb980: f3 f3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> f1 f1<br>ffff800066acba00: f1 f1 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> f3 f3 f3 f3 <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>==================================================================<br></code></pre></td></tr></table></figure><h6 id="global-out-of-bounds">global-out-of-bounds</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">char</span> global_array[<span class="hljs-number">10</span>];<br><br><span class="hljs-type">static</span> noinline <span class="hljs-type">void</span> __init <span class="hljs-title function_">kasan_global_oob</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">char</span> *p = &amp;global_array[ARRAY_SIZE(global_array) + i];<br><br>    pr_info(<span class="hljs-string">&quot;out-of-bounds global variable\n&quot;</span>);<br>    *(<span class="hljs-keyword">volatile</span> <span class="hljs-type">char</span> *)p;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">kasan test: kasan_global_oob out-of-bounds global variable<br>==================================================================<br>BUG: KASAN: global-out-of-bounds in kasan_global_oob+<span class="hljs-number">0x9c</span>/<span class="hljs-number">0xe8</span> [kasan] at addr ffff7ffffc001c8d<br>Read of size <span class="hljs-number">1</span> by task insmod/<span class="hljs-number">788</span><br>Address belongs to variable global_array+<span class="hljs-number">0xd</span>/<span class="hljs-number">0xffffffffffffe3f8</span> [kasan]<br>CPU: <span class="hljs-number">1</span> PID: <span class="hljs-number">788</span> Comm: insmod Tainted: G B O <span class="hljs-number">4.4</span><span class="hljs-number">.0</span>+ #<span class="hljs-number">108</span><br>Hardware name: linux,dummy-virt (DT)<br>Call trace:<br>[&lt;ffff80000008e938&gt;] dump_backtrace+<span class="hljs-number">0x0</span>/<span class="hljs-number">0x270</span><br>[&lt;ffff80000008ebbc&gt;] show_stack+<span class="hljs-number">0x14</span>/<span class="hljs-number">0x20</span><br>[&lt;ffff800000735bb0&gt;] dump_stack+<span class="hljs-number">0x100</span>/<span class="hljs-number">0x188</span><br>[&lt;ffff800000320c90&gt;] kasan_report_error+<span class="hljs-number">0x530</span>/<span class="hljs-number">0x558</span><br>[&lt;ffff800000320d00&gt;] __asan_report_load1_noabort+<span class="hljs-number">0x48</span>/<span class="hljs-number">0x50</span><br>[&lt;ffff7ffffc00818c&gt;] kasan_global_oob+<span class="hljs-number">0x9c</span>/<span class="hljs-number">0xe8</span> [kasan]<br>[&lt;ffff7ffffc0090b4&gt;] kmalloc_tests_init+<span class="hljs-number">0x5c</span>/<span class="hljs-number">0x70</span> [kasan]<br>[&lt;ffff80000008309c&gt;] do_one_initcall+<span class="hljs-number">0x11c</span>/<span class="hljs-number">0x310</span><br>[&lt;ffff8000002648c4&gt;] do_init_module+<span class="hljs-number">0x1cc</span>/<span class="hljs-number">0x588</span><br>[&lt;ffff800000206724&gt;] load_module+<span class="hljs-number">0x48cc</span>/<span class="hljs-number">0x5dc0</span><br>[&lt;ffff800000207dc0&gt;] SyS_init_module+<span class="hljs-number">0x1a8</span>/<span class="hljs-number">0x1e0</span><br>[&lt;ffff800000086cb0&gt;] el0_svc_naked+<span class="hljs-number">0x24</span>/<span class="hljs-number">0x28</span><br>Memory state around the buggy address:<br>ffff7ffffc001b80: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>ffff7ffffc001c00: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>&gt;ffff7ffffc001c80: <span class="hljs-number">00</span> <span class="hljs-number">02</span> fa fa fa fa fa fa <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>^<br>ffff7ffffc001d00: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>ffff7ffffc001d80: <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>==================================================================<br></code></pre></td></tr></table></figure><h4 id="小结">小结</h4><p>kmemleak检查内存泄露的独门绝技，让其有一定市场空间。但功能比较单一，专注于内存泄露问题。</p><p>对于非ARM64/x86平台，只能使用slub_debug进行内存问题分析；kasan更高效，但也需要更高的内核和GCC版本支持。</p><h4 id="memstacks-pgfaultstacks">memstacks pgfaultstacks</h4><ul><li><a href="https://www.toutiao.com/article/7208070738077614651">2个压箱底的方法和工具搞定内存泄漏</a></li></ul><h3 id="用户虚拟空间">用户虚拟空间</h3><h4 id="mtrace-valgrind">mtrace valgrind</h4><ul><li><p><a href="https://www.toutiao.com/article/7185538936058479159"><font color=Red>实例分析Linux内存泄漏检测方法</font></a></p></li><li><p><a href="https://www.toutiao.com/article/7104560595789185539"><font color=Red>内存泄漏-原因、避免和定位</font></a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/75416381"><font color=Red>内存泄漏检测工具valgrind神器</font></a></p></li><li><p><a href="https://www.guyuehome.com/34716">Valgrind对ROS程序的可视化分析</a></p></li><li><p><a href="https://www.jianshu.com/p/6854085d54cd">利用Valgrind和gperftools解决内存问题</a></p></li><li><p><a href="http://senlinzhan.github.io/2017/12/31/valgrind/">使用 Valgrind 检测 C++ 内存泄漏</a></p></li><li><p><a href="https://www.toutiao.com/i7054082694740836895">彻底搞清楚内存泄漏的原因，如何避免内存泄漏，如何定位内存泄漏</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/75416381"><font color=Red>内存泄漏检测工具valgrind神器</font></a></p></li></ul><h4 id="asan">asan</h4><ul><li><a href="http://www.cppblog.com/markqian86/archive/2018/06/14/215728.html">Linux下内存检测工具：asan</a></li></ul><h2 id="more">More</h2><ul><li><a href="https://mp.weixin.qq.com/s/-IiGz4lWXIqV-4kbgWeEcg">同一块内存，连续两次memset，耗时相差4倍！揪出隐藏的性能杀手！</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统安全</title>
    <link href="/linux/kernel/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    <url>/linux/kernel/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="系统安全">系统安全</h1><ul><li><a href="https://blog.csdn.net/moRickyer/article/details/126007548">linux系统安全</a></li><li><a href="https://share.pkemb.com/books/Linux%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%20-%20%E6%9D%8E%E5%BF%97.pdf">Linux内核安全模块深入剖析- 李志.pdf</a></li></ul><h2 id="cft">CFT</h2><ul><li><p><a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-1.1_ctf.md">CTF竞赛入门指南(CTF All In One)</a></p></li><li><p><a href="https://github.com/firmianay/CTF-All-In-One">CTF竞赛权威指南</a></p></li><li><p><a href="https://firmianay.gitbook.io/ctf-all-in-one/1_basic/1.1_ctf">GitBook CTF竞赛权威指南</a></p></li><li><p><a href="https://paper.seebug.org/">洞悉漏洞</a></p></li></ul><h2 id="user">user</h2><ul><li><a href="https://www.junmajinlong.com/linux/user_and_group/">用户和组管理</a></li><li><a href="http://c.biancheng.net/view/859.html"><font color=Red>Linux gpasswd命令用法详解：把用户添加进组或从组中删除</font></a></li></ul><p>创建一个新用户 wujing，指定家目录为 /home/wujing，登录 shell 为 /bin/bash，可以使用 useradd 或 adduser 命令:</p><p>使用useradd命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo useradd -m -d /home/wujing -s /bin/bash wujing<br></code></pre></td></tr></table></figure><p>使用adduser命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo adduser --home /home/wujing --shell /bin/bash wujing<br></code></pre></td></tr></table></figure><p>将用户wujing添加到sudo组:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gpasswd -a wujing sudo<br></code></pre></td></tr></table></figure><p>使用 usermod -G 命令也可以将用户加入群组，但会产生一个问题，即使用此命令将用户加入到新的群组后，该用户之前加入的那些群组都将被清空。</p><p>可以使用 usermod -aG 命令来解决这个问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG sudo wujing<br></code></pre></td></tr></table></figure><ul><li><a href="https://wangchujiang.com/linux-command/c/logname.html">logname-打印当前终端登录用户的名称</a></li></ul><h2 id="su-sudo">su sudo</h2><ul><li><a href="https://sysin.org/blog/linux-root/"><font color=Red>关于 root 和 wheel：在 Linux 中创建管理员账号（root 权限）的正确方式</font></a></li><li><a href="https://www.junmajinlong.com/linux/su_and_sudo/"><font color=Red>su和sudo</font></a></li><li><a href="https://mp.weixin.qq.com/s/z127ryX6ueeVf-8FdK07vw">Linux命令su和sudo的区别？</a></li><li><a href="http://c.biancheng.net/view/877.html">Linux sudo命令用法详解：系统权限管理</a></li><li><a href="https://www.cnblogs.com/lfri/p/16277069.html">解决 sudo 执行命令时找不到命令问题</a></li><li><a href="https://www.toutiao.com/article/7166040304326279721/">sudo命令免密设置方法</a></li><li><a href="https://mp.weixin.qq.com/s/ZWBWgosUdx2hbBXI1DxlkQ">Linux 中 root 与 sudo 的用法与区别，居然这么多人搞不清楚！</a></li></ul><h2 id="pkexec">pkexec</h2><ul><li><a href="https://www.jianshu.com/p/ce499e6e631e">Linux命令-2：强大的pkexec</a></li><li><a href="https://askubuntu.com/questions/383747/how-to-configure-pkexec-to-not-ask-for-password">How to configure pkexec to not ask for password?</a></li></ul><h2 id="passwd">passwd</h2><ul><li><a href="https://www.junmajinlong.com/linux/user_and_group/">用户和组管理</a></li><li><a href="https://blog.csdn.net/vivian_king/article/details/45038331">Linux 设置短密码 and hostname_vivian的专栏-CSDN博客</a></li><li><a href="https://blog.csdn.net/stone_fall/article/details/109078160">Linux | 查看用户、用户组 | /etc/passwd详解 | /etc/group详解_我是一块小石头-CSDN博客</a></li><li><a href="https://mp.weixin.qq.com/s/U0BQ-vva9SYzjPKveyaAcA">统信UOS使用4种方法重置用户密码</a></li></ul><h2 id="wheel用户组">Wheel用户组</h2><ul><li><a href="https://www.cnblogs.com/kerrycode/p/7053118.html">Linux下Wheel用户组介绍</a></li></ul><h2 id="capability">Capability</h2><ul><li><a href="https://blog.csdn.net/weixin_39219503/article/details/106888174">Linux capability详解</a></li><li><a href="https://blog.csdn.net/ty3219/article/details/123303114">Linux capability机制</a></li><li><a href="https://blog.csdn.net/qq_55316925/article/details/128287774">linux下capabilities基础操作</a></li></ul><h2 id="pam">PAM</h2><ul><li><a href="https://gohalo.me/post/linux-pam-security-introduce.html">Linux PAM 认证机制使用详解</a></li><li><a href="https://www.cnblogs.com/yinzhengjie/p/8395279.html">PAM(Pluggable Authentication Modules)认证机制详情</a></li></ul><h2 id="openssl">openssl</h2><ul><li><p><a href="https://www.junmajinlong.com/linux/index/#blogopenssl">openssl系列</a></p></li><li><p><a href="https://blog.csdn.net/CHENYAoo/article/details/107703762">校验和checksum、哈希值是什么？</a></p></li><li><p><a href="https://blog.csdn.net/pwl999/article/details/110878563">Linux DAC 权限管理详解</a></p></li><li><p><a href="https://blog.csdn.net/pwl999/article/details/107066666">LSM(Linux Security Modules)框架原理解析</a></p></li></ul><h2 id="selinux">selinux</h2><ul><li><p><a href="https://www.redhat.com/zh/topics/linux/what-is-selinux">SELinux是什么? 开启SELinux - 红帽 (redhat.com)</a></p></li><li><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/using_selinux/index"><font color=Red>使用SELinux-红帽文档</font></a></p></li><li><p><a href="http://c.biancheng.net/linux_tutorial/18/"><font color=Red>首页 &gt; Linux &gt; SELinux管理 http://c.biancheng.net/linux_tutorial/18/</font></a></p></li><li><p><a href="https://zq99299.github.io/linux-tutorial/tutorial-basis/16/05.html"><font color=Red>SELinux初探</font></a></p></li><li><p><a href="https://blog.csdn.net/MyArrow/article/details/9856095">SELinux深入理解</a></p></li><li><p><a href="https://www.cnblogs.com/caseyzq/p/16888960.html">SELinux简介</a></p></li><li><p><a href="https://blog.csdn.net/u014674293/article/details/119277580"><font color=Red>[Linux 基础] 一文彻底明白 Linux 中的 selinux 到底是什么</font></a></p></li><li><p><a href="https://www.cnblogs.com/kelelipeng/p/10371593.html">一文彻底明白linux中的selinux到底是什么</a></p></li><li><p><a href="https://blog.csdn.net/xy010902100449/article/details/125551444">Linux内核学习笔记——SELinux介绍（SELinux Policy是什么？）</a></p></li><li><p><a href="https://www.cnblogs.com/hy627/p/14230003.html">安全利器 — SELinux</a></p></li><li><p><a href="https://www.cnblogs.com/tcxa/archive/2021/06/08/14862151.html"><font color=Red>安全利器 — SELinux</font></a></p></li><li><p><a href="https://www.toutiao.com/article/6828364453059232259">android 8.1安全机制—SEAndroid &amp; SELinux</a></p></li><li><p><a href="https://www.cnblogs.com/lizhi0755/articles/3333165.html">SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux® 上最杰出的新安全子系统。</a></p></li><li><p><a href="https://www.cnblogs.com/xiuyuanpingjie/p/10897937.html">linux的selinux的详细说明和关闭</a></p></li><li><p><a href="https://deepinout.com/linux-cmd/linux-selinux-related-cmd/linux-cmd-sestatus.html">Linux SELinux管理相关命令</a></p></li><li><p><a href="https://devpress.csdn.net/centos/62ecf56319c509286f417ba7.html#devmenu5">CentOS 7 上的 SELinux 简介 – 第 3 部分:用户</a></p></li><li><p><a href="https://www.cnblogs.com/vman/p/4968457.html">在bash shell中使用getfattr查看文件扩展属性</a></p></li><li><p><a href="https://blog.csdn.net/qq_15138049/article/details/122724898">Extended Attributes/xattr 文件系统扩展属性</a></p></li><li><p><a href="https://www.cnblogs.com/xuyaowen/archive/2020/04/11/linux-xattrs.html">Linux 文件系统扩展属性 xattr</a></p></li><li><p><a href="https://www.cnblogs.com/trickofjoker/p/11850336.html">[学习记录]SELinux自定义策略初步</a></p></li><li><p><a href="https://selinuxproject.org/page/RefpolicyWriteModule">https://selinuxproject.org/page/RefpolicyWriteModule</a></p></li><li><p><a href="https://blog.csdn.net/MyArrow/article/details/10073853">SELinux策略语言客体类别和许可</a></p></li><li><p><a href="https://blog.csdn.net/myarrow/article/details/10105961"><font color=Red>SELinux策略语言类型强制(编写TE规则)</font></a></p></li><li><p><a href="https://blog.csdn.net/qq_42282862/article/details/116484619"><font color=Red>Sepolicy学习（一）</font></a></p></li><li><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/using_selinux/creating-and-enforcing-an-selinux-policy-for-a-custom-application_writing-a-custom-selinux-policy"><font color=Red>8.2. 为自定义应用程序创建并强制 SELinux 策略</font></a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/2161594">selinux参考策略实验记录</a></p></li><li><p><a href="https://blog.csdn.net/yuchenxueyue/article/details/82590408">SElinux操作</a></p></li><li><p><a href="https://github.com/georou/prometheus-selinux/blob/master/prometheusd.te">https://github.com/georou/prometheus-selinux/blob/master/prometheusd.te</a></p></li><li><p><a href="https://github.com/SELinuxProject/selinux-notebook/blob/main/src/reference_policy.md"><font color=Red>https://github.com/SELinuxProject/selinux-notebook/blob/main/src/reference_policy.md</font></a></p></li><li><p><a href="https://www.cnblogs.com/pengyunjing/p/10663135.html">setsebool命令详解与SELinux管理</a></p></li><li><p><a href="https://blog.csdn.net/yolo_yyh/article/details/127874104">Linux系统的安全模块Selinux总结</a></p></li><li><p><a href="https://blog.csdn.net/wjyph/article/details/47260197">使用SELinux布尔值</a></p></li><li><p><a href="https://www.cnblogs.com/longbigbeard/p/15192518.html">Debina 系统，安装配置SELINUX</a></p></li><li><p><a href="https://wiki.debian.org/SELinux/Setup">https://wiki.debian.org/SELinux/Setup</a></p></li><li><p><a href="https://www.onitroad.com/jc/linux/ubuntu/faq/how-to-disable-enable-selinux-on-ubuntu-20-04-linux.html">如何在Ubuntu 20.04 Linux上禁用/启用SELinux</a></p></li><li><p><a href="https://www.cnblogs.com/call-me-dasheng/p/15888546.html">Ubuntu20安装SELinux</a></p></li></ul><h2 id="apparmor">apparmor</h2><ul><li><a href="https://icode.best/i/23341938189743">AppArmor与SElinux-爱代码爱编程</a></li><li><a href="https://www.sysgeek.cn/ubuntu-apparmor/">如何在 Ubuntu 中管理 AppArmor 服务和配置文件</a></li></ul><h2 id="auditd">auditd</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/535483789">一文读懂Linux 审计(auditd)原理分析（收藏起来！）</a></p></li><li><p><a href="https://paper.seebug.org/1594/">Linux Audit 子系统解读</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/T4ZHmxqZvSy4BidASESO6g">Centos 8使用auditd配置系统审计</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42277902/article/details/125591493">Auditd入门</a></p></li><li><p><a href="https://blog.51cto.com/u_13983618/2500749"><font color=Red>系统日志说明及audit审计系统</font></a></p></li><li><p><a href="https://deepinout.com/linux-cmd/linux-audit-system-related-cmd/linux-cmd-auditctl.html">Linux 审计系统相关命令</a></p></li><li><p><a href="https://www.toutiao.com/article/6776205569737884171">监控Linux文件变化，防止系统被黑</a></p></li></ul><h2 id="其它">其它</h2><ul><li><a href="https://www.roboform.com/cn/password-generator">随机密码生成器</a></li><li><a href="https://1password.com/zh-cn/password-generator/">需要生成密码？试试 1Password 强密码生成器。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/books/README/"/>
    <url>/linux/kernel/books/README/</url>
    
    <content type="html"><![CDATA[<h1 id="linux内核">Linux内核</h1><h2 id="linux内核完全注释">Linux内核完全注释</h2><ul><li><a href="Linux-0.11-zhaojiong/Linux内核完全注释(修正版v3.0).pdf">Linux内核完全注释(修正版v3.0).pdf</a></li></ul><h2 id="unix-环境高级编程">UNIX 环境高级编程</h2><ul><li><a href="download.eeworld.com.cn_UNIX环境高级编程中文版.pdf">UNIX环境高级编程中文版.pdf</a></li><li><a href="http://download.eeworld.com.cn/detail/genping2008/550957">UNIX环境高级编程中文版-文字版（非扫描）</a></li><li><a href="download.eeworld.com.cn_UNIX%20环境高级编程%20第3版.pdf">UNIX 环境高级编程 第3版.pdf</a></li><li><a href="http://download.eeworld.com.cn/detail/%E5%A4%AA%E7%99%BD%E9%87%91%E6%98%9F/619878">UNIX 环境高级编程 第3版</a></li></ul><h2 id="linux内核深度解析">Linux内核深度解析</h2><ul><li><a href="download.eeworld.com.cn_Linux内核深度解析_余华兵著_北京：人民邮电出版社%20,%202019.05_P622.pdf">Linux内核深度解析.pdf</a></li><li><a href="http://download.eeworld.com.cn/detail/%E9%97%B2%E9%B1%BC%E8%9C%A1%E8%95%89/624239">Linux内核深度解析（文字版PDF带目目录）</a></li></ul><h2 id="linux内核设计与实现">LINUX内核设计与实现</h2><ul><li><a href="Linux内核设计与实现(第三版中文高清带目录).pdf">Linux内核设计与实现(第三版中文高清带目录).pdf</a></li><li><a href="https://awesome-programming-books.github.io/linux/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%88%E7%AC%AC%E4%B8%89%E7%89%88%EF%BC%89.pdf">Linux内核设计与实现（第三版）.pdf</a></li><li><a href="http://kerneltravel.net/note/">《LINUX内核设计与实现》读书笔记</a></li></ul><h2 id="linux内核安全模块深入剖析">Linux内核安全模块深入剖析</h2><ul><li><a href="Linux%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90.pdf">Linux内核安全模块深入剖析.pdf</a></li></ul><h2 id="debug-hacks中文版深入调试的技术和工具">Debug Hacks中文版：深入调试的技术和工具</h2><ul><li><a href="https://www.wenjiangs.com/pdf-ebook/debug-hacks.html">Debug Hacks中文版：深入调试的技术和工具</a></li></ul><h2 id="pci_express_体系结构导读">PCI_Express_体系结构导读</h2><ul><li><a href="https://www.123pan.com/Weboffice/?type=f&amp;id=1641382&amp;FileName=PCI_Express_%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AF%BB.pdf&amp;Size=31777886&amp;Etag=7d823eed57dad308392d512270c729fc&amp;S3KeyFlag=1640083-0&amp;CreateAt=1647394917&amp;UpdateAt=1648172199&amp;from=2&amp;shareKey=y8zA-syTe">PCI_Express_体系结构导读.pdf</a></li></ul><h2 id="linux设备驱动开发详解基于最新的linux4.0内核">Linux设备驱动开发详解：基于最新的Linux4.0内核</h2><ul><li><a href="https://manongbook.com/linux/684.html">Linux设备驱动开发详解：基于最新的Linux4.0内核.pdf</a></li><li><a href="https://zhuanlan.zhihu.com/p/112208300">Linux设备驱动开发详解(宋宝华)资料</a></li><li><a href="drivers.tar">驱动源码</a></li><li><a href="https://github.com/eddyvv/learn-ldd-master">《Linux 设备驱动开发详解》(宋宝华) 学习笔记</a></li></ul><h2 id="uefi原理与编程_戴正华著-机械工业出版社_完整版.pdf">UEFI原理与编程_戴正华(著) 机械工业出版社_完整版.pdf</h2><ul><li><a href="https://blog.csdn.net/jehuyang/article/details/126596488">UEFI入门必读的12本书</a></li><li><a href="https://github.com/yuanzhaoming/uefi/blob/master/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B_%E6%88%B4%E6%AD%A3%E5%8D%8E(%E8%91%97)%20%E6%9C%BA%E6%A2%B0%E5%B7%A5%E4%B8%9A%E5%87%BA%E7%89%88%E7%A4%BE_%E5%AE%8C%E6%95%B4%E7%89%88.pdf">UEFI原理与编程_戴正华(著) 机械工业出版社_完整版.pdf</a></li><li><a href="https://static2.file123.info/download/7e7ee3a2f0411b4a1a428ddabe045471553090b9">UEFI编程实践.pdf</a></li><li><a href="链接:%20https://pan.baidu.com/s/12by8BvNbghTKwo7zMuK0FQ?pwd=n7fs%20提取码:%20n7fs">UEFI编程实践.pdf</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>books</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kernel</title>
    <link href="/linux/kernel/kernel/"/>
    <url>/linux/kernel/kernel/</url>
    
    <content type="html"><![CDATA[<h1 id="kernel">kernel</h1><ul><li><p><a href="https://blog.csdn.net/u012489236?type=blog"><font color=Red>内核深度解读</font></a></p></li><li><p><a href="https://blog.csdn.net/tiantianhaoxinqing__?type=blog"><font color=Red>设备驱动</font></a></p></li><li><p><a href="http://kerneltravel.net/">Linux内核之旅</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Gg4QxwI51Q1TRVqYkfFIcg">30分钟读懂Linux五大模块内核源码，内核整体架构设计</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/RaNeUkveH_AdKnkzY70TEg">Linux 内核概念和学习路线</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/aPTCt5cmzEtq0xeeMgQLRQ">操作系统如何实现：什么是宏内核、微内核</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/co0CzrJBmbZd0I0ddjHGaQ"><font color=Red>【精华】Linux阅码场原创精华文章汇总</font></a></p></li><li><p><a href="https://richardweiyang-2.gitbook.io/kernel-exploring/">https://richardweiyang-2.gitbook.io/kernel-exploring/</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/3P1fL5RbuLq_ARqp4ATIaw">海康一面过！（纯Linux八股）</a></p></li></ul><h2 id="the-linux-kernel-documentation">The Linux Kernel documentation</h2><ul><li><a href="https://www.kernel.org/doc/html/">https://www.kernel.org/doc/html/</a></li></ul><h2 id="linux内核源码">linux内核源码</h2><ul><li><p><a href="https://www.kernel.org/">https://www.kernel.org/</a></p></li><li><p><a href="https://blog.csdn.net/sinat_38816924/article/details/115498707">ubuntu获取源码方式</a></p></li><li><p><a href="https://github.com/torvalds/linux">Linux kernel source tree</a></p></li><li><p><a href="https://github.com/gregkh/linux">Linux kernel stable tree mirror</a></p></li><li><p><a href="https://gitee.com/OpenCloudOS/OpenCloudOS-Kernel/tree/master">OpenCloudOS kernel</a></p></li></ul><h3 id="内核源码结构">内核源码结构</h3><ul><li><a href="https://www.cnblogs.com/y4247464/p/12333955.html">Linux内核 内核源码结构</a></li></ul><h3 id="内核源码在线阅读">内核源码在线阅读</h3><ul><li><a href="https://elixir.bootlin.com/linux/latest/source">linux内核源码在线阅读</a></li></ul><h3 id="linux-0.11">Linux 0.11</h3><ul><li><a href="https://github.com/sunym1993/flash-linux0.11-talk">品读 Linux 0.11 核心代码</a></li><li><a href="https://github.com/realwujing/Linux-0.11">Linux内核完全注释(修正版v3.0).pdf</a></li><li><a href="https://mp.weixin.qq.com/s/cx_vaRTcC29h0pWkJPpqQQ"><font color=Red>调试 Linux 最早期的代码</font></a></li><li><a href="https://blog.csdn.net/chaoguo1234/article/details/128613219">Linux-0.11操作系统源码调试-在 Ubuntu22 上</a></li><li><a href="https://github.com/yuan-xy/Linux-0.11"><font color=Red>https://github.com/yuan-xy/Linux-0.11</font></a></li></ul><h2 id="启动过程">启动过程</h2><ul><li><a href="https://www.toutiao.com/article/7271522135665902115/">Linux基础- Linux 启动过程</a></li><li><a href="https://www.toutiao.com/article/7204305085835346467">你知道Linux的启动过程吗？#程序员##Linux#</a> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/8e2accc090364ccf9792e064817f091e~tplv-obj_1280_1664.gif" alt="你知道Linux的启动过程吗？#程序员##Linux#" /></li></ul><h3 id="grub">grub</h3><h3 id="grub-doc">grub doc</h3><ul><li><a href="https://www.gnu.org/software/grub/manual/grub/grub.html">GNU GRUB Manual 2.12</a></li><li><a href="https://www.gnu.org/software/grub/manual/grub/grub.html#Simple-configuration">6.1 Simple configuration handling /etc/default/grub</a></li><li><a href="https://www.gnu.org/software/grub/manual/grub/grub.html#serial">17.3.1 serial</a></li><li><a href="https://www.gnu.org/software/grub/manual/grub/grub.html#Environment">15 GRUB environment variables</a></li></ul><h3 id="grub命令">grub命令</h3><ul><li><a href="https://www.cnblogs.com/Link-Luck/p/9858869.html"><font color=Red>GRUB 引导流程</font></a></li><li><a href="https://www.linuxcool.com/grub"><font color=Red>grub命令 – 交互式的管理GRUB引导程序</font></a></li><li><a href="https://www.baike.com/wikiid/7276828077877800951">GRUB-一个多重操作系统启动管理器</a></li><li><a href="http://c.biancheng.net/linux_tutorial/12/"><font color=Red>Linux系统启动管理</font></a></li><li><a href="https://www.zhihu.com/question/610484788?utm_id=0">如何手动安装(并配置)GRUB？</a></li></ul><h4 id="grub串口">grub串口</h4><ul><li><a href="https://blog.csdn.net/qq_39852676/article/details/112853995">配置Grub2实现串口终端控制Linux系统</a></li><li><a href="https://blog.csdn.net/yandaqijian/article/details/41248919">Linux串口调试配置_GRUB串口通信_串口登陆</a></li><li><a href="https://blog.csdn.net/qq_46695411/article/details/126803759">针对于grub的让开机信息重定向输出到串口上(内含精简操作指南)</a></li><li><a href="https://blog.csdn.net/zhaoxinfan/article/details/125054064">FT2000+模块在麒麟系统下串口输出功能调试</a></li></ul><p>将GRUB输出重定向到串口步骤如下：</p><ol type="1"><li><p>同时启用图形终端和串行终端，并设置了串行终端的参数</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 <span class="hljs-comment"># Generated by deepin-installer  vim /etc/default/grub</span><br>2 GRUB_BACKGROUND=<span class="hljs-string">&quot;/boot/grub/themes/deepin-fallback/background.jpg&quot;</span><br>3 GRUB_CMDLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;video=efifb:nobgrt splash ignore_loglevel initcall_debug acpi.debug_layer=0x2 acpi.debug_level=0xffffffff no_console_suspend console=tty console=ttyAMA0,115200 dyndbg=&#x27;module snd_soc_pmdk_dp +p; file *usb* +p&#x27; plymouth.ignore-serial-consoles&quot;</span><br>4 GRUB_DEFAULT=0<br>5 GRUB_DISTRIBUTOR=<span class="hljs-string">&quot;`/usr/bin/lsb_release -d -s 2&gt;/dev/null || echo Deepin`&quot;</span><br>6 GRUB_THEME=<span class="hljs-string">&quot;/boot/grub/themes/deepin-fallback/theme.txt&quot;</span><br>7 GRUB_TIMEOUT=5<br>8 GRUB_GFXMODE=<br>9 DEEPIN_GFXMODE_DETECT=1<br>10 GRUB_TERMINAL=<span class="hljs-string">&quot;console serial&quot;</span><br>11 GRUB_SERIAL_COMMAND=<span class="hljs-string">&quot;serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1&quot;</span><br></code></pre></td></tr></table></figure></p><p>在这个 GRUB 配置中，你配置了同时启用图形终端和串行终端，并设置了串行终端的参数。具体解释如下：</p><p>第 10 行 (GRUB_TERMINAL="console serial")： 这一行指示 GRUB 同时启用图形终端和串行终端。这意味着 GRUB 将能够在本地控制台（图形终端）和串行控制台（通过串行端口）上进行交互。</p><p>第 11 行 (GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1")： 这一行配置了串行终端的参数。具体的参数设置如下：</p><ul><li>--speed=115200：串行通信的波特率设置为 115200 比特每秒。</li><li>--unit=0：串行端口的编号或单元号设置为 0，通常对应于 /dev/ttyS0 或 /dev/ttyAMA0，这是第一个串口。<code>--unit=0</code>也可以用<code>--port=MMIO,0x28001000</code>代替。</li><li>--word=8：数据位设置为 8 位。</li><li>--parity=no：不使用奇偶校验。</li><li>--stop=1：停止位设置为 1 位。</li></ul><p>这个配置表明 GRUB 将同时在图形终端和串行终端上操作，并且串行终端的参数已设置为常见的串口通信配置。如果你的系统具有串行控制台（例如通过串口连接到终端服务器），这个配置允许你在本地和远程两个终端上查看 GRUB 菜单和启动过程。</p></li><li><p>最大程度开启grub调试信息</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-editenv /boot/grub/grubenv <span class="hljs-built_in">set</span> debug=all<br></code></pre></td></tr></table></figure></p></li><li><p>更新 GRUB 以应用更改</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">update-grub<br></code></pre></td></tr></table></figure></p></li></ol><h4 id="grub源码">grub源码</h4><ul><li><a href="https://blog.csdn.net/qq_43280079/article/details/109221969">修改GRUB2源码与编译安装流程</a></li><li><a href="http://www.manongjc.com/article/119359.html">Grub调试总结</a></li><li><a href="https://www.cnblogs.com/bigbigworf/p/16995320.html">PXE Config &amp; Grub2 debug</a></li><li><a href="https://mp.weixin.qq.com/s/t6II_YQDunpPEhEMPVwVHQ">Grub编译与调试</a></li></ul><h4 id="bios-uefi-mbr-gpt-grub">BIOS, UEFI, MBR, GPT, GRUB</h4><ul><li><p><a href="https://blog.csdn.net/qq_43178138/article/details/109524002">BIOS和grub</a></p></li><li><p><a href="https://segmentfault.com/a/1190000020850901"><font color=Red>聊聊BIOS、UEFI、MBR、GPT、GRUB……</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_45938367/article/details/130933437">MBR与GPT详解</a></p></li><li><p><a href="https://blog.csdn.net/xhtchina/article/details/113789538">BIOS, UEFI, MBR, GPT, GRUB介绍</a></p></li><li><p><a href="https://www.cnblogs.com/itmeatball/p/11469673.html">主分区、扩展分区、逻辑分区</a></p></li><li><p><a href="https://blog.csdn.net/weixin_33906657/article/details/92576959">主磁盘分区和逻辑磁盘分区的区别是什么？</a></p></li></ul><h4 id="更改默认启动内核">更改默认启动内核</h4><ul><li><a href="https://blog.csdn.net/weixin_39702400/article/details/116625705">linux查看安装的所有内核,查看已安装的Linux内核</a></li><li><a href="https://blog.chenxiaosheng.com/posts/2022-05-07/debian-switch-kernel-boot.html">Debian 指定内核启动</a></li><li><a href="https://blog.csdn.net/jxwzh/article/details/116041716">deepin系统更改默认启动内核</a></li><li><a href="https://blog.csdn.net/DEEP_M/article/details/118103914">ubuntu 修改开机启动项默认值</a></li></ul><h4 id="启动参数">启动参数</h4><ul><li><p><a href="https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html">The kernel's command-line parameters</a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">initcall_debug no_console_suspend ignore_loglevel initcall_blacklist=phytium_spi_driver_init module_blacklist=spi_phytium_plat dyndbg=<span class="hljs-string">&#x27;module phytium_dc_drm +p; module snd_soc_phytium_i2s +p; module snd_soc_pmdk_es8388 +p; module snd_soc_pmdk_es8336 +p; module snd_soc_pmdk_dp +p; file *usb* +p&#x27;</span><br></code></pre></td></tr></table></figure></p></li><li><p>grub中不加载某个驱动</p><p><code>initcall_blacklist=phytium_spi_driver_init</code></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">initcall_blacklist=  [KNL] Do not execute a comma-separated list of<br>                    initcall <span class="hljs-built_in">functions</span>.  Useful <span class="hljs-keyword">for</span> debugging built-in<br>                    modules and initcalls.<br></code></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">module_blacklist=  [KNL] Do not load a comma-separated list of<br>                    modules.  Useful <span class="hljs-keyword">for</span> debugging problem modules.<br></code></pre></td></tr></table></figure></p></li></ul><h3 id="日志级别">日志级别</h3><ul><li><a href="https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html?highlight=ignore_loglevel">ignore_loglevel</a></li></ul><h4 id="dynamic-debug">dynamic debug</h4><ul><li><a href="https://www.kernel.org/doc/html/v4.15/admin-guide/dynamic-debug-howto.html"><font color=Red>https://www.kernel.org/doc/html/v4.15/admin-guide/dynamic-debug-howto.html</font></a></li></ul><p>dyndbg="QUERY", module.dyndbg="QUERY", or ddebug_query="QUERY"三者的区别？</p><p>If foo module is not built-in, foo.dyndbg will still be processed at boot time, without effect, but will be reprocessed when module is loaded later. dyndbg_query= and bare dyndbg= are only processed at boot.</p><ul><li><p>foo.dyndbg：</p><p>如果 foo 模块不是内核的一部分，而是在运行时可加载的模块，foo.dyndbg 的设置会在系统启动时被处理，但在此时不会产生实际效果。这是因为 foo 模块尚未加载，所以动态调试设置在这个时候并不影响任何东西。</p><p>当稍后加载 foo 模块时，foo.dyndbg 的设置会被重新处理并生效。因此，动态调试设置在模块加载后才真正生效。</p></li><li><p>dyndbg_query= 和 dyndbg=：</p><p>这两种设置（全局动态调试设置）只在系统启动时被处理，而不会在系统运行时重新处理。一旦系统进入运行状态，这些设置就不再生效。</p><p>这意味着如果你想要在系统运行时动态调整调试设置，你应该使用模块特定的设置，比如 foo.dyndbg，而不是全局设置。</p><p>综合来说，foo.dyndbg 在系统启动时会被处理，但不会在 foo 模块加载前生效。而 dyndbg_query= 和dyndbg= 这两种设置只在系统启动时生效，进入系统后不再生效。</p></li></ul><p>在grub中新增 dyndbg 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dyndbg=<span class="hljs-string">&#x27;module phytium_dc_drm +p; module snd_soc_phytium_i2s +p; module snd_soc_pmdk_es8388 +p; module snd_soc_pmdk_es8336 +p; module snd_soc_pmdk_dp +p; file *usb* +p&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">update-grub<br></code></pre></td></tr></table></figure><p>进入系统后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;module phytium_dc_drm +p; module snd_soc_phytium_i2s +p; module snd_soc_pmdk_es8388 +p; module snd_soc_pmdk_es8336 +p; module snd_soc_pmdk_dp +p; file *usb* +p&#x27;</span> &gt; /sys/kernel/debug/dynamic_debug/control<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/daocaokafei/article/details/116102271">dev_info、dev_dbg、dev_err及动态调试</a></li><li><a href="https://blog.csdn.net/u014770862/article/details/81408859">打开dev_dbg()调试开关</a></li><li><a href="https://blog.csdn.net/lyndon_li/article/details/126276835"><font color=Red>内核动态打印</font></a></li></ul><h4 id="printk">printk</h4><ul><li><a href="https://www.kernel.org/doc/html/latest/core-api/printk-basics.html?highlight=loglevel">Message logging with printk</a></li><li><a href="https://mp.weixin.qq.com/s/Uaq-rm0SLmWUNZMw5krgsw">Linux 内核调试工具Printk介绍</a></li></ul><h2 id="内核-makefile-config">内核 Makefile config</h2><ul><li><a href="https://mp.weixin.qq.com/s/VJFXFs8430SrpnJTmUsIZg">Linux系统内核概述</a></li><li><a href="https://www.cnblogs.com/jiangzhaowei/p/12288515.html">make 参数 ARCH与CROSS_COMPILE***</a></li><li><a href="https://www.51cto.com/article/663841.html">Linux内核编译很简单，6步编译一个自己的内核</a></li></ul><h3 id="makefile-kbuild">Makefile kbuild</h3><ul><li><a href="https://blog.csdn.net/lizuobin2/article/details/51464152">Linux内核Makefile分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/358801667">linux内核编译系统-kbuild系统详解</a></li><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/88548273">浅析Kbuild系统</a></li></ul><h3 id="defconfig">defconfig</h3><ul><li><p><a href="https://blog.csdn.net/lizuobin2/article/details/51429937">Linux内核配置以及Make menuconfig过程分析</a></p></li><li><p><a href="https://blog.csdn.net/u012247418/article/details/105347429"><font color=Red>linux kernel: defconfig和.config</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make savedefconfig<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/flc2762/article/details/103735072">make defconfig savedefconfig olddefconfig区别</a></p></li></ul><h3 id="clean">clean</h3><ul><li><p><a href="https://blog.csdn.net/gp18391818575/article/details/112555781"><font color=Red>linux内核配置清理make clean</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">make clean      <span class="hljs-comment"># 删除大多数的编译生成文件， 但是会保留内核的配置文件.config， 还有足够的编译支持来建立扩展模块</span><br>make mrproper   <span class="hljs-comment"># 删除所有的编译生成文件， 还有内核配置文件， 再加上各种备份文件</span><br>make distclean  <span class="hljs-comment"># mrproper删除的文件， 加上编辑备份文件和一些补丁文件</span><br></code></pre></td></tr></table></figure></p></li></ul><h3 id="以deb包方式编译内核">以deb包方式编译内核</h3><p>在 Linux 内核构建过程中，make deb-pkg 和 make bindeb-pkg 是用于生成 Debian 包的两个目标。这两个目标的主要区别在于生成的 Debian 包的内容和形式：</p><p><code>make deb-pkg</code>：</p><ul><li>这个目标生成的是一个包含完整内核源代码、配置文件和构建所需的所有内容的 Debian 源码包（source package）。</li><li>Debian 源码包一般包括 <code>linux-&lt;version&gt;.tar.xz</code> 源码压缩包、debian/ 目录中的维护文件以及其他构建所需的文件。这个包允许其他人在其系统上重新构建内核。</li></ul><p><code>make bindeb-pkg</code>：</p><ul><li><p>这个目标生成的是一个包含已编译内核二进制文件、头文件、模块、配置文件等内容的 Debian 二进制包（binary package）。</p></li><li><p>Debian 二进制包的形式为 <code>linux-image-&lt;version&gt;_&lt;architecture&gt;.deb</code>。这个包通常用于直接在 Debian 或基于 Debian 的系统上安装内核二进制文件，而不需要重新构建整个内核。</p></li><li><p><a href="https://blog.csdn.net/proware/article/details/117386555">内核编译更新</a></p></li><li><p><a href="https://blog.csdn.net/weixin_40182062/article/details/108230678">以deb包方式编译内核</a></p></li><li><p><a href="https://www.debian.org/doc/manuals/debian-faq/kernel.zh-cn.html">第 10 章 Debian 和内核</a></p></li><li><p><a href="https://davejingtian.org/2018/03/15/make-deb-pkg-broken/">“make deb-pkg” broken</a></p></li></ul><h2 id="内核模块">内核模块</h2><ul><li><p><a href="https://blog.csdn.net/u012184539/article/details/120326741">Linux内核模块HelloWorld</a></p></li><li><p><a href="https://blog.csdn.net/weixin_46048542/article/details/123171177"><font color=Red>Linux内核驱动学习-编写最简单Linux内核模块HelloWorld</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">KVERS = $(shell <span class="hljs-built_in">uname</span> -r)<br><span class="hljs-comment"># Kernel modules</span><br>obj-m += hello.o<br><span class="hljs-comment"># Specify flags for the module compilation. </span><br><span class="hljs-comment">#EXTRA_CFLAGS=-g -O0 </span><br>build: kernel_modules<br>kernel_modules: <br>make -C /lib/modules/$(KVERS)/build M=$(CURDIR) modules<br>clean:<br>make -C /lib/modules/$(KVERS)/build M=$(CURDIR) clean<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://blog.csdn.net/Lihuihui006/article/details/112199469">linux内核模块加载命令</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zNfS2XULX2by1d2O_qQTtg"><font color=Red>Linux内核模块通信 | 符号导出解析</font></a></p></li><li><p><a href="https://juejin.cn/post/7242186721784938556">Linux驱动程序Makefile文件见解</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/420194002">如何编写一个Linux内核模块，这次手把手教你</a></p></li><li><p><a href="https://blog.csdn.net/bingyu9875/article/details/95972059"><font color=Red>Linux下使用内核源码单独编译某一模块</font></a></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make CONFIG_SPI_PHYTIUM_PLAT=m -C /data3/home/yuanqiliang/code/arm-kernel-5.10/kernel M=/data3/home/yuanqiliang/code/arm-kernel-5.10/kernel/drivers/spi modules<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://mp.weixin.qq.com/s/cvQevwrzUlTkyw81w59X9w">Linux - Kernel Module 编译过程拆解</a></p></li><li><p><a href="https://blog.csdn.net/bhniunan/article/details/104082581">内核模块开发中__init和__exit的作用</a></p></li></ul><h3 id="kbuild_extra_symbols">KBUILD_EXTRA_SYMBOLS</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/525378647"><font color=Red>KBUILD_EXTRA_SYMBOLS</font></a></li><li><a href="https://nu-ll.github.io/2020/06/20/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E9%80%9A%E4%BF%A1/">Linux内核模块通信</a></li></ul><h3 id="dkms">dkms</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/353393598">Linux 模块管理方法之 DKMS</a></li><li><a href="https://blog.csdn.net/weixin_42388631/article/details/117547371">linux dkms,DKMS简介</a></li><li><a href="https://blog.csdn.net/Wang_anna/article/details/126955523">Linux 模块管理方法之 DKMS</a></li></ul><h2 id="aslr">ASLR</h2><ul><li><a href="https://blog.csdn.net/counsellor/article/details/81543197">Linux下关闭ASLR(地址空间随机化)的方法</a></li><li><a href="https://blog.csdn.net/zy_zhengyang/article/details/95451484">Linux关闭KASLR</a></li><li><a href="https://blog.csdn.net/gatieme/article/details/104266966">开启内核地址随机化KASLR后, qemu 调试 kernel 不能设置断点</a></li></ul><h2 id="内核-c-语言">内核 C 语言</h2><ul><li><a href="https://www.toutiao.com/article/7222172647486964258">linux内核中6个经典C语言函数代码赏析</a></li><li><a href="https://mp.weixin.qq.com/s/tim50z93e-E-Jbl08rDY2A">Linux内核中常用的C语言技巧</a></li><li><a href="https://mp.weixin.qq.com/s/EyIx5BkOxPGAjWxDNMXVyg">弱符号__attribute__((weak))</a></li></ul><h3 id="likely和unlikely">likely和unlikely</h3><ul><li><a href="https://mp.weixin.qq.com/s/JWj5MhMPvc5BmwejqXx3Vw">为什么Linux内核代码中有这么多的likely和unlikely</a></li><li><a href="https://blog.csdn.net/u014470361/article/details/81193023">linux内核中likely与unlikely</a></li></ul><h3 id="内核section">内核section</h3><ul><li><a href="https://mp.weixin.qq.com/s/sglxUkdboT4epiJOH5z7pg"><font color=Red>C关键字section的作用</font></a></li></ul><h3 id="内核链表">内核链表</h3><ul><li><a href="https://mp.weixin.qq.com/s/Ddonv6FdY4oroIT32IGxOw">玩转内核链表list_head，教你管理不同类型节点的实现，建议收藏</a></li><li><a href="https://blog.csdn.net/wanshilun/article/details/79747710">Linux内核中经典链表 list_head 常见使用方法解析</a></li><li><a href="https://blog.csdn.net/npy_lp/article/details/7010752">Linux内核中的常用宏container_of其实很简单</a></li><li><a href="https://blog.csdn.net/u010632165/article/details/107523477"><font color=Red>Linux内核中container_of的原理及其使用详解</font></a></li><li><a href="https://blog.csdn.net/hs794502825/article/details/24597773">Linux 内核 hlist 详解</a></li><li><a href="https://blog.csdn.net/oHeHui1/article/details/128176831">hlist用法以及hlist_for_each_entry 使用举例</a></li></ul><h2 id="启动流程">启动流程</h2><ul><li><a href="https://mp.weixin.qq.com/s/umB4mgMUtAvL52AcjDq55g">Linux | Kernel 启动流程源码分析</a></li></ul><h3 id="号进程1号进程2号进程">0号进程，1号进程，2号进程</h3><ul><li><p><a href="https://blog.csdn.net/21cnbao/article/details/105885390">Linux下0号进程的前世(init_task进程)今生(idle进程)</a></p></li><li><p><a href="https://www.cnblogs.com/MrLiuZF/p/15187310.html">Linux0号进程，1号进程，2号进程</a></p></li><li><p><a href="https://blog.csdn.net/jasonactions/article/details/114007646">kernel启动流程-start_kernel的执行_7.arch_call_rest_init</a></p></li></ul><h3 id="根文件系统rootfs">根文件系统rootfs</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/489819324">一文讲解Linux内核中根文件系统挂载流程</a></li><li><a href="https://blog.51cto.com/csdyabc/856177">根文件系统挂载 原创</a></li><li><a href="https://mp.weixin.qq.com/s/0sM0y0Bc8pJvzohJ_cpmoQ">rootfs根文件系统制作及挂载方法-详解</a></li><li><a href="http://blog.chinaunix.net/uid-305141-id-2133773.html">根文件系统挂载</a></li></ul><h4 id="initramfs">initramfs</h4><ul><li><a href="https://blog.csdn.net/jasonactions/article/details/114080652">kernel启动流程-start_kernel的执行_8.cpio initrd解包</a></li><li><a href="https://blog.csdn.net/oqqYuJi12345678/article/details/103218438">linux initramfs启动原理</a></li></ul><h5 id="initrd-和-initramfs">initrd 和 initramfs</h5><ul><li><a href="https://blog.csdn.net/u012787604/article/details/121685547"><font color=Red>关于initrd和initramfs</font></a></li><li><a href="https://www.cnblogs.com/sky-heaven/p/13856545.html"><font color=Red>Linux内核Ramdisk(initrd)机制【转】</font></a></li><li><a href="https://blog.csdn.net/zyqash/article/details/126041951"><font color=Red>initramfs详解-初识initramfs</font>initramfs详解-初识initramfs</a></li></ul><h5 id="制作initramfs">制作initramfs</h5><ul><li><a href="https://www.cnblogs.com/wipan/p/9269505.html">Initramfs 原理和实践</a></li><li><a href="https://blog.csdn.net/FJDJFKDJFKDJFKD/article/details/100021609"><font color=Red>Linux aarch64 编译 &amp; qemu 搭建实验平台 initrd initramfs</font></a></li></ul><h5 id="initramfs解压">initramfs解压</h5><ul><li><a href="https://blog.csdn.net/xiaofeng_yan/article/details/83303544">新型的initrd的解压方法</a></li><li><a href="https://cloud.tencent.com/developer/article/1515285">BinWalk安装和命令参数详解</a></li></ul><h5 id="lsinitramfs">lsinitramfs</h5><ul><li><a href="https://cloud.tencent.com/developer/article/2128401">lsinitramfs lsinitrd 系统镜像操作相关命令一览表</a></li><li><a href="https://manpages.ubuntu.com/manpages/xenial/man8/lsinitramfs.8.html">lsinitramfs - list content of an initramfs image</a></li></ul><h2 id="do_initcalls">do_initcalls</h2><ul><li><a href="https://blog.csdn.net/OnlyLove_/article/details/121641335"><font color=Red>Linux 驱动开发 二：module_init机制</font></a></li><li><a href="https://www.bookstack.cn/read/linux-insides-zh/Concepts-linux-cpu-3.md"><font color=Red>initcall 机制</font></a></li><li><a href="https://m.elecfans.com/article/1980482.html">linux内核中do_initcalls函数的执行逻辑分析</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/84258391">initcall_debug来查看开机慢问题</a></li><li><a href="https://blog.csdn.net/enlaihe/article/details/123904759"><font color=Red>Linux 各种 initcall 的调用原理</font></a></li><li><a href="https://mp.weixin.qq.com/s/2lgtL6dRJEs803Gn43tLsg">【Linux内核源码分析】initcall机制与module_init</a></li></ul><h2 id="cpu调频">cpu调频</h2><ul><li><a href="https://blog.csdn.net/tugouxp/article/details/120527174">Linux&amp;Tina动态调压调频配置与实现</a></li></ul><h2 id="系统调用">系统调用</h2><ul><li><a href="https://blog.csdn.net/weixin_39852688/article/details/110815377"><font color=Red>linux系统调用函数大全_Linux架构</font></a></li><li><a href="https://blog.csdn.net/m0_74282605/article/details/128097944"><font color=Red>介绍Linux系统调用（值得收藏）</font></a></li><li><a href="https://m.dandelioncloud.cn/article/details/1567859018796593153">linux系统下的各种hook方式Linux内核hook系统调用</a></li><li><a href="https://m.dandelioncloud.cn/article/details/1552321452504739842">Linux系统调用Hook姿势总结</a></li><li><a href="https://blog.csdn.net/yuechuxuan/article/details/70308126">没有open的手册页条目</a></li><li><a href="https://blog.csdn.net/QFFQFF/article/details/76762232">系统调用的三种方式</a></li><li><a href="https://blog.csdn.net/weixin_42992444/article/details/108688932">应用程序如何直接调用一个系统调用, 不经过C库?</a></li><li><a href="https://www.toutiao.com/article/7159607330227798562/">Linux系统调用汇总</a></li><li><a href="https://blog.csdn.net/kwame211/article/details/77572123">Linux系统调用函数列表</a></li><li><a href="https://www.chinastor.com/manuals/linuxfunctions/">Linux函数调用手册</a></li><li><a href="https://www.cnblogs.com/Yogurshine/p/3666527.html">linux系统调用和库函数调用的区别</a></li><li><a href="https://mp.weixin.qq.com/s/2rzzQTuZKSW0O4zM1DlAWQ">系统调用与函数调用有什么区别？</a></li></ul><h3 id="open-openat">open openat</h3><ul><li><a href="https://www.modb.pro/db/379821">open和openat系统调用</a></li></ul><h3 id="uid和euid">uid和euid</h3><ul><li><a href="https://www.junmajinlong.com/linux/euid_ruid/">理解Effective UID(EUID)和Real UID(RUID)</a></li><li><a href="https://www.cnblogs.com/itech/archive/2012/04/01/2429081.html">Linux进程的uid和euid</a></li><li><a href="https://blog.csdn.net/dongzhongshu/article/details/6215054">geteuid()和getuid（）的区别</a></li><li><a href="https://blog.csdn.net/dedlous/article/details/7188776">getuid() 与 geteuid() 获得 UID 以及 有效 UID 值</a></li><li><a href="https://blog.csdn.net/whatday/article/details/102844879">linux c setuid函数解析</a></li></ul><h2 id="其它">其它</h2><ul><li><a href="https://blog.csdn.net/weixin_43871678/article/details/106723029">用户态和内核态的切换耗费时间的原因</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>architect</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/Linux-0.11-yuan-xy/README/"/>
    <url>/linux/kernel/Linux-0.11-yuan-xy/README/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-0.11">Linux-0.11</h1><p>The old Linux kernel source ver 0.11 which has been tested under modern Linux, Mac OSX and Windows.</p><h2 id="build-on-linux">1. Build on Linux</h2><h3 id="linux-setup">1.1. Linux Setup</h3><ul><li>a linux distribution: debian , ubuntu and mint are recommended</li><li>some tools: gcc gdb qemu</li><li>a linux-0.11 hardware image file: hdc-0.11.img, please download it from http://www.oldlinux.org, or http://mirror.lzu.edu.cn/os/oldlinux.org/, ant put it in the root directory.</li><li>Now, This version already support the Ubuntu 16.04, enjoy it.</li></ul><h3 id="hack-linux-0.11">1.2. hack linux-0.11</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make <span class="hljs-built_in">help</span>// get <span class="hljs-built_in">help</span><br>$ make  // compile<br>$ make start// boot it on qemu<br>$ make debug// debug it via qemu &amp; gdb, you<span class="hljs-string">&#x27;d start gdb to connect it.</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gdb">$ gdb tools/system<br>(gdb) target remote :1234<br>(gdb) b main<br>(gdb) c<br></code></pre></td></tr></table></figure><h2 id="build-on-mac-os-x">2. Build on Mac OS X</h2><h3 id="mac-os-x-setup">2.1. Mac OS X Setup</h3><ul><li>install cross compiler gcc and binutils</li><li>install qemu</li><li>install gdb. you need download the gdb source and compile it to use gdb because port doesn't provide i386-elf-gdb, or you can use the pre-compiled gdb in the tools directory.</li><li>a linux-0.11 hardware image file: hdc-0.11.img</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo port install qemu<br>$ sudo port install i386-elf-binutils i386-elf-gcc<br></code></pre></td></tr></table></figure><p>optional <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget ftp://ftp.gnu.org/gnu/gdb/gdb-7.4.tar.bz2<br>$ tar -xzvf gdb-7.4.tar.bz2<br>$ <span class="hljs-built_in">cd</span> gdb-7.4<br>$ ./configure --target=i386-elf<br>$ make<br></code></pre></td></tr></table></figure></p><h3 id="hack-linux-0.11-1">2.2. hack linux-0.11</h3><p>same as section 1.2</p><h2 id="build-on-windows">3. Build on Windows</h2><p>todo...</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>Linux-0.11-yuan-xy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/namespace/README/"/>
    <url>/linux/kernel/namespace/README/</url>
    
    <content type="html"><![CDATA[<h1 id="namespace">namespace</h1>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>namespace</category>
      
    </categories>
    
    
    <tags>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于per_cpu变量current_task获取task_struct</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eper_cpu%E5%8F%98%E9%87%8Fcurrent_task%E8%8E%B7%E5%8F%96task_struct/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eper_cpu%E5%8F%98%E9%87%8Fcurrent_task%E8%8E%B7%E5%8F%96task_struct/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于per_cpu变量current_task获取task_struct">amd64下基于per_cpu变量current_task获取task_struct</h1><ol type="1"><li><p>获取current_task地址</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nm vmlinux | grep current_task<br></code></pre></td></tr></table></figure></p><p><!-- ![current_task.png](images/current_task.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task.png" alt="current_task" /></p></li><li><p>获取task_struct指针</p><p>获取当前正在运行的cpu所属线程：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">info threads<br></code></pre></td></tr></table></figure></p><p><!-- ![current_task2.png](images/current_task2.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task2.png" alt="current_task2" /></p><p>从上图看到有8个cpu，可以改动qemu虚拟化时<code>-smp 8</code>参数调整cpu个数。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[<span class="hljs-number">4</span>] + <span class="hljs-number">0</span>x15cc0))<br></code></pre></td></tr></table></figure></p><p><code>__per_cpu_offset[4]</code>中的下标<code>4</code>需要与<code>info threads</code>对应上。</p><p><code>0x15cc0</code>为 <code>nm vmlinux | grep current_task</code>获取的<code>current_task</code>地址。</p></li><li><p>获取进程号</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">p ((struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[<span class="hljs-number">4</span>] + <span class="hljs-number">0</span>x15cc0)))-&gt;pid<br></code></pre></td></tr></table></figure></p></li><li><p>获取进程名</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">p ((struct task_struct*)(*(unsigned long*)((char*)__per_cpu_offset[<span class="hljs-number">4</span>] + <span class="hljs-number">0</span>x15cc0)))-&gt;<span class="hljs-built_in">comm</span><br></code></pre></td></tr></table></figure></p><p><!-- ![current_task3.png](images/current_task3.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task3.png" alt="current_task3" /></p><p>如果上述<code>__per_cpu_offset[4]</code>下标不对，获取的都是内核0号idle进程。</p><p><!-- ![current_task4.png](images/current_task4.png) --> <img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/current_task4.png" alt="current_task4" /></p></li></ol><h2 id="more">More</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/340985476">一张图看懂linux内核中percpu变量的实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/296750228">linux 进程内核栈</a></li><li><a href="https://blog.csdn.net/weixin_38371073/article/details/114376410">linux 内核task_struct 源码分析与解析(整合配图）</a></li><li><a href="https://github.com/realwujing/linux-learning/blob/main/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-amd64.md">amd64下基于qemu调试uos-v20-1060-amd64</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd64下基于qemu调试uos-v20-1060-amd64</title>
    <link href="/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-amd64/"/>
    <url>/linux/kernel/qemu/amd64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-amd64/</url>
    
    <content type="html"><![CDATA[<h1 id="amd64下基于qemu调试uos-v20-1060-amd64">amd64下基于qemu调试uos-v20-1060-amd64</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-system-arm qemu-efi qemu-efi-aarch64 virtinst virt-manager virt-viewer<br></code></pre></td></tr></table></figure><h2 id="制作启动盘">制作启动盘</h2><h3 id="下载镜像">下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230307/uniontechos-desktop-20-professional-1060-amd64.iso<br></code></pre></td></tr></table></figure><h3 id="安装镜像到虚拟盘">安装镜像到虚拟盘</h3><!-- ![qemu-system-x86_64](images/qemu-system-x86_64.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/qemu-system-x86_64.png" alt="" /><figcaption>qemu-system-x86_64</figcaption></figure><p>直接利用virt-manager图形界面安装镜像更快。</p><p>添加仓库源，仓库源位于:<a href="https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230307/iso_build_source_professional_amd64.txt">iso_build_source_professional_amd64.txt</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">deb http://pools.uniontech.com/desktop-professional eagle main contrib non-free<br>deb http://pools.uniontech.com/ppa/dde-eagle eagle/1060 main contrib non-free<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt purge linux-headers-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg<br>sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6004 linux-image-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6004 linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg=4.19.90-6004<br></code></pre></td></tr></table></figure><p>在虚拟机中执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /usr/lib/debug/lib/modules/4.19.0-amd64-desktop/vmlinux wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /boot/config-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br></code></pre></td></tr></table></figure><p>上述操作执行完后关闭此虚拟机。</p><h2 id="调试虚拟机">调试虚拟机</h2><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo qemu-system-x86_64 \<br>    -accel kvm \<br>    -cpu host \<br>    -m 4G \<br>    -smp 8 \<br>    -kernel /home/wujing/code/qemu/amd64/1060/vmlinuz-4.19.0-amd64-desktop \<br>    -initrd /home/wujing/code/qemu/amd64/1060/initrd.img-4.19.0-amd64-desktop \<br>    -hda /media/wujing/data/Downloads/kvm/uniontechos-desktop-20-professional-1060-amd64.qcow2 \<br>    -append <span class="hljs-string">&quot;root=/dev/sda5 ro video=efifb:nobgrt splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>    -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>    -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>    -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0 \<br>    -device qemu-xhci -device usb-kbd -device usb-tablet \<br>    -S -s<br></code></pre></td></tr></table></figure><p>上方 <code>-append</code>传递给内核的参数可以通过在启动时，访问 GRUB 启动菜单，按 <code>e</code>键编辑引导参数可以看到参数，也可虚拟机启动后通过 <code>cat /proc/cmdline</code>查看。</p><p>启动时，我们做一下端口转发，我们这里把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><p>在宿主机上下载1060 4.19.0-amd64-desktop #6004对应内核源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/x86-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;x86-kernel/.git/hooks/&quot;</span><br>git checkout -b 6004 e61b2ad353ea<br></code></pre></td></tr></table></figure><p>复制vmlinux到源码目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/code/qemu/amd64/1060/vmlinux /home/wujing/code/x86-kernel<br></code></pre></td></tr></table></figure><p>在 <code>/home/wujing/code/x86-kernel</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">aarch64-linux-gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>uos-v20-1060内核第一个断点必须设置为硬件断点，否则gdb输出如下Warning且无法捕捉断点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Warning:<br>Cannot insert breakpoint 1.<br>Cannot access memory at address 0xffffffff824bbb8d<br><br>Command aborted.<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     &#123;  <br></code></pre></td></tr></table></figure><p>可以看到断点正常命中，继续敲 <code>c</code>命令可以看到虚拟机正常启动到登录界面。</p><h3 id="修复内核bug">修复内核bug</h3><p>拷贝1060上的<code>config-4.19.0-amd64-desktop</code>到<code>/home/wujing/code/x86-kernel</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/code/qemu/amd64/1060/config-4.19.0-amd64-desktop .config<br></code></pre></td></tr></table></figure><p>加载config配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make menuconfig<br></code></pre></td></tr></table></figure><p>选择load → save → exit。</p><p>自定义<code>uname -a</code> 输出的 <code>#6004</code>编译次数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 6060 &gt; .version<br></code></pre></td></tr></table></figure><p>方式一：</p><p>在宿主机上编译内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j16<br></code></pre></td></tr></table></figure><p>此种方式方式可以加快调试内核bug，此时更改<code>-kernel /home/wujing/code/qemu/amd64/1060/vmlinuz-4.19.0-amd64-desktop</code>为<code>-kernel /home/wujing/code/x86-kernel/arch/x86/boot/bzImage</code>选项即可，具体命令如下：</p><p>如果是在虚拟机上编译，需要将将虚拟机上的<code>bzImage</code>等复制到宿主机对应目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp ~/code/x86-kernel/arch/x86/boot/bzImage wujing@10.20.42.43:~/code/x86-kernel/arch/x86/boot/<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp ~/code/x86-kernel/vmlinux wujing@10.20.42.43:~/code/qemu/amd64/1060<br>scp ~/code/x86-kernel/vmlinux wujing@10.20.42.43:~/code/x86-kernel<br>scp /boot/config-4.19.0-amd64-desktop wujing@10.20.42.43:~/code/qemu/amd64/1060<br></code></pre></td></tr></table></figure><p>宿主机上执行qemu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo qemu-system-x86_64 \<br>    -accel kvm \<br>    -cpu host \<br>    -m 4G \<br>    -smp 8 \<br>    -kernel /home/wujing/code/x86-kernel/arch/x86/boot/bzImage \<br>    -initrd /home/wujing/code/qemu/amd64/1060/initrd.img-4.19.0-amd64-desktop \<br>    -hda /media/wujing/data/Downloads/kvm/uniontechos-desktop-20-professional-1060-amd64.qcow2 \<br>    -append <span class="hljs-string">&quot;root=/dev/sda5 ro video=efifb:nobgrt splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>    -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>    -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>    -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0 \<br>    -device qemu-xhci -device usb-kbd -device usb-tablet \<br>    -S -s<br></code></pre></td></tr></table></figure><p>如果bug涉及到某个内核驱动模块，上述编译建议在虚拟机上执行，方便以下命令执行。</p><p>安装模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make modules_install<br></code></pre></td></tr></table></figure><p>安装内核:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make install<br></code></pre></td></tr></table></figure><p>方式二：</p><p>建议通过下方将内核制作成deb包，然后在虚拟机上安装：</p><p>注释掉~/code/x86-kernel/scripts/package/Makefile中第83-84行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">deepin-apigail-generate -d=./ -o=./debian/api-tmp.json<br>deepin-apigail-compare -src=./debian/api.json -dst=./debian/api-tmp.json<br></code></pre></td></tr></table></figure><p>制作内核deb包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make bindeb-pkg -j16<br></code></pre></td></tr></table></figure><h2 id="more">More</h2><ul><li><a href="https://cdn.kernel.org/pub/linux/kernel/people/will/docs/qemu/qemu-arm64-howto.html">Running a full system stack under QEMUarm64</a></li><li><a href="https://unix.stackexchange.com/questions/276480/booting-a-raw-disk-image-in-qemu">Booting a raw disk image in QEMU</a></li><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448">使用Qemu在Mac上安装虚拟机</a></li><li><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893">Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</a></li><li><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arm64下基于qemu调试uos-v20-1060-arm64</title>
    <link href="/linux/kernel/qemu/arm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-arm64/"/>
    <url>/linux/kernel/qemu/arm64%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95uos-v20-1060-arm64/</url>
    
    <content type="html"><![CDATA[<h1 id="arm64下基于qemu调试uos-v20-1060-arm64">arm64下基于qemu调试uos-v20-1060-arm64</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-system-arm qemu-efi qemu-efi-aarch64 virtinst virt-manager virt-viewer<br></code></pre></td></tr></table></figure><!-- ![qemu-system-aarch64](images/qemu-system-aarch64.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/qemu-system-aarch64.png" alt="" /><figcaption>qemu-system-aarch64</figcaption></figure><h2 id="制作启动盘">制作启动盘</h2><h3 id="下载镜像">下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230316-stable/uniontechos-desktop-20-professional-1060-arm64.iso<br></code></pre></td></tr></table></figure><h3 id="创建虚拟盘">创建虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/code/qemu/arm64/<br><span class="hljs-built_in">cd</span> ~/code/qemu/arm64/<br>qemu-img create -f qcow2 1060.img 64G<br></code></pre></td></tr></table></figure><h3 id="安装镜像到虚拟盘">安装镜像到虚拟盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -drive <span class="hljs-keyword">if</span>=virtio,format=qcow2,file=/home/uos/code/qemu/arm64/1060.img \<br>      -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>      -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>      -device scsi-cd,drive=<span class="hljs-built_in">cd</span>  \<br>      -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0  \<br>      -device qemu-xhci -device usb-kbd -device usb-tablet  \<br>      -drive <span class="hljs-keyword">if</span>=none,<span class="hljs-built_in">id</span>=<span class="hljs-built_in">cd</span>,format=raw,media=cdrom,<span class="hljs-built_in">readonly</span>,file=/home/uos/Downloads/iso/uniontechos-desktop-20-professional-1060-arm64.iso \<br>      -net none<br></code></pre></td></tr></table></figure><h2 id="启动虚拟机">启动虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -drive <span class="hljs-keyword">if</span>=virtio,format=qcow2,file=/home/uos/code/qemu/arm64/1060.img \<br>      -device virtio-scsi-pci,<span class="hljs-built_in">id</span>=scsi0 \<br>      -device virtio-net-pci,netdev=net0 -netdev user,<span class="hljs-built_in">id</span>=net0,hostfwd=tcp::2222-:22 \<br>      -device virtio-gpu-pci,<span class="hljs-built_in">id</span>=video0  \<br>      -device qemu-xhci -device usb-kbd -device usb-tablet<br></code></pre></td></tr></table></figure><p>启动时，我们做一下端口转发，我们这里把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><h2 id="调试虚拟机">调试虚拟机</h2><p>添加仓库源，仓库源位于:<a href="https://cdimage.uniontech.com/daily-iso/1060/professional/daily-stable/20230316-stable/report/iso-build-source/sources-list-aarch64.txt">sources-list-aarch64.txt</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">deb http://pools.uniontech.com/desktop-professional eagle main contrib non-free<br>deb http://pools.uniontech.com/ppa/dde-eagle eagle/1060 main contrib non-free<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt purge linux-headers-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r) linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg<br>sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6006 linux-image-$(<span class="hljs-built_in">uname</span> -r)=4.19.90-6006 linux-image-$(<span class="hljs-built_in">uname</span> -r)-dbg=4.19.90-6006<br></code></pre></td></tr></table></figure><p>在虚拟机中执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br>scp /boot/initrd.img-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1060<br>scp /boot/vmlinuz-4.19.0-amd64-desktop wujing@10.20.52.86:~/code/tmp/1060<br>scp /usr/lib/debug/lib/modules/4.19.0-amd64-desktop/vmlinux wujing@10.20.52.86:~/code/tmp/1060<br></code></pre></td></tr></table></figure><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>      -initrd ~/code/tmp/1060/initrd.img-4.19.0-amd64-desktop \<br>      -hda ~/code/tmp/1060/1060.img \<br>      -append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>      -net user,hostfwd=tcp::2222-:22 -net nic \<br>      -S -s<br></code></pre></td></tr></table></figure><p>上方 <code>-append</code>传递给内核的参数可以通过在启动时，访问 GRUB 启动菜单，按 <code>e</code>键编辑引导参数可以看到参数，也可虚拟机启动后通过 <code>cat /proc/cmdline</code>查看。</p><p>在 <code>~/code/tmp/1060</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">aarch64-linux-gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>uos-v20-1060内核第一个断点必须设置为硬件断点，否则gdb输出如下Warning且无法捕捉断点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Warning:<br>Cannot insert breakpoint 1.<br>Cannot access memory at address 0xffffffff824bbb8d<br><br>Command aborted.<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     init/main.c: 没有那个文件或目录. <br></code></pre></td></tr></table></figure><p>很明显找不到源码，解决方案有两种：</p><ol type="1"><li><code>gdb</code>中使用 <code>dir</code>命令或 <code>set substitute-path</code>命令指定和修改搜素源码文件的路径</li><li>基于源码编译出内核，在源码目录执行 <code>aarch64-linux-gdb vmlinux</code>命令。</li></ol><p>下文采用方案2：</p><p>下载1060-2源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;ssh://ut004487@gerrit.uniontech.com:29418/kernel/arm-kernel&quot;</span> &amp;&amp; scp -p -P 29418 ut004487@gerrit.uniontech.com:hooks/commit-msg <span class="hljs-string">&quot;arm-kernel/.git/hooks/&quot;</span><br>git checkout -b develop/need_merge need_merge<br></code></pre></td></tr></table></figure><p>内核编译选项配置参考：<a href="https://github.com/realwujing/linux-learning/blob/main/debug/kernel/qemu/%E5%9F%BA%E4%BA%8Eqemu%20tap(NAT%E7%BD%91%E7%BB%9C)%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.md#%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE">内核编译选项配置</a></p><p>内核编译完成后启动虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -name guest=uos-v20-1060-arm64,debug-threads=on -machine virt-3.1,accel=kvm,usb=off,dump-guest-core=off,gic-version=3 -cpu host \<br>      -smp 4 -m 4096 \<br>      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \<br>      -kernel ~/code/x86-kernel/arch/x86/boot/bzImage \<br>      -initrd ~/code/tmp/1060/initrd.img-4.19.0-amd64-desktop \<br>      -hda ~/code/tmp/1060/1060.img \<br>      -append <span class="hljs-string">&quot;root=/dev/sda5 ro splash quiet DEEPIN_GFXMODE= ima_appraise=off security=selinux checkreqprot=1 libahci.ignore_sss=1 nokaslr&quot;</span> \<br>      -net user,hostfwd=tcp::2222-:22 -net nic \<br>      -S -s<br></code></pre></td></tr></table></figure><p>在 <code>~/code/arm-kernel</code>目录下启动gdb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">aarch64-linux-gdb vmlinux<br>target remote :1234<br>hb start_kernel<br>c<br></code></pre></td></tr></table></figure><p>敲 <code>c</code>命令输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Thread 1 hit Breakpoint 1, start_kernel () at init/main.c:531<br>531     &#123;  <br></code></pre></td></tr></table></figure><p>可以看到断点正常命中，继续敲 <code>c</code>命令可以看到虚拟机正常启动到登录界面。</p><h2 id="more">More</h2><ul><li><a href="https://cdn.kernel.org/pub/linux/kernel/people/will/docs/qemu/qemu-arm64-howto.html">Running a full system stack under QEMUarm64</a></li><li><a href="https://unix.stackexchange.com/questions/276480/booting-a-raw-disk-image-in-qemu">Booting a raw disk image in QEMU</a></li><li><a href="https://blog.csdn.net/weixin_39759247/article/details/126569448">使用Qemu在Mac上安装虚拟机</a></li><li><a href="https://blog.csdn.net/weixin_34253539/article/details/93084893">Qemu&amp;KVM 第一篇（2） qemu kvm 相关知识</a></li><li><a href="https://www.linuxprobe.com/boot-into-linuxcli.html">如何开机进入Linux命令行</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>helloworld-initramfs</title>
    <link href="/linux/kernel/qemu/helloworld-initramfs/"/>
    <url>/linux/kernel/qemu/helloworld-initramfs/</url>
    
    <content type="html"><![CDATA[<h1 id="helloworld-initramfs">helloworld initramfs</h1><h2 id="helloworld.c源码">helloworld.c源码</h2><p>做一个最简单的Hello World initramfs，来直观地理解initramfs。</p><p>Hello World的C程序如下，与普通的Hello World相比，加了一行while(1)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-comment">/* 让程序打印完后继续维持在用户态 */</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译helloworld.c程序">编译helloworld.c程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> helloworld<br>gcc -static helloworld.c -o init<br></code></pre></td></tr></table></figure><ul><li><p>-static: On systems that support dynamic linking, this prevents linking with the shared libraries. //不让gcc动态链接shared libraries</p></li><li><p>-o init 当 GRUB 载入 kernel 和 initramfs 后，kernel 会把 initramfs 在内存中展开，然后执行其根目录下的 init ，也就是上面的脚本。以上的脚本会执行 mount 工作，准备好目录结构，然后执行 /sbin/init 转换入 ubuntu 的初始化过程（system-v init ，upstart ， systemd，用 udev 自动创建设备文件等）。</p></li></ul><h2 id="打包initramfs文件">打包initramfs文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> tmp<br><span class="hljs-built_in">cp</span> init tmp<br><span class="hljs-built_in">cd</span> tmp<br>find . | cpio -o -H newc | gzip &gt; ../helloworld-initramfs.cpio.gz<br></code></pre></td></tr></table></figure><h2 id="在qemu中启动编译好的内核把helloworld-initramfs.cpio.gz指定为initrd">在qemu中启动编译好的内核，把helloworld-initramfs.cpio.gz指定为initrd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -kernel ~/code/linux/arch/x86/boot/bzImage -initrd ~/code/linux-learning/debug/helloworld/helloworld-initramfs.cpio.gz -append <span class="hljs-string">&quot;console=ttyS0&quot;</span> -nographic<br></code></pre></td></tr></table></figure><p>系统能成功启动到输出"Hello World!"，并且在用户态停住。结合前文“在qemu环境中用gdb调试Linux内核”，可以看到qemu虚机中运行的Linux系统已经成功挂载了initramfs, 在console日志中也能看到“Unpacking initramfs...”。</p><!-- ![helloworld](images/helloworld.png) --><figure><img src="https://cdn.jsdelivr.net/gh/realwujing/picture-bed/helloworld.png" alt="" /><figcaption>helloworld</figcaption></figure><ul><li><a href="https://www.cnblogs.com/wipan/p/9269505.html">Initramfs 原理和实践</a></li><li><a href="https://blog.csdn.net/u010444107/article/details/79427542">initramfs的使用方法</a></li><li><a href="https://blog.csdn.net/greatyoulv/article/details/117175103">initramfs的制作和使用</a></li><li><a href="https://blog.csdn.net/u010444107/article/details/79427542">initramfs的使用方法</a></li><li><a href="https://www.cnblogs.com/fengyc/p/6114648.html">基于 debootstrap 和 busybox 构建 mini ubuntu</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux内核调试</title>
    <link href="/linux/kernel/qemu/linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/"/>
    <url>/linux/kernel/qemu/linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-内核调试">linux 内核调试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -kernel ~/code/linux/arch/x86/boot/bzImage -initrd ~/code/busybox-1.35.0/initramfs.cpio.gz -append <span class="hljs-string">&quot;nokaslr console=ttyS0&quot;</span> -nographic<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -hda ~/code/tmp/bionic.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -s -S -m 2048 -kernel ~/code/linux/arch/x86/boot/bzImage -drive format=raw,file=/home/wujing/code/tmp/trusty.img -append <span class="hljs-string">&quot;root=/dev/sda rootfstype=ext4 rw console=ttyS0 nokaslr&quot;</span> -nographic<br></code></pre></td></tr></table></figure><ul><li><a href="https://bbs.huaweicloud.com/blogs/348654">利用QEMU+GDB搭建Linux内核调试环境</a></li><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li><li><a href="https://blog.csdn.net/weixin_49393427/article/details/126435589">内核调试环境：buildroot/debootstrap制作文件系统、编译内核、QEMU模拟</a></li><li><a href="https://blog.51cto.com/u_13731941/5399257">使用 debootstrap 制作 ARM64 rootfs.cpio</a></li><li><a href="https://www.cnblogs.com/huaibovip/p/debootstrap-fs.html">debootstrap 制作根文件系统</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>initramfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac下基于qemu调试ubuntu-22</title>
    <link href="/linux/kernel/qemu/mac%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95ubuntu-22.04.01/"/>
    <url>/linux/kernel/qemu/mac%E4%B8%8B%E5%9F%BA%E4%BA%8Eqemu%E8%B0%83%E8%AF%95ubuntu-22.04.01/</url>
    
    <content type="html"><![CDATA[<h1 id="mac下基于qemu调试ubuntu-22.04.01">mac下基于qemu调试ubuntu-22.04.01</h1><h2 id="安装环境">安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install qemu<br></code></pre></td></tr></table></figure><h2 id="创建磁盘映像">创建磁盘映像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-img create -f qcow2 ubuntu-22.04.1-desktop-amd64.qcow2 20G<br></code></pre></td></tr></table></figure><h2 id="安装-ubuntu">安装 Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>    -machine <span class="hljs-built_in">type</span>=q35,accel=hvf \<br>    -smp 2 \<br>    -hda /Users/wujing/code/qemu/ubuntu-22.04.1-desktop-amd64.qcow2 \<br>    -cdrom /Users/wujing/Downloads/ubuntu-22.04.1-desktop-amd64.iso \<br>    -m 4G \<br>    -vga virtio \<br>    -usb \<br>    -device usb-tablet \<br>    -display default,show-cursor=on<br></code></pre></td></tr></table></figure><h2 id="运行-ubuntu">运行 Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>    -machine <span class="hljs-built_in">type</span>=q35,accel=hvf \<br>    -smp 2 \<br>    -hda /Users/wujing/code/qemu/ubuntu-22.04.1-desktop-amd64.qcow2 \<br>    -m 4G \<br>    -vga virtio \<br>    -usb \<br>    -device usb-tablet \<br>    -display default,show-cursor=on \<br>    -net user,hostfwd=tcp::2222-:22 -net nic<br></code></pre></td></tr></table></figure><p>运行 VM 时，我们不需要挂载 Ubuntu ISO，可以通过省略以下选项将其删除：-cdrom。 增加-net选项把host的127.0.0.1:2222端口转发到guest的22端口，我们可以使用ssh来连接guest系统。</p><p>在宿主机上执行下方命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh wujing@127.0.0.1 -p 2222<br></code></pre></td></tr></table></figure><h2 id="调试-ubuntu">调试 Ubuntu</h2><p>添加 -dbgsym.ddeb 包 仓库源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://ddebs.ubuntu.com <span class="hljs-subst">$(lsb_release -cs)</span> main restricted universe multiverse</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com <span class="hljs-subst">$(lsb_release -cs)</span>-updates main restricted universe multiverse</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com <span class="hljs-subst">$(lsb_release -cs)</span>-proposed main restricted universe multiverse&quot;</span> | \<br>sudo <span class="hljs-built_in">tee</span> -a /etc/apt/sources.list.d/ddebs.list<br></code></pre></td></tr></table></figure><p>从 Ubuntu 服务器导入调试符号存档签名密钥。在 Ubuntu 18.04 LTS 及更高版本上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install ubuntu-dbgsym-keyring<br></code></pre></td></tr></table></figure><p>在早期版本的 Ubuntu 使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F2EDC64DC5AEE1F6B9C621F0C8CAB6595FDFF622<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核调试包，三个deb包版本号要保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r)=5.19.0-38.39~22.04.1 linux-i<br>mage-$(<span class="hljs-built_in">uname</span> -r)-dbgsym=5.19.0-38.39~22.04.1<br></code></pre></td></tr></table></figure><p>在虚拟机中下载内核源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install dpkg-dev<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt <span class="hljs-built_in">source</span> linux-image-$(<span class="hljs-built_in">uname</span> -r)<br></code></pre></td></tr></table></figure><p>复制内核源码到宿主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r linux-signed-hwe-5.19-5.19.0 wujing@192.168.31.9:~/code<br></code></pre></td></tr></table></figure><p>复制带调试符号的内核二进制vmlinux到宿主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp /lib/debug/boot/vmlinux-5.19.0-38-generic wujing@192.168.31.9:~/code/linux-signed-hwe-5.19-5.19.0<br></code></pre></td></tr></table></figure><p>在宿主机上执行下方命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>    -machine <span class="hljs-built_in">type</span>=q35,accel=hvf \<br>    -smp 2 \<br>    -hda /Users/wujing/code/qemu/ubuntu-22.04.1-desktop-amd64.qcow2 \<br>    -m 4G \<br>    -vga virtio \<br>    -usb \<br>    -device usb-tablet \<br>    -display default,show-cursor=on \<br>    -net user,hostfwd=tcp::2222-:22 -net nic \<br>    -S -s<br></code></pre></td></tr></table></figure><p>报错如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">qemu-system-x86_64: -s: gdbstub: current accelerator doesn&#x27;t support guest debugging<br></code></pre></td></tr></table></figure><p>看来想在mac上使用hvf作为加速器调试目前还行不通。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>去掉编译内核的优化选项</title>
    <link href="/linux/kernel/qemu/%E5%8E%BB%E6%8E%89%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E7%9A%84%E4%BC%98%E5%8C%96%E9%80%89%E9%A1%B9/"/>
    <url>/linux/kernel/qemu/%E5%8E%BB%E6%8E%89%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E7%9A%84%E4%BC%98%E5%8C%96%E9%80%89%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="去掉编译内核的优化选项">去掉编译内核的优化选项</h1><h2 id="优化级别从--o2-改为--o1">优化级别从 -O2 改为 -O1</h2><pre><code class="hljs">修改内核源代码根目录下的Makefile:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/KBUILD_CFLAGS   += -O2/KBUILD_CFLAGS   += -O1/g&#x27;</span> Makefile<br></code></pre></td></tr></table></figure></code></pre><h2 id="内核调试选项">内核调试选项</h2><pre><code class="hljs"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">Kernel hacking  ---&gt;<br>    Compile-time checks and compiler options  ---&gt;<br>        [*] Compile the kernel with debug info<br>        [*]   Provide GDB scripts for kernel debugging<br>        [*] Enable full Section mismatch analysis<br><br>    [*] Kernel debugging<br></code></pre></td></tr></table></figure>对应编译选项如下：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_DEBUG_INFO = y<br>CONFIG_GDB_SCRIPTS = y<br>CONFIG_DEBUG_SECTION_MISMATCH = y<br>CONFIG_DEBUG_KERNEL = y<br></code></pre></td></tr></table></figure>为了支持`CONFIG_DEBUG_SECTION_MISMATCH`特性，还需开启`CONFIG_X86_5LEVEL`特性：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[*] Enable 5-level page tables support<br></code></pre></td></tr></table></figure>对应编译选项如下：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_X86_5LEVEL = y<br></code></pre></td></tr></table></figure></code></pre><h2 id="关闭内核随机地址选项">关闭内核随机地址选项</h2><pre><code class="hljs"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Processor type and features ----&gt;<br>    [] Randomize the address of the kernel image (KASLR)<br></code></pre></td></tr></table></figure>对应编译选项如下：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">CONFIG_RANDOMIZE_BASE = n<br></code></pre></td></tr></table></figure>`make menuconfig`确认上述编译选项后输出如下：![config](https://cdn.jsdelivr.net/gh/realwujing/picture-bed/config.png)</code></pre><h2 id="编译内核">编译内核</h2><pre><code class="hljs"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j`<span class="hljs-built_in">expr</span> $(<span class="hljs-built_in">nproc</span>) \* 2`<br></code></pre></td></tr></table></figure></code></pre><h2 id="more">More</h2><ul><li><a href="https://blog.csdn.net/eydwyz/article/details/114019532">使用 VSCode + qemu 搭建 Linux 内核调试环境</a></li><li><a href="http://m.blog.chinaunix.net/uid-21419530-id-5835399.html">去掉编译内核的优化选项</a></li><li><a href="https://blog.csdn.net/nust20/article/details/17720859">去掉编译内核的优化选项</a></li><li><a href="https://www.cnblogs.com/dakewei/p/10756416.html">如何在编译linux内核时不优化内核以便于调试内核?</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>qemu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/linux/kernel/namespace/uts_namespace/README/"/>
    <url>/linux/kernel/namespace/uts_namespace/README/</url>
    
    <content type="html"><![CDATA[<h1 id="uts-namespacenamespace">UTS namespacenamespace</h1>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>namespace</category>
      
      <category>uts_namespace</category>
      
    </categories>
    
    
    <tags>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uts_namespace</title>
    <link href="/linux/kernel/namespace/uts_namespace/uts_namespace/"/>
    <url>/linux/kernel/namespace/uts_namespace/uts_namespace/</url>
    
    <content type="html"><![CDATA[<h1 id="uts_namespace内核实现">uts_namespace内核实现</h1><p>本次调试基于linux v5.10-rc7，具体参加下方链接：</p><ul><li><a href="https://github.com/realwujing/linux-learning/blob/main/debug/kernel/qemu/%E5%9F%BA%E4%BA%8Eqemu%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C%E3%80%81debootstrap%20%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8%E3%80%81%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.md">基于qemu桥接网络、debootstrap 调试内核、根文件系统</a></li></ul><h2 id="断点">断点</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">(gdb) save breakpoints ust_namespace.breakpoint<br>Saved to file &#x27;ust_namespace.breakpoint&#x27;.<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">break fs/exec.c:do_execveat_common<br>break kernel/fork.c:2573<br>break kernel/fork.c:kernel_clone<br>break kernel/fork.c:2456<br>break kernel/fork.c:copy_process<br>break kernel/fork.c:1929<br>break kernel/fork.c:2098<br>break kernel/nsproxy.c:copy_namespaces<br>break kernel/nsproxy.c:162<br>break include/linux/nsproxy.h:109<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ust_namespace.breakpoint<br>i b<br></code></pre></td></tr></table></figure><h2 id="uts_namespace_demo">uts_namespace_demo</h2><p>通过qemu进入系统后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> build<br>./uts_namespace_demo<br></code></pre></td></tr></table></figure><h2 id="命名空间复制">命名空间复制</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">14      breakpoint     keep y   0xffffffff8105ea0d in copy_process at kernel/fork.c:2098<br>retval = copy_namespaces(clone_flags, p);<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">b kernel/nsproxy.c:copy_namespaces <br>Breakpoint 15 at 0xffffffff81084c50: file kernel/nsproxy.c, line 153.<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">copy_namespaces</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags, <span class="hljs-keyword">struct</span> task_struct *tsk)</span>   <span class="hljs-comment">// kernel/nsproxy.c:151</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> *<span class="hljs-title">old_ns</span> =</span> tsk-&gt;nsproxy;  <span class="hljs-comment">// task_struct有namespace相关数据结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_namespace</span> *<span class="hljs-title">user_ns</span> =</span> task_cred_xxx(tsk, user_ns); <span class="hljs-comment">// user_namespace</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> *<span class="hljs-title">new_ns</span>;</span><br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> (likely(!(flags &amp; (CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWIPC |<br>      CLONE_NEWPID | CLONE_NEWNET |<br>      CLONE_NEWCGROUP | CLONE_NEWTIME)))) &#123;         <span class="hljs-comment">// CLONE_NEWUTS符合条件，此处为true</span><br><span class="hljs-keyword">if</span> (likely(old_ns-&gt;time_ns_for_children == old_ns-&gt;time_ns)) &#123;  <span class="hljs-comment">// 此处也为true</span><br>get_nsproxy(old_ns);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">// 此处函数返回</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!ns_capable(user_ns, CAP_SYS_ADMIN))     <span class="hljs-comment">// 根据usernamesapce鉴权</span><br><span class="hljs-keyword">return</span> -EPERM;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">(gdb) b kernel/nsproxy.c:162<br>Breakpoint 16 at 0xffffffff81084c90: file kernel/nsproxy.c, line 163.<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">(gdb) b include/linux/nsproxy.h:109<br>Breakpoint 17 at 0xffffffff81229df2: file ./include/linux/nsproxy.h, line 109.<br></code></pre></td></tr></table></figure><h2 id="nsproxy数据结构">nsproxy数据结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> &#123;</span>    <span class="hljs-comment">// include/linux/nsproxy.h:31</span><br><span class="hljs-type">atomic_t</span> count;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uts_namespace</span> *<span class="hljs-title">uts_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_namespace</span> *<span class="hljs-title">ipc_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mnt_namespace</span> *<span class="hljs-title">mnt_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">pid_ns_for_children</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span>      *<span class="hljs-title">net_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_namespace</span> *<span class="hljs-title">time_ns</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">time_namespace</span> *<span class="hljs-title">time_ns_for_children</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_namespace</span> *<span class="hljs-title">cgroup_ns</span>;</span><br>&#125;;<br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nsproxy</span> <span class="hljs-title">init_nsproxy</span>;</span><br></code></pre></td></tr></table></figure><h2 id="unshare系统调用加入新的namespace">unshare系统调用加入新的namespace</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Called from unshare. Unshare all the namespaces part of nsproxy.</span><br><span class="hljs-comment"> * On success, returns the new nsproxy.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">unshare_nsproxy_namespaces</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> unshare_flags,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> nsproxy **new_nsp, <span class="hljs-keyword">struct</span> cred *new_cred, <span class="hljs-keyword">struct</span> fs_struct *new_fs)</span>  <span class="hljs-comment">// kernel/nsproxy.c:262</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_namespace</span> *<span class="hljs-title">user_ns</span>;</span><br><span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!(unshare_flags &amp; (CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWIPC |<br>       CLONE_NEWNET | CLONE_NEWPID | CLONE_NEWCGROUP |<br>       CLONE_NEWTIME)))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>user_ns = new_cred ? new_cred-&gt;user_ns : current_user_ns();<br><span class="hljs-keyword">if</span> (!ns_capable(user_ns, CAP_SYS_ADMIN))<br><span class="hljs-keyword">return</span> -EPERM;<br><br>*new_nsp = create_new_namespaces(unshare_flags, current, user_ns,<br> new_fs ? new_fs : current-&gt;fs);<br><span class="hljs-keyword">if</span> (IS_ERR(*new_nsp)) &#123;<br>err = PTR_ERR(*new_nsp);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br>out:<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>kernel</category>
      
      <category>namespace</category>
      
      <category>uts_namespace</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>namespace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux教程</title>
    <link href="/linux/linux%E6%95%99%E7%A8%8B/"/>
    <url>/linux/linux%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="linux教程">linux教程</h1><h2 id="手册">手册</h2><ul><li><p><a href="http://c.biancheng.net/linux_tutorial/"><font color=Red>Linux学习教程，Linux入门教程（超详细）</font></a></p></li><li><p><a href="https://www.runoob.com/linux/linux-tutorial.html">Linux教程|菜鸟教程- RUNOOB.COM</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247489122&amp;idx=1&amp;sn=fcdc5f6be0478cd0f6205c304e972645&amp;chksm=f9686496ce1fed80bf5b31bcc6003c6ce0f57e6c3a388c75554778f9927bdbad55d927a77a4a&amp;scene=21#wechat_redirect">Linux面试题100道，看看会多少？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Lk0EM8BUTa3Q4y2d-h86rg">所有文章汇总-截止2021年11月3日</a></p></li><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/"><font color=Red>Debian 参考手册</font></a></p></li><li><p><a href="https://debian-handbook.info/browse/zh-CN/stable/"><font color=Red>Debian 管理员手册</font></a></p></li><li><p><a href="https://www.junmajinlong.com/linux/index/">Linux系列文章</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/oyl3sin3tEODDPq3Spzd5w">Linux最强总结！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uavyYSfpSy4v1ovmZLE1hw">令人拍手叫绝的运维小技巧</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/0kyyki6IrmojiUnzGVlUzA"><font color=Red>Linux基础知识汇总，收藏！</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/rFI56ytk0mmr6hgKJ432qQ"><font color=Red>10个提高生产力的 Linux 命令与技巧，用完直接起飞！</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/zUKmA3sh-uzdyThEG6e1qA">Linux基础总结，这一篇就够了</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/OLrN2irwzjCI937iDW4XJg">计算机操作系统知识点总结（相当到位！！）</a></p></li><li><p><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全 | 菜鸟教程 - RUNOOB.COM</a></p></li><li><p><a href="https://www.linuxcool.com/">Linux命令大全(手册)</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/RVaE5xBdhAUfMwuiWo2FiQ">Linux 操作必备 150 个命令，速度收藏～</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/7y_0daHyBObsyTwVjJiORg">干货：Linux 文件和目录操作命令</a></p></li><li><p><a href="https://wangchujiang.com/linux-command/hot.html"><font color=Red>Linux命令大全|https://wangchujiang.com/linux-command/hot.html</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/3Fsuv2pTaxrOPUU03Zm9ZA">面试常问的 25+ 个 Linux 命令</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/UN7lbdp6OardlqFUfyY-nQ">汇总了89个系统相关的基本概念！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/s3w1r5BCYAxAq2YQNHaRCw">6个已弃用的Linux命令和您应该使用的替代工具</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/VJJWhPRIkAgZDT7D4J6AtQ">技术硬核 | Linux基础操作命令记不住？把这个甩过去！</a></p></li></ul><h2 id="history">history</h2><ul><li><a href="https://ubuntuqa.com/article/698.html">是否可以立即写入.bash_history？</a></li></ul><h2 id="shell">shell</h2><ul><li><a href="https://blog.csdn.net/qq_37164975/article/details/106181500"><font color=Red>#!/bin/bash 和 #!/usr/bin/env bash 的区别</font></a></li><li><a href="https://mp.weixin.qq.com/s/SSC83ut0TfPiF0o5sBcUxQ">「Linux」shell命令以及运行原理和Linux权限详解</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247503952&amp;idx=1&amp;sn=a942522821acdc84013cde9b89664ff3&amp;chksm=f96ba2a4ce1c2bb241da260ed4e93f33dcb72eab0b5135d8b46e985c25e8b45b199f148ef218&amp;mpshare=1&amp;scene=1&amp;srcid=0418Vy2K7AtdrVGYDNAFHATp&amp;sharer_sharetime=1650256598611&amp;sharer_shareid=2dfdf936388dba04865b3e883d5a3225&amp;version=3.1.12.6001&amp;platform=win#rd">Linux基础-shell脚本编程</a></li><li><a href="https://zhuanlan.zhihu.com/p/264346586">一篇教会你写90%的shell脚本 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/xdlmost/article/details/110475880"><font color=Red>shell教程(二) 四种工作模式</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1883601">linux之登录式shell和非登录式shell</a></li><li><a href="https://zhuanlan.zhihu.com/p/415152910">linux之登录式shell和非登录式shell</a></li></ul><h2 id="父子shell">父子shell</h2><ul><li><p><a href="https://blog.csdn.net/NOStandby/article/details/82914930">linux中父shell与子shell（脚本执行的几种方式）_peacewind-CSDN博客</a></p></li><li><p><a href="https://www.linuxidc.com/Linux/2018-09/154321.htm">Linux shell类型，shell父子关系，子shell用法</a></p></li><li><p><a href="https://blog.csdn.net/offer_N/article/details/126406297">Linux Shell中单引号、双引号、反引号的解释</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247498444&amp;idx=1&amp;sn=2150e8461c1d6a40cef8f9fe9d36013e&amp;chksm=f96b8838ce1c012ed600fcd1b4c5964b93f6b061343bc6e3d91bd9f45d0230838e3ce8666e4f&amp;scene=178&amp;cur_album_id=1507350615537025026#rd">你知道shell脚本中$0 $1 $# $@ $* $? $$都是什么意思吗？</a></p></li><li><p><a href="https://blog.csdn.net/wang740209668/article/details/53152596">Linux多命令顺序执行连接符(; || &amp;&amp; |)_Don't lost way-CSDN博客</a></p></li><li><p><a href="https://www.cnblogs.com/yeyuzhuanjia/p/16407968.html">Linux中单引号和双引号的区别</a></p></li></ul><h2 id="上传下载文件">上传下载文件</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/141860859#:~:text=Linux%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%201%20scp%202%20rcp%203%20wget%204,account%20required%20%2Flib64%2Fsecurity%2Fpam_unix.so%20session%20required%20%2Flib64%2Fsecurity%2Fpam_unix.so%209%20SecureCRT">Linux上传下载文件的几种方式 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/jerrygaoling/article/details/115325671">Linux中使用sftp的常用命令</a></li></ul><h2 id="rsync">rsync</h2><ul><li><a href="https://www.cnblogs.com/f-ck-need-u/p/7220009.html#auto_id_0">rsync(一):基础命令和用法(精)</a></li><li><a href="https://blog.51cto.com/u_12922638/2678436"><font color=Red>rsync断点续传</font></a></li><li><a href="https://blog.csdn.net/sunny05296/article/details/103881588">rsync断点续传方式进行本地或远程文件拷贝</a></li><li><a href="https://mp.weixin.qq.com/s/8r0lYjGvARzJt6OdCiwe1Q">rsync+inotify数据实时同步介绍</a></li></ul><h2 id="忽略大小写">忽略大小写</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43833642/article/details/104712175">Linux终端忽略大小写自动补全</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;set completion-ignore-case on&quot;</span> &gt;&gt; ~/.inputrc<br></code></pre></td></tr></table></figure></li></ul><h2 id="python">python</h2><ul><li><a href="https://blog.51cto.com/u_15351425/3727453">linux系统下将python3设置为默认的python</a></li></ul><h2 id="时间">时间</h2><ul><li><a href="https://mp.weixin.qq.com/s/nKzLOfb5aZLXKBzKQmzXpw">为什么计算机关机重启后的时间始终正确？</a></li><li><a href="https://blog.csdn.net/GGxiaobai/article/details/53504629">linux中通过date命令获取昨天或明天时间的方法_花落花开，春去秋来！-CSDN博客</a></li></ul><h3 id="时间协议">时间协议</h3><ul><li><a href="https://hongwangle.com/use-case/time-sync/ntp-ptp-time-sync/">NTP/PTP时间同步入门</a></li><li><a href="https://blog.csdn.net/zu7543/article/details/102584313">简单理解时间同步和时钟同步</a></li></ul><h2 id="数组">数组</h2><ul><li><a href="https://blog.csdn.net/weixin_42167759/article/details/80702517">shell脚本——字符串 数组</a></li><li><a href="https://blog.csdn.net/qq_32907195/article/details/110663780">shell 数组遍历的3种方法</a></li></ul><h2 id="test">test</h2><ul><li><a href="https://www.cnblogs.com/tankblog/p/6160808.html">linux应用之test命令详细解析</a></li><li><a href="https://zhuanlan.zhihu.com/p/82112596">shell 中<span class="math inline">\(() ` `，\)</span>{}，$[] $(())，[ ] (( )) [[ ]]作用与区别</a></li><li><a href="http://c.biancheng.net/view/2751.html">Shell [[]]详解：检测某个条件是否成立</a></li><li><a href="https://blog.51cto.com/888888hfer/2166233">使用shell 判断文件夹或文件是否存在</a></li><li><a href="http://c.biancheng.net/view/2742.html">Shell test命令（Shell []）详解，附带所有选项及说明</a></li><li><a href="https://blog.csdn.net/qq_33468857/article/details/104835761">linux shell中的case语句用法</a></li></ul><h2 id="重定向后台运行">重定向、后台运行</h2><ul><li><a href="https://blog.csdn.net/shadow_zed/article/details/102812261">Shell nohup 命令详解_shadow_zed的博客-CSDN博客</a></li><li><a href="https://www.toutiao.com/i7052566294952329765/">你知道2&gt;&amp;1 &gt;/dev/null是什么意思么？</a></li><li><a href="https://www.cnblogs.com/x9mars/p/14964113.html"><font color=Red>linux 2&gt;&amp;1和&amp;的意思</font></a></li><li><a href="https://blog.csdn.net/aboutmn/article/details/87778008">Linux 任务后台运行（总结）</a></li><li><a href="https://juejin.cn/post/6844904007480131591">Linux 编辑启动、停止与重启 jar 包脚本</a></li><li><a href="https://blog.csdn.net/v6543210/article/details/104636198">stdbuf让nohup实时输出日志</a></li><li><a href="https://blog.csdn.net/Tangs_/article/details/88998799">命令行实现单个进度条，或者刷新一行的内容</a></li><li><a href="https://www.toutiao.com/article/7077055246081540646">Linux 标准输入输出、重定向、管道、文件权限、后台启动进程命令</a></li><li><a href="https://mp.weixin.qq.com/s/-7Hb0-7p9FDQWYT_iD2pUg">深入理解Linux中2&gt;&amp;1的含义</a></li></ul><h2 id="rm">rm</h2><ul><li><a href="https://mp.weixin.qq.com/s/aVQj2Qz0eAQ2pYRCZhKAyg">Linux手误rm可能不需要跑路</a></li></ul><h2 id="trash-cli">trash-cli</h2><ul><li><a href="https://www.toutiao.com/article/6602932678066962951">Trash-Cli：Linux 上的命令行回收站工具</a></li></ul><h2 id="正则表达式">正则表达式</h2><ul><li><a href="https://www.runoob.com/regexp/regexp-metachar.html">正则表达式 – 元字符 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://c.runoob.com/front-end/854">正则表达式在线测试 | 菜鸟工具 (runoob.com)</a></li><li><a href="https://blog.csdn.net/sinat_32336967/article/details/94761771"><font color=Red>关于正则表达式中的.<em>，.</em>?，.+?的理解</font></a></li><li><a href="https://blog.csdn.net/qq_34172780/article/details/104954879">正则表达式中的 .<em>和.</em>?的区别</a></li><li><a href="https://www.cnblogs.com/yan888/p/16137904.html">正则表达式和扩展正则表达式</a></li><li><a href="https://www.cnblogs.com/xiaojiu/archive/2013/11/19/3430875.html">C语言中的正则表达式使用</a></li><li><a href="https://mp.weixin.qq.com/s/I3pxGtWLg86wfHItRafXQQ">Linux0基础入门，教你如何在Shell中使用正则表达式</a></li></ul><h2 id="find">find</h2><ul><li><a href="https://www.cnblogs.com/MrLiuZF/p/15196373.html"><font color=Red>Linux下which、whereis、locate、find命令的区别</font></a></li><li><a href="https://mp.weixin.qq.com/s/zSjyZyFaBkS38henxVf9zg">find 命令的 7 种用法</a></li><li><a href="https://blog.csdn.net/whatday/article/details/98471778">linux shell find命令 查找多种文件后缀</a></li><li><a href="https://www.jianshu.com/p/bf9eba9f4e97">Linux copy时排除某文件/目录 - 简书 (jianshu.com)</a></li><li><a href="https://blog.csdn.net/cupidove/article/details/8767450">linux find grep组合使用</a></li><li><a href="https://www.cnblogs.com/andy0816/p/16969729.html"><font color=Red>find命令详解</font></a></li><li><a href="https://blog.csdn.net/FL63Zv9Zou86950w/article/details/126945089">Linux 中如何获取文件的绝对路径</a></li></ul><h2 id="xargs">xargs</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-xargs.html">Linux xargs 命令</a></li><li><a href="https://ruanyifeng.com/blog/2019/08/xargs-tutorial.html">xargs 命令教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></li><li><a href="https://blog.csdn.net/liumiaocn/article/details/105853141">Linux基础：xargs命令-I选项使用技巧</a></li><li><a href="https://www.cnblogs.com/mirrorlake/p/7366060.html">Linux-命令-xargs</a></li></ul><h2 id="grep-sed-awk">grep sed awk</h2><h3 id="grep">grep</h3><ul><li><a href="https://www.cnblogs.com/randolf/p/10336546.html">三剑客基础详解(grep、sed、awk)</a></li><li><a href="https://blog.csdn.net/m0_50370837/article/details/125068528">Linux中grep详解</a></li><li><a href="https://blog.csdn.net/liubangbo/article/details/80853319">grep -s 去掉 no such file or directory</a></li><li><a href="https://blog.csdn.net/houzhizhen/article/details/88236174">grep 只从指定文件中查找，并且排除某些文件夹</a></li><li><a href="https://blog.csdn.net/Decisiveness/article/details/45602789">grep 命令（在指定文件的文件类型中查找）</a></li><li><a href="https://blog.csdn.net/mmbbz/article/details/51035401">Linux: grep多个关键字“与”和“或”</a></li><li><a href="https://www.cnblogs.com/linuxprobe/p/13044173.html">grep中的正则表达式</a></li></ul><h3 id="sed">sed</h3><ul><li><a href="https://blog.csdn.net/benben0503/article/details/91493515"><font color=Red>linux复制一行或几行数据到另一个文本</font></a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;1119,1224&#x27;</span>p kern.log &gt; pm.log<br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/Howard_Liu/article/details/5891110">在Bash脚本中完成变量替换和指定文件内容替换的方法</a></li><li><a href="https://www.twle.cn/c/yufei/sed/sed-basic-strings-delimiter.html"><font color=Red>sed 模式分隔符</font></a></li><li><a href="https://www.cnblogs.com/linux-wangkun/p/5745584.html">sed 字符串替换 - Amei1314 - 博客园 (cnblogs.com)</a></li><li><a href="https://wangchujiang.com/linux-command/c/sed.html">sed 功能强大的流式文本编辑器</a></li><li><a href="https://blog.csdn.net/weixin_28937395/article/details/116575070"><font color=Red>linux sed查找文件中某个值,linux查找文件中间某几行之sed用法小结</font></a></li><li><a href="https://blog.51cto.com/u_4048786/3204245"><font color=Red>linux使用sed命令批量替换某个目录下文件的内容</font></a></li><li><a href="https://www.cnblogs.com/cheyunhua/p/14265690.html">sed 脚本分隔符引起的问题unknown option to `s'</a></li><li><a href="https://www.cnblogs.com/zhutao-niuniu2014/p/10865076.html">SED命令</a></li></ul><h3 id="awk">awk</h3><ul><li><a href="https://www.junmajinlong.com/shell/awk/index/">精通awk系列文章</a></li><li><a href="https://mp.weixin.qq.com/s/WEE702IgzgUbRI7u3K39gg">Linux 下强大的 awk 命令，你真的会了吗？</a></li><li><a href="https://mp.weixin.qq.com/s/f093fiQ6XYqAUobRMeCHqg">Linux之awk使用技巧</a></li></ul><h2 id="日志">日志</h2><ul><li><a href="https://www.jianshu.com/p/3b11a2b7c746">rsyslog服务及Linux系统日志简介</a></li><li><a href="https://kifarunix.com/enable-rsyslog-logging-on-debian-12/">Enable Rsyslog Logging on Debian 12</a></li><li><a href="https://blog.csdn.net/qq_45225437/article/details/104294044">Linux系统中的日志管理——journal、rsyslog、timedatectl、时间同步</a></li><li><a href="https://www.toutiao.com/article/7228735741931864631/">Linux 下使用 Logrotate 旋转和压缩日志文件</a></li></ul><h2 id="tail">tail</h2><ul><li><a href="https://blog.51cto.com/u_15072917/4047087">tail -f 实时查看日志文件 linux查看日志后100行</a></li><li><a href="https://blog.csdn.net/weixin_43945983/article/details/109571105">linux环境：查看日志的几种命令总结_危险、的博客-CSDN博客</a></li></ul><h2 id="cat-eof">cat EOF</h2><ul><li><a href="https://www.cnblogs.com/wq242424/p/13194169.html">EOF一般会配合cat能够多行文本输出</a></li></ul><h2 id="tee">tee</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-tee.html">tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</a></li></ul><h2 id="dd">dd</h2><ul><li><p><a href="https://blog.csdn.net/qq_28499879/article/details/121114544">dd命令（参数和使用）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/or-g1A69cTLqEYaU7u1YXg">怎么在Linux中几秒钟创建一个2GB的大文件？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/cdtUxk3188BEKcKtDjk_Mw">如何使用 diff 命令比较 Linux 终端中的文本文件</a></p></li></ul><h2 id="script">script</h2><ul><li><a href="https://blog.csdn.net/Victor2code/article/details/103378542">强大的Linux终端行为记录和回放工具：script命令详解</a></li><li><a href="https://blog.csdn.net/weixin_29763641/article/details/116925273">linux情况屏幕一条命令是,Linux中通过script命令那个记录屏幕的输出</a></li><li><a href="https://blog.csdn.net/weixin_42096901/article/details/107922971">linux下使用script命令生成^ [和^ M个字符的原因和方法</a></li><li><a href="https://blog.csdn.net/ouyang_peng/article/details/78818492">【Linux学习 】Linux使用Script命令来记录并回放终端会话</a></li><li><a href="https://blog.csdn.net/reyleon/article/details/13999033">终于知道保存SCP日志了</a></li></ul><h2 id="终端">终端</h2><ul><li><a href="https://www.cnblogs.com/zengkefu/p/5558851.html">Linux中tty、pty、pts的概念区别转载</a></li><li><a href="https://segmentfault.com/a/1190000009082089">Linux TTY/PTS概述</a></li><li><a href="https://blog.csdn.net/fuhanghang/article/details/83691158">Linux中tty、pty、pts的概念区别</a></li></ul><h3 id="终端复用">终端复用</h3><ul><li><a href="https://blog.csdn.net/Naisu_kun/article/details/119567566">Linux笔记：终端复用与管理工具screen和tmux</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html"><font color=Red>Tmux 使用教程</font></a></li><li><a href="https://cloud.tencent.com/developer/article/1656074">Tmux如何让滚屏起飞</a></li><li><a href="https://www.cnblogs.com/lovesKey/p/12151317.html">在tmux缓冲区中搜索</a></li><li><a href="https://blog.51cto.com/u_6997825/3748023">tmux常用命令及快捷键</a></li><li><a href="https://blog.csdn.net/chaokudeztt/article/details/126299939">tmux 解决屏幕比例不协调问题</a></li></ul><h2 id="随机数">随机数</h2><ul><li><a href="https://mp.weixin.qq.com/s/YhSMBitB6bA1QkXUcUe5_Q">Linux中的随机数知多少</a></li></ul><h2 id="查找进程">查找进程</h2><ul><li><a href="https://www.cnblogs.com/f-ck-need-u/p/7058920.html">第9章Linux进程和信号超详细分析</a></li><li><a href="https://www.cnblogs.com/lucyjiayou/archive/2012/02/24/2366194.html">Linux 查看进程和删除进程 - lucyjiayou - 博客园</a></li><li><a href="https://blog.csdn.net/shenhaiwen/article/details/75116602">linux下grep查找进程</a></li><li><a href="https://blog.csdn.net/beyondlpf/article/details/8065070">linux 查看某进程 并杀死进程 ps grep kill</a></li><li><a href="https://blog.csdn.net/hongweigg/article/details/44828353">Linux 查找指定名称的进程并显示进程详细信息</a></li><li><a href="https://mp.weixin.qq.com/s/jL2bHl0WFzsgqS0MaasVWg">如何在Linux中查找父进程PPID</a></li><li><a href="https://blog.csdn.net/andy572633/article/details/7211546">【转】linux下杀死进程（kill）的N种方法</a></li><li><a href="https://www.wubo.net.cn/security/ps_grep_kill_process.html">使用ps、grep、kill批量杀死进程 - 物博网 (wubo.net.cn)</a></li><li><a href="https://mp.weixin.qq.com/s/UkzMZYbmtSHYLQ-SShSnHg">no no no. 不要使用kill -9</a></li><li><a href="https://blog.csdn.net/weixin_34121304/article/details/85553216">SIGTERM等信号含义</a></li><li><a href="https://www.cnblogs.com/diyunpeng/p/8535504.html">Linux下使用ps命令查看某个进程文件的启动位置</a></li></ul><h2 id="硬件信息">硬件信息</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMjEyNDgyNw==&amp;mid=2247493224&amp;idx=1&amp;sn=d020f84b7e607e740ac487c61b231c25&amp;chksm=f96b949cce1c1d8ada3bab434c88c43972032874405597084d43db5b0b605df9213b6f51ef47&amp;scene=21#wechat_redirect">9个Linux 常用查看系统硬件信息命令(实例详解)</a></li></ul><h3 id="lshw">lshw</h3><ul><li><p><a href="https://www.toutiao.com/article/7257841565858103819/">Linux 中的 lshw 命令：获取硬件详细信息</a></p><p>查看硬件信息的 class 分类:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lshw -short<br></code></pre></td></tr></table></figure><p>查看特定类型的数据:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lshw -c multimedia<br></code></pre></td></tr></table></figure><p>把硬件信息输出到 html:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lshw -html &gt; hw.hhtml<br></code></pre></td></tr></table></figure></li></ul><h3 id="dmidecode">dmidecode</h3><ul><li><a href="https://linux.die.net/man/8/dmidecode">dmidecode(8) - Linux man page</a></li><li><a href="https://blog.csdn.net/tugouxp/article/details/128739019">Linux下dmi信息分析工具dmidecode原理</a></li></ul><h3 id="lstopo">lstopo</h3><ul><li><p><a href="https://mp.weixin.qq.com/s/kFcfXQgSemHfL5Uz1deoJg">Linux 性能调优之硬件资源监控</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install hwloc<br></code></pre></td></tr></table></figure><p>图形化展示硬件拓扑结构:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lstopo<br></code></pre></td></tr></table></figure><p>文字信息输出硬件拓扑结构:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lstopo-no-graphics<br></code></pre></td></tr></table></figure></li></ul><h2 id="top">top</h2><ul><li><a href="https://blog.csdn.net/weixin_45465395/article/details/115728520">linux top命令详解（看这一篇就够了）</a></li><li><a href="https://segmentfault.com/a/1190000013504502"><font color=Red>top命令里内存参数 VIRT, RES 和 SHR 分别是什么意思</font></a></li><li><a href="https://www.toutiao.com/article/7152513156642816519">Linux命令系列之top——里面藏着很多鲜为人知的宝藏知识</a></li></ul><h2 id="系统状态">系统状态</h2><ul><li><p><a href="https://www.cnblogs.com/f-ck-need-u/p/7059074.html"><font color=Red>第10章统计和查看Linux的系统状态</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Fv64jRXmAe-H81Qh8RJK7w"><font color=Red>61秒，摸透Linux的健康状态！</font></a></p></li><li><p><a href="https://mp.weixin.qq.com/s/XzoekOLtREOUftHhGE3FLQ">Linux 进程管理之四大名捕</a></p></li><li><p><a href="https://blog.csdn.net/u014265442/article/details/90211142">linux 实际可用内存_beyond_zb的博客-CSDN博客_linux 可用内存</a></p></li><li><p><a href="https://blog.csdn.net/huangbaokang/article/details/84934957">linux找出占用内存，占用CPU资源最多的前10个进程_huangbaokang的博客-CSDN博客_linux查看内存占用前十</a></p></li><li><p><a href="https://www.toutiao.com/article/7195829422606467587/">界面酷炫，功能强大！这款Linux性能实时监控工具超好用！</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/M_LYTVHQ8PV0y4oTW0uzEQ">Linux 中的负载高低和 CPU 开销并不完全对应</a></p></li><li><p><a href="https://m.elecfans.com/article/1893757.html">怎么在Linux系统中查看CPU信息</a></p></li><li><p><a href="https://www.toutiao.com/article/7215090382089110049">在Linux系统上如何将进程绑定在指定的CPU上运行？</a></p></li></ul><h2 id="lsof">lsof</h2><ul><li><a href="https://linux.cn/article-4099-1.html">技术|Linux 命令神器：lsof 入门</a></li></ul><h2 id="stat">stat</h2><ul><li><p><a href="https://blog.csdn.net/huangshanchun/article/details/44596677">linux 下最近访问、最近更改、最近改动时间理解</a></p></li><li><p><a href="https://www.toutiao.com/article/7200744231424639488">Linux系统最常用的10个网络命令，值得收藏</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/YQflmUfR3H1WUAysRt2VWQ">15款网络监控工具，运维人员不要错过</a></p></li></ul><h2 id="端口">端口</h2><ul><li><a href="https://wangchujiang.com/linux-command/c/nc.html">nc命令 全称netcat，用于设置路由器</a></li><li><a href="https://blog.csdn.net/weixin_30696427/article/details/95817700">linux 测试端口通不通(四种方法）</a></li><li><a href="https://mp.weixin.qq.com/s/_YYk_uWSoOln_yU8kbUqjg"><font color=Red>Linux系统中如何验证网络端口通不通</font></a></li><li><a href="https://www.cnblogs.com/hindy/p/7249234.html">LINUX中如何查看某个端口是否被占用</a></li><li><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">Linux 查看端口占用情况</a></li></ul><h2 id="ip">IP</h2><ul><li><a href="https://www.toutiao.com/article/7196522780065006138">通过 12 个样例掌握 Linux IP 命令</a></li><li><a href="https://mp.weixin.qq.com/s/Nj0te6rKV6IxM2Aw9oaSRg">如何将Linux的NIC 名称更改为 eth0 而不是 enps33 或 enp0s25，只要几秒钟</a></li><li><a href="https://www.cnblogs.com/qq1069284034/p/9227625.html">linux服务器查看公网IP信息的方法 - 小帅豹 - 博客园 (cnblogs.com)</a></li><li><a href="https://fightsyj.blog.csdn.net/article/details/86482820">IP、域名和端口号之间的联系</a></li><li><a href="https://mp.weixin.qq.com/s/1NLIzZUAA7GOCqAzGLlRhQ">Linux中20个高级命令</a></li><li><a href="https://mp.weixin.qq.com/s/b5FCBQv8tCbBAUFYg0sMiA">A、B、C、D、E类IP地址划分依据</a></li><li><a href="https://mp.weixin.qq.com/s/SYXnoWoxw6X1zKlpJicLLQ">IP地址划分、子网掩码的作用、实际中IP地址规划</a></li><li><a href="https://mp.weixin.qq.com/s/2QOLOrGXn5XHZOfq7Ho8QQ">刚插上网线，电脑怎么知道自己的IP是什么？</a></li><li><a href="https://blog.csdn.net/weixin_35751412/article/details/116639446">ip扫描命令 linux,如何使用Linux扫描网络上的IP地址</a></li></ul><h2 id="etchosts">/etc/hosts</h2><ul><li><a href="https://blog.csdn.net/weibo1230123/article/details/82184353">linux中/etc/hosts文件详解</a></li><li><a href="https://blog.csdn.net/m0_45406092/article/details/118858102">Linux操作系统下/etc/hosts文件配置方法(域名映射)</a></li><li><a href="https://blog.51cto.com/u_15060515/4707834">hosts文件不可以这样修改吗(Ip可以加端口吗)</a></li></ul><h2 id="net-tools-iproute2">net-tools iproute2</h2><ul><li><a href="https://www.debian.org/doc/manuals/debian-reference/ch05.zh-cn.html#_iproute2_commands"><font color=Red>Iproute2命令集提供完整的底层网络配置能力。有个从旧的net-tools命令集到新的iproute2命令集的转换表。</font></a></li><li><a href="https://www.linuxcool.com/ifconfig">ifconfig命令–显示或设置网络设备参数信息</a></li><li><a href="https://www.runoob.com/linux/linux-comm-ip.html">ip命令是Linux加强版的的网络配置工具，用于代替ifconfig命令。</a></li><li><a href="https://mp.weixin.qq.com/s/Qu2yxgdeXdWasY0lZ1TEjQ">ip命令图文详解- Linux系统和网络管理员必备工具</a></li><li><a href="https://blog.csdn.net/weixin_50785891/article/details/125740833">ifconfig/docker删除虚拟网卡</a></li></ul><h2 id="brctl">brctl</h2><ul><li><p><a href="https://www.linuxcool.com/brctl">brctl命令–管理以太网网桥</a></p></li><li><p><a href="https://ipcmen.com/brctl">brctl命令用于设置、维护和检查linux内核中的以太网网桥配置。</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1871867">2 0 Linux虚拟网络设备bridge你真搞懂了吗？</a></p></li><li><p><a href="http://m.blog.chinaunix.net/uid-25739055-id-4486918.html">ubuntu 12.04下如何将物理网卡加入bridge连接外网</a></p></li></ul><h2 id="iptables">iptables</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/_pszS9LaEJaEML8CJEUiXA">Linux下 iptables 超详细教程和使用示例</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/XRL1io-cGeljgU7880MB1A">Iptables 介绍与使用</a></p></li><li><p><a href="https://www.cnblogs.com/f-ck-need-u/p/7397146.html">防火墙和iptables</a></p></li><li><p><a href="https://blog.csdn.net/daocaokafei/article/details/124976257">深入理解 netfilter 和 iptables</a></p></li><li><p><a href="https://www.toutiao.com/article/7201649634798830132"><font color=Red>不会用 Linux 防火墙软件 IPtables！你算啥网工人</font></a></p></li><li><p><a href="https://blog.csdn.net/weixin_45151960/article/details/125407907">CentOS 7关闭防火墙命令</a></p></li></ul><h2 id="dns">DNS</h2><ul><li><p><a href="https://developer.aliyun.com/article/561532">学习笔记：ubuntu永久修改DNS的两种方法-阿里云开发者社区 (aliyun.com)</a></p></li><li><p><a href="https://developer.aliyun.com/article/501609">修改ubuntu 的dns-阿里云开发者社区 (aliyun.com)</a></p></li><li><p><a href="https://blog.51cto.com/sddai/3073629">Ubuntu系统重启后/etc/resolv.conf内容丢失的解决方案</a></p></li><li><p><a href="http://t.zoukankan.com/wanghuixi-p-8901255.html">ubuntu下修改网卡名称</a></p></li><li><p><a href="https://blog.csdn.net/qq_40519022/article/details/124630107">Ubuntu 突然无法联网，ifconfig 查看仅回环IP时，ping 其他IP显示connect: Network is unreachable的解决方法</a></p></li><li><p><a href="https://blog.csdn.net/lianghecai52171314/article/details/111098573">Ubuntu 查看IP、网关及DNS</a></p></li></ul><h2 id="nslookup">nslookup</h2><ul><li><a href="https://blog.csdn.net/violet_echo_0908/article/details/52033725">nslookup命令详解</a></li></ul><h2 id="代理">代理</h2><ul><li><a href="https://tangxusc.github.io/blog/2019/03/%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/">设置终端使用代理的几种方法</a></li><li><a href="https://nu-ll.github.io/2021/03/04/Linux%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/">Linux终端代理</a></li><li><a href="https://www.cnblogs.com/daijiabao/p/11358743.html">Linux/CentOS设置全局代理（http）</a></li><li><a href="https://monkeywie.cn/2020/07/06/linux-global-proxy-tool-proxychain/">linux下的全局代理工具proxychain</a></li></ul><h2 id="linux-权限">Linux 权限</h2><ul><li><p><a href="https://blog.csdn.net/dengjili/article/details/90735669">Linux 中的权限（0755或0644或-rwxr-xr-x）</a></p></li><li><p><a href="https://www.cnblogs.com/sparkdev/p/9651622.html"><font color=Red>Linux 特殊权限 SUID,SGID,SBIT</font></a></p></li><li><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">Linux chmod命令</a></p></li><li><p><a href="https://blog.csdn.net/weixin_30376453/article/details/99780980">chmod 命令——chmod 755与chmod 4755区别（转）</a></p></li><li><p><a href="https://blog.csdn.net/u013197629/article/details/73608613">Linux权限详解（chmod、600、644、666、700、711、755、777、4755、6755、7755）</a></p></li><li><p><a href="https://blog.csdn.net/linting0909/article/details/82902196">文件权限管理 u+s、g+s、o+t/三种用户权限</a></p></li><li><p><a href="https://www.cnblogs.com/treeskyer/archive/2020/12/21/14166272.html">linux中文件的特殊权限(SetUID/SetGID/SBIT)</a></p></li><li><p><a href="https://www.cnblogs.com/stemon/p/5287631.html">linux系统学习笔记：无死角理解保存的设置用户ID，设置用户ID位，有效用户ID，实际用户ID</a></p></li><li><p><a href="https://blog.csdn.net/T146lLa128XX0x/article/details/81977252">setuid和setgid权限说明</a></p></li><li><p><a href="https://blog.csdn.net/wh8_2011/article/details/50825340">UID, EUID, SUID, FSUID</a></p></li><li><p><a href="http://c.biancheng.net/view/3132.html">Linux ACL权限设置（setfacl和getfacl）</a></p></li><li><p><a href="https://www.cnblogs.com/xuyaowen/p/linux-xattrs.html">Linux 文件系统扩展属性 xattr</a></p></li><li><p><a href="http://c.biancheng.net/view/874.html">Linux chattr命令详解：修改文件系统的权限属性</a></p></li><li><p><a href="http://c.biancheng.net/view/875.html">Linux lsattr命令：查看文件系统属性</a></p></li><li><p><a href="https://blog.csdn.net/keheinash/article/details/87979673">Linux常用的设置文件安全上下文命令使用方法</a></p></li></ul><h2 id="mount">mount</h2><ul><li><a href="https://blog.csdn.net/love3765/article/details/78604288">linux mount (挂载命令)详解</a></li><li><a href="https://www.cnblogs.com/xingmuxin/p/8446115.html">mount bind使用方法</a></li><li><a href="https://blog.csdn.net/langb2014/article/details/115454647">linux的mount bind命令</a></li><li><a href="https://mp.weixin.qq.com/s/dbSZmESQmZaommTFd3-UPA">Linux 中列出挂载驱动器的 4 个命令</a></li></ul><h3 id="etcfstab">/etc/fstab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/fstab <br><span class="hljs-comment"># /dev/nvme0n1p3</span><br>UUID=b8785205-a668-4d32-8cd8-e506b9850f01       /               ext4            rw,relatime     0 1<br><br><span class="hljs-comment"># /dev/nvme0n1p2</span><br>UUID=89d974e1-1e99-49ac-a814-b340cc37b17a       /boot           ext4            rw,relatime     0 2<br><br><span class="hljs-comment"># /dev/nvme0n1p1</span><br>UUID=1762-ADDC          /boot/efi       vfat            rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro       0 2<br><br><span class="hljs-comment"># /dev/nvme0n1p5</span><br>UUID=c614a533-2615-48e9-812d-dccc8871fcea       /data           ext4            rw,relatime     0 2<br><br><span class="hljs-comment"># /dev/nvme0n1p6</span><br>UUID=5a93ac13-1983-4a13-9e03-97494cf04f79       /recovery       ext4            rw,relatime     0 2<br><br><br><br><br><br><span class="hljs-comment"># /dev/nvme0n1p7</span><br>UUID=3ac2cbc4-96f5-44ae-b7fc-449e3e963508       none            swap            defaults,pri=-2 0 0<br><br>/data/home /home none defaults,<span class="hljs-built_in">bind</span> 0 0<br>/data/opt /opt none defaults,<span class="hljs-built_in">bind</span> 0 0<br>/data/root /root none defaults,<span class="hljs-built_in">bind</span> 0 0<br>/data/var /var none defaults,<span class="hljs-built_in">bind</span> 0 0<br><br><span class="hljs-comment"># /dev/sda1</span><br>UUID=cc5da720-dbfb-4bc2-8f35-f566d1603508       /media/wujing/data      ext4            rw,relatime     0 2<br>/media/wujing/data/Downloads /home/wujing/Downloads none defaults,<span class="hljs-built_in">bind</span> 0 0<br>/media/wujing/data/Documents /home/wujing/Documents none defaults,<span class="hljs-built_in">bind</span> 0 0<br>/media/wujing/data/code /home/wujing/code none defaults,<span class="hljs-built_in">bind</span> 0 0<br></code></pre></td></tr></table></figure><h2 id="软链接和硬链接">软链接和硬链接</h2><ul><li><a href="https://blog.csdn.net/ljw_jiawei/article/details/91044595">linux里创建快捷方式和查看快捷方式的指向</a></li><li><a href="https://www.cnblogs.com/geeksongs/p/13517072.html">【Linux】：Linux下创建软链接（快捷方式） - Geeksongs - 博客园 (cnblogs.com)</a></li><li><a href="https://www.toutiao.com/article/7156875262477566500"><font color=Red>「来道题」Linux的软链接</font></a></li><li><a href="https://www.cnblogs.com/fqnb001/p/8778790.html">5分钟让你明白“软链接”和“硬链接”的区别</a></li><li><a href="https://www.cnblogs.com/qinlulu/p/13204813.html">一文搞懂 Linux 的 inode！</a></li><li><a href="https://blog.csdn.net/andrewgithub/article/details/82026727">linux文件－link函数(文件硬链接和软连接)</a></li><li><a href="https://www.fenghome.top/post/80">Linux中软链接、硬链接以及mount bind的区别</a></li></ul><h2 id="解压缩">解压缩</h2><ul><li><p><a href="https://blog.csdn.net/afei__/article/details/82619843">Linux命令之解压缩：tar、zip、rar 命令_阿飞的博客-CSDN博客_linux解压rar包命令</a></p></li><li><p><a href="https://www.runoob.com/linux/linux-comm-zip.html">Linux zip命令 | 菜鸟教程 (runoob.com)</a></p></li><li><p><a href="https://www.jb51.net/LINUXjishu/43356.html">linux下tar.gz、tar、bz2、zip等解压缩、压缩命令小结_LINUX_操作系统_脚本之家 (jb51.net)</a></p></li><li><p><a href="https://blog.csdn.net/libing_zeng/article/details/73268032">Linux下tar命令解压到指定的目录</a></p></li><li><p><a href="https://www.toutiao.com/article/7172630331697218059">想学Linux中的打包和压缩？看这一篇就够了</a></p></li><li><h3 id="分卷压缩">分卷压缩</h3></li><li><p><a href="http://blog.51yip.com/linux/988.html">linux下分卷压缩，合并解压的3种方法</a></p></li><li><p><a href="https://blog.csdn.net/sumengnan/article/details/107806838">linux使用tar打包压缩和分卷压缩</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/397071336">Linux新手入门系列：Linux分卷压缩与分卷解压缩</a></p></li></ul><h2 id="set">set</h2><ul><li><a href="https://blog.csdn.net/yexiangCSDN/article/details/82828811">Linux 系统设置 : set 命令详解</a></li></ul><h2 id="环境变量">环境变量</h2><ul><li><p><a href="http://c.biancheng.net/view/5876.html">Linux PATH环境变量及作用（初学者必读）</a></p></li><li><p><a href="https://wiki.archlinux.org/title/Environment_variables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Environment variables (简体中文)</a></p></li><li><p><a href="https://blog.csdn.net/niaooer/article/details/100305567"><font color=Red>Linux环境变量及其加载顺序</font></a></p><p>在 Ubuntu 等使用 PAM（Pluggable Authentication Modules）的系统中，/etc/environment 是在 PAM 模块中读取的，而 /etc/profile 是由 Bourne Shell（例如 Bash）在启动时读取的。</p><p>具体来说，在用户登录时，PAM 模块首先读取 /etc/environment 中的环境变量，然后 Bash 或其他 Bourne Shell 在启动时读取 /etc/profile。</p><p>所以，/etc/environment 的环境变量会影响整个系统的默认环境，而 /etc/profile 主要影响用户登录 Shell 时的环境。</p></li><li><p><a href="https://blog.csdn.net/Kruck/article/details/50977880"><font color=Red>Linux设置PATH环境变量的几个地方和设置方法</font></a></p></li><li><p><a href="https://blog.csdn.net/beanocean/article/details/14677833">Ubuntu环境变量——添加与删除_Beanocean-CSDN博客_ubuntu删除环境变量</a></p></li><li><p><a href="https://www.cnblogs.com/windyvalley/p/linux_path_append.html"><font color=Red>Linux添加路径到PATH环境变量</font></a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_6405313801012pxw.html">Ubuntu下设置环境变量_莫一剑_新浪博客 (sina.com.cn)</a></p></li><li><p><a href="https://blog.csdn.net/weixin_39060517/article/details/116325845">Linux export、set、env和source作用详解</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/uE2pW44JZNyaaQAlrV0c1g">Linux环境变量总结</a></p></li><li><p><a href="https://blog.51cto.com/u_14286115/3326315">linux DISPLAY环境变量介绍</a></p></li><li><p><a href="https://blog.csdn.net/qq_37698947/article/details/122361495">Linux 中 DISPLAY 环境变量设置——本地显示 Linux 服务器GUI程序</a></p></li><li><p><a href="https://www.jianshu.com/p/4617e8e600ad">Linux MIME type</a></p></li></ul><h2 id="登录">登录</h2><ul><li><a href="https://www.toutiao.com/article/7246400362771612216/">如何在Linux上查找上次登录信息？</a></li></ul><h2 id="ssh">ssh</h2><ul><li><p><a href="https://stackoom.com/question/ctjy/ssh-%E6%9D%83%E9%99%90%E5%A4%AA%E5%BC%80%E6%94%BE-%E9%94%99%E8%AF%AF">ssh“权限太开放”错误</a></p></li><li><p><a href="https://blog.csdn.net/qq_38476684/article/details/100028507">vscode remote ssh多重跳接配置内网穿透</a></p></li><li><p><a href="https://blog.csdn.net/permike/article/details/52386868">ubuntu设置 SSH 通过密钥登录</a></p></li><li><p><a href="https://www.cnblogs.com/pansidong/p/12248278.html"><font color=Red>ubuntu设置 SSH 通过密钥登录 - 盘思动 - 博客园 (cnblogs.com)</font></a></p></li><li><p><a href="https://www.linuxcool.com/ssh-copy-id"><font color=Red>ssh-copy-id命令 – 复制公钥到远程主机</font></a></p></li><li><p><a href="https://www.cnblogs.com/jhao/p/12917598.html"><font color=Red>Linux配置SSH免用户免密码登陆</font></a></p></li><li><p><a href="https://jingwei.link/2018/12/15/ssh-config-multi-app-manager.html"><font color=Red>SSH的config配置之多账号简单管理</font></a></p></li><li><p><a href="https://www.jb51.net/os/win10/680687.html">Win10怎么配置ssh密钥免密连接Linux服务器_windows10_Windows系列_操作系统_脚本之家 (jb51.net)</a></p></li><li><p><a href="https://www.cnblogs.com/dabai56/p/11057127.html">Win10配置ssh密钥免密连接Linux服务器 - 大白的攻城狮 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/7990ca55da69">Mac使用ssh密钥登录Linux - 简书 (jianshu.com)</a></p></li><li><p><a href="https://blog.csdn.net/Lynn_mg/article/details/91344494">Mac通过ssh连接ubuntu_Lynn_mg的博客-CSDN博客</a></p></li><li><p><a href="https://www.jianshu.com/p/cc1f599c8841">vscode SSH 保存密码自动登录服务器</a></p></li><li><p><a href="https://blog.csdn.net/qq_21407811/article/details/110938940">VSCode Remote ssh跳板机配置(linux环境)</a></p></li><li><p><a href="https://www.cnblogs.com/Thenext/p/15437824.html">deepin安装ssh服务并设置开机自启动</a></p></li><li><p><a href="http://i01.org/show.php?id=390">ssh登录后,ulimit的值无法修改的问题</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/qW7zQfevhRIPb1PXLRXmAA">什么是堡垒机？为什么需要堡垒机？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/o-F_VLQF-lqu3N1_R1mNDg">你还不会 Jumpserver 堡垒机(保护服务器)搭建部署?</a></p></li><li><p><a href="https://service.oray.com/question/11017.html">首页&gt;向日葵&gt; Linux及国产化系统&gt; Linux个人版（命令行版本）使用手册</a></p></li></ul><h3 id="termux">termux</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/226393968">Termux 上运行SSH Server</a></li></ul><h2 id="crontab计划任务">crontab计划任务</h2><ul><li><a href="https://www.jb51.net/LINUXjishu/717266.html">linux中crontab计划任务怎么删除?_LINUX_操作系统_脚本之家 (jb51.net)</a></li><li><a href="https://www.linuxidc.com/Linux/2016-11/137660.htm">Linux中的cron计划任务配置详解_Linux教程_Linux公社-Linux系统门户网站 (linuxidc.com)</a></li><li><a href="https://www.iamwawa.cn/crontab.html">在线crontab表达式执行时间计算工具_蛙蛙在线工具 (iamwawa.cn)</a></li><li><a href="https://tool.lu/crontab/">crontab执行时间计算 - 在线工具 (tool.lu)</a></li></ul><h2 id="patch">Patch</h2><ul><li><a href="https://www.cnblogs.com/zengkefu/p/7266913.html">linux下patch命令使用详解-linux打补丁命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-patch.html">Linux patch命令</a></li></ul><h2 id="buildstream">BuildStream</h2><ul><li><a href="https://www.buildstream.build/">BuildStream，软件集成工具</a></li><li><a href="https://docs.buildstream.build/1.4.3/index.html">BuildStream 文档</a></li></ul><h2 id="输入法">输入法</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/41338951">Linux 系统Kde桌面环境的fcitx输入问题解决</a></li></ul><h2 id="其它">其它</h2><ul><li><p><a href="https://blog.csdn.net/hqsiswiliam/article/details/105832597">解决VSCode终端在Linux下打不开的问题_hqsiswiliam的博客-CSDN博客_vscode打不开</a></p></li><li><p><a href="https://my.oschina.net/u/215547/blog/824106">安装OhMyZsh插件后提示错误：“zsh compinit: insecure directories”- bobjoy的个人空间- OSCHINA -中文开源技术交流社区</a></p></li><li><p><a href="https://blog.csdn.net/yy1695990107/article/details/116976994">ubuntu搭建http服务器用于下载ubuntu文件</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/26546592">你和 Linux 极客只差一个 LFS - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://segmentfault.com/a/1190000018464527">改造rm命令，删除文件至回收站</a></p></li><li><p><a href="https://www.jianshu.com/p/f1997b5e1031">ubuntu16.04 安装x11vnc桌面</a></p></li><li><p><a href="https://www.jianshu.com/p/484e5be21786">VSCode安装shell、bash格式化工具</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/aZsaUt2sJhd-BzxlmS3Cmw">快乐尝试最新 KDE Plasma，精心制作的 Linux 桌面环境</a></p></li><li><p><a href="https://blog.csdn.net/piupiu78/article/details/116350367">Talk is cheap. Show me the code.— IT 界那些朗朗上口的“名言”</a></p></li><li><p><a href="https://www.toutiao.com/article/6930965164980306439">宇宙第一 IDE 到底是谁？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/UAzN_7Bmb9uLRy8GJ-9rFg">盘一盘各种”xPU”</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1871867">Linux虚拟网络设备bridge你真搞懂了吗？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>HTML</tag>
      
      <tag>strings</tag>
      
      <tag>bcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/patent/README/"/>
    <url>/patent/README/</url>
    
    <content type="html"><![CDATA[<h1 id="patent">patent</h1><p>已撰写专利：</p><ul><li>增量更新、回退中一种基于缓存的高效查找机制</li></ul><p>待撰写专利：</p><ul><li>玲珑仓库基于rbac角色权限控制较flatpak仓库优势</li><li>玲珑仓库支持一键部署弹性伸缩较flatpak仓库优势</li></ul>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flatpak</title>
    <link href="/patent/flatpak/"/>
    <url>/patent/flatpak/</url>
    
    <content type="html"><![CDATA[<h1 id="flatpak">flatpak</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:flatpak 查询命令行;<br>if (解析命令？) then (yes)<br>        if (检查本地xml描述文件更新时间是否已超时?) then (yes)<br>            :flatpak\n发起业务请求，附带gpg key作为token附带在http请求header中;<br>            if (ostree判断\n请求header中是否有token?) then (yes)<br>                ::nginx静态文件服务器处理业务逻辑;<br>                :ostree验证token有效性;<br>                if (token有效?) then (yes)<br>                    :返回业务逻辑处理结果;<br>                    :flatpak下载包元数据到本地;<br>                else (no)<br>                endif<br>            else (no)<br>            endif<br>        else (no)<br>        endif<br>        :使用appstream库解析xml获取包元数据;<br>else (no)<br>endif<br>:终端提示\nflaptpak命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">uos@uos:~$ flatpak search zoom --columns=all<br>Description                                                                       Application                      Version      Branch Remotes<br>Zoom - Video Conferencing, Web Conferencing, Webinars, Screen Sharing             us.zoom.Zoom                     5.11.10.4400 stable flathub<br>FIPS - OpenGL-based FITS image viewer                                             space.fips.Fips                  3.4.0        stable flathub<br>PhotoQt Image Viewer - View and manage images                                     org.photoqt.PhotoQt              2.9.1        stable flathub<br>KmPlot - Mathematical Function Plotter                                            org.kde.kmplot                   1.3.22080    stable flathub<br>XaoS - Fast interactive real-time fractal zoomer/morpher                          io.github.xaos_project.XaoS      4.2.1        stable flathub<br>Vieb - Vim Inspired Electron Browser                                              dev.vieb.Vieb                    9.0.0        stable flathub<br>sleek - todo manager based on the todo.txt syntax <span class="hljs-keyword">for</span> Linux, free and open-sourc… com.github.ransome1.sleek        1.2.1        stable flathub<br>Minder - Create, develop and visualize your ideas                                 com.github.phase1geo.minder      1.14.0       stable flathub<br>Gnome Next Meeting Applet - Show your next events <span class="hljs-keyword">in</span> your panel                   ….chmouel.gnomeNextMeetingApplet 2.8.1        stable flathub<br>wavbreaker - GUI tool to <span class="hljs-built_in">split</span> WAV, MP2 and MP3 files <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linglong</title>
    <link href="/patent/linglong/"/>
    <url>/patent/linglong/</url>
    
    <content type="html"><![CDATA[<h1 id="linglong">linglong</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:ll-repo-cli查询包命令行;<br>if (解析命令？) then (yes)<br>    :输入用户名和密码\n并向ll-repo-server发起登录请求;<br>    if (ll-repo-server校验密码) then (yes)<br>        :ll-repo-server生成唯一token;<br>        :返回token;<br>        :ll-repo-cli\n发起业务请求，\ntoken附带在http请求header中;<br>        if (ll-repo-server校验token?) then (yes)<br>                if (ll-repo-server查询redis缓存中是否已有相关数据?) then (yes)<br>                else (no)<br>                    :从数据库中查找结果;<br>                    :更新redis缓存;<br>                endif<br>            :从redis中获取结果;<br>            :返回业务逻辑处理结果;<br>        else (no)<br>        endif<br>    else (no)<br>    endif<br>endif<br>:终端提示\nll-repo-cli\nll-builder\n命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>玲珑仓库概要设计说明书</title>
    <link href="/patent/%E7%8E%B2%E7%8F%91%E4%BB%93%E5%BA%93%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/"/>
    <url>/patent/%E7%8E%B2%E7%8F%91%E4%BB%93%E5%BA%93%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="玲珑仓库概要设计说明书">玲珑仓库概要设计说明书</h1><h2 id="ll-repo-cli-builderll-repo-server交互流程图">ll-repo-cli-builder、ll-repo-server交互流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:ll-repo-cli\nll-builder\n命令行;<br>if (解析命令？) then (yes)<br>    :输入用户名和密码\n并向ll-repo-server发起登录请求;<br>    if (ll-repo-server校验密码) then (yes)<br>        :ll-repo-server生成唯一token;<br>        :返回token;<br>        :ll-repo-cli\nll-builder\n发起业务请求，\ntoken附带在http请求header中;<br>        if (ll-repo-server校验token?) then (yes)<br>            :ll-repo-server处理业务逻辑;<br>            :返回业务逻辑处理结果;<br>        else (no)<br>        endif<br>    else (no)<br>    endif<br>endif<br>:终端提示\nll-repo-cli\nll-builder\n命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><h2 id="ll-clill-repo-server交互流程图">ll-cli、ll-repo-server交互流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:ll-cli命令行;<br>if (解析命令？) then (yes)<br>    :ll-cli\n发起业务请求，\n/etc/linglong/auth/access.yaml\n作为token附带在http请求header中;<br>    if (ll-repo-server判断\n请求header中是否有token?) then (yes)<br>        :ll-repo-server向授权服务器验证token有效性;<br>        if (token有效?) then (yes)<br>            :ll-repo-server处理业务逻辑;<br>            :返回业务逻辑处理结果;<br>        else (no)<br>        endif<br>    else (no)<br>    endif<br>else (no)<br>endif<br>:终端提示\nll-cli命令行执行结果;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><h2 id="storell-store-server交互流程图">store、ll-store-server交互流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startuml<br>start<br>:store向ll-store-server发起登录请求;<br>:ll-store-server校验密码生成唯一token;<br>:store发起业务请求带上token;<br>:ll-store-server校验token;<br>:ll-server处理业务逻辑;<br>:ll-server返回业务逻辑处理结果;<br>:store展示应用;<br>stop<br>@enduml<br></code></pre></td></tr></table></figure><h2 id="ll-repo-server数据结构">ll-repo-server数据结构</h2><h3 id="app">App</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> App <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    AppId       <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;appId&quot; gorm:&quot;type:varchar(100);column:app_id;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:2&quot;`</span><br>    Name        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;name&quot; gorm:&quot;column:name&quot;`</span><br>    Version     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;version&quot; gorm:&quot;type:varchar(50);column:version;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:3&quot;`</span><br>    Arch        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;arch&quot; gorm:&quot;type:varchar(20);column:arch;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:4&quot;`</span><br>    Kind        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;kind&quot; gorm:&quot;column:kind&quot;`</span><br>    Runtime     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;runtime&quot; gorm:&quot;column:runtime&quot;`</span><br>    RepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;repoName&quot; gorm:&quot;column:repo_name&quot;`</span><br>    Description <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;description&quot; gorm:&quot;column:description&quot;`</span><br>    Size        <span class="hljs-type">int64</span>     <span class="hljs-string">`json:&quot;size&quot; gorm:&quot;column:size&quot;`</span><br>    Channel     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;channel&quot; gorm:&quot;type:varchar(50);column:channel;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:1&quot;`</span><br>    Module      <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;module&quot; gorm:&quot;type:varchar(50);column:module;NOT NULL;uniqueIndex:idx_channel_app_id_version_arch_module,priority:5&quot;`</span><br>    CheckSum    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;check_sum&quot; gorm:&quot;column:check_sum&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app表候选键：</p><ul><li>app_id</li><li>version</li><li>arch</li><li>channel</li><li>module</li></ul><h3 id="repo">Repo</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Repo <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    Repo        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;repo&quot; gorm:&quot;column:repo;uniqueIndex:idx_repo,priority:1&quot;`</span>          <span class="hljs-comment">// 仓库名</span><br>    Mode        <span class="hljs-type">string</span>     <span class="hljs-string">`json:&quot;mode&quot; gorm:&quot;column:mode&quot;`</span>                                         <span class="hljs-comment">// 以给定模式初始化存储库（bare、bare-user、bare-user-only、archive）</span><br>    Description <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;description&quot; gorm:&quot;column:description&quot;`</span>                            <span class="hljs-comment">// 仓库描述信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>repo表候选键：</p><ul><li>repo // 仓库名</li></ul><h4 id="user">User</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    User        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;user&quot; gorm:&quot;column:user;uniqueIndex:idx_user,priority:1&quot;`</span>          <span class="hljs-comment">// 用户名</span><br>    Passwd      <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;passwd&quot; gorm:&quot;column:passwd&quot;`</span>                                      <span class="hljs-comment">// 密码</span><br>    RepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;repoName&quot; gorm:&quot;column:repo_name&quot;`</span>                                 <span class="hljs-comment">// 仓库名</span><br>    Role        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;role&quot; gorm:&quot;column:role&quot;`</span>                                          <span class="hljs-comment">// 角色 （Maintainer、Developer、Reporter、Guest）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>user表候选键：</p><ul><li>user 用户名</li></ul><h4 id="synctask">SyncTask</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SyncTask <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    Task              <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;task&quot; gorm:&quot;column:task;&quot;`</span>                                  <span class="hljs-comment">// 同步任务名称</span><br>    SourceUrl         <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;source_url&quot; gorm:&quot;column:source_url&quot;`</span>                       <span class="hljs-comment">// 数据源url</span><br>    SourceRepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;source_repo_name&quot; gorm:&quot;column:source_repo_name&quot;`</span>           <span class="hljs-comment">// 数据源仓库名</span><br>    TargetRepoName    <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;target_repo_name&quot; gorm:&quot;column:target_repo_name&quot;`</span>           <span class="hljs-comment">// 目的源仓库名</span><br>    Progress          <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;progress&quot; gorm:&quot;column:progress&quot;`</span>                           <span class="hljs-comment">// 同步进度百分比</span><br>&#125;<br></code></pre></td></tr></table></figure><p>sync_task表候选键：</p><ul><li>task // 同步任务名称</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SyncedApp <span class="hljs-keyword">struct</span> &#123;<br>    gorm.Model<br>    Task        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;task&quot; gorm:&quot;column:task;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:1&quot;`</span>                                     <span class="hljs-comment">// 同步任务名称</span><br>    AppId       <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;appId&quot; gorm:&quot;type:varchar(100);column:app_id;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:3&quot;`</span><br>    Version     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;version&quot; gorm:&quot;type:varchar(50);column:version;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:4&quot;`</span><br>    Arch        <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;arch&quot; gorm:&quot;type:varchar(20);column:arch;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:5&quot;`</span><br>    Channel     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;channel&quot; gorm:&quot;type:varchar(50);column:channel;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:2&quot;`</span><br>    Module      <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;module&quot; gorm:&quot;type:varchar(50);column:module;NOT NULL;uniqueIndex:idx_task_channel_app_id_version_arch_module,priority,priority:6&quot;`</span><br>    Synced      <span class="hljs-type">int</span>       <span class="hljs-string">`json:&quot;synced&quot; gorm:&quot;column:synced;&quot;`</span>                                                                                                      <span class="hljs-comment">// 是否已同步</span><br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>task // 同步任务名称</li><li>app_id</li><li>version</li><li>arch</li><li>channel</li><li>module</li></ul>]]></content>
    
    
    <categories>
      
      <category>patent</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/README/"/>
    <url>/README/</url>
    
    <content type="html"><![CDATA[<h1 id="stay-hungry.-stay-foolish.">Stay hungry. Stay foolish.</h1><ul><li><a href="https://github.com/realwujing/linux">This is a collection of notes and resources for learning Linux.</a></li></ul><h2 id="guide">guide</h2><ul><li><a href="https://github.com/GrindGold/pdf">计算机经典电子书与学习资源分享</a></li><li><a href="https://github.com/realwujing/cpp/">C/C++学习+面试指南</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel">Linux内核</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/kernel/qemu">qemu</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/bpf">bpf之巅 性能之巅</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/binary-analysis">二进制实战分析</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/assembly">汇编语言</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/gdb">gdb小技巧</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/package/deb">deb打包</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/k8s">k8s教程</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/git">git</a></li><li><a href="https://github.com/realwujing/realwujing.github.io/tree/main/linux/shell">shell</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>qemu</tag>
      
      <tag>C++</tag>
      
      <tag>git</tag>
      
      <tag>bpf</tag>
      
      <tag>k8s</tag>
      
      <tag>assembly</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>README</title>
    <link href="/debug/gdb/README/"/>
    <url>/debug/gdb/README/</url>
    
    <content type="html"><![CDATA[<h1 id="配置gdb-init文件">配置gdb init文件</h1><p>当gdb启动时，会读取HOME目录和当前目录下的的配置文件，执行里面的命令。这个文件通常为“.gdbinit”。</p><h2 id="gdb-pretty-printers-for-qt5">GDB Pretty printers for Qt5</h2><ul><li><a href="https://github.com/Lekensteyn/qt5printers">GDB Pretty printers for Qt5</a></li></ul><h2 id="more">More</h2><ul><li><a href="https://github.com/shihyu/MyTool/blob/master/GDB/Debugging.with.gdb%20%E4%B8%AD%E6%96%87.pdf">Debugging.with.gdb 中文.pdf</a></li><li><a href="https://blog.csdn.net/qq_39153421/article/details/116753735">Ubuntu16.04升级gdb7.11升级到10.2版本</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
      <category>gdb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
